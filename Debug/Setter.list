
Setter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c04c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007418  0801c238  0801c238  0002c238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000fc  08023650  08023650  00033650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000190  0802374c  0802374c  0003374c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   0000000c  080238dc  080238dc  000338dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080238e8  080238e8  000338e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000006e8  20000000  080238ec  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000e04  200006e8  08023fd4  000406e8  2**3
                  ALLOC
  9 ._user_heap_stack 00005400  200014ec  08023fd4  000414ec  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  000406e8  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005c535  00000000  00000000  00040711  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000e88d  00000000  00000000  0009cc46  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000a4f5  00000000  00000000  000ab4d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000028f0  00000000  00000000  000b59c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002b10  00000000  00000000  000b82b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000176e2  00000000  00000000  000badc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000158f1  00000000  00000000  000d24aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000e7d9b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000c334  00000000  00000000  000e7e18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200006e8 	.word	0x200006e8
 8000204:	00000000 	.word	0x00000000
 8000208:	0801c21c 	.word	0x0801c21c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200006ec 	.word	0x200006ec
 8000224:	0801c21c 	.word	0x0801c21c

08000228 <_ZN15CFlashSignature9SIGNATUREE>:
 8000228:	0000ffff                                ....

0800022c <d_make_comp>:
 800022c:	b470      	push	{r4, r5, r6}
 800022e:	1e4c      	subs	r4, r1, #1
 8000230:	2c4c      	cmp	r4, #76	; 0x4c
 8000232:	d82d      	bhi.n	8000290 <d_make_comp+0x64>
 8000234:	e8df f004 	tbb	[pc, r4]
 8000238:	3c3c3c3c 	.word	0x3c3c3c3c
 800023c:	2c2c2c2c 	.word	0x2c2c2c2c
 8000240:	273c2727 	.word	0x273c2727
 8000244:	27272727 	.word	0x27272727
 8000248:	27272727 	.word	0x27272727
 800024c:	2c272727 	.word	0x2c272727
 8000250:	28282828 	.word	0x28282828
 8000254:	28282828 	.word	0x28282828
 8000258:	2727273c 	.word	0x2727273c
 800025c:	272c2727 	.word	0x272c2727
 8000260:	2c3c3e28 	.word	0x2c3c3e28
 8000264:	3e28283c 	.word	0x3e28283c
 8000268:	27272c2c 	.word	0x27272c2c
 800026c:	3c3c3c27 	.word	0x3c3c3c27
 8000270:	3c273c3c 	.word	0x3c273c3c
 8000274:	2c3c273c 	.word	0x2c3c273c
 8000278:	2727272c 	.word	0x2727272c
 800027c:	272c2c2c 	.word	0x272c2c2c
 8000280:	283c2727 	.word	0x283c2727
 8000284:	3c          	.byte	0x3c
 8000285:	00          	.byte	0x00
 8000286:	b11a      	cbz	r2, 8000290 <d_make_comp+0x64>
 8000288:	6944      	ldr	r4, [r0, #20]
 800028a:	6985      	ldr	r5, [r0, #24]
 800028c:	42ac      	cmp	r4, r5
 800028e:	db02      	blt.n	8000296 <d_make_comp+0x6a>
 8000290:	2000      	movs	r0, #0
 8000292:	bc70      	pop	{r4, r5, r6}
 8000294:	4770      	bx	lr
 8000296:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800029a:	6906      	ldr	r6, [r0, #16]
 800029c:	00ad      	lsls	r5, r5, #2
 800029e:	3401      	adds	r4, #1
 80002a0:	6144      	str	r4, [r0, #20]
 80002a2:	1970      	adds	r0, r6, r5
 80002a4:	d0f5      	beq.n	8000292 <d_make_comp+0x66>
 80002a6:	5571      	strb	r1, [r6, r5]
 80002a8:	6042      	str	r2, [r0, #4]
 80002aa:	6083      	str	r3, [r0, #8]
 80002ac:	bc70      	pop	{r4, r5, r6}
 80002ae:	4770      	bx	lr
 80002b0:	2a00      	cmp	r2, #0
 80002b2:	d0ed      	beq.n	8000290 <d_make_comp+0x64>
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d0eb      	beq.n	8000290 <d_make_comp+0x64>
 80002b8:	6944      	ldr	r4, [r0, #20]
 80002ba:	6985      	ldr	r5, [r0, #24]
 80002bc:	42ac      	cmp	r4, r5
 80002be:	dae7      	bge.n	8000290 <d_make_comp+0x64>
 80002c0:	e7e9      	b.n	8000296 <d_make_comp+0x6a>
 80002c2:	bf00      	nop

080002c4 <d_cv_qualifiers>:
 80002c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c8:	68c3      	ldr	r3, [r0, #12]
 80002ca:	f1b2 0a00 	subs.w	sl, r2, #0
 80002ce:	4604      	mov	r4, r0
 80002d0:	460e      	mov	r6, r1
 80002d2:	781a      	ldrb	r2, [r3, #0]
 80002d4:	bf15      	itete	ne
 80002d6:	f04f 091e 	movne.w	r9, #30
 80002da:	f04f 091b 	moveq.w	r9, #27
 80002de:	f04f 081d 	movne.w	r8, #29
 80002e2:	f04f 081a 	moveq.w	r8, #26
 80002e6:	bf14      	ite	ne
 80002e8:	271c      	movne	r7, #28
 80002ea:	2719      	moveq	r7, #25
 80002ec:	460d      	mov	r5, r1
 80002ee:	e018      	b.n	8000322 <d_cv_qualifiers+0x5e>
 80002f0:	2a56      	cmp	r2, #86	; 0x56
 80002f2:	d01f      	beq.n	8000334 <d_cv_qualifiers+0x70>
 80002f4:	2a4b      	cmp	r2, #75	; 0x4b
 80002f6:	d024      	beq.n	8000342 <d_cv_qualifiers+0x7e>
 80002f8:	2a44      	cmp	r2, #68	; 0x44
 80002fa:	d12d      	bne.n	8000358 <d_cv_qualifiers+0x94>
 80002fc:	785a      	ldrb	r2, [r3, #1]
 80002fe:	2a78      	cmp	r2, #120	; 0x78
 8000300:	d127      	bne.n	8000352 <d_cv_qualifiers+0x8e>
 8000302:	214c      	movs	r1, #76	; 0x4c
 8000304:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000306:	3302      	adds	r3, #2
 8000308:	3211      	adds	r2, #17
 800030a:	60e3      	str	r3, [r4, #12]
 800030c:	6322      	str	r2, [r4, #48]	; 0x30
 800030e:	2300      	movs	r3, #0
 8000310:	4620      	mov	r0, r4
 8000312:	461a      	mov	r2, r3
 8000314:	f7ff ff8a 	bl	800022c <d_make_comp>
 8000318:	6028      	str	r0, [r5, #0]
 800031a:	b1c8      	cbz	r0, 8000350 <d_cv_qualifiers+0x8c>
 800031c:	68e3      	ldr	r3, [r4, #12]
 800031e:	1d05      	adds	r5, r0, #4
 8000320:	781a      	ldrb	r2, [r3, #0]
 8000322:	2a72      	cmp	r2, #114	; 0x72
 8000324:	d1e4      	bne.n	80002f0 <d_cv_qualifiers+0x2c>
 8000326:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000328:	3301      	adds	r3, #1
 800032a:	3209      	adds	r2, #9
 800032c:	60e3      	str	r3, [r4, #12]
 800032e:	6322      	str	r2, [r4, #48]	; 0x30
 8000330:	4639      	mov	r1, r7
 8000332:	e7ec      	b.n	800030e <d_cv_qualifiers+0x4a>
 8000334:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000336:	3301      	adds	r3, #1
 8000338:	3209      	adds	r2, #9
 800033a:	60e3      	str	r3, [r4, #12]
 800033c:	6322      	str	r2, [r4, #48]	; 0x30
 800033e:	4641      	mov	r1, r8
 8000340:	e7e5      	b.n	800030e <d_cv_qualifiers+0x4a>
 8000342:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000344:	3301      	adds	r3, #1
 8000346:	3206      	adds	r2, #6
 8000348:	60e3      	str	r3, [r4, #12]
 800034a:	6322      	str	r2, [r4, #48]	; 0x30
 800034c:	4649      	mov	r1, r9
 800034e:	e7de      	b.n	800030e <d_cv_qualifiers+0x4a>
 8000350:	4605      	mov	r5, r0
 8000352:	4628      	mov	r0, r5
 8000354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000358:	f1ba 0f00 	cmp.w	sl, #0
 800035c:	d1f9      	bne.n	8000352 <d_cv_qualifiers+0x8e>
 800035e:	2a46      	cmp	r2, #70	; 0x46
 8000360:	d1f7      	bne.n	8000352 <d_cv_qualifiers+0x8e>
 8000362:	42b5      	cmp	r5, r6
 8000364:	d0f5      	beq.n	8000352 <d_cv_qualifiers+0x8e>
 8000366:	201d      	movs	r0, #29
 8000368:	211e      	movs	r1, #30
 800036a:	221c      	movs	r2, #28
 800036c:	e007      	b.n	800037e <d_cv_qualifiers+0xba>
 800036e:	2b1b      	cmp	r3, #27
 8000370:	d00b      	beq.n	800038a <d_cv_qualifiers+0xc6>
 8000372:	2b19      	cmp	r3, #25
 8000374:	d100      	bne.n	8000378 <d_cv_qualifiers+0xb4>
 8000376:	7032      	strb	r2, [r6, #0]
 8000378:	3604      	adds	r6, #4
 800037a:	42b5      	cmp	r5, r6
 800037c:	d0e9      	beq.n	8000352 <d_cv_qualifiers+0x8e>
 800037e:	6836      	ldr	r6, [r6, #0]
 8000380:	7833      	ldrb	r3, [r6, #0]
 8000382:	2b1a      	cmp	r3, #26
 8000384:	d1f3      	bne.n	800036e <d_cv_qualifiers+0xaa>
 8000386:	7030      	strb	r0, [r6, #0]
 8000388:	e7f6      	b.n	8000378 <d_cv_qualifiers+0xb4>
 800038a:	7031      	strb	r1, [r6, #0]
 800038c:	e7f4      	b.n	8000378 <d_cv_qualifiers+0xb4>
 800038e:	bf00      	nop

08000390 <d_ref_qualifier>:
 8000390:	b410      	push	{r4}
 8000392:	68c3      	ldr	r3, [r0, #12]
 8000394:	460a      	mov	r2, r1
 8000396:	781c      	ldrb	r4, [r3, #0]
 8000398:	2c52      	cmp	r4, #82	; 0x52
 800039a:	d00d      	beq.n	80003b8 <d_ref_qualifier+0x28>
 800039c:	2c4f      	cmp	r4, #79	; 0x4f
 800039e:	d002      	beq.n	80003a6 <d_ref_qualifier+0x16>
 80003a0:	4608      	mov	r0, r1
 80003a2:	bc10      	pop	{r4}
 80003a4:	4770      	bx	lr
 80003a6:	2120      	movs	r1, #32
 80003a8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80003aa:	3403      	adds	r4, #3
 80003ac:	6304      	str	r4, [r0, #48]	; 0x30
 80003ae:	3301      	adds	r3, #1
 80003b0:	60c3      	str	r3, [r0, #12]
 80003b2:	bc10      	pop	{r4}
 80003b4:	2300      	movs	r3, #0
 80003b6:	e739      	b.n	800022c <d_make_comp>
 80003b8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80003ba:	211f      	movs	r1, #31
 80003bc:	3402      	adds	r4, #2
 80003be:	6304      	str	r4, [r0, #48]	; 0x30
 80003c0:	e7f5      	b.n	80003ae <d_ref_qualifier+0x1e>
 80003c2:	bf00      	nop

080003c4 <d_count_templates_scopes>:
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	d04d      	beq.n	8000464 <d_count_templates_scopes+0xa0>
 80003c8:	b570      	push	{r4, r5, r6, lr}
 80003ca:	4605      	mov	r5, r0
 80003cc:	460e      	mov	r6, r1
 80003ce:	4614      	mov	r4, r2
 80003d0:	7823      	ldrb	r3, [r4, #0]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	2b4c      	cmp	r3, #76	; 0x4c
 80003d6:	d82b      	bhi.n	8000430 <d_count_templates_scopes+0x6c>
 80003d8:	e8df f003 	tbb	[pc, r3]
 80003dc:	3f363636 	.word	0x3f363636
 80003e0:	27272a2a 	.word	0x27272a2a
 80003e4:	36363636 	.word	0x36363636
 80003e8:	36363636 	.word	0x36363636
 80003ec:	36363636 	.word	0x36363636
 80003f0:	2a363636 	.word	0x2a363636
 80003f4:	36363636 	.word	0x36363636
 80003f8:	36363636 	.word	0x36363636
 80003fc:	2f2f3636 	.word	0x2f2f3636
 8000400:	362a3636 	.word	0x362a3636
 8000404:	2b363636 	.word	0x2b363636
 8000408:	36363636 	.word	0x36363636
 800040c:	3636272a 	.word	0x3636272a
 8000410:	36363636 	.word	0x36363636
 8000414:	36363636 	.word	0x36363636
 8000418:	2a363636 	.word	0x2a363636
 800041c:	2b2b362a 	.word	0x2b2b362a
 8000420:	362a2b2b 	.word	0x362a2b2b
 8000424:	36363636 	.word	0x36363636
 8000428:	36          	.byte	0x36
 8000429:	00          	.byte	0x00
 800042a:	68a4      	ldr	r4, [r4, #8]
 800042c:	2c00      	cmp	r4, #0
 800042e:	d1cf      	bne.n	80003d0 <d_count_templates_scopes+0xc>
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	6864      	ldr	r4, [r4, #4]
 8000434:	2c00      	cmp	r4, #0
 8000436:	d1cb      	bne.n	80003d0 <d_count_templates_scopes+0xc>
 8000438:	e7fa      	b.n	8000430 <d_count_templates_scopes+0x6c>
 800043a:	6862      	ldr	r2, [r4, #4]
 800043c:	7813      	ldrb	r3, [r2, #0]
 800043e:	2b05      	cmp	r3, #5
 8000440:	d103      	bne.n	800044a <d_count_templates_scopes+0x86>
 8000442:	6833      	ldr	r3, [r6, #0]
 8000444:	3301      	adds	r3, #1
 8000446:	6033      	str	r3, [r6, #0]
 8000448:	6862      	ldr	r2, [r4, #4]
 800044a:	4631      	mov	r1, r6
 800044c:	4628      	mov	r0, r5
 800044e:	f7ff ffb9 	bl	80003c4 <d_count_templates_scopes>
 8000452:	68a4      	ldr	r4, [r4, #8]
 8000454:	2c00      	cmp	r4, #0
 8000456:	d1bb      	bne.n	80003d0 <d_count_templates_scopes+0xc>
 8000458:	e7ea      	b.n	8000430 <d_count_templates_scopes+0x6c>
 800045a:	682b      	ldr	r3, [r5, #0]
 800045c:	3301      	adds	r3, #1
 800045e:	602b      	str	r3, [r5, #0]
 8000460:	6862      	ldr	r2, [r4, #4]
 8000462:	e7f2      	b.n	800044a <d_count_templates_scopes+0x86>
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <d_append_buffer>:
 8000468:	b37a      	cbz	r2, 80004ca <d_append_buffer+0x62>
 800046a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800046e:	460d      	mov	r5, r1
 8000470:	4604      	mov	r4, r0
 8000472:	f04f 0800 	mov.w	r8, #0
 8000476:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800047a:	18af      	adds	r7, r5, r2
 800047c:	e009      	b.n	8000492 <d_append_buffer+0x2a>
 800047e:	460b      	mov	r3, r1
 8000480:	42bd      	cmp	r5, r7
 8000482:	f101 0101 	add.w	r1, r1, #1
 8000486:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800048a:	54e6      	strb	r6, [r4, r3]
 800048c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000490:	d019      	beq.n	80004c6 <d_append_buffer+0x5e>
 8000492:	29ff      	cmp	r1, #255	; 0xff
 8000494:	f815 6b01 	ldrb.w	r6, [r5], #1
 8000498:	d1f1      	bne.n	800047e <d_append_buffer+0x16>
 800049a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800049e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80004a2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80004a6:	4620      	mov	r0, r4
 80004a8:	4798      	blx	r3
 80004aa:	2101      	movs	r1, #1
 80004ac:	2300      	movs	r3, #0
 80004ae:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80004b2:	42bd      	cmp	r5, r7
 80004b4:	440a      	add	r2, r1
 80004b6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80004ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80004be:	54e6      	strb	r6, [r4, r3]
 80004c0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80004c4:	d1e5      	bne.n	8000492 <d_append_buffer+0x2a>
 80004c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80004ca:	4770      	bx	lr

080004cc <d_number.isra.0>:
 80004cc:	b470      	push	{r4, r5, r6}
 80004ce:	6802      	ldr	r2, [r0, #0]
 80004d0:	7811      	ldrb	r1, [r2, #0]
 80004d2:	296e      	cmp	r1, #110	; 0x6e
 80004d4:	d018      	beq.n	8000508 <d_number.isra.0+0x3c>
 80004d6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80004da:	2b09      	cmp	r3, #9
 80004dc:	d81e      	bhi.n	800051c <d_number.isra.0+0x50>
 80004de:	2600      	movs	r6, #0
 80004e0:	2300      	movs	r3, #0
 80004e2:	3201      	adds	r2, #1
 80004e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004e8:	6002      	str	r2, [r0, #0]
 80004ea:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80004ee:	7811      	ldrb	r1, [r2, #0]
 80004f0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80004f4:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 80004f8:	2d09      	cmp	r5, #9
 80004fa:	d9f2      	bls.n	80004e2 <d_number.isra.0+0x16>
 80004fc:	b10e      	cbz	r6, 8000502 <d_number.isra.0+0x36>
 80004fe:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
 8000502:	4618      	mov	r0, r3
 8000504:	bc70      	pop	{r4, r5, r6}
 8000506:	4770      	bx	lr
 8000508:	1c53      	adds	r3, r2, #1
 800050a:	6003      	str	r3, [r0, #0]
 800050c:	7851      	ldrb	r1, [r2, #1]
 800050e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000512:	2a09      	cmp	r2, #9
 8000514:	d802      	bhi.n	800051c <d_number.isra.0+0x50>
 8000516:	461a      	mov	r2, r3
 8000518:	2601      	movs	r6, #1
 800051a:	e7e1      	b.n	80004e0 <d_number.isra.0+0x14>
 800051c:	2300      	movs	r3, #0
 800051e:	e7f0      	b.n	8000502 <d_number.isra.0+0x36>

08000520 <d_number_component>:
 8000520:	6943      	ldr	r3, [r0, #20]
 8000522:	6982      	ldr	r2, [r0, #24]
 8000524:	b510      	push	{r4, lr}
 8000526:	4293      	cmp	r3, r2
 8000528:	da0f      	bge.n	800054a <d_number_component+0x2a>
 800052a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800052e:	6901      	ldr	r1, [r0, #16]
 8000530:	0092      	lsls	r2, r2, #2
 8000532:	3301      	adds	r3, #1
 8000534:	188c      	adds	r4, r1, r2
 8000536:	6143      	str	r3, [r0, #20]
 8000538:	d005      	beq.n	8000546 <d_number_component+0x26>
 800053a:	2341      	movs	r3, #65	; 0x41
 800053c:	300c      	adds	r0, #12
 800053e:	548b      	strb	r3, [r1, r2]
 8000540:	f7ff ffc4 	bl	80004cc <d_number.isra.0>
 8000544:	6060      	str	r0, [r4, #4]
 8000546:	4620      	mov	r0, r4
 8000548:	bd10      	pop	{r4, pc}
 800054a:	2400      	movs	r4, #0
 800054c:	4620      	mov	r0, r4
 800054e:	bd10      	pop	{r4, pc}

08000550 <d_compact_number>:
 8000550:	b510      	push	{r4, lr}
 8000552:	68c3      	ldr	r3, [r0, #12]
 8000554:	4604      	mov	r4, r0
 8000556:	781a      	ldrb	r2, [r3, #0]
 8000558:	2a5f      	cmp	r2, #95	; 0x5f
 800055a:	d00d      	beq.n	8000578 <d_compact_number+0x28>
 800055c:	2a6e      	cmp	r2, #110	; 0x6e
 800055e:	d00f      	beq.n	8000580 <d_compact_number+0x30>
 8000560:	300c      	adds	r0, #12
 8000562:	f7ff ffb3 	bl	80004cc <d_number.isra.0>
 8000566:	3001      	adds	r0, #1
 8000568:	d40a      	bmi.n	8000580 <d_compact_number+0x30>
 800056a:	68e3      	ldr	r3, [r4, #12]
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	2a5f      	cmp	r2, #95	; 0x5f
 8000570:	d106      	bne.n	8000580 <d_compact_number+0x30>
 8000572:	3301      	adds	r3, #1
 8000574:	60e3      	str	r3, [r4, #12]
 8000576:	bd10      	pop	{r4, pc}
 8000578:	3301      	adds	r3, #1
 800057a:	2000      	movs	r0, #0
 800057c:	60e3      	str	r3, [r4, #12]
 800057e:	bd10      	pop	{r4, pc}
 8000580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000584:	bd10      	pop	{r4, pc}
 8000586:	bf00      	nop

08000588 <d_template_param>:
 8000588:	b538      	push	{r3, r4, r5, lr}
 800058a:	68c3      	ldr	r3, [r0, #12]
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	2a54      	cmp	r2, #84	; 0x54
 8000590:	d001      	beq.n	8000596 <d_template_param+0xe>
 8000592:	2000      	movs	r0, #0
 8000594:	bd38      	pop	{r3, r4, r5, pc}
 8000596:	3301      	adds	r3, #1
 8000598:	60c3      	str	r3, [r0, #12]
 800059a:	4604      	mov	r4, r0
 800059c:	f7ff ffd8 	bl	8000550 <d_compact_number>
 80005a0:	1e05      	subs	r5, r0, #0
 80005a2:	dbf6      	blt.n	8000592 <d_template_param+0xa>
 80005a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005a6:	6963      	ldr	r3, [r4, #20]
 80005a8:	69a1      	ldr	r1, [r4, #24]
 80005aa:	3201      	adds	r2, #1
 80005ac:	428b      	cmp	r3, r1
 80005ae:	62a2      	str	r2, [r4, #40]	; 0x28
 80005b0:	daef      	bge.n	8000592 <d_template_param+0xa>
 80005b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80005b6:	6921      	ldr	r1, [r4, #16]
 80005b8:	0092      	lsls	r2, r2, #2
 80005ba:	3301      	adds	r3, #1
 80005bc:	1888      	adds	r0, r1, r2
 80005be:	6163      	str	r3, [r4, #20]
 80005c0:	d002      	beq.n	80005c8 <d_template_param+0x40>
 80005c2:	2305      	movs	r3, #5
 80005c4:	548b      	strb	r3, [r1, r2]
 80005c6:	6045      	str	r5, [r0, #4]
 80005c8:	bd38      	pop	{r3, r4, r5, pc}
 80005ca:	bf00      	nop

080005cc <d_source_name>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	4604      	mov	r4, r0
 80005d0:	300c      	adds	r0, #12
 80005d2:	f7ff ff7b 	bl	80004cc <d_number.isra.0>
 80005d6:	1e06      	subs	r6, r0, #0
 80005d8:	dd4d      	ble.n	8000676 <d_source_name+0xaa>
 80005da:	68e5      	ldr	r5, [r4, #12]
 80005dc:	6863      	ldr	r3, [r4, #4]
 80005de:	1b5b      	subs	r3, r3, r5
 80005e0:	429e      	cmp	r6, r3
 80005e2:	dc2b      	bgt.n	800063c <d_source_name+0x70>
 80005e4:	68a2      	ldr	r2, [r4, #8]
 80005e6:	19ab      	adds	r3, r5, r6
 80005e8:	0752      	lsls	r2, r2, #29
 80005ea:	60e3      	str	r3, [r4, #12]
 80005ec:	d504      	bpl.n	80005f8 <d_source_name+0x2c>
 80005ee:	5daa      	ldrb	r2, [r5, r6]
 80005f0:	2a24      	cmp	r2, #36	; 0x24
 80005f2:	bf04      	itt	eq
 80005f4:	3301      	addeq	r3, #1
 80005f6:	60e3      	streq	r3, [r4, #12]
 80005f8:	2e09      	cmp	r6, #9
 80005fa:	dd0c      	ble.n	8000616 <d_source_name+0x4a>
 80005fc:	2208      	movs	r2, #8
 80005fe:	491f      	ldr	r1, [pc, #124]	; (800067c <d_source_name+0xb0>)
 8000600:	4628      	mov	r0, r5
 8000602:	f016 fe47 	bl	8017294 <memcmp>
 8000606:	b930      	cbnz	r0, 8000616 <d_source_name+0x4a>
 8000608:	7a2b      	ldrb	r3, [r5, #8]
 800060a:	2b2e      	cmp	r3, #46	; 0x2e
 800060c:	d019      	beq.n	8000642 <d_source_name+0x76>
 800060e:	2b5f      	cmp	r3, #95	; 0x5f
 8000610:	d017      	beq.n	8000642 <d_source_name+0x76>
 8000612:	2b24      	cmp	r3, #36	; 0x24
 8000614:	d015      	beq.n	8000642 <d_source_name+0x76>
 8000616:	6963      	ldr	r3, [r4, #20]
 8000618:	69a2      	ldr	r2, [r4, #24]
 800061a:	4293      	cmp	r3, r2
 800061c:	da0e      	bge.n	800063c <d_source_name+0x70>
 800061e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000622:	6921      	ldr	r1, [r4, #16]
 8000624:	0092      	lsls	r2, r2, #2
 8000626:	3301      	adds	r3, #1
 8000628:	1888      	adds	r0, r1, r2
 800062a:	6163      	str	r3, [r4, #20]
 800062c:	d006      	beq.n	800063c <d_source_name+0x70>
 800062e:	b12d      	cbz	r5, 800063c <d_source_name+0x70>
 8000630:	2300      	movs	r3, #0
 8000632:	548b      	strb	r3, [r1, r2]
 8000634:	6045      	str	r5, [r0, #4]
 8000636:	6086      	str	r6, [r0, #8]
 8000638:	62e0      	str	r0, [r4, #44]	; 0x2c
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	2000      	movs	r0, #0
 800063e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000640:	bd70      	pop	{r4, r5, r6, pc}
 8000642:	7a6b      	ldrb	r3, [r5, #9]
 8000644:	2b4e      	cmp	r3, #78	; 0x4e
 8000646:	d1e6      	bne.n	8000616 <d_source_name+0x4a>
 8000648:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800064a:	6962      	ldr	r2, [r4, #20]
 800064c:	69a1      	ldr	r1, [r4, #24]
 800064e:	3316      	adds	r3, #22
 8000650:	1b9e      	subs	r6, r3, r6
 8000652:	428a      	cmp	r2, r1
 8000654:	6326      	str	r6, [r4, #48]	; 0x30
 8000656:	daf1      	bge.n	800063c <d_source_name+0x70>
 8000658:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800065c:	6921      	ldr	r1, [r4, #16]
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	3201      	adds	r2, #1
 8000662:	18c8      	adds	r0, r1, r3
 8000664:	6162      	str	r2, [r4, #20]
 8000666:	d0ea      	beq.n	800063e <d_source_name+0x72>
 8000668:	2600      	movs	r6, #0
 800066a:	2515      	movs	r5, #21
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <d_source_name+0xb4>)
 800066e:	54ce      	strb	r6, [r1, r3]
 8000670:	6085      	str	r5, [r0, #8]
 8000672:	6042      	str	r2, [r0, #4]
 8000674:	e7e3      	b.n	800063e <d_source_name+0x72>
 8000676:	2000      	movs	r0, #0
 8000678:	bd70      	pop	{r4, r5, r6, pc}
 800067a:	bf00      	nop
 800067c:	08022a0c 	.word	0x08022a0c
 8000680:	08022a18 	.word	0x08022a18

08000684 <d_abi_tags>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	68c3      	ldr	r3, [r0, #12]
 8000688:	4604      	mov	r4, r0
 800068a:	781a      	ldrb	r2, [r3, #0]
 800068c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 800068e:	2a42      	cmp	r2, #66	; 0x42
 8000690:	460d      	mov	r5, r1
 8000692:	d10f      	bne.n	80006b4 <d_abi_tags+0x30>
 8000694:	3301      	adds	r3, #1
 8000696:	60e3      	str	r3, [r4, #12]
 8000698:	4620      	mov	r0, r4
 800069a:	f7ff ff97 	bl	80005cc <d_source_name>
 800069e:	462a      	mov	r2, r5
 80006a0:	4603      	mov	r3, r0
 80006a2:	214b      	movs	r1, #75	; 0x4b
 80006a4:	4620      	mov	r0, r4
 80006a6:	f7ff fdc1 	bl	800022c <d_make_comp>
 80006aa:	68e3      	ldr	r3, [r4, #12]
 80006ac:	4605      	mov	r5, r0
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	2a42      	cmp	r2, #66	; 0x42
 80006b2:	d0ef      	beq.n	8000694 <d_abi_tags+0x10>
 80006b4:	62e6      	str	r6, [r4, #44]	; 0x2c
 80006b6:	4628      	mov	r0, r5
 80006b8:	bd70      	pop	{r4, r5, r6, pc}
 80006ba:	bf00      	nop

080006bc <d_substitution>:
 80006bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006c0:	4605      	mov	r5, r0
 80006c2:	68c0      	ldr	r0, [r0, #12]
 80006c4:	7803      	ldrb	r3, [r0, #0]
 80006c6:	2b53      	cmp	r3, #83	; 0x53
 80006c8:	d002      	beq.n	80006d0 <d_substitution+0x14>
 80006ca:	2000      	movs	r0, #0
 80006cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006d0:	1c43      	adds	r3, r0, #1
 80006d2:	60eb      	str	r3, [r5, #12]
 80006d4:	7842      	ldrb	r2, [r0, #1]
 80006d6:	b1a2      	cbz	r2, 8000702 <d_substitution+0x46>
 80006d8:	1c83      	adds	r3, r0, #2
 80006da:	60eb      	str	r3, [r5, #12]
 80006dc:	7842      	ldrb	r2, [r0, #1]
 80006de:	2a5f      	cmp	r2, #95	; 0x5f
 80006e0:	d15a      	bne.n	8000798 <d_substitution+0xdc>
 80006e2:	2300      	movs	r3, #0
 80006e4:	6a2a      	ldr	r2, [r5, #32]
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d2ef      	bcs.n	80006ca <d_substitution+0xe>
 80006ea:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80006ec:	69e9      	ldr	r1, [r5, #28]
 80006ee:	3201      	adds	r2, #1
 80006f0:	62aa      	str	r2, [r5, #40]	; 0x28
 80006f2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80006f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006fa:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 80006fe:	2b19      	cmp	r3, #25
 8000700:	d94f      	bls.n	80007a2 <d_substitution+0xe6>
 8000702:	68ab      	ldr	r3, [r5, #8]
 8000704:	f003 0308 	and.w	r3, r3, #8
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf14      	ite	ne
 800070c:	2401      	movne	r4, #1
 800070e:	2400      	moveq	r4, #0
 8000710:	d101      	bne.n	8000716 <d_substitution+0x5a>
 8000712:	2900      	cmp	r1, #0
 8000714:	d169      	bne.n	80007ea <d_substitution+0x12e>
 8000716:	4b46      	ldr	r3, [pc, #280]	; (8000830 <d_substitution+0x174>)
 8000718:	2174      	movs	r1, #116	; 0x74
 800071a:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800071e:	e003      	b.n	8000728 <d_substitution+0x6c>
 8000720:	331c      	adds	r3, #28
 8000722:	4283      	cmp	r3, r0
 8000724:	d2d1      	bcs.n	80006ca <d_substitution+0xe>
 8000726:	7819      	ldrb	r1, [r3, #0]
 8000728:	428a      	cmp	r2, r1
 800072a:	d1f9      	bne.n	8000720 <d_substitution+0x64>
 800072c:	695e      	ldr	r6, [r3, #20]
 800072e:	2e00      	cmp	r6, #0
 8000730:	d07b      	beq.n	800082a <d_substitution+0x16e>
 8000732:	696a      	ldr	r2, [r5, #20]
 8000734:	69a9      	ldr	r1, [r5, #24]
 8000736:	428a      	cmp	r2, r1
 8000738:	da63      	bge.n	8000802 <d_substitution+0x146>
 800073a:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 800073e:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8000742:	00bf      	lsls	r7, r7, #2
 8000744:	3201      	adds	r2, #1
 8000746:	eb1e 0007 	adds.w	r0, lr, r7
 800074a:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800074e:	616a      	str	r2, [r5, #20]
 8000750:	d006      	beq.n	8000760 <d_substitution+0xa4>
 8000752:	f04f 0c18 	mov.w	ip, #24
 8000756:	f80e c007 	strb.w	ip, [lr, r7]
 800075a:	6046      	str	r6, [r0, #4]
 800075c:	f8c0 8008 	str.w	r8, [r0, #8]
 8000760:	62e8      	str	r0, [r5, #44]	; 0x2c
 8000762:	2c00      	cmp	r4, #0
 8000764:	d04a      	beq.n	80007fc <d_substitution+0x140>
 8000766:	68de      	ldr	r6, [r3, #12]
 8000768:	691c      	ldr	r4, [r3, #16]
 800076a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800076c:	4291      	cmp	r1, r2
 800076e:	4423      	add	r3, r4
 8000770:	632b      	str	r3, [r5, #48]	; 0x30
 8000772:	dd41      	ble.n	80007f8 <d_substitution+0x13c>
 8000774:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8000778:	6929      	ldr	r1, [r5, #16]
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	3201      	adds	r2, #1
 800077e:	18c8      	adds	r0, r1, r3
 8000780:	616a      	str	r2, [r5, #20]
 8000782:	d003      	beq.n	800078c <d_substitution+0xd0>
 8000784:	2218      	movs	r2, #24
 8000786:	54ca      	strb	r2, [r1, r3]
 8000788:	6046      	str	r6, [r0, #4]
 800078a:	6084      	str	r4, [r0, #8]
 800078c:	68eb      	ldr	r3, [r5, #12]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b42      	cmp	r3, #66	; 0x42
 8000792:	d038      	beq.n	8000806 <d_substitution+0x14a>
 8000794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000798:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 800079c:	b2e3      	uxtb	r3, r4
 800079e:	2b09      	cmp	r3, #9
 80007a0:	d8ab      	bhi.n	80006fa <d_substitution+0x3e>
 80007a2:	2100      	movs	r1, #0
 80007a4:	e00d      	b.n	80007c2 <d_substitution+0x106>
 80007a6:	3b30      	subs	r3, #48	; 0x30
 80007a8:	4299      	cmp	r1, r3
 80007aa:	d88e      	bhi.n	80006ca <d_substitution+0xe>
 80007ac:	68e9      	ldr	r1, [r5, #12]
 80007ae:	780a      	ldrb	r2, [r1, #0]
 80007b0:	1c48      	adds	r0, r1, #1
 80007b2:	b11a      	cbz	r2, 80007bc <d_substitution+0x100>
 80007b4:	60e8      	str	r0, [r5, #12]
 80007b6:	780a      	ldrb	r2, [r1, #0]
 80007b8:	2a5f      	cmp	r2, #95	; 0x5f
 80007ba:	d014      	beq.n	80007e6 <d_substitution+0x12a>
 80007bc:	4619      	mov	r1, r3
 80007be:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 80007c2:	b2e4      	uxtb	r4, r4
 80007c4:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80007c8:	2c09      	cmp	r4, #9
 80007ca:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 80007ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80007d2:	d9e8      	bls.n	80007a6 <d_substitution+0xea>
 80007d4:	2819      	cmp	r0, #25
 80007d6:	f63f af78 	bhi.w	80006ca <d_substitution+0xe>
 80007da:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80007de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80007e2:	3b37      	subs	r3, #55	; 0x37
 80007e4:	e7e0      	b.n	80007a8 <d_substitution+0xec>
 80007e6:	3301      	adds	r3, #1
 80007e8:	e77c      	b.n	80006e4 <d_substitution+0x28>
 80007ea:	68eb      	ldr	r3, [r5, #12]
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	3b43      	subs	r3, #67	; 0x43
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	bf98      	it	ls
 80007f4:	2401      	movls	r4, #1
 80007f6:	e78e      	b.n	8000716 <d_substitution+0x5a>
 80007f8:	2000      	movs	r0, #0
 80007fa:	e7c7      	b.n	800078c <d_substitution+0xd0>
 80007fc:	685e      	ldr	r6, [r3, #4]
 80007fe:	689c      	ldr	r4, [r3, #8]
 8000800:	e7b3      	b.n	800076a <d_substitution+0xae>
 8000802:	2000      	movs	r0, #0
 8000804:	e7ac      	b.n	8000760 <d_substitution+0xa4>
 8000806:	4601      	mov	r1, r0
 8000808:	4628      	mov	r0, r5
 800080a:	f7ff ff3b 	bl	8000684 <d_abi_tags>
 800080e:	2800      	cmp	r0, #0
 8000810:	f43f af5b 	beq.w	80006ca <d_substitution+0xe>
 8000814:	6a2b      	ldr	r3, [r5, #32]
 8000816:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000818:	4293      	cmp	r3, r2
 800081a:	dabb      	bge.n	8000794 <d_substitution+0xd8>
 800081c:	69e9      	ldr	r1, [r5, #28]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8000824:	622a      	str	r2, [r5, #32]
 8000826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800082a:	69a9      	ldr	r1, [r5, #24]
 800082c:	696a      	ldr	r2, [r5, #20]
 800082e:	e798      	b.n	8000762 <d_substitution+0xa6>
 8000830:	0801c2b8 	.word	0x0801c2b8

08000834 <d_call_offset>:
 8000834:	b538      	push	{r3, r4, r5, lr}
 8000836:	4604      	mov	r4, r0
 8000838:	b929      	cbnz	r1, 8000846 <d_call_offset+0x12>
 800083a:	68c3      	ldr	r3, [r0, #12]
 800083c:	781a      	ldrb	r2, [r3, #0]
 800083e:	b132      	cbz	r2, 800084e <d_call_offset+0x1a>
 8000840:	1c5a      	adds	r2, r3, #1
 8000842:	60c2      	str	r2, [r0, #12]
 8000844:	7819      	ldrb	r1, [r3, #0]
 8000846:	2968      	cmp	r1, #104	; 0x68
 8000848:	d019      	beq.n	800087e <d_call_offset+0x4a>
 800084a:	2976      	cmp	r1, #118	; 0x76
 800084c:	d001      	beq.n	8000852 <d_call_offset+0x1e>
 800084e:	2000      	movs	r0, #0
 8000850:	bd38      	pop	{r3, r4, r5, pc}
 8000852:	f104 050c 	add.w	r5, r4, #12
 8000856:	4628      	mov	r0, r5
 8000858:	f7ff fe38 	bl	80004cc <d_number.isra.0>
 800085c:	68e3      	ldr	r3, [r4, #12]
 800085e:	781a      	ldrb	r2, [r3, #0]
 8000860:	2a5f      	cmp	r2, #95	; 0x5f
 8000862:	d1f4      	bne.n	800084e <d_call_offset+0x1a>
 8000864:	3301      	adds	r3, #1
 8000866:	60e3      	str	r3, [r4, #12]
 8000868:	4628      	mov	r0, r5
 800086a:	f7ff fe2f 	bl	80004cc <d_number.isra.0>
 800086e:	68e3      	ldr	r3, [r4, #12]
 8000870:	781a      	ldrb	r2, [r3, #0]
 8000872:	2a5f      	cmp	r2, #95	; 0x5f
 8000874:	d1eb      	bne.n	800084e <d_call_offset+0x1a>
 8000876:	2001      	movs	r0, #1
 8000878:	4403      	add	r3, r0
 800087a:	60e3      	str	r3, [r4, #12]
 800087c:	bd38      	pop	{r3, r4, r5, pc}
 800087e:	f104 000c 	add.w	r0, r4, #12
 8000882:	f7ff fe23 	bl	80004cc <d_number.isra.0>
 8000886:	e7f2      	b.n	800086e <d_call_offset+0x3a>

08000888 <d_lookup_template_argument.isra.6>:
 8000888:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800088c:	b19b      	cbz	r3, 80008b6 <d_lookup_template_argument.isra.6+0x2e>
 800088e:	680a      	ldr	r2, [r1, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	2a00      	cmp	r2, #0
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	db09      	blt.n	80008ac <d_lookup_template_argument.isra.6+0x24>
 8000898:	b923      	cbnz	r3, 80008a4 <d_lookup_template_argument.isra.6+0x1c>
 800089a:	e007      	b.n	80008ac <d_lookup_template_argument.isra.6+0x24>
 800089c:	b142      	cbz	r2, 80008b0 <d_lookup_template_argument.isra.6+0x28>
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	3a01      	subs	r2, #1
 80008a2:	b11b      	cbz	r3, 80008ac <d_lookup_template_argument.isra.6+0x24>
 80008a4:	7819      	ldrb	r1, [r3, #0]
 80008a6:	292f      	cmp	r1, #47	; 0x2f
 80008a8:	d0f8      	beq.n	800089c <d_lookup_template_argument.isra.6+0x14>
 80008aa:	2300      	movs	r3, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	4770      	bx	lr
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	4618      	mov	r0, r3
 80008b4:	4770      	bx	lr
 80008b6:	2201      	movs	r2, #1
 80008b8:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 80008bc:	e7f6      	b.n	80008ac <d_lookup_template_argument.isra.6+0x24>
 80008be:	bf00      	nop

080008c0 <d_find_pack>:
 80008c0:	2900      	cmp	r1, #0
 80008c2:	d041      	beq.n	8000948 <d_find_pack+0x88>
 80008c4:	b538      	push	{r3, r4, r5, lr}
 80008c6:	4605      	mov	r5, r0
 80008c8:	460c      	mov	r4, r1
 80008ca:	7823      	ldrb	r3, [r4, #0]
 80008cc:	2b4b      	cmp	r3, #75	; 0x4b
 80008ce:	d827      	bhi.n	8000920 <d_find_pack+0x60>
 80008d0:	e8df f003 	tbb	[pc, r3]
 80008d4:	2626262e 	.word	0x2626262e
 80008d8:	2b2e3026 	.word	0x2b2e3026
 80008dc:	2626262b 	.word	0x2626262b
 80008e0:	26262626 	.word	0x26262626
 80008e4:	26262626 	.word	0x26262626
 80008e8:	26262626 	.word	0x26262626
 80008ec:	2626262e 	.word	0x2626262e
 80008f0:	26262626 	.word	0x26262626
 80008f4:	26262626 	.word	0x26262626
 80008f8:	2e262626 	.word	0x2e262626
 80008fc:	26262626 	.word	0x26262626
 8000900:	2626262e 	.word	0x2626262e
 8000904:	262b2e26 	.word	0x262b2e26
 8000908:	26262626 	.word	0x26262626
 800090c:	26262626 	.word	0x26262626
 8000910:	26262626 	.word	0x26262626
 8000914:	26262e2e 	.word	0x26262e2e
 8000918:	2e2e2e26 	.word	0x2e2e2e26
 800091c:	2e2e2626 	.word	0x2e2e2626
 8000920:	6861      	ldr	r1, [r4, #4]
 8000922:	4628      	mov	r0, r5
 8000924:	f7ff ffcc 	bl	80008c0 <d_find_pack>
 8000928:	b918      	cbnz	r0, 8000932 <d_find_pack+0x72>
 800092a:	68a4      	ldr	r4, [r4, #8]
 800092c:	2c00      	cmp	r4, #0
 800092e:	d1cc      	bne.n	80008ca <d_find_pack+0xa>
 8000930:	2000      	movs	r0, #0
 8000932:	bd38      	pop	{r3, r4, r5, pc}
 8000934:	1d21      	adds	r1, r4, #4
 8000936:	4628      	mov	r0, r5
 8000938:	f7ff ffa6 	bl	8000888 <d_lookup_template_argument.isra.6>
 800093c:	2800      	cmp	r0, #0
 800093e:	d0f7      	beq.n	8000930 <d_find_pack+0x70>
 8000940:	7803      	ldrb	r3, [r0, #0]
 8000942:	2b2f      	cmp	r3, #47	; 0x2f
 8000944:	d1f4      	bne.n	8000930 <d_find_pack+0x70>
 8000946:	bd38      	pop	{r3, r4, r5, pc}
 8000948:	2000      	movs	r0, #0
 800094a:	4770      	bx	lr

0800094c <d_growable_string_callback_adapter>:
 800094c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094e:	4615      	mov	r5, r2
 8000950:	6852      	ldr	r2, [r2, #4]
 8000952:	1c4b      	adds	r3, r1, #1
 8000954:	68ac      	ldr	r4, [r5, #8]
 8000956:	4413      	add	r3, r2
 8000958:	42a3      	cmp	r3, r4
 800095a:	b083      	sub	sp, #12
 800095c:	460e      	mov	r6, r1
 800095e:	4607      	mov	r7, r0
 8000960:	d813      	bhi.n	800098a <d_growable_string_callback_adapter+0x3e>
 8000962:	68ec      	ldr	r4, [r5, #12]
 8000964:	b10c      	cbz	r4, 800096a <d_growable_string_callback_adapter+0x1e>
 8000966:	b003      	add	sp, #12
 8000968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800096a:	e895 0009 	ldmia.w	r5, {r0, r3}
 800096e:	4632      	mov	r2, r6
 8000970:	4639      	mov	r1, r7
 8000972:	4418      	add	r0, r3
 8000974:	f016 fc9d 	bl	80172b2 <memcpy>
 8000978:	682b      	ldr	r3, [r5, #0]
 800097a:	686a      	ldr	r2, [r5, #4]
 800097c:	4433      	add	r3, r6
 800097e:	549c      	strb	r4, [r3, r2]
 8000980:	686b      	ldr	r3, [r5, #4]
 8000982:	441e      	add	r6, r3
 8000984:	606e      	str	r6, [r5, #4]
 8000986:	b003      	add	sp, #12
 8000988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800098a:	68ea      	ldr	r2, [r5, #12]
 800098c:	2a00      	cmp	r2, #0
 800098e:	d1ea      	bne.n	8000966 <d_growable_string_callback_adapter+0x1a>
 8000990:	b91c      	cbnz	r4, 800099a <d_growable_string_callback_adapter+0x4e>
 8000992:	2b02      	cmp	r3, #2
 8000994:	f04f 0402 	mov.w	r4, #2
 8000998:	d902      	bls.n	80009a0 <d_growable_string_callback_adapter+0x54>
 800099a:	0064      	lsls	r4, r4, #1
 800099c:	42a3      	cmp	r3, r4
 800099e:	d8fc      	bhi.n	800099a <d_growable_string_callback_adapter+0x4e>
 80009a0:	4621      	mov	r1, r4
 80009a2:	6828      	ldr	r0, [r5, #0]
 80009a4:	f016 ff62 	bl	801786c <realloc>
 80009a8:	b110      	cbz	r0, 80009b0 <d_growable_string_callback_adapter+0x64>
 80009aa:	6028      	str	r0, [r5, #0]
 80009ac:	60ac      	str	r4, [r5, #8]
 80009ae:	e7d8      	b.n	8000962 <d_growable_string_callback_adapter+0x16>
 80009b0:	9001      	str	r0, [sp, #4]
 80009b2:	6828      	ldr	r0, [r5, #0]
 80009b4:	f016 fa4c 	bl	8016e50 <free>
 80009b8:	2201      	movs	r2, #1
 80009ba:	9b01      	ldr	r3, [sp, #4]
 80009bc:	60ea      	str	r2, [r5, #12]
 80009be:	602b      	str	r3, [r5, #0]
 80009c0:	606b      	str	r3, [r5, #4]
 80009c2:	60ab      	str	r3, [r5, #8]
 80009c4:	e7cf      	b.n	8000966 <d_growable_string_callback_adapter+0x1a>
 80009c6:	bf00      	nop

080009c8 <d_append_num>:
 80009c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009cc:	b088      	sub	sp, #32
 80009ce:	460a      	mov	r2, r1
 80009d0:	4604      	mov	r4, r0
 80009d2:	491b      	ldr	r1, [pc, #108]	; (8000a40 <d_append_num+0x78>)
 80009d4:	a801      	add	r0, sp, #4
 80009d6:	f017 f95b 	bl	8017c90 <sprintf>
 80009da:	a801      	add	r0, sp, #4
 80009dc:	f005 ff7c 	bl	80068d8 <strlen>
 80009e0:	b350      	cbz	r0, 8000a38 <d_append_num+0x70>
 80009e2:	ad01      	add	r5, sp, #4
 80009e4:	f04f 0800 	mov.w	r8, #0
 80009e8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80009ec:	182f      	adds	r7, r5, r0
 80009ee:	e009      	b.n	8000a04 <d_append_num+0x3c>
 80009f0:	460b      	mov	r3, r1
 80009f2:	42bd      	cmp	r5, r7
 80009f4:	f101 0101 	add.w	r1, r1, #1
 80009f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80009fc:	54e6      	strb	r6, [r4, r3]
 80009fe:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000a02:	d019      	beq.n	8000a38 <d_append_num+0x70>
 8000a04:	29ff      	cmp	r1, #255	; 0xff
 8000a06:	f815 6b01 	ldrb.w	r6, [r5], #1
 8000a0a:	d1f1      	bne.n	80009f0 <d_append_num+0x28>
 8000a0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000a10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000a14:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8000a18:	4620      	mov	r0, r4
 8000a1a:	4798      	blx	r3
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8000a24:	42bd      	cmp	r5, r7
 8000a26:	440a      	add	r2, r1
 8000a28:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8000a2c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000a30:	54e6      	strb	r6, [r4, r3]
 8000a32:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000a36:	d1e5      	bne.n	8000a04 <d_append_num+0x3c>
 8000a38:	b008      	add	sp, #32
 8000a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a3e:	bf00      	nop
 8000a40:	08022a30 	.word	0x08022a30

08000a44 <d_exprlist>:
 8000a44:	2200      	movs	r2, #0
 8000a46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a4a:	68c3      	ldr	r3, [r0, #12]
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	781d      	ldrb	r5, [r3, #0]
 8000a50:	4604      	mov	r4, r0
 8000a52:	428d      	cmp	r5, r1
 8000a54:	9201      	str	r2, [sp, #4]
 8000a56:	f000 81c6 	beq.w	8000de6 <d_exprlist+0x3a2>
 8000a5a:	4688      	mov	r8, r1
 8000a5c:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 8000efc <d_exprlist+0x4b8>
 8000a60:	ae01      	add	r6, sp, #4
 8000a62:	e023      	b.n	8000aac <d_exprlist+0x68>
 8000a64:	2a66      	cmp	r2, #102	; 0x66
 8000a66:	d04c      	beq.n	8000b02 <d_exprlist+0xbe>
 8000a68:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000a6c:	2909      	cmp	r1, #9
 8000a6e:	f200 8217 	bhi.w	8000ea0 <d_exprlist+0x45c>
 8000a72:	4620      	mov	r0, r4
 8000a74:	f001 fafe 	bl	8002074 <d_unqualified_name>
 8000a78:	4605      	mov	r5, r0
 8000a7a:	2800      	cmp	r0, #0
 8000a7c:	f000 8170 	beq.w	8000d60 <d_exprlist+0x31c>
 8000a80:	68e3      	ldr	r3, [r4, #12]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b49      	cmp	r3, #73	; 0x49
 8000a86:	f000 8092 	beq.w	8000bae <d_exprlist+0x16a>
 8000a8a:	6367      	str	r7, [r4, #52]	; 0x34
 8000a8c:	462a      	mov	r2, r5
 8000a8e:	2300      	movs	r3, #0
 8000a90:	212e      	movs	r1, #46	; 0x2e
 8000a92:	4620      	mov	r0, r4
 8000a94:	f7ff fbca 	bl	800022c <d_make_comp>
 8000a98:	6030      	str	r0, [r6, #0]
 8000a9a:	2800      	cmp	r0, #0
 8000a9c:	d05b      	beq.n	8000b56 <d_exprlist+0x112>
 8000a9e:	68e3      	ldr	r3, [r4, #12]
 8000aa0:	f100 0608 	add.w	r6, r0, #8
 8000aa4:	781a      	ldrb	r2, [r3, #0]
 8000aa6:	4542      	cmp	r2, r8
 8000aa8:	f000 8107 	beq.w	8000cba <d_exprlist+0x276>
 8000aac:	2501      	movs	r5, #1
 8000aae:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000ab0:	6365      	str	r5, [r4, #52]	; 0x34
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	2a4c      	cmp	r2, #76	; 0x4c
 8000ab6:	d047      	beq.n	8000b48 <d_exprlist+0x104>
 8000ab8:	2a54      	cmp	r2, #84	; 0x54
 8000aba:	d051      	beq.n	8000b60 <d_exprlist+0x11c>
 8000abc:	2a73      	cmp	r2, #115	; 0x73
 8000abe:	d1d1      	bne.n	8000a64 <d_exprlist+0x20>
 8000ac0:	785a      	ldrb	r2, [r3, #1]
 8000ac2:	2a72      	cmp	r2, #114	; 0x72
 8000ac4:	f000 80e2 	beq.w	8000c8c <d_exprlist+0x248>
 8000ac8:	2a70      	cmp	r2, #112	; 0x70
 8000aca:	f000 80fd 	beq.w	8000cc8 <d_exprlist+0x284>
 8000ace:	4620      	mov	r0, r4
 8000ad0:	f001 fa10 	bl	8001ef4 <d_operator_name>
 8000ad4:	4605      	mov	r5, r0
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	f000 8142 	beq.w	8000d60 <d_exprlist+0x31c>
 8000adc:	782b      	ldrb	r3, [r5, #0]
 8000ade:	2b31      	cmp	r3, #49	; 0x31
 8000ae0:	d043      	beq.n	8000b6a <d_exprlist+0x126>
 8000ae2:	2b32      	cmp	r3, #50	; 0x32
 8000ae4:	d05c      	beq.n	8000ba0 <d_exprlist+0x15c>
 8000ae6:	2b33      	cmp	r3, #51	; 0x33
 8000ae8:	d17b      	bne.n	8000be2 <d_exprlist+0x19e>
 8000aea:	68e3      	ldr	r3, [r4, #12]
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	2a5f      	cmp	r2, #95	; 0x5f
 8000af0:	f040 80c1 	bne.w	8000c76 <d_exprlist+0x232>
 8000af4:	3301      	adds	r3, #1
 8000af6:	60e3      	str	r3, [r4, #12]
 8000af8:	2145      	movs	r1, #69	; 0x45
 8000afa:	4620      	mov	r0, r4
 8000afc:	f7ff ffa2 	bl	8000a44 <d_exprlist>
 8000b00:	e0bc      	b.n	8000c7c <d_exprlist+0x238>
 8000b02:	785a      	ldrb	r2, [r3, #1]
 8000b04:	2a70      	cmp	r2, #112	; 0x70
 8000b06:	d1e2      	bne.n	8000ace <d_exprlist+0x8a>
 8000b08:	1c9a      	adds	r2, r3, #2
 8000b0a:	60e2      	str	r2, [r4, #12]
 8000b0c:	789a      	ldrb	r2, [r3, #2]
 8000b0e:	2a54      	cmp	r2, #84	; 0x54
 8000b10:	d069      	beq.n	8000be6 <d_exprlist+0x1a2>
 8000b12:	4620      	mov	r0, r4
 8000b14:	f7ff fd1c 	bl	8000550 <d_compact_number>
 8000b18:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000b1c:	4298      	cmp	r0, r3
 8000b1e:	d060      	beq.n	8000be2 <d_exprlist+0x19e>
 8000b20:	1c43      	adds	r3, r0, #1
 8000b22:	d05e      	beq.n	8000be2 <d_exprlist+0x19e>
 8000b24:	3001      	adds	r0, #1
 8000b26:	6963      	ldr	r3, [r4, #20]
 8000b28:	69a2      	ldr	r2, [r4, #24]
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	da59      	bge.n	8000be2 <d_exprlist+0x19e>
 8000b2e:	6922      	ldr	r2, [r4, #16]
 8000b30:	1c59      	adds	r1, r3, #1
 8000b32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000b36:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
 8000b3a:	6161      	str	r1, [r4, #20]
 8000b3c:	d051      	beq.n	8000be2 <d_exprlist+0x19e>
 8000b3e:	2106      	movs	r1, #6
 8000b40:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 8000b44:	6068      	str	r0, [r5, #4]
 8000b46:	e7a0      	b.n	8000a8a <d_exprlist+0x46>
 8000b48:	4620      	mov	r0, r4
 8000b4a:	f001 fee1 	bl	8002910 <d_expr_primary>
 8000b4e:	4605      	mov	r5, r0
 8000b50:	6367      	str	r7, [r4, #52]	; 0x34
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d19a      	bne.n	8000a8c <d_exprlist+0x48>
 8000b56:	2500      	movs	r5, #0
 8000b58:	4628      	mov	r0, r5
 8000b5a:	b003      	add	sp, #12
 8000b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b60:	4620      	mov	r0, r4
 8000b62:	f7ff fd11 	bl	8000588 <d_template_param>
 8000b66:	4605      	mov	r5, r0
 8000b68:	e7f2      	b.n	8000b50 <d_exprlist+0x10c>
 8000b6a:	f8d5 b004 	ldr.w	fp, [r5, #4]
 8000b6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b70:	f8db 2008 	ldr.w	r2, [fp, #8]
 8000b74:	f8db a000 	ldr.w	sl, [fp]
 8000b78:	3a02      	subs	r2, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	6323      	str	r3, [r4, #48]	; 0x30
 8000b7e:	4650      	mov	r0, sl
 8000b80:	4649      	mov	r1, r9
 8000b82:	f005 fe9f 	bl	80068c4 <strcmp>
 8000b86:	2800      	cmp	r0, #0
 8000b88:	f000 80e6 	beq.w	8000d58 <d_exprlist+0x314>
 8000b8c:	f8db 300c 	ldr.w	r3, [fp, #12]
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d826      	bhi.n	8000be2 <d_exprlist+0x19e>
 8000b94:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000b98:	0135002b 	.word	0x0135002b
 8000b9c:	00a50033 	.word	0x00a50033
 8000ba0:	686b      	ldr	r3, [r5, #4]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d81d      	bhi.n	8000be2 <d_exprlist+0x19e>
 8000ba6:	e8df f003 	tbb	[pc, r3]
 8000baa:	6622      	.short	0x6622
 8000bac:	1c1c      	.short	0x1c1c
 8000bae:	4620      	mov	r0, r4
 8000bb0:	f000 fbfe 	bl	80013b0 <d_template_args>
 8000bb4:	462a      	mov	r2, r5
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2104      	movs	r1, #4
 8000bba:	4620      	mov	r0, r4
 8000bbc:	f7ff fb36 	bl	800022c <d_make_comp>
 8000bc0:	4605      	mov	r5, r0
 8000bc2:	e7c5      	b.n	8000b50 <d_exprlist+0x10c>
 8000bc4:	2a74      	cmp	r2, #116	; 0x74
 8000bc6:	d182      	bne.n	8000ace <d_exprlist+0x8a>
 8000bc8:	785b      	ldrb	r3, [r3, #1]
 8000bca:	2b6c      	cmp	r3, #108	; 0x6c
 8000bcc:	f47f af7f 	bne.w	8000ace <d_exprlist+0x8a>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	f000 fdaf 	bl	8001734 <d_type>
 8000bd6:	68e3      	ldr	r3, [r4, #12]
 8000bd8:	4605      	mov	r5, r0
 8000bda:	785a      	ldrb	r2, [r3, #1]
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8169 	bne.w	8000eb4 <d_exprlist+0x470>
 8000be2:	6367      	str	r7, [r4, #52]	; 0x34
 8000be4:	e7b7      	b.n	8000b56 <d_exprlist+0x112>
 8000be6:	3303      	adds	r3, #3
 8000be8:	60e3      	str	r3, [r4, #12]
 8000bea:	2000      	movs	r0, #0
 8000bec:	e79b      	b.n	8000b26 <d_exprlist+0xe2>
 8000bee:	462a      	mov	r2, r5
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	2135      	movs	r1, #53	; 0x35
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	f7ff fb19 	bl	800022c <d_make_comp>
 8000bfa:	4605      	mov	r5, r0
 8000bfc:	e7a8      	b.n	8000b50 <d_exprlist+0x10c>
 8000bfe:	f1ba 0f00 	cmp.w	sl, #0
 8000c02:	d0ee      	beq.n	8000be2 <d_exprlist+0x19e>
 8000c04:	686b      	ldr	r3, [r5, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	785a      	ldrb	r2, [r3, #1]
 8000c0a:	2a63      	cmp	r2, #99	; 0x63
 8000c0c:	f000 80d2 	beq.w	8000db4 <d_exprlist+0x370>
 8000c10:	f89a 3000 	ldrb.w	r3, [sl]
 8000c14:	2b66      	cmp	r3, #102	; 0x66
 8000c16:	f000 80ef 	beq.w	8000df8 <d_exprlist+0x3b4>
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f000 f970 	bl	8000f00 <d_expression_1>
 8000c20:	4683      	mov	fp, r0
 8000c22:	49b1      	ldr	r1, [pc, #708]	; (8000ee8 <d_exprlist+0x4a4>)
 8000c24:	4650      	mov	r0, sl
 8000c26:	f005 fe4d 	bl	80068c4 <strcmp>
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	f000 809d 	beq.w	8000d6a <d_exprlist+0x326>
 8000c30:	49ae      	ldr	r1, [pc, #696]	; (8000eec <d_exprlist+0x4a8>)
 8000c32:	4650      	mov	r0, sl
 8000c34:	f005 fe46 	bl	80068c4 <strcmp>
 8000c38:	b130      	cbz	r0, 8000c48 <d_exprlist+0x204>
 8000c3a:	4650      	mov	r0, sl
 8000c3c:	49ac      	ldr	r1, [pc, #688]	; (8000ef0 <d_exprlist+0x4ac>)
 8000c3e:	f005 fe41 	bl	80068c4 <strcmp>
 8000c42:	2800      	cmp	r0, #0
 8000c44:	f040 8083 	bne.w	8000d4e <d_exprlist+0x30a>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f001 fa13 	bl	8002074 <d_unqualified_name>
 8000c4e:	68e3      	ldr	r3, [r4, #12]
 8000c50:	4682      	mov	sl, r0
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b49      	cmp	r3, #73	; 0x49
 8000c56:	f000 80e9 	beq.w	8000e2c <d_exprlist+0x3e8>
 8000c5a:	4653      	mov	r3, sl
 8000c5c:	465a      	mov	r2, fp
 8000c5e:	2138      	movs	r1, #56	; 0x38
 8000c60:	4620      	mov	r0, r4
 8000c62:	f7ff fae3 	bl	800022c <d_make_comp>
 8000c66:	462a      	mov	r2, r5
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2137      	movs	r1, #55	; 0x37
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f7ff fadd 	bl	800022c <d_make_comp>
 8000c72:	4605      	mov	r5, r0
 8000c74:	e76c      	b.n	8000b50 <d_exprlist+0x10c>
 8000c76:	4620      	mov	r0, r4
 8000c78:	f000 f942 	bl	8000f00 <d_expression_1>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	462a      	mov	r2, r5
 8000c80:	2136      	movs	r1, #54	; 0x36
 8000c82:	4620      	mov	r0, r4
 8000c84:	f7ff fad2 	bl	800022c <d_make_comp>
 8000c88:	4605      	mov	r5, r0
 8000c8a:	e761      	b.n	8000b50 <d_exprlist+0x10c>
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	60e3      	str	r3, [r4, #12]
 8000c90:	4620      	mov	r0, r4
 8000c92:	f000 fd4f 	bl	8001734 <d_type>
 8000c96:	4682      	mov	sl, r0
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f001 f9eb 	bl	8002074 <d_unqualified_name>
 8000c9e:	68e3      	ldr	r3, [r4, #12]
 8000ca0:	4683      	mov	fp, r0
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b49      	cmp	r3, #73	; 0x49
 8000ca6:	f000 8093 	beq.w	8000dd0 <d_exprlist+0x38c>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4629      	mov	r1, r5
 8000cae:	4652      	mov	r2, sl
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	f7ff fabb 	bl	800022c <d_make_comp>
 8000cb6:	4605      	mov	r5, r0
 8000cb8:	e74a      	b.n	8000b50 <d_exprlist+0x10c>
 8000cba:	9d01      	ldr	r5, [sp, #4]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4628      	mov	r0, r5
 8000cc0:	60e3      	str	r3, [r4, #12]
 8000cc2:	b003      	add	sp, #12
 8000cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cc8:	3302      	adds	r3, #2
 8000cca:	60e3      	str	r3, [r4, #12]
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f000 f917 	bl	8000f00 <d_expression_1>
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	214a      	movs	r1, #74	; 0x4a
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f7ff faa7 	bl	800022c <d_make_comp>
 8000cde:	4605      	mov	r5, r0
 8000ce0:	e736      	b.n	8000b50 <d_exprlist+0x10c>
 8000ce2:	f1ba 0f00 	cmp.w	sl, #0
 8000ce6:	f43f af7c 	beq.w	8000be2 <d_exprlist+0x19e>
 8000cea:	4982      	ldr	r1, [pc, #520]	; (8000ef4 <d_exprlist+0x4b0>)
 8000cec:	4650      	mov	r0, sl
 8000cee:	f005 fde9 	bl	80068c4 <strcmp>
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	d03f      	beq.n	8000d76 <d_exprlist+0x332>
 8000cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8000cfa:	2b66      	cmp	r3, #102	; 0x66
 8000cfc:	f000 80bd 	beq.w	8000e7a <d_exprlist+0x436>
 8000d00:	2b6e      	cmp	r3, #110	; 0x6e
 8000d02:	f47f af6e 	bne.w	8000be2 <d_exprlist+0x19e>
 8000d06:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000d0a:	2b77      	cmp	r3, #119	; 0x77
 8000d0c:	d002      	beq.n	8000d14 <d_exprlist+0x2d0>
 8000d0e:	2b61      	cmp	r3, #97	; 0x61
 8000d10:	f47f af67 	bne.w	8000be2 <d_exprlist+0x19e>
 8000d14:	215f      	movs	r1, #95	; 0x5f
 8000d16:	4620      	mov	r0, r4
 8000d18:	f7ff fe94 	bl	8000a44 <d_exprlist>
 8000d1c:	4682      	mov	sl, r0
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f000 fd08 	bl	8001734 <d_type>
 8000d24:	68e3      	ldr	r3, [r4, #12]
 8000d26:	4683      	mov	fp, r0
 8000d28:	781a      	ldrb	r2, [r3, #0]
 8000d2a:	2a45      	cmp	r2, #69	; 0x45
 8000d2c:	f000 80a1 	beq.w	8000e72 <d_exprlist+0x42e>
 8000d30:	2a70      	cmp	r2, #112	; 0x70
 8000d32:	f000 80a6 	beq.w	8000e82 <d_exprlist+0x43e>
 8000d36:	2a69      	cmp	r2, #105	; 0x69
 8000d38:	f47f af53 	bne.w	8000be2 <d_exprlist+0x19e>
 8000d3c:	785b      	ldrb	r3, [r3, #1]
 8000d3e:	2b6c      	cmp	r3, #108	; 0x6c
 8000d40:	f47f af4f 	bne.w	8000be2 <d_exprlist+0x19e>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f000 f8db 	bl	8000f00 <d_expression_1>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	e01f      	b.n	8000d8e <d_exprlist+0x34a>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	f000 f8d6 	bl	8000f00 <d_expression_1>
 8000d54:	4682      	mov	sl, r0
 8000d56:	e780      	b.n	8000c5a <d_exprlist+0x216>
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f000 fceb 	bl	8001734 <d_type>
 8000d5e:	e78d      	b.n	8000c7c <d_exprlist+0x238>
 8000d60:	4628      	mov	r0, r5
 8000d62:	6367      	str	r7, [r4, #52]	; 0x34
 8000d64:	b003      	add	sp, #12
 8000d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d6a:	2145      	movs	r1, #69	; 0x45
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f7ff fe69 	bl	8000a44 <d_exprlist>
 8000d72:	4682      	mov	sl, r0
 8000d74:	e771      	b.n	8000c5a <d_exprlist+0x216>
 8000d76:	4620      	mov	r0, r4
 8000d78:	f000 f8c2 	bl	8000f00 <d_expression_1>
 8000d7c:	4682      	mov	sl, r0
 8000d7e:	4620      	mov	r0, r4
 8000d80:	f000 f8be 	bl	8000f00 <d_expression_1>
 8000d84:	4683      	mov	fp, r0
 8000d86:	4620      	mov	r0, r4
 8000d88:	f000 f8ba 	bl	8000f00 <d_expression_1>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	465a      	mov	r2, fp
 8000d90:	213b      	movs	r1, #59	; 0x3b
 8000d92:	4620      	mov	r0, r4
 8000d94:	f7ff fa4a 	bl	800022c <d_make_comp>
 8000d98:	4652      	mov	r2, sl
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	213a      	movs	r1, #58	; 0x3a
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f7ff fa44 	bl	800022c <d_make_comp>
 8000da4:	462a      	mov	r2, r5
 8000da6:	4603      	mov	r3, r0
 8000da8:	2139      	movs	r1, #57	; 0x39
 8000daa:	4620      	mov	r0, r4
 8000dac:	f7ff fa3e 	bl	800022c <d_make_comp>
 8000db0:	4605      	mov	r5, r0
 8000db2:	e6cd      	b.n	8000b50 <d_exprlist+0x10c>
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8000dba:	2a01      	cmp	r2, #1
 8000dbc:	d903      	bls.n	8000dc6 <d_exprlist+0x382>
 8000dbe:	3b72      	subs	r3, #114	; 0x72
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	f63f af25 	bhi.w	8000c10 <d_exprlist+0x1cc>
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f000 fcb4 	bl	8001734 <d_type>
 8000dcc:	4683      	mov	fp, r0
 8000dce:	e728      	b.n	8000c22 <d_exprlist+0x1de>
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	f000 faed 	bl	80013b0 <d_template_args>
 8000dd6:	465a      	mov	r2, fp
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2104      	movs	r1, #4
 8000ddc:	4620      	mov	r0, r4
 8000dde:	f7ff fa25 	bl	800022c <d_make_comp>
 8000de2:	4603      	mov	r3, r0
 8000de4:	e762      	b.n	8000cac <d_exprlist+0x268>
 8000de6:	3301      	adds	r3, #1
 8000de8:	60c3      	str	r3, [r0, #12]
 8000dea:	212e      	movs	r1, #46	; 0x2e
 8000dec:	4613      	mov	r3, r2
 8000dee:	b003      	add	sp, #12
 8000df0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000df4:	f7ff ba1a 	b.w	800022c <d_make_comp>
 8000df8:	4620      	mov	r0, r4
 8000dfa:	f001 f87b 	bl	8001ef4 <d_operator_name>
 8000dfe:	4683      	mov	fp, r0
 8000e00:	e70f      	b.n	8000c22 <d_exprlist+0x1de>
 8000e02:	f1ba 0f00 	cmp.w	sl, #0
 8000e06:	f43f af36 	beq.w	8000c76 <d_exprlist+0x232>
 8000e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8000e0e:	2b70      	cmp	r3, #112	; 0x70
 8000e10:	d017      	beq.n	8000e42 <d_exprlist+0x3fe>
 8000e12:	2b6d      	cmp	r3, #109	; 0x6d
 8000e14:	d015      	beq.n	8000e42 <d_exprlist+0x3fe>
 8000e16:	4650      	mov	r0, sl
 8000e18:	4937      	ldr	r1, [pc, #220]	; (8000ef8 <d_exprlist+0x4b4>)
 8000e1a:	f005 fd53 	bl	80068c4 <strcmp>
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	f47f af29 	bne.w	8000c76 <d_exprlist+0x232>
 8000e24:	4620      	mov	r0, r4
 8000e26:	f000 fa65 	bl	80012f4 <d_template_args_1>
 8000e2a:	e727      	b.n	8000c7c <d_exprlist+0x238>
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f000 fabf 	bl	80013b0 <d_template_args>
 8000e32:	4652      	mov	r2, sl
 8000e34:	4603      	mov	r3, r0
 8000e36:	2104      	movs	r1, #4
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f7ff f9f7 	bl	800022c <d_make_comp>
 8000e3e:	4682      	mov	sl, r0
 8000e40:	e70b      	b.n	8000c5a <d_exprlist+0x216>
 8000e42:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d1e5      	bne.n	8000e16 <d_exprlist+0x3d2>
 8000e4a:	68e3      	ldr	r3, [r4, #12]
 8000e4c:	781a      	ldrb	r2, [r3, #0]
 8000e4e:	2a5f      	cmp	r2, #95	; 0x5f
 8000e50:	d023      	beq.n	8000e9a <d_exprlist+0x456>
 8000e52:	4650      	mov	r0, sl
 8000e54:	4928      	ldr	r1, [pc, #160]	; (8000ef8 <d_exprlist+0x4b4>)
 8000e56:	f005 fd35 	bl	80068c4 <strcmp>
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	d03f      	beq.n	8000ede <d_exprlist+0x49a>
 8000e5e:	4620      	mov	r0, r4
 8000e60:	f000 f84e 	bl	8000f00 <d_expression_1>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	2138      	movs	r1, #56	; 0x38
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f7ff f9de 	bl	800022c <d_make_comp>
 8000e70:	e704      	b.n	8000c7c <d_exprlist+0x238>
 8000e72:	3301      	adds	r3, #1
 8000e74:	60e3      	str	r3, [r4, #12]
 8000e76:	2300      	movs	r3, #0
 8000e78:	e789      	b.n	8000d8e <d_exprlist+0x34a>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	f001 f83a 	bl	8001ef4 <d_operator_name>
 8000e80:	e77c      	b.n	8000d7c <d_exprlist+0x338>
 8000e82:	785a      	ldrb	r2, [r3, #1]
 8000e84:	2a69      	cmp	r2, #105	; 0x69
 8000e86:	f47f aeac 	bne.w	8000be2 <d_exprlist+0x19e>
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	60e3      	str	r3, [r4, #12]
 8000e8e:	2145      	movs	r1, #69	; 0x45
 8000e90:	4620      	mov	r0, r4
 8000e92:	f7ff fdd7 	bl	8000a44 <d_exprlist>
 8000e96:	4603      	mov	r3, r0
 8000e98:	e779      	b.n	8000d8e <d_exprlist+0x34a>
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	60e3      	str	r3, [r4, #12]
 8000e9e:	e7ba      	b.n	8000e16 <d_exprlist+0x3d2>
 8000ea0:	2a6f      	cmp	r2, #111	; 0x6f
 8000ea2:	d015      	beq.n	8000ed0 <d_exprlist+0x48c>
 8000ea4:	2a69      	cmp	r2, #105	; 0x69
 8000ea6:	f47f ae8d 	bne.w	8000bc4 <d_exprlist+0x180>
 8000eaa:	785a      	ldrb	r2, [r3, #1]
 8000eac:	2a6c      	cmp	r2, #108	; 0x6c
 8000eae:	f47f ae0e 	bne.w	8000ace <d_exprlist+0x8a>
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	60e3      	str	r3, [r4, #12]
 8000eb8:	2145      	movs	r1, #69	; 0x45
 8000eba:	4620      	mov	r0, r4
 8000ebc:	f7ff fdc2 	bl	8000a44 <d_exprlist>
 8000ec0:	462a      	mov	r2, r5
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2130      	movs	r1, #48	; 0x30
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	f7ff f9b0 	bl	800022c <d_make_comp>
 8000ecc:	4605      	mov	r5, r0
 8000ece:	e63f      	b.n	8000b50 <d_exprlist+0x10c>
 8000ed0:	785a      	ldrb	r2, [r3, #1]
 8000ed2:	2a6e      	cmp	r2, #110	; 0x6e
 8000ed4:	f47f adfb 	bne.w	8000ace <d_exprlist+0x8a>
 8000ed8:	3302      	adds	r3, #2
 8000eda:	60e3      	str	r3, [r4, #12]
 8000edc:	e5c9      	b.n	8000a72 <d_exprlist+0x2e>
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f000 fa08 	bl	80012f4 <d_template_args_1>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	e7be      	b.n	8000e66 <d_exprlist+0x422>
 8000ee8:	08022a38 	.word	0x08022a38
 8000eec:	08022a3c 	.word	0x08022a3c
 8000ef0:	08022a40 	.word	0x08022a40
 8000ef4:	08022a44 	.word	0x08022a44
 8000ef8:	08022a34 	.word	0x08022a34
 8000efc:	08022f3c 	.word	0x08022f3c

08000f00 <d_expression_1>:
 8000f00:	68c1      	ldr	r1, [r0, #12]
 8000f02:	780b      	ldrb	r3, [r1, #0]
 8000f04:	2b4c      	cmp	r3, #76	; 0x4c
 8000f06:	f000 8087 	beq.w	8001018 <d_expression_1+0x118>
 8000f0a:	2b54      	cmp	r3, #84	; 0x54
 8000f0c:	f000 8086 	beq.w	800101c <d_expression_1+0x11c>
 8000f10:	2b73      	cmp	r3, #115	; 0x73
 8000f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f16:	4604      	mov	r4, r0
 8000f18:	d037      	beq.n	8000f8a <d_expression_1+0x8a>
 8000f1a:	2b66      	cmp	r3, #102	; 0x66
 8000f1c:	d012      	beq.n	8000f44 <d_expression_1+0x44>
 8000f1e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000f22:	2a09      	cmp	r2, #9
 8000f24:	f200 81b8 	bhi.w	8001298 <d_expression_1+0x398>
 8000f28:	4620      	mov	r0, r4
 8000f2a:	f001 f8a3 	bl	8002074 <d_unqualified_name>
 8000f2e:	4605      	mov	r5, r0
 8000f30:	2800      	cmp	r0, #0
 8000f32:	d06d      	beq.n	8001010 <d_expression_1+0x110>
 8000f34:	68e3      	ldr	r3, [r4, #12]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b49      	cmp	r3, #73	; 0x49
 8000f3a:	f000 8088 	beq.w	800104e <d_expression_1+0x14e>
 8000f3e:	4628      	mov	r0, r5
 8000f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f44:	784b      	ldrb	r3, [r1, #1]
 8000f46:	2b70      	cmp	r3, #112	; 0x70
 8000f48:	d039      	beq.n	8000fbe <d_expression_1+0xbe>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	f000 ffd2 	bl	8001ef4 <d_operator_name>
 8000f50:	4605      	mov	r5, r0
 8000f52:	2800      	cmp	r0, #0
 8000f54:	d05c      	beq.n	8001010 <d_expression_1+0x110>
 8000f56:	7803      	ldrb	r3, [r0, #0]
 8000f58:	2b31      	cmp	r3, #49	; 0x31
 8000f5a:	d061      	beq.n	8001020 <d_expression_1+0x120>
 8000f5c:	2b32      	cmp	r3, #50	; 0x32
 8000f5e:	d025      	beq.n	8000fac <d_expression_1+0xac>
 8000f60:	2b33      	cmp	r3, #51	; 0x33
 8000f62:	d155      	bne.n	8001010 <d_expression_1+0x110>
 8000f64:	68e3      	ldr	r3, [r4, #12]
 8000f66:	781a      	ldrb	r2, [r3, #0]
 8000f68:	2a5f      	cmp	r2, #95	; 0x5f
 8000f6a:	f040 81b4 	bne.w	80012d6 <d_expression_1+0x3d6>
 8000f6e:	3301      	adds	r3, #1
 8000f70:	60e3      	str	r3, [r4, #12]
 8000f72:	2145      	movs	r1, #69	; 0x45
 8000f74:	4620      	mov	r0, r4
 8000f76:	f7ff fd65 	bl	8000a44 <d_exprlist>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	462a      	mov	r2, r5
 8000f7e:	4620      	mov	r0, r4
 8000f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f84:	2136      	movs	r1, #54	; 0x36
 8000f86:	f7ff b951 	b.w	800022c <d_make_comp>
 8000f8a:	784b      	ldrb	r3, [r1, #1]
 8000f8c:	2b72      	cmp	r3, #114	; 0x72
 8000f8e:	d069      	beq.n	8001064 <d_expression_1+0x164>
 8000f90:	2b70      	cmp	r3, #112	; 0x70
 8000f92:	d1da      	bne.n	8000f4a <d_expression_1+0x4a>
 8000f94:	3102      	adds	r1, #2
 8000f96:	60c1      	str	r1, [r0, #12]
 8000f98:	f7ff ffb2 	bl	8000f00 <d_expression_1>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	214a      	movs	r1, #74	; 0x4a
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa8:	f7ff b940 	b.w	800022c <d_make_comp>
 8000fac:	6843      	ldr	r3, [r0, #4]
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d82e      	bhi.n	8001010 <d_expression_1+0x110>
 8000fb2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000fb6:	0071      	.short	0x0071
 8000fb8:	002d0190 	.word	0x002d0190
 8000fbc:	002d      	.short	0x002d
 8000fbe:	1c8b      	adds	r3, r1, #2
 8000fc0:	60c3      	str	r3, [r0, #12]
 8000fc2:	788b      	ldrb	r3, [r1, #2]
 8000fc4:	2b54      	cmp	r3, #84	; 0x54
 8000fc6:	d063      	beq.n	8001090 <d_expression_1+0x190>
 8000fc8:	f7ff fac2 	bl	8000550 <d_compact_number>
 8000fcc:	43c3      	mvns	r3, r0
 8000fce:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8000fd2:	d01d      	beq.n	8001010 <d_expression_1+0x110>
 8000fd4:	3001      	adds	r0, #1
 8000fd6:	6963      	ldr	r3, [r4, #20]
 8000fd8:	69a2      	ldr	r2, [r4, #24]
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	da18      	bge.n	8001010 <d_expression_1+0x110>
 8000fde:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000fe2:	6921      	ldr	r1, [r4, #16]
 8000fe4:	0092      	lsls	r2, r2, #2
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	188d      	adds	r5, r1, r2
 8000fea:	6163      	str	r3, [r4, #20]
 8000fec:	d0a7      	beq.n	8000f3e <d_expression_1+0x3e>
 8000fee:	2306      	movs	r3, #6
 8000ff0:	548b      	strb	r3, [r1, r2]
 8000ff2:	6068      	str	r0, [r5, #4]
 8000ff4:	e7a3      	b.n	8000f3e <d_expression_1+0x3e>
 8000ff6:	2b74      	cmp	r3, #116	; 0x74
 8000ff8:	d1a7      	bne.n	8000f4a <d_expression_1+0x4a>
 8000ffa:	784b      	ldrb	r3, [r1, #1]
 8000ffc:	2b6c      	cmp	r3, #108	; 0x6c
 8000ffe:	d1a4      	bne.n	8000f4a <d_expression_1+0x4a>
 8001000:	f000 fb98 	bl	8001734 <d_type>
 8001004:	68e1      	ldr	r1, [r4, #12]
 8001006:	4605      	mov	r5, r0
 8001008:	784b      	ldrb	r3, [r1, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	f040 814e 	bne.w	80012ac <d_expression_1+0x3ac>
 8001010:	2500      	movs	r5, #0
 8001012:	4628      	mov	r0, r5
 8001014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001018:	f001 bc7a 	b.w	8002910 <d_expr_primary>
 800101c:	f7ff bab4 	b.w	8000588 <d_template_param>
 8001020:	6847      	ldr	r7, [r0, #4]
 8001022:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	683e      	ldr	r6, [r7, #0]
 8001028:	3a02      	subs	r2, #2
 800102a:	4413      	add	r3, r2
 800102c:	6323      	str	r3, [r4, #48]	; 0x30
 800102e:	4630      	mov	r0, r6
 8001030:	49aa      	ldr	r1, [pc, #680]	; (80012dc <d_expression_1+0x3dc>)
 8001032:	f005 fc47 	bl	80068c4 <strcmp>
 8001036:	2800      	cmp	r0, #0
 8001038:	f000 80ab 	beq.w	8001192 <d_expression_1+0x292>
 800103c:	68ff      	ldr	r7, [r7, #12]
 800103e:	2f03      	cmp	r7, #3
 8001040:	d8e6      	bhi.n	8001010 <d_expression_1+0x110>
 8001042:	e8df f017 	tbh	[pc, r7, lsl #1]
 8001046:	0029      	.short	0x0029
 8001048:	007100ff 	.word	0x007100ff
 800104c:	0031      	.short	0x0031
 800104e:	4620      	mov	r0, r4
 8001050:	f000 f9ae 	bl	80013b0 <d_template_args>
 8001054:	462a      	mov	r2, r5
 8001056:	4603      	mov	r3, r0
 8001058:	2104      	movs	r1, #4
 800105a:	4620      	mov	r0, r4
 800105c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001060:	f7ff b8e4 	b.w	800022c <d_make_comp>
 8001064:	3102      	adds	r1, #2
 8001066:	60c1      	str	r1, [r0, #12]
 8001068:	f000 fb64 	bl	8001734 <d_type>
 800106c:	4605      	mov	r5, r0
 800106e:	4620      	mov	r0, r4
 8001070:	f001 f800 	bl	8002074 <d_unqualified_name>
 8001074:	68e3      	ldr	r3, [r4, #12]
 8001076:	4606      	mov	r6, r0
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b49      	cmp	r3, #73	; 0x49
 800107c:	f000 80ae 	beq.w	80011dc <d_expression_1+0x2dc>
 8001080:	4603      	mov	r3, r0
 8001082:	462a      	mov	r2, r5
 8001084:	4620      	mov	r0, r4
 8001086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800108a:	2101      	movs	r1, #1
 800108c:	f7ff b8ce 	b.w	800022c <d_make_comp>
 8001090:	3103      	adds	r1, #3
 8001092:	60c1      	str	r1, [r0, #12]
 8001094:	2000      	movs	r0, #0
 8001096:	e79e      	b.n	8000fd6 <d_expression_1+0xd6>
 8001098:	462a      	mov	r2, r5
 800109a:	4620      	mov	r0, r4
 800109c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010a0:	2300      	movs	r3, #0
 80010a2:	2135      	movs	r1, #53	; 0x35
 80010a4:	f7ff b8c2 	b.w	800022c <d_make_comp>
 80010a8:	2e00      	cmp	r6, #0
 80010aa:	d0b1      	beq.n	8001010 <d_expression_1+0x110>
 80010ac:	498c      	ldr	r1, [pc, #560]	; (80012e0 <d_expression_1+0x3e0>)
 80010ae:	4630      	mov	r0, r6
 80010b0:	f005 fc08 	bl	80068c4 <strcmp>
 80010b4:	2800      	cmp	r0, #0
 80010b6:	d071      	beq.n	800119c <d_expression_1+0x29c>
 80010b8:	7833      	ldrb	r3, [r6, #0]
 80010ba:	2b66      	cmp	r3, #102	; 0x66
 80010bc:	f000 80b2 	beq.w	8001224 <d_expression_1+0x324>
 80010c0:	2b6e      	cmp	r3, #110	; 0x6e
 80010c2:	d1a5      	bne.n	8001010 <d_expression_1+0x110>
 80010c4:	7873      	ldrb	r3, [r6, #1]
 80010c6:	2b77      	cmp	r3, #119	; 0x77
 80010c8:	d001      	beq.n	80010ce <d_expression_1+0x1ce>
 80010ca:	2b61      	cmp	r3, #97	; 0x61
 80010cc:	d1a0      	bne.n	8001010 <d_expression_1+0x110>
 80010ce:	215f      	movs	r1, #95	; 0x5f
 80010d0:	4620      	mov	r0, r4
 80010d2:	f7ff fcb7 	bl	8000a44 <d_exprlist>
 80010d6:	4606      	mov	r6, r0
 80010d8:	4620      	mov	r0, r4
 80010da:	f000 fb2b 	bl	8001734 <d_type>
 80010de:	68e3      	ldr	r3, [r4, #12]
 80010e0:	4607      	mov	r7, r0
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	2a45      	cmp	r2, #69	; 0x45
 80010e6:	f000 8099 	beq.w	800121c <d_expression_1+0x31c>
 80010ea:	2a70      	cmp	r2, #112	; 0x70
 80010ec:	f000 809e 	beq.w	800122c <d_expression_1+0x32c>
 80010f0:	2a69      	cmp	r2, #105	; 0x69
 80010f2:	d18d      	bne.n	8001010 <d_expression_1+0x110>
 80010f4:	785b      	ldrb	r3, [r3, #1]
 80010f6:	2b6c      	cmp	r3, #108	; 0x6c
 80010f8:	d18a      	bne.n	8001010 <d_expression_1+0x110>
 80010fa:	4620      	mov	r0, r4
 80010fc:	f7ff ff00 	bl	8000f00 <d_expression_1>
 8001100:	4603      	mov	r3, r0
 8001102:	463a      	mov	r2, r7
 8001104:	213b      	movs	r1, #59	; 0x3b
 8001106:	4620      	mov	r0, r4
 8001108:	f7ff f890 	bl	800022c <d_make_comp>
 800110c:	4632      	mov	r2, r6
 800110e:	4603      	mov	r3, r0
 8001110:	213a      	movs	r1, #58	; 0x3a
 8001112:	4620      	mov	r0, r4
 8001114:	f7ff f88a 	bl	800022c <d_make_comp>
 8001118:	462a      	mov	r2, r5
 800111a:	4603      	mov	r3, r0
 800111c:	2139      	movs	r1, #57	; 0x39
 800111e:	4620      	mov	r0, r4
 8001120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001124:	f7ff b882 	b.w	800022c <d_make_comp>
 8001128:	2e00      	cmp	r6, #0
 800112a:	f43f af71 	beq.w	8001010 <d_expression_1+0x110>
 800112e:	686b      	ldr	r3, [r5, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	785a      	ldrb	r2, [r3, #1]
 8001134:	2a63      	cmp	r2, #99	; 0x63
 8001136:	d044      	beq.n	80011c2 <d_expression_1+0x2c2>
 8001138:	7833      	ldrb	r3, [r6, #0]
 800113a:	2b66      	cmp	r3, #102	; 0x66
 800113c:	d059      	beq.n	80011f2 <d_expression_1+0x2f2>
 800113e:	4620      	mov	r0, r4
 8001140:	f7ff fede 	bl	8000f00 <d_expression_1>
 8001144:	4607      	mov	r7, r0
 8001146:	4967      	ldr	r1, [pc, #412]	; (80012e4 <d_expression_1+0x3e4>)
 8001148:	4630      	mov	r0, r6
 800114a:	f005 fbbb 	bl	80068c4 <strcmp>
 800114e:	b390      	cbz	r0, 80011b6 <d_expression_1+0x2b6>
 8001150:	4965      	ldr	r1, [pc, #404]	; (80012e8 <d_expression_1+0x3e8>)
 8001152:	4630      	mov	r0, r6
 8001154:	f005 fbb6 	bl	80068c4 <strcmp>
 8001158:	b128      	cbz	r0, 8001166 <d_expression_1+0x266>
 800115a:	4630      	mov	r0, r6
 800115c:	4963      	ldr	r1, [pc, #396]	; (80012ec <d_expression_1+0x3ec>)
 800115e:	f005 fbb1 	bl	80068c4 <strcmp>
 8001162:	2800      	cmp	r0, #0
 8001164:	d14a      	bne.n	80011fc <d_expression_1+0x2fc>
 8001166:	4620      	mov	r0, r4
 8001168:	f000 ff84 	bl	8002074 <d_unqualified_name>
 800116c:	68e3      	ldr	r3, [r4, #12]
 800116e:	4606      	mov	r6, r0
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b49      	cmp	r3, #73	; 0x49
 8001174:	d047      	beq.n	8001206 <d_expression_1+0x306>
 8001176:	4633      	mov	r3, r6
 8001178:	463a      	mov	r2, r7
 800117a:	2138      	movs	r1, #56	; 0x38
 800117c:	4620      	mov	r0, r4
 800117e:	f7ff f855 	bl	800022c <d_make_comp>
 8001182:	462a      	mov	r2, r5
 8001184:	4603      	mov	r3, r0
 8001186:	2137      	movs	r1, #55	; 0x37
 8001188:	4620      	mov	r0, r4
 800118a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800118e:	f7ff b84d 	b.w	800022c <d_make_comp>
 8001192:	4620      	mov	r0, r4
 8001194:	f000 face 	bl	8001734 <d_type>
 8001198:	4603      	mov	r3, r0
 800119a:	e6ef      	b.n	8000f7c <d_expression_1+0x7c>
 800119c:	4620      	mov	r0, r4
 800119e:	f7ff feaf 	bl	8000f00 <d_expression_1>
 80011a2:	4606      	mov	r6, r0
 80011a4:	4620      	mov	r0, r4
 80011a6:	f7ff feab 	bl	8000f00 <d_expression_1>
 80011aa:	4607      	mov	r7, r0
 80011ac:	4620      	mov	r0, r4
 80011ae:	f7ff fea7 	bl	8000f00 <d_expression_1>
 80011b2:	4603      	mov	r3, r0
 80011b4:	e7a5      	b.n	8001102 <d_expression_1+0x202>
 80011b6:	2145      	movs	r1, #69	; 0x45
 80011b8:	4620      	mov	r0, r4
 80011ba:	f7ff fc43 	bl	8000a44 <d_exprlist>
 80011be:	4606      	mov	r6, r0
 80011c0:	e7d9      	b.n	8001176 <d_expression_1+0x276>
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80011c8:	2a01      	cmp	r2, #1
 80011ca:	d902      	bls.n	80011d2 <d_expression_1+0x2d2>
 80011cc:	3b72      	subs	r3, #114	; 0x72
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d8b2      	bhi.n	8001138 <d_expression_1+0x238>
 80011d2:	4620      	mov	r0, r4
 80011d4:	f000 faae 	bl	8001734 <d_type>
 80011d8:	4607      	mov	r7, r0
 80011da:	e7b4      	b.n	8001146 <d_expression_1+0x246>
 80011dc:	4620      	mov	r0, r4
 80011de:	f000 f8e7 	bl	80013b0 <d_template_args>
 80011e2:	4632      	mov	r2, r6
 80011e4:	4603      	mov	r3, r0
 80011e6:	2104      	movs	r1, #4
 80011e8:	4620      	mov	r0, r4
 80011ea:	f7ff f81f 	bl	800022c <d_make_comp>
 80011ee:	4603      	mov	r3, r0
 80011f0:	e747      	b.n	8001082 <d_expression_1+0x182>
 80011f2:	4620      	mov	r0, r4
 80011f4:	f000 fe7e 	bl	8001ef4 <d_operator_name>
 80011f8:	4607      	mov	r7, r0
 80011fa:	e7a4      	b.n	8001146 <d_expression_1+0x246>
 80011fc:	4620      	mov	r0, r4
 80011fe:	f7ff fe7f 	bl	8000f00 <d_expression_1>
 8001202:	4606      	mov	r6, r0
 8001204:	e7b7      	b.n	8001176 <d_expression_1+0x276>
 8001206:	4620      	mov	r0, r4
 8001208:	f000 f8d2 	bl	80013b0 <d_template_args>
 800120c:	4632      	mov	r2, r6
 800120e:	4603      	mov	r3, r0
 8001210:	2104      	movs	r1, #4
 8001212:	4620      	mov	r0, r4
 8001214:	f7ff f80a 	bl	800022c <d_make_comp>
 8001218:	4606      	mov	r6, r0
 800121a:	e7ac      	b.n	8001176 <d_expression_1+0x276>
 800121c:	3301      	adds	r3, #1
 800121e:	60e3      	str	r3, [r4, #12]
 8001220:	2300      	movs	r3, #0
 8001222:	e76e      	b.n	8001102 <d_expression_1+0x202>
 8001224:	4620      	mov	r0, r4
 8001226:	f000 fe65 	bl	8001ef4 <d_operator_name>
 800122a:	e7ba      	b.n	80011a2 <d_expression_1+0x2a2>
 800122c:	785a      	ldrb	r2, [r3, #1]
 800122e:	2a69      	cmp	r2, #105	; 0x69
 8001230:	f47f aeee 	bne.w	8001010 <d_expression_1+0x110>
 8001234:	3302      	adds	r3, #2
 8001236:	60e3      	str	r3, [r4, #12]
 8001238:	2145      	movs	r1, #69	; 0x45
 800123a:	4620      	mov	r0, r4
 800123c:	f7ff fc02 	bl	8000a44 <d_exprlist>
 8001240:	4603      	mov	r3, r0
 8001242:	e75e      	b.n	8001102 <d_expression_1+0x202>
 8001244:	2e00      	cmp	r6, #0
 8001246:	d046      	beq.n	80012d6 <d_expression_1+0x3d6>
 8001248:	7833      	ldrb	r3, [r6, #0]
 800124a:	2b70      	cmp	r3, #112	; 0x70
 800124c:	d015      	beq.n	800127a <d_expression_1+0x37a>
 800124e:	2b6d      	cmp	r3, #109	; 0x6d
 8001250:	d013      	beq.n	800127a <d_expression_1+0x37a>
 8001252:	2700      	movs	r7, #0
 8001254:	4630      	mov	r0, r6
 8001256:	4926      	ldr	r1, [pc, #152]	; (80012f0 <d_expression_1+0x3f0>)
 8001258:	f005 fb34 	bl	80068c4 <strcmp>
 800125c:	b1b8      	cbz	r0, 800128e <d_expression_1+0x38e>
 800125e:	4620      	mov	r0, r4
 8001260:	f7ff fe4e 	bl	8000f00 <d_expression_1>
 8001264:	4603      	mov	r3, r0
 8001266:	2f00      	cmp	r7, #0
 8001268:	f43f ae88 	beq.w	8000f7c <d_expression_1+0x7c>
 800126c:	461a      	mov	r2, r3
 800126e:	2138      	movs	r1, #56	; 0x38
 8001270:	4620      	mov	r0, r4
 8001272:	f7fe ffdb 	bl	800022c <d_make_comp>
 8001276:	4603      	mov	r3, r0
 8001278:	e680      	b.n	8000f7c <d_expression_1+0x7c>
 800127a:	7872      	ldrb	r2, [r6, #1]
 800127c:	429a      	cmp	r2, r3
 800127e:	d1e8      	bne.n	8001252 <d_expression_1+0x352>
 8001280:	68e3      	ldr	r3, [r4, #12]
 8001282:	781a      	ldrb	r2, [r3, #0]
 8001284:	2a5f      	cmp	r2, #95	; 0x5f
 8001286:	d1e5      	bne.n	8001254 <d_expression_1+0x354>
 8001288:	3301      	adds	r3, #1
 800128a:	60e3      	str	r3, [r4, #12]
 800128c:	e7e1      	b.n	8001252 <d_expression_1+0x352>
 800128e:	4620      	mov	r0, r4
 8001290:	f000 f830 	bl	80012f4 <d_template_args_1>
 8001294:	4603      	mov	r3, r0
 8001296:	e7e6      	b.n	8001266 <d_expression_1+0x366>
 8001298:	2b6f      	cmp	r3, #111	; 0x6f
 800129a:	d015      	beq.n	80012c8 <d_expression_1+0x3c8>
 800129c:	2b69      	cmp	r3, #105	; 0x69
 800129e:	f47f aeaa 	bne.w	8000ff6 <d_expression_1+0xf6>
 80012a2:	784b      	ldrb	r3, [r1, #1]
 80012a4:	2b6c      	cmp	r3, #108	; 0x6c
 80012a6:	f47f ae50 	bne.w	8000f4a <d_expression_1+0x4a>
 80012aa:	2500      	movs	r5, #0
 80012ac:	3102      	adds	r1, #2
 80012ae:	60e1      	str	r1, [r4, #12]
 80012b0:	4620      	mov	r0, r4
 80012b2:	2145      	movs	r1, #69	; 0x45
 80012b4:	f7ff fbc6 	bl	8000a44 <d_exprlist>
 80012b8:	462a      	mov	r2, r5
 80012ba:	4603      	mov	r3, r0
 80012bc:	2130      	movs	r1, #48	; 0x30
 80012be:	4620      	mov	r0, r4
 80012c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012c4:	f7fe bfb2 	b.w	800022c <d_make_comp>
 80012c8:	784b      	ldrb	r3, [r1, #1]
 80012ca:	2b6e      	cmp	r3, #110	; 0x6e
 80012cc:	f47f ae3d 	bne.w	8000f4a <d_expression_1+0x4a>
 80012d0:	3102      	adds	r1, #2
 80012d2:	60c1      	str	r1, [r0, #12]
 80012d4:	e628      	b.n	8000f28 <d_expression_1+0x28>
 80012d6:	2700      	movs	r7, #0
 80012d8:	e7c1      	b.n	800125e <d_expression_1+0x35e>
 80012da:	bf00      	nop
 80012dc:	08022f3c 	.word	0x08022f3c
 80012e0:	08022a44 	.word	0x08022a44
 80012e4:	08022a38 	.word	0x08022a38
 80012e8:	08022a3c 	.word	0x08022a3c
 80012ec:	08022a40 	.word	0x08022a40
 80012f0:	08022a34 	.word	0x08022a34

080012f4 <d_template_args_1>:
 80012f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012f8:	68c2      	ldr	r2, [r0, #12]
 80012fa:	b082      	sub	sp, #8
 80012fc:	7813      	ldrb	r3, [r2, #0]
 80012fe:	4604      	mov	r4, r0
 8001300:	2b45      	cmp	r3, #69	; 0x45
 8001302:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8001304:	d049      	beq.n	800139a <d_template_args_1+0xa6>
 8001306:	2100      	movs	r1, #0
 8001308:	2601      	movs	r6, #1
 800130a:	ad02      	add	r5, sp, #8
 800130c:	f845 1d04 	str.w	r1, [r5, #-4]!
 8001310:	3b49      	subs	r3, #73	; 0x49
 8001312:	2b0f      	cmp	r3, #15
 8001314:	d83a      	bhi.n	800138c <d_template_args_1+0x98>
 8001316:	e8df f003 	tbb	[pc, r3]
 800131a:	3535      	.short	0x3535
 800131c:	39391a39 	.word	0x39391a39
 8001320:	39393939 	.word	0x39393939
 8001324:	39393939 	.word	0x39393939
 8001328:	0839      	.short	0x0839
 800132a:	3201      	adds	r2, #1
 800132c:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
 8001330:	60e2      	str	r2, [r4, #12]
 8001332:	4620      	mov	r0, r4
 8001334:	6366      	str	r6, [r4, #52]	; 0x34
 8001336:	f7ff fde3 	bl	8000f00 <d_expression_1>
 800133a:	68e3      	ldr	r3, [r4, #12]
 800133c:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 8001340:	781a      	ldrb	r2, [r3, #0]
 8001342:	2a45      	cmp	r2, #69	; 0x45
 8001344:	d026      	beq.n	8001394 <d_template_args_1+0xa0>
 8001346:	2000      	movs	r0, #0
 8001348:	b002      	add	sp, #8
 800134a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800134e:	4620      	mov	r0, r4
 8001350:	f001 fade 	bl	8002910 <d_expr_primary>
 8001354:	2800      	cmp	r0, #0
 8001356:	d0f6      	beq.n	8001346 <d_template_args_1+0x52>
 8001358:	4602      	mov	r2, r0
 800135a:	2300      	movs	r3, #0
 800135c:	212f      	movs	r1, #47	; 0x2f
 800135e:	4620      	mov	r0, r4
 8001360:	f7fe ff64 	bl	800022c <d_make_comp>
 8001364:	6028      	str	r0, [r5, #0]
 8001366:	f100 0508 	add.w	r5, r0, #8
 800136a:	2800      	cmp	r0, #0
 800136c:	d0eb      	beq.n	8001346 <d_template_args_1+0x52>
 800136e:	68e2      	ldr	r2, [r4, #12]
 8001370:	7813      	ldrb	r3, [r2, #0]
 8001372:	2b45      	cmp	r3, #69	; 0x45
 8001374:	d1cc      	bne.n	8001310 <d_template_args_1+0x1c>
 8001376:	9801      	ldr	r0, [sp, #4]
 8001378:	3201      	adds	r2, #1
 800137a:	60e2      	str	r2, [r4, #12]
 800137c:	62e7      	str	r7, [r4, #44]	; 0x2c
 800137e:	b002      	add	sp, #8
 8001380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001384:	4620      	mov	r0, r4
 8001386:	f000 f813 	bl	80013b0 <d_template_args>
 800138a:	e7e3      	b.n	8001354 <d_template_args_1+0x60>
 800138c:	4620      	mov	r0, r4
 800138e:	f000 f9d1 	bl	8001734 <d_type>
 8001392:	e7df      	b.n	8001354 <d_template_args_1+0x60>
 8001394:	3301      	adds	r3, #1
 8001396:	60e3      	str	r3, [r4, #12]
 8001398:	e7dc      	b.n	8001354 <d_template_args_1+0x60>
 800139a:	2300      	movs	r3, #0
 800139c:	3201      	adds	r2, #1
 800139e:	60c2      	str	r2, [r0, #12]
 80013a0:	212f      	movs	r1, #47	; 0x2f
 80013a2:	461a      	mov	r2, r3
 80013a4:	b002      	add	sp, #8
 80013a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80013aa:	f7fe bf3f 	b.w	800022c <d_make_comp>
 80013ae:	bf00      	nop

080013b0 <d_template_args>:
 80013b0:	68c2      	ldr	r2, [r0, #12]
 80013b2:	7813      	ldrb	r3, [r2, #0]
 80013b4:	3b49      	subs	r3, #73	; 0x49
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d802      	bhi.n	80013c0 <d_template_args+0x10>
 80013ba:	3201      	adds	r2, #1
 80013bc:	60c2      	str	r2, [r0, #12]
 80013be:	e799      	b.n	80012f4 <d_template_args_1>
 80013c0:	2000      	movs	r0, #0
 80013c2:	4770      	bx	lr

080013c4 <d_name>:
 80013c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013c8:	68c2      	ldr	r2, [r0, #12]
 80013ca:	b085      	sub	sp, #20
 80013cc:	7813      	ldrb	r3, [r2, #0]
 80013ce:	4605      	mov	r5, r0
 80013d0:	3b4e      	subs	r3, #78	; 0x4e
 80013d2:	2b0c      	cmp	r3, #12
 80013d4:	d870      	bhi.n	80014b8 <d_name+0xf4>
 80013d6:	e8df f003 	tbb	[pc, r3]
 80013da:	6f1e      	.short	0x6f1e
 80013dc:	5b6f6f6f 	.word	0x5b6f6f6f
 80013e0:	6f6f176f 	.word	0x6f6f176f
 80013e4:	6f6f      	.short	0x6f6f
 80013e6:	07          	.byte	0x07
 80013e7:	00          	.byte	0x00
 80013e8:	3201      	adds	r2, #1
 80013ea:	2100      	movs	r1, #0
 80013ec:	60c2      	str	r2, [r0, #12]
 80013ee:	f000 ffb1 	bl	8002354 <d_encoding>
 80013f2:	68eb      	ldr	r3, [r5, #12]
 80013f4:	4606      	mov	r6, r0
 80013f6:	7819      	ldrb	r1, [r3, #0]
 80013f8:	2945      	cmp	r1, #69	; 0x45
 80013fa:	f000 8099 	beq.w	8001530 <d_name+0x16c>
 80013fe:	2200      	movs	r2, #0
 8001400:	4610      	mov	r0, r2
 8001402:	b005      	add	sp, #20
 8001404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001408:	f000 fe34 	bl	8002074 <d_unqualified_name>
 800140c:	4602      	mov	r2, r0
 800140e:	4610      	mov	r0, r2
 8001410:	b005      	add	sp, #20
 8001412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001416:	3201      	adds	r2, #1
 8001418:	60c2      	str	r2, [r0, #12]
 800141a:	a903      	add	r1, sp, #12
 800141c:	2201      	movs	r2, #1
 800141e:	f7fe ff51 	bl	80002c4 <d_cv_qualifiers>
 8001422:	4681      	mov	r9, r0
 8001424:	2800      	cmp	r0, #0
 8001426:	d0ea      	beq.n	80013fe <d_name+0x3a>
 8001428:	2100      	movs	r1, #0
 800142a:	4628      	mov	r0, r5
 800142c:	f7fe ffb0 	bl	8000390 <d_ref_qualifier>
 8001430:	2700      	movs	r7, #0
 8001432:	4680      	mov	r8, r0
 8001434:	68ea      	ldr	r2, [r5, #12]
 8001436:	4ebc      	ldr	r6, [pc, #752]	; (8001728 <d_name+0x364>)
 8001438:	7814      	ldrb	r4, [r2, #0]
 800143a:	2c00      	cmp	r4, #0
 800143c:	f000 80ef 	beq.w	800161e <d_name+0x25a>
 8001440:	2c44      	cmp	r4, #68	; 0x44
 8001442:	f000 80d1 	beq.w	80015e8 <d_name+0x224>
 8001446:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b1c      	cmp	r3, #28
 800144e:	f240 80a8 	bls.w	80015a2 <d_name+0x1de>
 8001452:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8001456:	2b19      	cmp	r3, #25
 8001458:	f240 80a8 	bls.w	80015ac <d_name+0x1e8>
 800145c:	2c55      	cmp	r4, #85	; 0x55
 800145e:	f000 80e5 	beq.w	800162c <d_name+0x268>
 8001462:	2c53      	cmp	r4, #83	; 0x53
 8001464:	f000 80cc 	beq.w	8001600 <d_name+0x23c>
 8001468:	2c49      	cmp	r4, #73	; 0x49
 800146a:	f000 80e1 	beq.w	8001630 <d_name+0x26c>
 800146e:	2c54      	cmp	r4, #84	; 0x54
 8001470:	f000 811c 	beq.w	80016ac <d_name+0x2e8>
 8001474:	2c45      	cmp	r4, #69	; 0x45
 8001476:	f000 8142 	beq.w	80016fe <d_name+0x33a>
 800147a:	2c4d      	cmp	r4, #77	; 0x4d
 800147c:	f040 80cf 	bne.w	800161e <d_name+0x25a>
 8001480:	2f00      	cmp	r7, #0
 8001482:	f000 80cc 	beq.w	800161e <d_name+0x25a>
 8001486:	1c53      	adds	r3, r2, #1
 8001488:	60eb      	str	r3, [r5, #12]
 800148a:	7854      	ldrb	r4, [r2, #1]
 800148c:	461a      	mov	r2, r3
 800148e:	e7d4      	b.n	800143a <d_name+0x76>
 8001490:	7853      	ldrb	r3, [r2, #1]
 8001492:	2b74      	cmp	r3, #116	; 0x74
 8001494:	d031      	beq.n	80014fa <d_name+0x136>
 8001496:	2100      	movs	r1, #0
 8001498:	f7ff f910 	bl	80006bc <d_substitution>
 800149c:	68eb      	ldr	r3, [r5, #12]
 800149e:	4602      	mov	r2, r0
 80014a0:	7819      	ldrb	r1, [r3, #0]
 80014a2:	2949      	cmp	r1, #73	; 0x49
 80014a4:	d1b3      	bne.n	800140e <d_name+0x4a>
 80014a6:	3301      	adds	r3, #1
 80014a8:	60eb      	str	r3, [r5, #12]
 80014aa:	4628      	mov	r0, r5
 80014ac:	9201      	str	r2, [sp, #4]
 80014ae:	f7ff ff21 	bl	80012f4 <d_template_args_1>
 80014b2:	9a01      	ldr	r2, [sp, #4]
 80014b4:	4603      	mov	r3, r0
 80014b6:	e017      	b.n	80014e8 <d_name+0x124>
 80014b8:	f000 fddc 	bl	8002074 <d_unqualified_name>
 80014bc:	68eb      	ldr	r3, [r5, #12]
 80014be:	4602      	mov	r2, r0
 80014c0:	7819      	ldrb	r1, [r3, #0]
 80014c2:	2949      	cmp	r1, #73	; 0x49
 80014c4:	d1a3      	bne.n	800140e <d_name+0x4a>
 80014c6:	2a00      	cmp	r2, #0
 80014c8:	d099      	beq.n	80013fe <d_name+0x3a>
 80014ca:	6a29      	ldr	r1, [r5, #32]
 80014cc:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80014ce:	4281      	cmp	r1, r0
 80014d0:	da95      	bge.n	80013fe <d_name+0x3a>
 80014d2:	69ec      	ldr	r4, [r5, #28]
 80014d4:	1c48      	adds	r0, r1, #1
 80014d6:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
 80014da:	6228      	str	r0, [r5, #32]
 80014dc:	7819      	ldrb	r1, [r3, #0]
 80014de:	3949      	subs	r1, #73	; 0x49
 80014e0:	2901      	cmp	r1, #1
 80014e2:	bf88      	it	hi
 80014e4:	2300      	movhi	r3, #0
 80014e6:	d9de      	bls.n	80014a6 <d_name+0xe2>
 80014e8:	4628      	mov	r0, r5
 80014ea:	2104      	movs	r1, #4
 80014ec:	f7fe fe9e 	bl	800022c <d_make_comp>
 80014f0:	4602      	mov	r2, r0
 80014f2:	4610      	mov	r0, r2
 80014f4:	b005      	add	sp, #20
 80014f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014fa:	6943      	ldr	r3, [r0, #20]
 80014fc:	6981      	ldr	r1, [r0, #24]
 80014fe:	3202      	adds	r2, #2
 8001500:	428b      	cmp	r3, r1
 8001502:	60c2      	str	r2, [r0, #12]
 8001504:	f2c0 80a8 	blt.w	8001658 <d_name+0x294>
 8001508:	2400      	movs	r4, #0
 800150a:	4628      	mov	r0, r5
 800150c:	f000 fdb2 	bl	8002074 <d_unqualified_name>
 8001510:	4622      	mov	r2, r4
 8001512:	4603      	mov	r3, r0
 8001514:	2101      	movs	r1, #1
 8001516:	4628      	mov	r0, r5
 8001518:	f7fe fe88 	bl	800022c <d_make_comp>
 800151c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800151e:	68eb      	ldr	r3, [r5, #12]
 8001520:	3103      	adds	r1, #3
 8001522:	6329      	str	r1, [r5, #48]	; 0x30
 8001524:	7819      	ldrb	r1, [r3, #0]
 8001526:	4602      	mov	r2, r0
 8001528:	2949      	cmp	r1, #73	; 0x49
 800152a:	f47f af70 	bne.w	800140e <d_name+0x4a>
 800152e:	e7ca      	b.n	80014c6 <d_name+0x102>
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	60ea      	str	r2, [r5, #12]
 8001534:	7859      	ldrb	r1, [r3, #1]
 8001536:	2973      	cmp	r1, #115	; 0x73
 8001538:	f000 80a0 	beq.w	800167c <d_name+0x2b8>
 800153c:	2964      	cmp	r1, #100	; 0x64
 800153e:	f000 80b9 	beq.w	80016b4 <d_name+0x2f0>
 8001542:	4628      	mov	r0, r5
 8001544:	f7ff ff3e 	bl	80013c4 <d_name>
 8001548:	4604      	mov	r4, r0
 800154a:	2800      	cmp	r0, #0
 800154c:	d079      	beq.n	8001642 <d_name+0x27e>
 800154e:	7803      	ldrb	r3, [r0, #0]
 8001550:	2b45      	cmp	r3, #69	; 0x45
 8001552:	f000 8091 	beq.w	8001678 <d_name+0x2b4>
 8001556:	2b47      	cmp	r3, #71	; 0x47
 8001558:	f000 808e 	beq.w	8001678 <d_name+0x2b4>
 800155c:	68eb      	ldr	r3, [r5, #12]
 800155e:	781a      	ldrb	r2, [r3, #0]
 8001560:	2a5f      	cmp	r2, #95	; 0x5f
 8001562:	f040 8089 	bne.w	8001678 <d_name+0x2b4>
 8001566:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800156a:	4628      	mov	r0, r5
 800156c:	3301      	adds	r3, #1
 800156e:	f840 3f0c 	str.w	r3, [r0, #12]!
 8001572:	f7fe ffab 	bl	80004cc <d_number.isra.0>
 8001576:	2800      	cmp	r0, #0
 8001578:	f6ff af41 	blt.w	80013fe <d_name+0x3a>
 800157c:	1c7b      	adds	r3, r7, #1
 800157e:	d07b      	beq.n	8001678 <d_name+0x2b4>
 8001580:	696b      	ldr	r3, [r5, #20]
 8001582:	69aa      	ldr	r2, [r5, #24]
 8001584:	4293      	cmp	r3, r2
 8001586:	da5c      	bge.n	8001642 <d_name+0x27e>
 8001588:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800158c:	6929      	ldr	r1, [r5, #16]
 800158e:	3301      	adds	r3, #1
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	616b      	str	r3, [r5, #20]
 8001594:	188b      	adds	r3, r1, r2
 8001596:	d055      	beq.n	8001644 <d_name+0x280>
 8001598:	2046      	movs	r0, #70	; 0x46
 800159a:	5488      	strb	r0, [r1, r2]
 800159c:	609f      	str	r7, [r3, #8]
 800159e:	605c      	str	r4, [r3, #4]
 80015a0:	e050      	b.n	8001644 <d_name+0x280>
 80015a2:	fa26 f303 	lsr.w	r3, r6, r3
 80015a6:	07d9      	lsls	r1, r3, #31
 80015a8:	f57f af53 	bpl.w	8001452 <d_name+0x8e>
 80015ac:	4628      	mov	r0, r5
 80015ae:	f000 fd61 	bl	8002074 <d_unqualified_name>
 80015b2:	b37f      	cbz	r7, 8001614 <d_name+0x250>
 80015b4:	2101      	movs	r1, #1
 80015b6:	4603      	mov	r3, r0
 80015b8:	463a      	mov	r2, r7
 80015ba:	4628      	mov	r0, r5
 80015bc:	f7fe fe36 	bl	800022c <d_make_comp>
 80015c0:	4607      	mov	r7, r0
 80015c2:	2c53      	cmp	r4, #83	; 0x53
 80015c4:	d023      	beq.n	800160e <d_name+0x24a>
 80015c6:	68ea      	ldr	r2, [r5, #12]
 80015c8:	7814      	ldrb	r4, [r2, #0]
 80015ca:	2c45      	cmp	r4, #69	; 0x45
 80015cc:	f43f af3b 	beq.w	8001446 <d_name+0x82>
 80015d0:	b32f      	cbz	r7, 800161e <d_name+0x25a>
 80015d2:	6a2b      	ldr	r3, [r5, #32]
 80015d4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80015d6:	428b      	cmp	r3, r1
 80015d8:	da21      	bge.n	800161e <d_name+0x25a>
 80015da:	69e9      	ldr	r1, [r5, #28]
 80015dc:	1c58      	adds	r0, r3, #1
 80015de:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 80015e2:	6228      	str	r0, [r5, #32]
 80015e4:	7814      	ldrb	r4, [r2, #0]
 80015e6:	e728      	b.n	800143a <d_name+0x76>
 80015e8:	7853      	ldrb	r3, [r2, #1]
 80015ea:	4628      	mov	r0, r5
 80015ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80015f0:	2b54      	cmp	r3, #84	; 0x54
 80015f2:	d011      	beq.n	8001618 <d_name+0x254>
 80015f4:	f000 fd3e 	bl	8002074 <d_unqualified_name>
 80015f8:	2f00      	cmp	r7, #0
 80015fa:	d1db      	bne.n	80015b4 <d_name+0x1f0>
 80015fc:	4607      	mov	r7, r0
 80015fe:	e7e2      	b.n	80015c6 <d_name+0x202>
 8001600:	2101      	movs	r1, #1
 8001602:	4628      	mov	r0, r5
 8001604:	f7ff f85a 	bl	80006bc <d_substitution>
 8001608:	2f00      	cmp	r7, #0
 800160a:	d1d3      	bne.n	80015b4 <d_name+0x1f0>
 800160c:	4607      	mov	r7, r0
 800160e:	68ea      	ldr	r2, [r5, #12]
 8001610:	7814      	ldrb	r4, [r2, #0]
 8001612:	e712      	b.n	800143a <d_name+0x76>
 8001614:	4607      	mov	r7, r0
 8001616:	e7d4      	b.n	80015c2 <d_name+0x1fe>
 8001618:	f000 f88c 	bl	8001734 <d_type>
 800161c:	e7ec      	b.n	80015f8 <d_name+0x234>
 800161e:	2200      	movs	r2, #0
 8001620:	4610      	mov	r0, r2
 8001622:	f8c9 2000 	str.w	r2, [r9]
 8001626:	b005      	add	sp, #20
 8001628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800162c:	4628      	mov	r0, r5
 800162e:	e7e1      	b.n	80015f4 <d_name+0x230>
 8001630:	2f00      	cmp	r7, #0
 8001632:	d0f4      	beq.n	800161e <d_name+0x25a>
 8001634:	3201      	adds	r2, #1
 8001636:	60ea      	str	r2, [r5, #12]
 8001638:	4628      	mov	r0, r5
 800163a:	f7ff fe5b 	bl	80012f4 <d_template_args_1>
 800163e:	2104      	movs	r1, #4
 8001640:	e7b9      	b.n	80015b6 <d_name+0x1f2>
 8001642:	2300      	movs	r3, #0
 8001644:	4632      	mov	r2, r6
 8001646:	4628      	mov	r0, r5
 8001648:	2102      	movs	r1, #2
 800164a:	f7fe fdef 	bl	800022c <d_make_comp>
 800164e:	4602      	mov	r2, r0
 8001650:	4610      	mov	r0, r2
 8001652:	b005      	add	sp, #20
 8001654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001658:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800165c:	6901      	ldr	r1, [r0, #16]
 800165e:	0092      	lsls	r2, r2, #2
 8001660:	3301      	adds	r3, #1
 8001662:	188c      	adds	r4, r1, r2
 8001664:	6143      	str	r3, [r0, #20]
 8001666:	f43f af50 	beq.w	800150a <d_name+0x146>
 800166a:	2600      	movs	r6, #0
 800166c:	2003      	movs	r0, #3
 800166e:	4b2f      	ldr	r3, [pc, #188]	; (800172c <d_name+0x368>)
 8001670:	548e      	strb	r6, [r1, r2]
 8001672:	60a0      	str	r0, [r4, #8]
 8001674:	6063      	str	r3, [r4, #4]
 8001676:	e748      	b.n	800150a <d_name+0x146>
 8001678:	4623      	mov	r3, r4
 800167a:	e7e3      	b.n	8001644 <d_name+0x280>
 800167c:	1c9a      	adds	r2, r3, #2
 800167e:	60ea      	str	r2, [r5, #12]
 8001680:	789a      	ldrb	r2, [r3, #2]
 8001682:	2a5f      	cmp	r2, #95	; 0x5f
 8001684:	d032      	beq.n	80016ec <d_name+0x328>
 8001686:	696b      	ldr	r3, [r5, #20]
 8001688:	69aa      	ldr	r2, [r5, #24]
 800168a:	4293      	cmp	r3, r2
 800168c:	dad9      	bge.n	8001642 <d_name+0x27e>
 800168e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001692:	6929      	ldr	r1, [r5, #16]
 8001694:	3301      	adds	r3, #1
 8001696:	0092      	lsls	r2, r2, #2
 8001698:	616b      	str	r3, [r5, #20]
 800169a:	188b      	adds	r3, r1, r2
 800169c:	d0d2      	beq.n	8001644 <d_name+0x280>
 800169e:	2700      	movs	r7, #0
 80016a0:	240e      	movs	r4, #14
 80016a2:	4823      	ldr	r0, [pc, #140]	; (8001730 <d_name+0x36c>)
 80016a4:	548f      	strb	r7, [r1, r2]
 80016a6:	609c      	str	r4, [r3, #8]
 80016a8:	6058      	str	r0, [r3, #4]
 80016aa:	e7cb      	b.n	8001644 <d_name+0x280>
 80016ac:	4628      	mov	r0, r5
 80016ae:	f7fe ff6b 	bl	8000588 <d_template_param>
 80016b2:	e7a1      	b.n	80015f8 <d_name+0x234>
 80016b4:	3302      	adds	r3, #2
 80016b6:	60eb      	str	r3, [r5, #12]
 80016b8:	4628      	mov	r0, r5
 80016ba:	f7fe ff49 	bl	8000550 <d_compact_number>
 80016be:	1e07      	subs	r7, r0, #0
 80016c0:	f6ff ae9d 	blt.w	80013fe <d_name+0x3a>
 80016c4:	4628      	mov	r0, r5
 80016c6:	f7ff fe7d 	bl	80013c4 <d_name>
 80016ca:	4604      	mov	r4, r0
 80016cc:	2800      	cmp	r0, #0
 80016ce:	f43f af57 	beq.w	8001580 <d_name+0x1bc>
 80016d2:	7803      	ldrb	r3, [r0, #0]
 80016d4:	2b45      	cmp	r3, #69	; 0x45
 80016d6:	f43f af53 	beq.w	8001580 <d_name+0x1bc>
 80016da:	2b47      	cmp	r3, #71	; 0x47
 80016dc:	f43f af50 	beq.w	8001580 <d_name+0x1bc>
 80016e0:	68eb      	ldr	r3, [r5, #12]
 80016e2:	781a      	ldrb	r2, [r3, #0]
 80016e4:	2a5f      	cmp	r2, #95	; 0x5f
 80016e6:	f47f af4b 	bne.w	8001580 <d_name+0x1bc>
 80016ea:	e73e      	b.n	800156a <d_name+0x1a6>
 80016ec:	4628      	mov	r0, r5
 80016ee:	3303      	adds	r3, #3
 80016f0:	f840 3f0c 	str.w	r3, [r0, #12]!
 80016f4:	f7fe feea 	bl	80004cc <d_number.isra.0>
 80016f8:	2800      	cmp	r0, #0
 80016fa:	dac4      	bge.n	8001686 <d_name+0x2c2>
 80016fc:	e67f      	b.n	80013fe <d_name+0x3a>
 80016fe:	f8c9 7000 	str.w	r7, [r9]
 8001702:	2f00      	cmp	r7, #0
 8001704:	f43f ae7b 	beq.w	80013fe <d_name+0x3a>
 8001708:	f1b8 0f00 	cmp.w	r8, #0
 800170c:	d004      	beq.n	8001718 <d_name+0x354>
 800170e:	9b03      	ldr	r3, [sp, #12]
 8001710:	f8cd 800c 	str.w	r8, [sp, #12]
 8001714:	f8c8 3004 	str.w	r3, [r8, #4]
 8001718:	7813      	ldrb	r3, [r2, #0]
 800171a:	2b45      	cmp	r3, #69	; 0x45
 800171c:	f47f ae6f 	bne.w	80013fe <d_name+0x3a>
 8001720:	3201      	adds	r2, #1
 8001722:	60ea      	str	r2, [r5, #12]
 8001724:	9a03      	ldr	r2, [sp, #12]
 8001726:	e672      	b.n	800140e <d_name+0x4a>
 8001728:	100803ff 	.word	0x100803ff
 800172c:	08022a58 	.word	0x08022a58
 8001730:	08022a48 	.word	0x08022a48

08001734 <d_type>:
 8001734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001738:	68c2      	ldr	r2, [r0, #12]
 800173a:	b083      	sub	sp, #12
 800173c:	7813      	ldrb	r3, [r2, #0]
 800173e:	4604      	mov	r4, r0
 8001740:	2b72      	cmp	r3, #114	; 0x72
 8001742:	d058      	beq.n	80017f6 <d_type+0xc2>
 8001744:	2b56      	cmp	r3, #86	; 0x56
 8001746:	d056      	beq.n	80017f6 <d_type+0xc2>
 8001748:	2b4b      	cmp	r3, #75	; 0x4b
 800174a:	d054      	beq.n	80017f6 <d_type+0xc2>
 800174c:	2b44      	cmp	r3, #68	; 0x44
 800174e:	f000 809f 	beq.w	8001890 <d_type+0x15c>
 8001752:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001756:	294a      	cmp	r1, #74	; 0x4a
 8001758:	f200 808a 	bhi.w	8001870 <d_type+0x13c>
 800175c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001760:	012a012a 	.word	0x012a012a
 8001764:	012a012a 	.word	0x012a012a
 8001768:	012a012a 	.word	0x012a012a
 800176c:	012a012a 	.word	0x012a012a
 8001770:	012a012a 	.word	0x012a012a
 8001774:	00880088 	.word	0x00880088
 8001778:	00880088 	.word	0x00880088
 800177c:	00880088 	.word	0x00880088
 8001780:	020b0088 	.word	0x020b0088
 8001784:	01520088 	.word	0x01520088
 8001788:	00880088 	.word	0x00880088
 800178c:	0160014c 	.word	0x0160014c
 8001790:	00880088 	.word	0x00880088
 8001794:	00880088 	.word	0x00880088
 8001798:	016e0088 	.word	0x016e0088
 800179c:	0186012a 	.word	0x0186012a
 80017a0:	008801c3 	.word	0x008801c3
 80017a4:	01a20194 	.word	0x01a20194
 80017a8:	01f301d1 	.word	0x01f301d1
 80017ac:	00880088 	.word	0x00880088
 80017b0:	00880088 	.word	0x00880088
 80017b4:	0088012a 	.word	0x0088012a
 80017b8:	00880088 	.word	0x00880088
 80017bc:	00880088 	.word	0x00880088
 80017c0:	010c0088 	.word	0x010c0088
 80017c4:	010c010c 	.word	0x010c010c
 80017c8:	010c010c 	.word	0x010c010c
 80017cc:	010c010c 	.word	0x010c010c
 80017d0:	010c010c 	.word	0x010c010c
 80017d4:	0088010c 	.word	0x0088010c
 80017d8:	010c010c 	.word	0x010c010c
 80017dc:	010c010c 	.word	0x010c010c
 80017e0:	00880088 	.word	0x00880088
 80017e4:	010c0088 	.word	0x010c0088
 80017e8:	013e010c 	.word	0x013e010c
 80017ec:	010c010c 	.word	0x010c010c
 80017f0:	010c010c 	.word	0x010c010c
 80017f4:	010c      	.short	0x010c
 80017f6:	2200      	movs	r2, #0
 80017f8:	a901      	add	r1, sp, #4
 80017fa:	4620      	mov	r0, r4
 80017fc:	f7fe fd62 	bl	80002c4 <d_cv_qualifiers>
 8001800:	4605      	mov	r5, r0
 8001802:	2800      	cmp	r0, #0
 8001804:	d034      	beq.n	8001870 <d_type+0x13c>
 8001806:	68e3      	ldr	r3, [r4, #12]
 8001808:	4620      	mov	r0, r4
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b46      	cmp	r3, #70	; 0x46
 800180e:	d034      	beq.n	800187a <d_type+0x146>
 8001810:	f7ff ff90 	bl	8001734 <d_type>
 8001814:	6028      	str	r0, [r5, #0]
 8001816:	b358      	cbz	r0, 8001870 <d_type+0x13c>
 8001818:	7803      	ldrb	r3, [r0, #0]
 800181a:	3b1f      	subs	r3, #31
 800181c:	2b01      	cmp	r3, #1
 800181e:	d930      	bls.n	8001882 <d_type+0x14e>
 8001820:	9a01      	ldr	r2, [sp, #4]
 8001822:	b32a      	cbz	r2, 8001870 <d_type+0x13c>
 8001824:	6a23      	ldr	r3, [r4, #32]
 8001826:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001828:	428b      	cmp	r3, r1
 800182a:	da21      	bge.n	8001870 <d_type+0x13c>
 800182c:	69e0      	ldr	r0, [r4, #28]
 800182e:	1c59      	adds	r1, r3, #1
 8001830:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001834:	9d01      	ldr	r5, [sp, #4]
 8001836:	6221      	str	r1, [r4, #32]
 8001838:	4628      	mov	r0, r5
 800183a:	b003      	add	sp, #12
 800183c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001840:	2301      	movs	r3, #1
 8001842:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001844:	6343      	str	r3, [r0, #52]	; 0x34
 8001846:	f7ff fb5b 	bl	8000f00 <d_expression_1>
 800184a:	6365      	str	r5, [r4, #52]	; 0x34
 800184c:	4602      	mov	r2, r0
 800184e:	2300      	movs	r3, #0
 8001850:	2142      	movs	r1, #66	; 0x42
 8001852:	4620      	mov	r0, r4
 8001854:	f7fe fcea 	bl	800022c <d_make_comp>
 8001858:	4605      	mov	r5, r0
 800185a:	9001      	str	r0, [sp, #4]
 800185c:	b140      	cbz	r0, 8001870 <d_type+0x13c>
 800185e:	68e3      	ldr	r3, [r4, #12]
 8001860:	781a      	ldrb	r2, [r3, #0]
 8001862:	b12a      	cbz	r2, 8001870 <d_type+0x13c>
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	60e2      	str	r2, [r4, #12]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b45      	cmp	r3, #69	; 0x45
 800186c:	f000 80aa 	beq.w	80019c4 <d_type+0x290>
 8001870:	2500      	movs	r5, #0
 8001872:	4628      	mov	r0, r5
 8001874:	b003      	add	sp, #12
 8001876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800187a:	f000 fd4b 	bl	8002314 <d_function_type>
 800187e:	6028      	str	r0, [r5, #0]
 8001880:	e7c9      	b.n	8001816 <d_type+0xe2>
 8001882:	9a01      	ldr	r2, [sp, #4]
 8001884:	6843      	ldr	r3, [r0, #4]
 8001886:	6042      	str	r2, [r0, #4]
 8001888:	682a      	ldr	r2, [r5, #0]
 800188a:	9201      	str	r2, [sp, #4]
 800188c:	602b      	str	r3, [r5, #0]
 800188e:	e7c7      	b.n	8001820 <d_type+0xec>
 8001890:	7853      	ldrb	r3, [r2, #1]
 8001892:	2b78      	cmp	r3, #120	; 0x78
 8001894:	d0af      	beq.n	80017f6 <d_type+0xc2>
 8001896:	1c53      	adds	r3, r2, #1
 8001898:	60c3      	str	r3, [r0, #12]
 800189a:	7853      	ldrb	r3, [r2, #1]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0e7      	beq.n	8001870 <d_type+0x13c>
 80018a0:	1c93      	adds	r3, r2, #2
 80018a2:	60c3      	str	r3, [r0, #12]
 80018a4:	7853      	ldrb	r3, [r2, #1]
 80018a6:	3b46      	subs	r3, #70	; 0x46
 80018a8:	2b30      	cmp	r3, #48	; 0x30
 80018aa:	d8e1      	bhi.n	8001870 <d_type+0x13c>
 80018ac:	a101      	add	r1, pc, #4	; (adr r1, 80018b4 <d_type+0x180>)
 80018ae:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80018b2:	bf00      	nop
 80018b4:	08001d8d 	.word	0x08001d8d
 80018b8:	08001871 	.word	0x08001871
 80018bc:	08001871 	.word	0x08001871
 80018c0:	08001871 	.word	0x08001871
 80018c4:	08001871 	.word	0x08001871
 80018c8:	08001871 	.word	0x08001871
 80018cc:	08001871 	.word	0x08001871
 80018d0:	08001871 	.word	0x08001871
 80018d4:	08001871 	.word	0x08001871
 80018d8:	08001871 	.word	0x08001871
 80018dc:	08001871 	.word	0x08001871
 80018e0:	08001871 	.word	0x08001871
 80018e4:	08001871 	.word	0x08001871
 80018e8:	08001871 	.word	0x08001871
 80018ec:	08001841 	.word	0x08001841
 80018f0:	08001871 	.word	0x08001871
 80018f4:	08001871 	.word	0x08001871
 80018f8:	08001871 	.word	0x08001871
 80018fc:	08001871 	.word	0x08001871
 8001900:	08001871 	.word	0x08001871
 8001904:	08001871 	.word	0x08001871
 8001908:	08001871 	.word	0x08001871
 800190c:	08001871 	.word	0x08001871
 8001910:	08001871 	.word	0x08001871
 8001914:	08001871 	.word	0x08001871
 8001918:	08001871 	.word	0x08001871
 800191c:	08001871 	.word	0x08001871
 8001920:	08001d63 	.word	0x08001d63
 8001924:	08001871 	.word	0x08001871
 8001928:	08001d39 	.word	0x08001d39
 800192c:	08001d1b 	.word	0x08001d1b
 8001930:	08001cf3 	.word	0x08001cf3
 8001934:	08001cc7 	.word	0x08001cc7
 8001938:	08001871 	.word	0x08001871
 800193c:	08001c9b 	.word	0x08001c9b
 8001940:	08001c79 	.word	0x08001c79
 8001944:	08001871 	.word	0x08001871
 8001948:	08001871 	.word	0x08001871
 800194c:	08001871 	.word	0x08001871
 8001950:	08001871 	.word	0x08001871
 8001954:	08001c41 	.word	0x08001c41
 8001958:	08001871 	.word	0x08001871
 800195c:	08001c2b 	.word	0x08001c2b
 8001960:	08001871 	.word	0x08001871
 8001964:	08001871 	.word	0x08001871
 8001968:	08001bff 	.word	0x08001bff
 800196c:	08001841 	.word	0x08001841
 8001970:	08001871 	.word	0x08001871
 8001974:	08001bc9 	.word	0x08001bc9
 8001978:	6960      	ldr	r0, [r4, #20]
 800197a:	69a5      	ldr	r5, [r4, #24]
 800197c:	3b61      	subs	r3, #97	; 0x61
 800197e:	49bb      	ldr	r1, [pc, #748]	; (8001c6c <d_type+0x538>)
 8001980:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001984:	42a8      	cmp	r0, r5
 8001986:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800198a:	f280 8231 	bge.w	8001df0 <d_type+0x6bc>
 800198e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8001992:	6926      	ldr	r6, [r4, #16]
 8001994:	0089      	lsls	r1, r1, #2
 8001996:	3001      	adds	r0, #1
 8001998:	1875      	adds	r5, r6, r1
 800199a:	6160      	str	r0, [r4, #20]
 800199c:	f000 8228 	beq.w	8001df0 <d_type+0x6bc>
 80019a0:	2027      	movs	r0, #39	; 0x27
 80019a2:	5470      	strb	r0, [r6, r1]
 80019a4:	606b      	str	r3, [r5, #4]
 80019a6:	6859      	ldr	r1, [r3, #4]
 80019a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019aa:	3201      	adds	r2, #1
 80019ac:	440b      	add	r3, r1
 80019ae:	60e2      	str	r2, [r4, #12]
 80019b0:	6323      	str	r3, [r4, #48]	; 0x30
 80019b2:	e75e      	b.n	8001872 <d_type+0x13e>
 80019b4:	4620      	mov	r0, r4
 80019b6:	f7ff fd05 	bl	80013c4 <d_name>
 80019ba:	4605      	mov	r5, r0
 80019bc:	9001      	str	r0, [sp, #4]
 80019be:	2d00      	cmp	r5, #0
 80019c0:	f43f af56 	beq.w	8001870 <d_type+0x13c>
 80019c4:	6a23      	ldr	r3, [r4, #32]
 80019c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019c8:	4293      	cmp	r3, r2
 80019ca:	f6bf af51 	bge.w	8001870 <d_type+0x13c>
 80019ce:	69e1      	ldr	r1, [r4, #28]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 80019d6:	9d01      	ldr	r5, [sp, #4]
 80019d8:	6222      	str	r2, [r4, #32]
 80019da:	e74a      	b.n	8001872 <d_type+0x13e>
 80019dc:	3201      	adds	r2, #1
 80019de:	60e2      	str	r2, [r4, #12]
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7fe fdf3 	bl	80005cc <d_source_name>
 80019e6:	2300      	movs	r3, #0
 80019e8:	4602      	mov	r2, r0
 80019ea:	2128      	movs	r1, #40	; 0x28
 80019ec:	4620      	mov	r0, r4
 80019ee:	f7fe fc1d 	bl	800022c <d_make_comp>
 80019f2:	4605      	mov	r5, r0
 80019f4:	9001      	str	r0, [sp, #4]
 80019f6:	e7e2      	b.n	80019be <d_type+0x28a>
 80019f8:	4620      	mov	r0, r4
 80019fa:	f000 fc8b 	bl	8002314 <d_function_type>
 80019fe:	4605      	mov	r5, r0
 8001a00:	9001      	str	r0, [sp, #4]
 8001a02:	e7dc      	b.n	80019be <d_type+0x28a>
 8001a04:	3201      	adds	r2, #1
 8001a06:	60e2      	str	r2, [r4, #12]
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f7ff fe93 	bl	8001734 <d_type>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	4602      	mov	r2, r0
 8001a12:	2125      	movs	r1, #37	; 0x25
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7fe fc09 	bl	800022c <d_make_comp>
 8001a1a:	4605      	mov	r5, r0
 8001a1c:	9001      	str	r0, [sp, #4]
 8001a1e:	e7ce      	b.n	80019be <d_type+0x28a>
 8001a20:	3201      	adds	r2, #1
 8001a22:	60e2      	str	r2, [r4, #12]
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff fe85 	bl	8001734 <d_type>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	2126      	movs	r1, #38	; 0x26
 8001a30:	4620      	mov	r0, r4
 8001a32:	f7fe fbfb 	bl	800022c <d_make_comp>
 8001a36:	4605      	mov	r5, r0
 8001a38:	9001      	str	r0, [sp, #4]
 8001a3a:	e7c0      	b.n	80019be <d_type+0x28a>
 8001a3c:	3201      	adds	r2, #1
 8001a3e:	60e2      	str	r2, [r4, #12]
 8001a40:	4620      	mov	r0, r4
 8001a42:	f7ff fe77 	bl	8001734 <d_type>
 8001a46:	4605      	mov	r5, r0
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	f000 80bb 	beq.w	8001bc4 <d_type+0x490>
 8001a4e:	4620      	mov	r0, r4
 8001a50:	f7ff fe70 	bl	8001734 <d_type>
 8001a54:	2800      	cmp	r0, #0
 8001a56:	f000 80b5 	beq.w	8001bc4 <d_type+0x490>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	462a      	mov	r2, r5
 8001a5e:	212b      	movs	r1, #43	; 0x2b
 8001a60:	4620      	mov	r0, r4
 8001a62:	f7fe fbe3 	bl	800022c <d_make_comp>
 8001a66:	4605      	mov	r5, r0
 8001a68:	9501      	str	r5, [sp, #4]
 8001a6a:	e7a8      	b.n	80019be <d_type+0x28a>
 8001a6c:	3201      	adds	r2, #1
 8001a6e:	60e2      	str	r2, [r4, #12]
 8001a70:	4620      	mov	r0, r4
 8001a72:	f7ff fe5f 	bl	8001734 <d_type>
 8001a76:	2300      	movs	r3, #0
 8001a78:	4602      	mov	r2, r0
 8001a7a:	2124      	movs	r1, #36	; 0x24
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f7fe fbd5 	bl	800022c <d_make_comp>
 8001a82:	4605      	mov	r5, r0
 8001a84:	9001      	str	r0, [sp, #4]
 8001a86:	e79a      	b.n	80019be <d_type+0x28a>
 8001a88:	3201      	adds	r2, #1
 8001a8a:	60e2      	str	r2, [r4, #12]
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7ff fe51 	bl	8001734 <d_type>
 8001a92:	2300      	movs	r3, #0
 8001a94:	4602      	mov	r2, r0
 8001a96:	2123      	movs	r1, #35	; 0x23
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f7fe fbc7 	bl	800022c <d_make_comp>
 8001a9e:	4605      	mov	r5, r0
 8001aa0:	9001      	str	r0, [sp, #4]
 8001aa2:	e78c      	b.n	80019be <d_type+0x28a>
 8001aa4:	7853      	ldrb	r3, [r2, #1]
 8001aa6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001aaa:	2a09      	cmp	r2, #9
 8001aac:	d905      	bls.n	8001aba <d_type+0x386>
 8001aae:	2b5f      	cmp	r3, #95	; 0x5f
 8001ab0:	d003      	beq.n	8001aba <d_type+0x386>
 8001ab2:	3b41      	subs	r3, #65	; 0x41
 8001ab4:	2b19      	cmp	r3, #25
 8001ab6:	f200 81ba 	bhi.w	8001e2e <d_type+0x6fa>
 8001aba:	2100      	movs	r1, #0
 8001abc:	4620      	mov	r0, r4
 8001abe:	f7fe fdfd 	bl	80006bc <d_substitution>
 8001ac2:	68e3      	ldr	r3, [r4, #12]
 8001ac4:	9001      	str	r0, [sp, #4]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4605      	mov	r5, r0
 8001aca:	2b49      	cmp	r3, #73	; 0x49
 8001acc:	f47f aed1 	bne.w	8001872 <d_type+0x13e>
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f7ff fc6d 	bl	80013b0 <d_template_args>
 8001ad6:	462a      	mov	r2, r5
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2104      	movs	r1, #4
 8001adc:	4620      	mov	r0, r4
 8001ade:	f7fe fba5 	bl	800022c <d_make_comp>
 8001ae2:	4605      	mov	r5, r0
 8001ae4:	e7c0      	b.n	8001a68 <d_type+0x334>
 8001ae6:	3201      	adds	r2, #1
 8001ae8:	60e2      	str	r2, [r4, #12]
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff fe22 	bl	8001734 <d_type>
 8001af0:	2300      	movs	r3, #0
 8001af2:	4602      	mov	r2, r0
 8001af4:	2122      	movs	r1, #34	; 0x22
 8001af6:	4620      	mov	r0, r4
 8001af8:	f7fe fb98 	bl	800022c <d_make_comp>
 8001afc:	4605      	mov	r5, r0
 8001afe:	9001      	str	r0, [sp, #4]
 8001b00:	e75d      	b.n	80019be <d_type+0x28a>
 8001b02:	4620      	mov	r0, r4
 8001b04:	f7fe fd40 	bl	8000588 <d_template_param>
 8001b08:	68e6      	ldr	r6, [r4, #12]
 8001b0a:	9001      	str	r0, [sp, #4]
 8001b0c:	7833      	ldrb	r3, [r6, #0]
 8001b0e:	4605      	mov	r5, r0
 8001b10:	2b49      	cmp	r3, #73	; 0x49
 8001b12:	f47f af54 	bne.w	80019be <d_type+0x28a>
 8001b16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f040 81a0 	bne.w	8001e5e <d_type+0x72a>
 8001b1e:	2800      	cmp	r0, #0
 8001b20:	f43f aea6 	beq.w	8001870 <d_type+0x13c>
 8001b24:	6a23      	ldr	r3, [r4, #32]
 8001b26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	f6bf aea1 	bge.w	8001870 <d_type+0x13c>
 8001b2e:	69e1      	ldr	r1, [r4, #28]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8001b36:	6222      	str	r2, [r4, #32]
 8001b38:	4620      	mov	r0, r4
 8001b3a:	9d01      	ldr	r5, [sp, #4]
 8001b3c:	f7ff fc38 	bl	80013b0 <d_template_args>
 8001b40:	462a      	mov	r2, r5
 8001b42:	4603      	mov	r3, r0
 8001b44:	e7c9      	b.n	8001ada <d_type+0x3a6>
 8001b46:	3201      	adds	r2, #1
 8001b48:	60e2      	str	r2, [r4, #12]
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7fe fd3e 	bl	80005cc <d_source_name>
 8001b50:	68e3      	ldr	r3, [r4, #12]
 8001b52:	9001      	str	r0, [sp, #4]
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	4605      	mov	r5, r0
 8001b58:	2b49      	cmp	r3, #73	; 0x49
 8001b5a:	f000 8175 	beq.w	8001e48 <d_type+0x714>
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff fde8 	bl	8001734 <d_type>
 8001b64:	9b01      	ldr	r3, [sp, #4]
 8001b66:	4602      	mov	r2, r0
 8001b68:	2121      	movs	r1, #33	; 0x21
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f7fe fb5e 	bl	800022c <d_make_comp>
 8001b70:	4605      	mov	r5, r0
 8001b72:	9001      	str	r0, [sp, #4]
 8001b74:	e723      	b.n	80019be <d_type+0x28a>
 8001b76:	1c51      	adds	r1, r2, #1
 8001b78:	60e1      	str	r1, [r4, #12]
 8001b7a:	7853      	ldrb	r3, [r2, #1]
 8001b7c:	2b5f      	cmp	r3, #95	; 0x5f
 8001b7e:	f000 813b 	beq.w	8001df8 <d_type+0x6c4>
 8001b82:	3b30      	subs	r3, #48	; 0x30
 8001b84:	2b09      	cmp	r3, #9
 8001b86:	f200 8145 	bhi.w	8001e14 <d_type+0x6e0>
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	60e3      	str	r3, [r4, #12]
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	3a30      	subs	r2, #48	; 0x30
 8001b94:	2a09      	cmp	r2, #9
 8001b96:	d9f9      	bls.n	8001b8c <d_type+0x458>
 8001b98:	6962      	ldr	r2, [r4, #20]
 8001b9a:	69a0      	ldr	r0, [r4, #24]
 8001b9c:	4282      	cmp	r2, r0
 8001b9e:	da11      	bge.n	8001bc4 <d_type+0x490>
 8001ba0:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8001ba4:	6926      	ldr	r6, [r4, #16]
 8001ba6:	0080      	lsls	r0, r0, #2
 8001ba8:	3201      	adds	r2, #1
 8001baa:	1835      	adds	r5, r6, r0
 8001bac:	6162      	str	r2, [r4, #20]
 8001bae:	d009      	beq.n	8001bc4 <d_type+0x490>
 8001bb0:	1a5a      	subs	r2, r3, r1
 8001bb2:	d007      	beq.n	8001bc4 <d_type+0x490>
 8001bb4:	2700      	movs	r7, #0
 8001bb6:	5437      	strb	r7, [r6, r0]
 8001bb8:	6069      	str	r1, [r5, #4]
 8001bba:	60aa      	str	r2, [r5, #8]
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	2a5f      	cmp	r2, #95	; 0x5f
 8001bc0:	f000 8187 	beq.w	8001ed2 <d_type+0x79e>
 8001bc4:	2500      	movs	r5, #0
 8001bc6:	e74f      	b.n	8001a68 <d_type+0x334>
 8001bc8:	7893      	ldrb	r3, [r2, #2]
 8001bca:	2b5f      	cmp	r3, #95	; 0x5f
 8001bcc:	f000 8177 	beq.w	8001ebe <d_type+0x78a>
 8001bd0:	f7fe fca6 	bl	8000520 <d_number_component>
 8001bd4:	4605      	mov	r5, r0
 8001bd6:	2d00      	cmp	r5, #0
 8001bd8:	f43f af46 	beq.w	8001a68 <d_type+0x334>
 8001bdc:	68e3      	ldr	r3, [r4, #12]
 8001bde:	781a      	ldrb	r2, [r3, #0]
 8001be0:	2a5f      	cmp	r2, #95	; 0x5f
 8001be2:	d1ef      	bne.n	8001bc4 <d_type+0x490>
 8001be4:	3301      	adds	r3, #1
 8001be6:	60e3      	str	r3, [r4, #12]
 8001be8:	4620      	mov	r0, r4
 8001bea:	f7ff fda3 	bl	8001734 <d_type>
 8001bee:	462a      	mov	r2, r5
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	212d      	movs	r1, #45	; 0x2d
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f7fe fb19 	bl	800022c <d_make_comp>
 8001bfa:	4605      	mov	r5, r0
 8001bfc:	e734      	b.n	8001a68 <d_type+0x334>
 8001bfe:	6942      	ldr	r2, [r0, #20]
 8001c00:	6983      	ldr	r3, [r0, #24]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	f280 80f4 	bge.w	8001df0 <d_type+0x6bc>
 8001c08:	230c      	movs	r3, #12
 8001c0a:	fb03 f302 	mul.w	r3, r3, r2
 8001c0e:	6901      	ldr	r1, [r0, #16]
 8001c10:	3201      	adds	r2, #1
 8001c12:	18cd      	adds	r5, r1, r3
 8001c14:	6142      	str	r2, [r0, #20]
 8001c16:	f000 80eb 	beq.w	8001df0 <d_type+0x6bc>
 8001c1a:	2027      	movs	r0, #39	; 0x27
 8001c1c:	4a14      	ldr	r2, [pc, #80]	; (8001c70 <d_type+0x53c>)
 8001c1e:	54c8      	strb	r0, [r1, r3]
 8001c20:	606a      	str	r2, [r5, #4]
 8001c22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c24:	3308      	adds	r3, #8
 8001c26:	6323      	str	r3, [r4, #48]	; 0x30
 8001c28:	e623      	b.n	8001872 <d_type+0x13e>
 8001c2a:	f7ff fd83 	bl	8001734 <d_type>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	4602      	mov	r2, r0
 8001c32:	214a      	movs	r1, #74	; 0x4a
 8001c34:	4620      	mov	r0, r4
 8001c36:	f7fe faf9 	bl	800022c <d_make_comp>
 8001c3a:	4605      	mov	r5, r0
 8001c3c:	9001      	str	r0, [sp, #4]
 8001c3e:	e6be      	b.n	80019be <d_type+0x28a>
 8001c40:	6942      	ldr	r2, [r0, #20]
 8001c42:	6983      	ldr	r3, [r0, #24]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	f280 80d3 	bge.w	8001df0 <d_type+0x6bc>
 8001c4a:	230c      	movs	r3, #12
 8001c4c:	fb03 f302 	mul.w	r3, r3, r2
 8001c50:	6901      	ldr	r1, [r0, #16]
 8001c52:	3201      	adds	r2, #1
 8001c54:	18cd      	adds	r5, r1, r3
 8001c56:	6142      	str	r2, [r0, #20]
 8001c58:	f000 80ca 	beq.w	8001df0 <d_type+0x6bc>
 8001c5c:	2027      	movs	r0, #39	; 0x27
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <d_type+0x540>)
 8001c60:	54c8      	strb	r0, [r1, r3]
 8001c62:	606a      	str	r2, [r5, #4]
 8001c64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c66:	3311      	adds	r3, #17
 8001c68:	6323      	str	r3, [r4, #48]	; 0x30
 8001c6a:	e602      	b.n	8001872 <d_type+0x13e>
 8001c6c:	0801c37c 	.word	0x0801c37c
 8001c70:	0801c5d4 	.word	0x0801c5d4
 8001c74:	0801c5fc 	.word	0x0801c5fc
 8001c78:	6942      	ldr	r2, [r0, #20]
 8001c7a:	6983      	ldr	r3, [r0, #24]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	f280 80b7 	bge.w	8001df0 <d_type+0x6bc>
 8001c82:	230c      	movs	r3, #12
 8001c84:	fb03 f302 	mul.w	r3, r3, r2
 8001c88:	6901      	ldr	r1, [r0, #16]
 8001c8a:	3201      	adds	r2, #1
 8001c8c:	18cd      	adds	r5, r1, r3
 8001c8e:	6142      	str	r2, [r0, #20]
 8001c90:	f000 80ae 	beq.w	8001df0 <d_type+0x6bc>
 8001c94:	2027      	movs	r0, #39	; 0x27
 8001c96:	4a90      	ldr	r2, [pc, #576]	; (8001ed8 <d_type+0x7a4>)
 8001c98:	e7c1      	b.n	8001c1e <d_type+0x4ea>
 8001c9a:	6942      	ldr	r2, [r0, #20]
 8001c9c:	6983      	ldr	r3, [r0, #24]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	f280 80a6 	bge.w	8001df0 <d_type+0x6bc>
 8001ca4:	230c      	movs	r3, #12
 8001ca6:	fb03 f302 	mul.w	r3, r3, r2
 8001caa:	6901      	ldr	r1, [r0, #16]
 8001cac:	3201      	adds	r2, #1
 8001cae:	18cd      	adds	r5, r1, r3
 8001cb0:	6142      	str	r2, [r0, #20]
 8001cb2:	f000 809d 	beq.w	8001df0 <d_type+0x6bc>
 8001cb6:	2027      	movs	r0, #39	; 0x27
 8001cb8:	4a88      	ldr	r2, [pc, #544]	; (8001edc <d_type+0x7a8>)
 8001cba:	54c8      	strb	r0, [r1, r3]
 8001cbc:	606a      	str	r2, [r5, #4]
 8001cbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	6323      	str	r3, [r4, #48]	; 0x30
 8001cc4:	e5d5      	b.n	8001872 <d_type+0x13e>
 8001cc6:	6942      	ldr	r2, [r0, #20]
 8001cc8:	6983      	ldr	r3, [r0, #24]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	f280 8090 	bge.w	8001df0 <d_type+0x6bc>
 8001cd0:	230c      	movs	r3, #12
 8001cd2:	fb03 f302 	mul.w	r3, r3, r2
 8001cd6:	6901      	ldr	r1, [r0, #16]
 8001cd8:	3201      	adds	r2, #1
 8001cda:	18cd      	adds	r5, r1, r3
 8001cdc:	6142      	str	r2, [r0, #20]
 8001cde:	f000 8087 	beq.w	8001df0 <d_type+0x6bc>
 8001ce2:	2027      	movs	r0, #39	; 0x27
 8001ce4:	4a7e      	ldr	r2, [pc, #504]	; (8001ee0 <d_type+0x7ac>)
 8001ce6:	54c8      	strb	r0, [r1, r3]
 8001ce8:	606a      	str	r2, [r5, #4]
 8001cea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cec:	3309      	adds	r3, #9
 8001cee:	6323      	str	r3, [r4, #48]	; 0x30
 8001cf0:	e5bf      	b.n	8001872 <d_type+0x13e>
 8001cf2:	6942      	ldr	r2, [r0, #20]
 8001cf4:	6983      	ldr	r3, [r0, #24]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	da7a      	bge.n	8001df0 <d_type+0x6bc>
 8001cfa:	230c      	movs	r3, #12
 8001cfc:	fb03 f302 	mul.w	r3, r3, r2
 8001d00:	6901      	ldr	r1, [r0, #16]
 8001d02:	3201      	adds	r2, #1
 8001d04:	18cd      	adds	r5, r1, r3
 8001d06:	6142      	str	r2, [r0, #20]
 8001d08:	d072      	beq.n	8001df0 <d_type+0x6bc>
 8001d0a:	2027      	movs	r0, #39	; 0x27
 8001d0c:	4a75      	ldr	r2, [pc, #468]	; (8001ee4 <d_type+0x7b0>)
 8001d0e:	54c8      	strb	r0, [r1, r3]
 8001d10:	606a      	str	r2, [r5, #4]
 8001d12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d14:	330a      	adds	r3, #10
 8001d16:	6323      	str	r3, [r4, #48]	; 0x30
 8001d18:	e5ab      	b.n	8001872 <d_type+0x13e>
 8001d1a:	6942      	ldr	r2, [r0, #20]
 8001d1c:	6983      	ldr	r3, [r0, #24]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	da66      	bge.n	8001df0 <d_type+0x6bc>
 8001d22:	230c      	movs	r3, #12
 8001d24:	fb03 f302 	mul.w	r3, r3, r2
 8001d28:	6901      	ldr	r1, [r0, #16]
 8001d2a:	3201      	adds	r2, #1
 8001d2c:	18cd      	adds	r5, r1, r3
 8001d2e:	6142      	str	r2, [r0, #20]
 8001d30:	d05e      	beq.n	8001df0 <d_type+0x6bc>
 8001d32:	2027      	movs	r0, #39	; 0x27
 8001d34:	4a6c      	ldr	r2, [pc, #432]	; (8001ee8 <d_type+0x7b4>)
 8001d36:	e7d6      	b.n	8001ce6 <d_type+0x5b2>
 8001d38:	6942      	ldr	r2, [r0, #20]
 8001d3a:	6983      	ldr	r3, [r0, #24]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f6bf ad97 	bge.w	8001870 <d_type+0x13c>
 8001d42:	230c      	movs	r3, #12
 8001d44:	fb03 f302 	mul.w	r3, r3, r2
 8001d48:	6901      	ldr	r1, [r0, #16]
 8001d4a:	3201      	adds	r2, #1
 8001d4c:	18cd      	adds	r5, r1, r3
 8001d4e:	6142      	str	r2, [r0, #20]
 8001d50:	f43f ad8f 	beq.w	8001872 <d_type+0x13e>
 8001d54:	2400      	movs	r4, #0
 8001d56:	200e      	movs	r0, #14
 8001d58:	4a64      	ldr	r2, [pc, #400]	; (8001eec <d_type+0x7b8>)
 8001d5a:	54cc      	strb	r4, [r1, r3]
 8001d5c:	60a8      	str	r0, [r5, #8]
 8001d5e:	606a      	str	r2, [r5, #4]
 8001d60:	e587      	b.n	8001872 <d_type+0x13e>
 8001d62:	6942      	ldr	r2, [r0, #20]
 8001d64:	6983      	ldr	r3, [r0, #24]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	f6bf ad82 	bge.w	8001870 <d_type+0x13c>
 8001d6c:	230c      	movs	r3, #12
 8001d6e:	fb03 f302 	mul.w	r3, r3, r2
 8001d72:	6901      	ldr	r1, [r0, #16]
 8001d74:	3201      	adds	r2, #1
 8001d76:	18cd      	adds	r5, r1, r3
 8001d78:	6142      	str	r2, [r0, #20]
 8001d7a:	f43f ad7a 	beq.w	8001872 <d_type+0x13e>
 8001d7e:	2400      	movs	r4, #0
 8001d80:	2004      	movs	r0, #4
 8001d82:	4a5b      	ldr	r2, [pc, #364]	; (8001ef0 <d_type+0x7bc>)
 8001d84:	54cc      	strb	r4, [r1, r3]
 8001d86:	60a8      	str	r0, [r5, #8]
 8001d88:	606a      	str	r2, [r5, #4]
 8001d8a:	e572      	b.n	8001872 <d_type+0x13e>
 8001d8c:	6943      	ldr	r3, [r0, #20]
 8001d8e:	6981      	ldr	r1, [r0, #24]
 8001d90:	428b      	cmp	r3, r1
 8001d92:	da7a      	bge.n	8001e8a <d_type+0x756>
 8001d94:	262c      	movs	r6, #44	; 0x2c
 8001d96:	6900      	ldr	r0, [r0, #16]
 8001d98:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001d9c:	0089      	lsls	r1, r1, #2
 8001d9e:	3301      	adds	r3, #1
 8001da0:	1845      	adds	r5, r0, r1
 8001da2:	6163      	str	r3, [r4, #20]
 8001da4:	9501      	str	r5, [sp, #4]
 8001da6:	5446      	strb	r6, [r0, r1]
 8001da8:	7893      	ldrb	r3, [r2, #2]
 8001daa:	3b30      	subs	r3, #48	; 0x30
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b09      	cmp	r3, #9
 8001db0:	bf94      	ite	ls
 8001db2:	2301      	movls	r3, #1
 8001db4:	2300      	movhi	r3, #0
 8001db6:	812b      	strh	r3, [r5, #8]
 8001db8:	d97b      	bls.n	8001eb2 <d_type+0x77e>
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f7ff fcba 	bl	8001734 <d_type>
 8001dc0:	9b01      	ldr	r3, [sp, #4]
 8001dc2:	6068      	str	r0, [r5, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f43f ad52 	beq.w	8001870 <d_type+0x13c>
 8001dcc:	f104 000c 	add.w	r0, r4, #12
 8001dd0:	f7fe fb7c 	bl	80004cc <d_number.isra.0>
 8001dd4:	68e2      	ldr	r2, [r4, #12]
 8001dd6:	7813      	ldrb	r3, [r2, #0]
 8001dd8:	b113      	cbz	r3, 8001de0 <d_type+0x6ac>
 8001dda:	1c53      	adds	r3, r2, #1
 8001ddc:	60e3      	str	r3, [r4, #12]
 8001dde:	7813      	ldrb	r3, [r2, #0]
 8001de0:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	9d01      	ldr	r5, [sp, #4]
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	816b      	strh	r3, [r5, #10]
 8001dee:	e540      	b.n	8001872 <d_type+0x13e>
 8001df0:	2300      	movs	r3, #0
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	deff      	udf	#255	; 0xff
 8001df8:	2500      	movs	r5, #0
 8001dfa:	3101      	adds	r1, #1
 8001dfc:	60e1      	str	r1, [r4, #12]
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7ff fc98 	bl	8001734 <d_type>
 8001e04:	462a      	mov	r2, r5
 8001e06:	4603      	mov	r3, r0
 8001e08:	212a      	movs	r1, #42	; 0x2a
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f7fe fa0e 	bl	800022c <d_make_comp>
 8001e10:	4605      	mov	r5, r0
 8001e12:	e629      	b.n	8001a68 <d_type+0x334>
 8001e14:	2301      	movs	r3, #1
 8001e16:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001e18:	4620      	mov	r0, r4
 8001e1a:	6363      	str	r3, [r4, #52]	; 0x34
 8001e1c:	f7ff f870 	bl	8000f00 <d_expression_1>
 8001e20:	6365      	str	r5, [r4, #52]	; 0x34
 8001e22:	4605      	mov	r5, r0
 8001e24:	2800      	cmp	r0, #0
 8001e26:	f43f aecd 	beq.w	8001bc4 <d_type+0x490>
 8001e2a:	68e3      	ldr	r3, [r4, #12]
 8001e2c:	e6c6      	b.n	8001bbc <d_type+0x488>
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f7ff fac8 	bl	80013c4 <d_name>
 8001e34:	4605      	mov	r5, r0
 8001e36:	9001      	str	r0, [sp, #4]
 8001e38:	2800      	cmp	r0, #0
 8001e3a:	f43f ad19 	beq.w	8001870 <d_type+0x13c>
 8001e3e:	7803      	ldrb	r3, [r0, #0]
 8001e40:	2b18      	cmp	r3, #24
 8001e42:	f47f adbf 	bne.w	80019c4 <d_type+0x290>
 8001e46:	e514      	b.n	8001872 <d_type+0x13e>
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f7ff fab1 	bl	80013b0 <d_template_args>
 8001e4e:	462a      	mov	r2, r5
 8001e50:	4603      	mov	r3, r0
 8001e52:	2104      	movs	r1, #4
 8001e54:	4620      	mov	r0, r4
 8001e56:	f7fe f9e9 	bl	800022c <d_make_comp>
 8001e5a:	9001      	str	r0, [sp, #4]
 8001e5c:	e67f      	b.n	8001b5e <d_type+0x42a>
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001e64:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8001e68:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001e6a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001e6c:	f7ff faa0 	bl	80013b0 <d_template_args>
 8001e70:	68e2      	ldr	r2, [r4, #12]
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	2a49      	cmp	r2, #73	; 0x49
 8001e76:	d00b      	beq.n	8001e90 <d_type+0x75c>
 8001e78:	6325      	str	r5, [r4, #48]	; 0x30
 8001e7a:	60e6      	str	r6, [r4, #12]
 8001e7c:	f8c4 9014 	str.w	r9, [r4, #20]
 8001e80:	f8c4 8020 	str.w	r8, [r4, #32]
 8001e84:	62a7      	str	r7, [r4, #40]	; 0x28
 8001e86:	9d01      	ldr	r5, [sp, #4]
 8001e88:	e599      	b.n	80019be <d_type+0x28a>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	701b      	strb	r3, [r3, #0]
 8001e8e:	deff      	udf	#255	; 0xff
 8001e90:	9b01      	ldr	r3, [sp, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f43f acec 	beq.w	8001870 <d_type+0x13c>
 8001e98:	6a22      	ldr	r2, [r4, #32]
 8001e9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e9c:	428a      	cmp	r2, r1
 8001e9e:	f6bf ace7 	bge.w	8001870 <d_type+0x13c>
 8001ea2:	69e5      	ldr	r5, [r4, #28]
 8001ea4:	1c51      	adds	r1, r2, #1
 8001ea6:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 8001eaa:	9a01      	ldr	r2, [sp, #4]
 8001eac:	4603      	mov	r3, r0
 8001eae:	6221      	str	r1, [r4, #32]
 8001eb0:	e613      	b.n	8001ada <d_type+0x3a6>
 8001eb2:	f104 000c 	add.w	r0, r4, #12
 8001eb6:	f7fe fb09 	bl	80004cc <d_number.isra.0>
 8001eba:	9d01      	ldr	r5, [sp, #4]
 8001ebc:	e77d      	b.n	8001dba <d_type+0x686>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	3203      	adds	r2, #3
 8001ec2:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001ec4:	60c2      	str	r2, [r0, #12]
 8001ec6:	6343      	str	r3, [r0, #52]	; 0x34
 8001ec8:	f7ff f81a 	bl	8000f00 <d_expression_1>
 8001ecc:	6366      	str	r6, [r4, #52]	; 0x34
 8001ece:	4605      	mov	r5, r0
 8001ed0:	e681      	b.n	8001bd6 <d_type+0x4a2>
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	e791      	b.n	8001dfa <d_type+0x6c6>
 8001ed6:	bf00      	nop
 8001ed8:	0801c5e8 	.word	0x0801c5e8
 8001edc:	0801c5c0 	.word	0x0801c5c0
 8001ee0:	0801c584 	.word	0x0801c584
 8001ee4:	0801c5ac 	.word	0x0801c5ac
 8001ee8:	0801c598 	.word	0x0801c598
 8001eec:	08022a64 	.word	0x08022a64
 8001ef0:	08022a5c 	.word	0x08022a5c

08001ef4 <d_operator_name>:
 8001ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef6:	68c3      	ldr	r3, [r0, #12]
 8001ef8:	4684      	mov	ip, r0
 8001efa:	781f      	ldrb	r7, [r3, #0]
 8001efc:	b327      	cbz	r7, 8001f48 <d_operator_name+0x54>
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	60c2      	str	r2, [r0, #12]
 8001f02:	785a      	ldrb	r2, [r3, #1]
 8001f04:	781f      	ldrb	r7, [r3, #0]
 8001f06:	2a00      	cmp	r2, #0
 8001f08:	d058      	beq.n	8001fbc <d_operator_name+0xc8>
 8001f0a:	1c9a      	adds	r2, r3, #2
 8001f0c:	60c2      	str	r2, [r0, #12]
 8001f0e:	2f76      	cmp	r7, #118	; 0x76
 8001f10:	4604      	mov	r4, r0
 8001f12:	f893 e001 	ldrb.w	lr, [r3, #1]
 8001f16:	d043      	beq.n	8001fa0 <d_operator_name+0xac>
 8001f18:	2f63      	cmp	r7, #99	; 0x63
 8001f1a:	d116      	bne.n	8001f4a <d_operator_name+0x56>
 8001f1c:	f1be 0f76 	cmp.w	lr, #118	; 0x76
 8001f20:	d113      	bne.n	8001f4a <d_operator_name+0x56>
 8001f22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f24:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	6383      	str	r3, [r0, #56]	; 0x38
 8001f2e:	f7ff fc01 	bl	8001734 <d_type>
 8001f32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f34:	4602      	mov	r2, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d052      	beq.n	8001fe0 <d_operator_name+0xec>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2134      	movs	r1, #52	; 0x34
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f7fe f974 	bl	800022c <d_make_comp>
 8001f44:	63a5      	str	r5, [r4, #56]	; 0x38
 8001f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f48:	46be      	mov	lr, r7
 8001f4a:	2043      	movs	r0, #67	; 0x43
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	4d27      	ldr	r5, [pc, #156]	; (8001fec <d_operator_name+0xf8>)
 8001f50:	e004      	b.n	8001f5c <d_operator_name+0x68>
 8001f52:	bf8c      	ite	hi
 8001f54:	4618      	movhi	r0, r3
 8001f56:	1c5a      	addls	r2, r3, #1
 8001f58:	4282      	cmp	r2, r0
 8001f5a:	d02d      	beq.n	8001fb8 <d_operator_name+0xc4>
 8001f5c:	1a83      	subs	r3, r0, r2
 8001f5e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001f62:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8001f66:	0119      	lsls	r1, r3, #4
 8001f68:	586c      	ldr	r4, [r5, r1]
 8001f6a:	4429      	add	r1, r5
 8001f6c:	7826      	ldrb	r6, [r4, #0]
 8001f6e:	42be      	cmp	r6, r7
 8001f70:	d1ef      	bne.n	8001f52 <d_operator_name+0x5e>
 8001f72:	7864      	ldrb	r4, [r4, #1]
 8001f74:	4574      	cmp	r4, lr
 8001f76:	d1ec      	bne.n	8001f52 <d_operator_name+0x5e>
 8001f78:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8001f7c:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8001f80:	4293      	cmp	r3, r2
 8001f82:	da19      	bge.n	8001fb8 <d_operator_name+0xc4>
 8001f84:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001f88:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8001f8c:	0092      	lsls	r2, r2, #2
 8001f8e:	3301      	adds	r3, #1
 8001f90:	18a0      	adds	r0, r4, r2
 8001f92:	f8cc 3014 	str.w	r3, [ip, #20]
 8001f96:	d013      	beq.n	8001fc0 <d_operator_name+0xcc>
 8001f98:	2331      	movs	r3, #49	; 0x31
 8001f9a:	54a3      	strb	r3, [r4, r2]
 8001f9c:	6041      	str	r1, [r0, #4]
 8001f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fa0:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
 8001fa4:	b2eb      	uxtb	r3, r5
 8001fa6:	2b09      	cmp	r3, #9
 8001fa8:	d8cf      	bhi.n	8001f4a <d_operator_name+0x56>
 8001faa:	f7fe fb0f 	bl	80005cc <d_source_name>
 8001fae:	6963      	ldr	r3, [r4, #20]
 8001fb0:	69a2      	ldr	r2, [r4, #24]
 8001fb2:	4601      	mov	r1, r0
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	db04      	blt.n	8001fc2 <d_operator_name+0xce>
 8001fb8:	2000      	movs	r0, #0
 8001fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fbc:	4696      	mov	lr, r2
 8001fbe:	e7c4      	b.n	8001f4a <d_operator_name+0x56>
 8001fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fc2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001fc6:	6926      	ldr	r6, [r4, #16]
 8001fc8:	0092      	lsls	r2, r2, #2
 8001fca:	3301      	adds	r3, #1
 8001fcc:	18b0      	adds	r0, r6, r2
 8001fce:	6163      	str	r3, [r4, #20]
 8001fd0:	d0f2      	beq.n	8001fb8 <d_operator_name+0xc4>
 8001fd2:	2900      	cmp	r1, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <d_operator_name+0xc4>
 8001fd6:	2332      	movs	r3, #50	; 0x32
 8001fd8:	54b3      	strb	r3, [r6, r2]
 8001fda:	6045      	str	r5, [r0, #4]
 8001fdc:	6081      	str	r1, [r0, #8]
 8001fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fe0:	2133      	movs	r1, #51	; 0x33
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f7fe f922 	bl	800022c <d_make_comp>
 8001fe8:	e7ac      	b.n	8001f44 <d_operator_name+0x50>
 8001fea:	bf00      	nop
 8001fec:	0801c610 	.word	0x0801c610

08001ff0 <d_parmlist>:
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	b530      	push	{r4, r5, lr}
 8001ff4:	68c2      	ldr	r2, [r0, #12]
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	7813      	ldrb	r3, [r2, #0]
 8001ffc:	b343      	cbz	r3, 8002050 <d_parmlist+0x60>
 8001ffe:	2b45      	cmp	r3, #69	; 0x45
 8002000:	d026      	beq.n	8002050 <d_parmlist+0x60>
 8002002:	2b2e      	cmp	r3, #46	; 0x2e
 8002004:	d024      	beq.n	8002050 <d_parmlist+0x60>
 8002006:	4604      	mov	r4, r0
 8002008:	ad01      	add	r5, sp, #4
 800200a:	e016      	b.n	800203a <d_parmlist+0x4a>
 800200c:	2b4f      	cmp	r3, #79	; 0x4f
 800200e:	d016      	beq.n	800203e <d_parmlist+0x4e>
 8002010:	4620      	mov	r0, r4
 8002012:	f7ff fb8f 	bl	8001734 <d_type>
 8002016:	b1d8      	cbz	r0, 8002050 <d_parmlist+0x60>
 8002018:	4602      	mov	r2, r0
 800201a:	2300      	movs	r3, #0
 800201c:	212e      	movs	r1, #46	; 0x2e
 800201e:	4620      	mov	r0, r4
 8002020:	f7fe f904 	bl	800022c <d_make_comp>
 8002024:	6028      	str	r0, [r5, #0]
 8002026:	b198      	cbz	r0, 8002050 <d_parmlist+0x60>
 8002028:	68e2      	ldr	r2, [r4, #12]
 800202a:	f100 0508 	add.w	r5, r0, #8
 800202e:	7813      	ldrb	r3, [r2, #0]
 8002030:	b143      	cbz	r3, 8002044 <d_parmlist+0x54>
 8002032:	2b45      	cmp	r3, #69	; 0x45
 8002034:	d006      	beq.n	8002044 <d_parmlist+0x54>
 8002036:	2b2e      	cmp	r3, #46	; 0x2e
 8002038:	d004      	beq.n	8002044 <d_parmlist+0x54>
 800203a:	2b52      	cmp	r3, #82	; 0x52
 800203c:	d1e6      	bne.n	800200c <d_parmlist+0x1c>
 800203e:	7853      	ldrb	r3, [r2, #1]
 8002040:	2b45      	cmp	r3, #69	; 0x45
 8002042:	d1e5      	bne.n	8002010 <d_parmlist+0x20>
 8002044:	9801      	ldr	r0, [sp, #4]
 8002046:	b118      	cbz	r0, 8002050 <d_parmlist+0x60>
 8002048:	6883      	ldr	r3, [r0, #8]
 800204a:	b123      	cbz	r3, 8002056 <d_parmlist+0x66>
 800204c:	b003      	add	sp, #12
 800204e:	bd30      	pop	{r4, r5, pc}
 8002050:	2000      	movs	r0, #0
 8002052:	b003      	add	sp, #12
 8002054:	bd30      	pop	{r4, r5, pc}
 8002056:	6842      	ldr	r2, [r0, #4]
 8002058:	7811      	ldrb	r1, [r2, #0]
 800205a:	2927      	cmp	r1, #39	; 0x27
 800205c:	d1f6      	bne.n	800204c <d_parmlist+0x5c>
 800205e:	6852      	ldr	r2, [r2, #4]
 8002060:	7c11      	ldrb	r1, [r2, #16]
 8002062:	2909      	cmp	r1, #9
 8002064:	d1f2      	bne.n	800204c <d_parmlist+0x5c>
 8002066:	6851      	ldr	r1, [r2, #4]
 8002068:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800206a:	1a52      	subs	r2, r2, r1
 800206c:	6322      	str	r2, [r4, #48]	; 0x30
 800206e:	6043      	str	r3, [r0, #4]
 8002070:	e7ec      	b.n	800204c <d_parmlist+0x5c>
 8002072:	bf00      	nop

08002074 <d_unqualified_name>:
 8002074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002076:	68c1      	ldr	r1, [r0, #12]
 8002078:	4604      	mov	r4, r0
 800207a:	780b      	ldrb	r3, [r1, #0]
 800207c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002080:	2a09      	cmp	r2, #9
 8002082:	d920      	bls.n	80020c6 <d_unqualified_name+0x52>
 8002084:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002088:	2a19      	cmp	r2, #25
 800208a:	d925      	bls.n	80020d8 <d_unqualified_name+0x64>
 800208c:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
 8002090:	2a01      	cmp	r2, #1
 8002092:	d92c      	bls.n	80020ee <d_unqualified_name+0x7a>
 8002094:	2b4c      	cmp	r3, #76	; 0x4c
 8002096:	f000 8088 	beq.w	80021aa <d_unqualified_name+0x136>
 800209a:	2b55      	cmp	r3, #85	; 0x55
 800209c:	d133      	bne.n	8002106 <d_unqualified_name+0x92>
 800209e:	784b      	ldrb	r3, [r1, #1]
 80020a0:	2b6c      	cmp	r3, #108	; 0x6c
 80020a2:	d033      	beq.n	800210c <d_unqualified_name+0x98>
 80020a4:	2b74      	cmp	r3, #116	; 0x74
 80020a6:	d12e      	bne.n	8002106 <d_unqualified_name+0x92>
 80020a8:	1c4b      	adds	r3, r1, #1
 80020aa:	60c3      	str	r3, [r0, #12]
 80020ac:	784b      	ldrb	r3, [r1, #1]
 80020ae:	2b74      	cmp	r3, #116	; 0x74
 80020b0:	d05a      	beq.n	8002168 <d_unqualified_name+0xf4>
 80020b2:	2b42      	cmp	r3, #66	; 0x42
 80020b4:	f04f 0500 	mov.w	r5, #0
 80020b8:	d10c      	bne.n	80020d4 <d_unqualified_name+0x60>
 80020ba:	4629      	mov	r1, r5
 80020bc:	4620      	mov	r0, r4
 80020be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80020c2:	f7fe badf 	b.w	8000684 <d_abi_tags>
 80020c6:	f7fe fa81 	bl	80005cc <d_source_name>
 80020ca:	4605      	mov	r5, r0
 80020cc:	68e3      	ldr	r3, [r4, #12]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b42      	cmp	r3, #66	; 0x42
 80020d2:	d0f2      	beq.n	80020ba <d_unqualified_name+0x46>
 80020d4:	4628      	mov	r0, r5
 80020d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020d8:	f7ff ff0c 	bl	8001ef4 <d_operator_name>
 80020dc:	4605      	mov	r5, r0
 80020de:	b118      	cbz	r0, 80020e8 <d_unqualified_name+0x74>
 80020e0:	7803      	ldrb	r3, [r0, #0]
 80020e2:	2b31      	cmp	r3, #49	; 0x31
 80020e4:	f000 80b2 	beq.w	800224c <d_unqualified_name+0x1d8>
 80020e8:	68e3      	ldr	r3, [r4, #12]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	e7f0      	b.n	80020d0 <d_unqualified_name+0x5c>
 80020ee:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80020f0:	b125      	cbz	r5, 80020fc <d_unqualified_name+0x88>
 80020f2:	782a      	ldrb	r2, [r5, #0]
 80020f4:	2a00      	cmp	r2, #0
 80020f6:	d06c      	beq.n	80021d2 <d_unqualified_name+0x15e>
 80020f8:	2a18      	cmp	r2, #24
 80020fa:	d06a      	beq.n	80021d2 <d_unqualified_name+0x15e>
 80020fc:	2b43      	cmp	r3, #67	; 0x43
 80020fe:	f000 80bf 	beq.w	8002280 <d_unqualified_name+0x20c>
 8002102:	2b44      	cmp	r3, #68	; 0x44
 8002104:	d06f      	beq.n	80021e6 <d_unqualified_name+0x172>
 8002106:	2500      	movs	r5, #0
 8002108:	4628      	mov	r0, r5
 800210a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800210c:	1c4b      	adds	r3, r1, #1
 800210e:	60c3      	str	r3, [r0, #12]
 8002110:	784b      	ldrb	r3, [r1, #1]
 8002112:	2b6c      	cmp	r3, #108	; 0x6c
 8002114:	d1cd      	bne.n	80020b2 <d_unqualified_name+0x3e>
 8002116:	3102      	adds	r1, #2
 8002118:	60c1      	str	r1, [r0, #12]
 800211a:	f7ff ff69 	bl	8001ff0 <d_parmlist>
 800211e:	4606      	mov	r6, r0
 8002120:	b1f0      	cbz	r0, 8002160 <d_unqualified_name+0xec>
 8002122:	68e2      	ldr	r2, [r4, #12]
 8002124:	7813      	ldrb	r3, [r2, #0]
 8002126:	2b45      	cmp	r3, #69	; 0x45
 8002128:	d1c3      	bne.n	80020b2 <d_unqualified_name+0x3e>
 800212a:	3201      	adds	r2, #1
 800212c:	60e2      	str	r2, [r4, #12]
 800212e:	4620      	mov	r0, r4
 8002130:	f7fe fa0e 	bl	8000550 <d_compact_number>
 8002134:	2800      	cmp	r0, #0
 8002136:	db13      	blt.n	8002160 <d_unqualified_name+0xec>
 8002138:	6963      	ldr	r3, [r4, #20]
 800213a:	69a2      	ldr	r2, [r4, #24]
 800213c:	4293      	cmp	r3, r2
 800213e:	da0f      	bge.n	8002160 <d_unqualified_name+0xec>
 8002140:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002144:	6921      	ldr	r1, [r4, #16]
 8002146:	0092      	lsls	r2, r2, #2
 8002148:	3301      	adds	r3, #1
 800214a:	188d      	adds	r5, r1, r2
 800214c:	6163      	str	r3, [r4, #20]
 800214e:	d0cb      	beq.n	80020e8 <d_unqualified_name+0x74>
 8002150:	2345      	movs	r3, #69	; 0x45
 8002152:	548b      	strb	r3, [r1, r2]
 8002154:	606e      	str	r6, [r5, #4]
 8002156:	60a8      	str	r0, [r5, #8]
 8002158:	6a23      	ldr	r3, [r4, #32]
 800215a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800215c:	4293      	cmp	r3, r2
 800215e:	db1c      	blt.n	800219a <d_unqualified_name+0x126>
 8002160:	68e3      	ldr	r3, [r4, #12]
 8002162:	2500      	movs	r5, #0
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	e7b3      	b.n	80020d0 <d_unqualified_name+0x5c>
 8002168:	3102      	adds	r1, #2
 800216a:	60c1      	str	r1, [r0, #12]
 800216c:	f7fe f9f0 	bl	8000550 <d_compact_number>
 8002170:	2800      	cmp	r0, #0
 8002172:	dbf5      	blt.n	8002160 <d_unqualified_name+0xec>
 8002174:	6963      	ldr	r3, [r4, #20]
 8002176:	69a2      	ldr	r2, [r4, #24]
 8002178:	4293      	cmp	r3, r2
 800217a:	daf1      	bge.n	8002160 <d_unqualified_name+0xec>
 800217c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002180:	6921      	ldr	r1, [r4, #16]
 8002182:	0092      	lsls	r2, r2, #2
 8002184:	3301      	adds	r3, #1
 8002186:	188d      	adds	r5, r1, r2
 8002188:	6163      	str	r3, [r4, #20]
 800218a:	d0ad      	beq.n	80020e8 <d_unqualified_name+0x74>
 800218c:	2347      	movs	r3, #71	; 0x47
 800218e:	548b      	strb	r3, [r1, r2]
 8002190:	6068      	str	r0, [r5, #4]
 8002192:	6a23      	ldr	r3, [r4, #32]
 8002194:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002196:	4293      	cmp	r3, r2
 8002198:	dae2      	bge.n	8002160 <d_unqualified_name+0xec>
 800219a:	69e0      	ldr	r0, [r4, #28]
 800219c:	1c59      	adds	r1, r3, #1
 800219e:	68e2      	ldr	r2, [r4, #12]
 80021a0:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
 80021a4:	6221      	str	r1, [r4, #32]
 80021a6:	7813      	ldrb	r3, [r2, #0]
 80021a8:	e792      	b.n	80020d0 <d_unqualified_name+0x5c>
 80021aa:	3101      	adds	r1, #1
 80021ac:	60c1      	str	r1, [r0, #12]
 80021ae:	f7fe fa0d 	bl	80005cc <d_source_name>
 80021b2:	4605      	mov	r5, r0
 80021b4:	2800      	cmp	r0, #0
 80021b6:	d0a6      	beq.n	8002106 <d_unqualified_name+0x92>
 80021b8:	68e2      	ldr	r2, [r4, #12]
 80021ba:	7813      	ldrb	r3, [r2, #0]
 80021bc:	2b5f      	cmp	r3, #95	; 0x5f
 80021be:	d187      	bne.n	80020d0 <d_unqualified_name+0x5c>
 80021c0:	4620      	mov	r0, r4
 80021c2:	3201      	adds	r2, #1
 80021c4:	f840 2f0c 	str.w	r2, [r0, #12]!
 80021c8:	f7fe f980 	bl	80004cc <d_number.isra.0>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	da8b      	bge.n	80020e8 <d_unqualified_name+0x74>
 80021d0:	e799      	b.n	8002106 <d_unqualified_name+0x92>
 80021d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021d4:	68aa      	ldr	r2, [r5, #8]
 80021d6:	4413      	add	r3, r2
 80021d8:	6323      	str	r3, [r4, #48]	; 0x30
 80021da:	780b      	ldrb	r3, [r1, #0]
 80021dc:	2b43      	cmp	r3, #67	; 0x43
 80021de:	d04f      	beq.n	8002280 <d_unqualified_name+0x20c>
 80021e0:	2b44      	cmp	r3, #68	; 0x44
 80021e2:	f47f af66 	bne.w	80020b2 <d_unqualified_name+0x3e>
 80021e6:	784b      	ldrb	r3, [r1, #1]
 80021e8:	3b30      	subs	r3, #48	; 0x30
 80021ea:	2b05      	cmp	r3, #5
 80021ec:	d88b      	bhi.n	8002106 <d_unqualified_name+0x92>
 80021ee:	a201      	add	r2, pc, #4	; (adr r2, 80021f4 <d_unqualified_name+0x180>)
 80021f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f4:	08002249 	.word	0x08002249
 80021f8:	0800220d 	.word	0x0800220d
 80021fc:	08002245 	.word	0x08002245
 8002200:	08002107 	.word	0x08002107
 8002204:	08002241 	.word	0x08002241
 8002208:	0800223d 	.word	0x0800223d
 800220c:	2702      	movs	r7, #2
 800220e:	6963      	ldr	r3, [r4, #20]
 8002210:	69a2      	ldr	r2, [r4, #24]
 8002212:	1c88      	adds	r0, r1, #2
 8002214:	4293      	cmp	r3, r2
 8002216:	60e0      	str	r0, [r4, #12]
 8002218:	da56      	bge.n	80022c8 <d_unqualified_name+0x254>
 800221a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800221e:	6920      	ldr	r0, [r4, #16]
 8002220:	0092      	lsls	r2, r2, #2
 8002222:	3301      	adds	r3, #1
 8002224:	1886      	adds	r6, r0, r2
 8002226:	6163      	str	r3, [r4, #20]
 8002228:	d005      	beq.n	8002236 <d_unqualified_name+0x1c2>
 800222a:	2d00      	cmp	r5, #0
 800222c:	d04f      	beq.n	80022ce <d_unqualified_name+0x25a>
 800222e:	2308      	movs	r3, #8
 8002230:	5483      	strb	r3, [r0, r2]
 8002232:	7137      	strb	r7, [r6, #4]
 8002234:	60b5      	str	r5, [r6, #8]
 8002236:	788b      	ldrb	r3, [r1, #2]
 8002238:	4635      	mov	r5, r6
 800223a:	e749      	b.n	80020d0 <d_unqualified_name+0x5c>
 800223c:	2705      	movs	r7, #5
 800223e:	e7e6      	b.n	800220e <d_unqualified_name+0x19a>
 8002240:	2704      	movs	r7, #4
 8002242:	e7e4      	b.n	800220e <d_unqualified_name+0x19a>
 8002244:	2703      	movs	r7, #3
 8002246:	e7e2      	b.n	800220e <d_unqualified_name+0x19a>
 8002248:	2701      	movs	r7, #1
 800224a:	e7e0      	b.n	800220e <d_unqualified_name+0x19a>
 800224c:	6842      	ldr	r2, [r0, #4]
 800224e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002250:	6891      	ldr	r1, [r2, #8]
 8002252:	3307      	adds	r3, #7
 8002254:	440b      	add	r3, r1
 8002256:	6810      	ldr	r0, [r2, #0]
 8002258:	491e      	ldr	r1, [pc, #120]	; (80022d4 <d_unqualified_name+0x260>)
 800225a:	6323      	str	r3, [r4, #48]	; 0x30
 800225c:	f004 fb32 	bl	80068c4 <strcmp>
 8002260:	2800      	cmp	r0, #0
 8002262:	f47f af41 	bne.w	80020e8 <d_unqualified_name+0x74>
 8002266:	4620      	mov	r0, r4
 8002268:	f7fe f9b0 	bl	80005cc <d_source_name>
 800226c:	462a      	mov	r2, r5
 800226e:	4603      	mov	r3, r0
 8002270:	2136      	movs	r1, #54	; 0x36
 8002272:	4620      	mov	r0, r4
 8002274:	f7fd ffda 	bl	800022c <d_make_comp>
 8002278:	68e3      	ldr	r3, [r4, #12]
 800227a:	4605      	mov	r5, r0
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	e727      	b.n	80020d0 <d_unqualified_name+0x5c>
 8002280:	784b      	ldrb	r3, [r1, #1]
 8002282:	3b31      	subs	r3, #49	; 0x31
 8002284:	2b04      	cmp	r3, #4
 8002286:	f63f af3e 	bhi.w	8002106 <d_unqualified_name+0x92>
 800228a:	e8df f003 	tbb	[pc, r3]
 800228e:	0315      	.short	0x0315
 8002290:	191b      	.short	0x191b
 8002292:	17          	.byte	0x17
 8002293:	00          	.byte	0x00
 8002294:	2702      	movs	r7, #2
 8002296:	6963      	ldr	r3, [r4, #20]
 8002298:	69a2      	ldr	r2, [r4, #24]
 800229a:	1c88      	adds	r0, r1, #2
 800229c:	4293      	cmp	r3, r2
 800229e:	60e0      	str	r0, [r4, #12]
 80022a0:	da12      	bge.n	80022c8 <d_unqualified_name+0x254>
 80022a2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80022a6:	6920      	ldr	r0, [r4, #16]
 80022a8:	0092      	lsls	r2, r2, #2
 80022aa:	3301      	adds	r3, #1
 80022ac:	1886      	adds	r6, r0, r2
 80022ae:	6163      	str	r3, [r4, #20]
 80022b0:	d0c1      	beq.n	8002236 <d_unqualified_name+0x1c2>
 80022b2:	b165      	cbz	r5, 80022ce <d_unqualified_name+0x25a>
 80022b4:	2307      	movs	r3, #7
 80022b6:	e7bb      	b.n	8002230 <d_unqualified_name+0x1bc>
 80022b8:	2701      	movs	r7, #1
 80022ba:	e7ec      	b.n	8002296 <d_unqualified_name+0x222>
 80022bc:	2705      	movs	r7, #5
 80022be:	e7ea      	b.n	8002296 <d_unqualified_name+0x222>
 80022c0:	2704      	movs	r7, #4
 80022c2:	e7e8      	b.n	8002296 <d_unqualified_name+0x222>
 80022c4:	2703      	movs	r7, #3
 80022c6:	e7e6      	b.n	8002296 <d_unqualified_name+0x222>
 80022c8:	788b      	ldrb	r3, [r1, #2]
 80022ca:	2500      	movs	r5, #0
 80022cc:	e700      	b.n	80020d0 <d_unqualified_name+0x5c>
 80022ce:	788b      	ldrb	r3, [r1, #2]
 80022d0:	e6fe      	b.n	80020d0 <d_unqualified_name+0x5c>
 80022d2:	bf00      	nop
 80022d4:	08022a74 	.word	0x08022a74

080022d8 <d_bare_function_type>:
 80022d8:	b570      	push	{r4, r5, r6, lr}
 80022da:	68c3      	ldr	r3, [r0, #12]
 80022dc:	4604      	mov	r4, r0
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	2a4a      	cmp	r2, #74	; 0x4a
 80022e2:	d00d      	beq.n	8002300 <d_bare_function_type+0x28>
 80022e4:	b971      	cbnz	r1, 8002304 <d_bare_function_type+0x2c>
 80022e6:	460d      	mov	r5, r1
 80022e8:	4620      	mov	r0, r4
 80022ea:	f7ff fe81 	bl	8001ff0 <d_parmlist>
 80022ee:	b178      	cbz	r0, 8002310 <d_bare_function_type+0x38>
 80022f0:	4603      	mov	r3, r0
 80022f2:	462a      	mov	r2, r5
 80022f4:	4620      	mov	r0, r4
 80022f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80022fa:	2129      	movs	r1, #41	; 0x29
 80022fc:	f7fd bf96 	b.w	800022c <d_make_comp>
 8002300:	3301      	adds	r3, #1
 8002302:	60c3      	str	r3, [r0, #12]
 8002304:	4620      	mov	r0, r4
 8002306:	f7ff fa15 	bl	8001734 <d_type>
 800230a:	4605      	mov	r5, r0
 800230c:	2800      	cmp	r0, #0
 800230e:	d1eb      	bne.n	80022e8 <d_bare_function_type+0x10>
 8002310:	2000      	movs	r0, #0
 8002312:	bd70      	pop	{r4, r5, r6, pc}

08002314 <d_function_type>:
 8002314:	68c3      	ldr	r3, [r0, #12]
 8002316:	781a      	ldrb	r2, [r3, #0]
 8002318:	2a46      	cmp	r2, #70	; 0x46
 800231a:	d001      	beq.n	8002320 <d_function_type+0xc>
 800231c:	2000      	movs	r0, #0
 800231e:	4770      	bx	lr
 8002320:	b510      	push	{r4, lr}
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	60c2      	str	r2, [r0, #12]
 8002326:	785a      	ldrb	r2, [r3, #1]
 8002328:	2101      	movs	r1, #1
 800232a:	2a59      	cmp	r2, #89	; 0x59
 800232c:	bf04      	itt	eq
 800232e:	3302      	addeq	r3, #2
 8002330:	60c3      	streq	r3, [r0, #12]
 8002332:	4604      	mov	r4, r0
 8002334:	f7ff ffd0 	bl	80022d8 <d_bare_function_type>
 8002338:	4601      	mov	r1, r0
 800233a:	4620      	mov	r0, r4
 800233c:	f7fe f828 	bl	8000390 <d_ref_qualifier>
 8002340:	68e3      	ldr	r3, [r4, #12]
 8002342:	781a      	ldrb	r2, [r3, #0]
 8002344:	2a45      	cmp	r2, #69	; 0x45
 8002346:	d001      	beq.n	800234c <d_function_type+0x38>
 8002348:	2000      	movs	r0, #0
 800234a:	bd10      	pop	{r4, pc}
 800234c:	3301      	adds	r3, #1
 800234e:	60e3      	str	r3, [r4, #12]
 8002350:	bd10      	pop	{r4, pc}
 8002352:	bf00      	nop

08002354 <d_encoding>:
 8002354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002358:	68c3      	ldr	r3, [r0, #12]
 800235a:	4605      	mov	r5, r0
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	2a47      	cmp	r2, #71	; 0x47
 8002360:	d01f      	beq.n	80023a2 <d_encoding+0x4e>
 8002362:	2a54      	cmp	r2, #84	; 0x54
 8002364:	d01d      	beq.n	80023a2 <d_encoding+0x4e>
 8002366:	460e      	mov	r6, r1
 8002368:	f7ff f82c 	bl	80013c4 <d_name>
 800236c:	4604      	mov	r4, r0
 800236e:	b310      	cbz	r0, 80023b6 <d_encoding+0x62>
 8002370:	b32e      	cbz	r6, 80023be <d_encoding+0x6a>
 8002372:	68ab      	ldr	r3, [r5, #8]
 8002374:	07db      	lsls	r3, r3, #31
 8002376:	d422      	bmi.n	80023be <d_encoding+0x6a>
 8002378:	7823      	ldrb	r3, [r4, #0]
 800237a:	f1a3 021c 	sub.w	r2, r3, #28
 800237e:	2a04      	cmp	r2, #4
 8002380:	d940      	bls.n	8002404 <d_encoding+0xb0>
 8002382:	2b4c      	cmp	r3, #76	; 0x4c
 8002384:	d03e      	beq.n	8002404 <d_encoding+0xb0>
 8002386:	2b02      	cmp	r3, #2
 8002388:	d116      	bne.n	80023b8 <d_encoding+0x64>
 800238a:	68a3      	ldr	r3, [r4, #8]
 800238c:	781a      	ldrb	r2, [r3, #0]
 800238e:	f1a2 011c 	sub.w	r1, r2, #28
 8002392:	2904      	cmp	r1, #4
 8002394:	f240 8283 	bls.w	800289e <d_encoding+0x54a>
 8002398:	2a4c      	cmp	r2, #76	; 0x4c
 800239a:	f000 8280 	beq.w	800289e <d_encoding+0x54a>
 800239e:	60a3      	str	r3, [r4, #8]
 80023a0:	e00a      	b.n	80023b8 <d_encoding+0x64>
 80023a2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80023a4:	f101 0214 	add.w	r2, r1, #20
 80023a8:	632a      	str	r2, [r5, #48]	; 0x30
 80023aa:	781a      	ldrb	r2, [r3, #0]
 80023ac:	2a54      	cmp	r2, #84	; 0x54
 80023ae:	d02b      	beq.n	8002408 <d_encoding+0xb4>
 80023b0:	2a47      	cmp	r2, #71	; 0x47
 80023b2:	f000 809f 	beq.w	80024f4 <d_encoding+0x1a0>
 80023b6:	2400      	movs	r4, #0
 80023b8:	4620      	mov	r0, r4
 80023ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023be:	68eb      	ldr	r3, [r5, #12]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f8      	beq.n	80023b8 <d_encoding+0x64>
 80023c6:	2b45      	cmp	r3, #69	; 0x45
 80023c8:	d0f6      	beq.n	80023b8 <d_encoding+0x64>
 80023ca:	4621      	mov	r1, r4
 80023cc:	780a      	ldrb	r2, [r1, #0]
 80023ce:	2a20      	cmp	r2, #32
 80023d0:	f200 8113 	bhi.w	80025fa <d_encoding+0x2a6>
 80023d4:	2a1c      	cmp	r2, #28
 80023d6:	f080 8112 	bcs.w	80025fe <d_encoding+0x2aa>
 80023da:	2a04      	cmp	r2, #4
 80023dc:	f040 8101 	bne.w	80025e2 <d_encoding+0x28e>
 80023e0:	684a      	ldr	r2, [r1, #4]
 80023e2:	b16a      	cbz	r2, 8002400 <d_encoding+0xac>
 80023e4:	7813      	ldrb	r3, [r2, #0]
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 80023ec:	f200 80f6 	bhi.w	80025dc <d_encoding+0x288>
 80023f0:	2b07      	cmp	r3, #7
 80023f2:	f080 80f6 	bcs.w	80025e2 <d_encoding+0x28e>
 80023f6:	2901      	cmp	r1, #1
 80023f8:	d802      	bhi.n	8002400 <d_encoding+0xac>
 80023fa:	6892      	ldr	r2, [r2, #8]
 80023fc:	2a00      	cmp	r2, #0
 80023fe:	d1f1      	bne.n	80023e4 <d_encoding+0x90>
 8002400:	2101      	movs	r1, #1
 8002402:	e0ef      	b.n	80025e4 <d_encoding+0x290>
 8002404:	6864      	ldr	r4, [r4, #4]
 8002406:	e7b7      	b.n	8002378 <d_encoding+0x24>
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	60ea      	str	r2, [r5, #12]
 800240c:	785a      	ldrb	r2, [r3, #1]
 800240e:	2a00      	cmp	r2, #0
 8002410:	d0d1      	beq.n	80023b6 <d_encoding+0x62>
 8002412:	1c9a      	adds	r2, r3, #2
 8002414:	60ea      	str	r2, [r5, #12]
 8002416:	785b      	ldrb	r3, [r3, #1]
 8002418:	3b43      	subs	r3, #67	; 0x43
 800241a:	2b33      	cmp	r3, #51	; 0x33
 800241c:	d8cb      	bhi.n	80023b6 <d_encoding+0x62>
 800241e:	a201      	add	r2, pc, #4	; (adr r2, 8002424 <d_encoding+0xd0>)
 8002420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002424:	0800285f 	.word	0x0800285f
 8002428:	080023b7 	.word	0x080023b7
 800242c:	080023b7 	.word	0x080023b7
 8002430:	08002849 	.word	0x08002849
 8002434:	080023b7 	.word	0x080023b7
 8002438:	08002833 	.word	0x08002833
 800243c:	0800281d 	.word	0x0800281d
 8002440:	08002807 	.word	0x08002807
 8002444:	080023b7 	.word	0x080023b7
 8002448:	080023b7 	.word	0x080023b7
 800244c:	080023b7 	.word	0x080023b7
 8002450:	080023b7 	.word	0x080023b7
 8002454:	080023b7 	.word	0x080023b7
 8002458:	080023b7 	.word	0x080023b7
 800245c:	080023b7 	.word	0x080023b7
 8002460:	080023b7 	.word	0x080023b7
 8002464:	080027f1 	.word	0x080027f1
 8002468:	080027d7 	.word	0x080027d7
 800246c:	080023b7 	.word	0x080023b7
 8002470:	080027bd 	.word	0x080027bd
 8002474:	080027a7 	.word	0x080027a7
 8002478:	080023b7 	.word	0x080023b7
 800247c:	080023b7 	.word	0x080023b7
 8002480:	080023b7 	.word	0x080023b7
 8002484:	080023b7 	.word	0x080023b7
 8002488:	080023b7 	.word	0x080023b7
 800248c:	080023b7 	.word	0x080023b7
 8002490:	080023b7 	.word	0x080023b7
 8002494:	080023b7 	.word	0x080023b7
 8002498:	080023b7 	.word	0x080023b7
 800249c:	080023b7 	.word	0x080023b7
 80024a0:	080023b7 	.word	0x080023b7
 80024a4:	08002773 	.word	0x08002773
 80024a8:	080023b7 	.word	0x080023b7
 80024ac:	080023b7 	.word	0x080023b7
 80024b0:	080023b7 	.word	0x080023b7
 80024b4:	080023b7 	.word	0x080023b7
 80024b8:	0800274d 	.word	0x0800274d
 80024bc:	080023b7 	.word	0x080023b7
 80024c0:	080023b7 	.word	0x080023b7
 80024c4:	080023b7 	.word	0x080023b7
 80024c8:	080023b7 	.word	0x080023b7
 80024cc:	080023b7 	.word	0x080023b7
 80024d0:	080023b7 	.word	0x080023b7
 80024d4:	080023b7 	.word	0x080023b7
 80024d8:	080023b7 	.word	0x080023b7
 80024dc:	080023b7 	.word	0x080023b7
 80024e0:	080023b7 	.word	0x080023b7
 80024e4:	080023b7 	.word	0x080023b7
 80024e8:	080023b7 	.word	0x080023b7
 80024ec:	080023b7 	.word	0x080023b7
 80024f0:	08002727 	.word	0x08002727
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	60ea      	str	r2, [r5, #12]
 80024f8:	785a      	ldrb	r2, [r3, #1]
 80024fa:	2a00      	cmp	r2, #0
 80024fc:	f43f af5b 	beq.w	80023b6 <d_encoding+0x62>
 8002500:	1c9a      	adds	r2, r3, #2
 8002502:	60ea      	str	r2, [r5, #12]
 8002504:	785a      	ldrb	r2, [r3, #1]
 8002506:	3a41      	subs	r2, #65	; 0x41
 8002508:	2a31      	cmp	r2, #49	; 0x31
 800250a:	f63f af54 	bhi.w	80023b6 <d_encoding+0x62>
 800250e:	a101      	add	r1, pc, #4	; (adr r1, 8002514 <d_encoding+0x1c0>)
 8002510:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002514:	08002609 	.word	0x08002609
 8002518:	080023b7 	.word	0x080023b7
 800251c:	080023b7 	.word	0x080023b7
 8002520:	080023b7 	.word	0x080023b7
 8002524:	080023b7 	.word	0x080023b7
 8002528:	080023b7 	.word	0x080023b7
 800252c:	080023b7 	.word	0x080023b7
 8002530:	080023b7 	.word	0x080023b7
 8002534:	080023b7 	.word	0x080023b7
 8002538:	080023b7 	.word	0x080023b7
 800253c:	080023b7 	.word	0x080023b7
 8002540:	080023b7 	.word	0x080023b7
 8002544:	080023b7 	.word	0x080023b7
 8002548:	080023b7 	.word	0x080023b7
 800254c:	080023b7 	.word	0x080023b7
 8002550:	080023b7 	.word	0x080023b7
 8002554:	080023b7 	.word	0x080023b7
 8002558:	08002709 	.word	0x08002709
 800255c:	080023b7 	.word	0x080023b7
 8002560:	080026dd 	.word	0x080026dd
 8002564:	080023b7 	.word	0x080023b7
 8002568:	080026c7 	.word	0x080026c7
 800256c:	080023b7 	.word	0x080023b7
 8002570:	080023b7 	.word	0x080023b7
 8002574:	080023b7 	.word	0x080023b7
 8002578:	080023b7 	.word	0x080023b7
 800257c:	080023b7 	.word	0x080023b7
 8002580:	080023b7 	.word	0x080023b7
 8002584:	080023b7 	.word	0x080023b7
 8002588:	080023b7 	.word	0x080023b7
 800258c:	080023b7 	.word	0x080023b7
 8002590:	080023b7 	.word	0x080023b7
 8002594:	080023b7 	.word	0x080023b7
 8002598:	080023b7 	.word	0x080023b7
 800259c:	080023b7 	.word	0x080023b7
 80025a0:	080023b7 	.word	0x080023b7
 80025a4:	080023b7 	.word	0x080023b7
 80025a8:	080023b7 	.word	0x080023b7
 80025ac:	080023b7 	.word	0x080023b7
 80025b0:	080023b7 	.word	0x080023b7
 80025b4:	080023b7 	.word	0x080023b7
 80025b8:	080023b7 	.word	0x080023b7
 80025bc:	080023b7 	.word	0x080023b7
 80025c0:	080023b7 	.word	0x080023b7
 80025c4:	080023b7 	.word	0x080023b7
 80025c8:	080023b7 	.word	0x080023b7
 80025cc:	080023b7 	.word	0x080023b7
 80025d0:	080023b7 	.word	0x080023b7
 80025d4:	080023b7 	.word	0x080023b7
 80025d8:	08002621 	.word	0x08002621
 80025dc:	2b34      	cmp	r3, #52	; 0x34
 80025de:	f47f af0f 	bne.w	8002400 <d_encoding+0xac>
 80025e2:	2100      	movs	r1, #0
 80025e4:	4628      	mov	r0, r5
 80025e6:	f7ff fe77 	bl	80022d8 <d_bare_function_type>
 80025ea:	4622      	mov	r2, r4
 80025ec:	4603      	mov	r3, r0
 80025ee:	2103      	movs	r1, #3
 80025f0:	4628      	mov	r0, r5
 80025f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025f6:	f7fd be19 	b.w	800022c <d_make_comp>
 80025fa:	2a4c      	cmp	r2, #76	; 0x4c
 80025fc:	d1f1      	bne.n	80025e2 <d_encoding+0x28e>
 80025fe:	6849      	ldr	r1, [r1, #4]
 8002600:	2900      	cmp	r1, #0
 8002602:	f47f aee3 	bne.w	80023cc <d_encoding+0x78>
 8002606:	e7ed      	b.n	80025e4 <d_encoding+0x290>
 8002608:	2100      	movs	r1, #0
 800260a:	4628      	mov	r0, r5
 800260c:	f7ff fea2 	bl	8002354 <d_encoding>
 8002610:	2300      	movs	r3, #0
 8002612:	4602      	mov	r2, r0
 8002614:	2117      	movs	r1, #23
 8002616:	4628      	mov	r0, r5
 8002618:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800261c:	f7fd be06 	b.w	800022c <d_make_comp>
 8002620:	f105 000c 	add.w	r0, r5, #12
 8002624:	f7fd ff52 	bl	80004cc <d_number.isra.0>
 8002628:	2801      	cmp	r0, #1
 800262a:	f77f aec4 	ble.w	80023b6 <d_encoding+0x62>
 800262e:	68eb      	ldr	r3, [r5, #12]
 8002630:	781a      	ldrb	r2, [r3, #0]
 8002632:	2a00      	cmp	r2, #0
 8002634:	f43f aebf 	beq.w	80023b6 <d_encoding+0x62>
 8002638:	1c5f      	adds	r7, r3, #1
 800263a:	60ef      	str	r7, [r5, #12]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b5f      	cmp	r3, #95	; 0x5f
 8002640:	f47f aeb9 	bne.w	80023b6 <d_encoding+0x62>
 8002644:	2200      	movs	r2, #0
 8002646:	f04f 0940 	mov.w	r9, #64	; 0x40
 800264a:	4690      	mov	r8, r2
 800264c:	1e46      	subs	r6, r0, #1
 800264e:	783b      	ldrb	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	f43f aeb0 	beq.w	80023b6 <d_encoding+0x62>
 8002656:	2b24      	cmp	r3, #36	; 0x24
 8002658:	f000 8128 	beq.w	80028ac <d_encoding+0x558>
 800265c:	463c      	mov	r4, r7
 800265e:	2100      	movs	r1, #0
 8002660:	e004      	b.n	800266c <d_encoding+0x318>
 8002662:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002666:	b123      	cbz	r3, 8002672 <d_encoding+0x31e>
 8002668:	2b24      	cmp	r3, #36	; 0x24
 800266a:	d002      	beq.n	8002672 <d_encoding+0x31e>
 800266c:	3101      	adds	r1, #1
 800266e:	42b1      	cmp	r1, r6
 8002670:	dbf7      	blt.n	8002662 <d_encoding+0x30e>
 8002672:	696c      	ldr	r4, [r5, #20]
 8002674:	69a8      	ldr	r0, [r5, #24]
 8002676:	4284      	cmp	r4, r0
 8002678:	f280 8113 	bge.w	80028a2 <d_encoding+0x54e>
 800267c:	6928      	ldr	r0, [r5, #16]
 800267e:	1c63      	adds	r3, r4, #1
 8002680:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002684:	616b      	str	r3, [r5, #20]
 8002686:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
 800268a:	f000 810a 	beq.w	80028a2 <d_encoding+0x54e>
 800268e:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
 8002692:	605f      	str	r7, [r3, #4]
 8002694:	6099      	str	r1, [r3, #8]
 8002696:	68ef      	ldr	r7, [r5, #12]
 8002698:	1a76      	subs	r6, r6, r1
 800269a:	440f      	add	r7, r1
 800269c:	60ef      	str	r7, [r5, #12]
 800269e:	2a00      	cmp	r2, #0
 80026a0:	f000 8121 	beq.w	80028e6 <d_encoding+0x592>
 80026a4:	213f      	movs	r1, #63	; 0x3f
 80026a6:	4628      	mov	r0, r5
 80026a8:	f7fd fdc0 	bl	800022c <d_make_comp>
 80026ac:	4602      	mov	r2, r0
 80026ae:	2800      	cmp	r0, #0
 80026b0:	f43f ae81 	beq.w	80023b6 <d_encoding+0x62>
 80026b4:	2e00      	cmp	r6, #0
 80026b6:	dcca      	bgt.n	800264e <d_encoding+0x2fa>
 80026b8:	4628      	mov	r0, r5
 80026ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026be:	2300      	movs	r3, #0
 80026c0:	213e      	movs	r1, #62	; 0x3e
 80026c2:	f7fd bdb3 	b.w	800022c <d_make_comp>
 80026c6:	4628      	mov	r0, r5
 80026c8:	f7fe fe7c 	bl	80013c4 <d_name>
 80026cc:	2300      	movs	r3, #0
 80026ce:	4602      	mov	r2, r0
 80026d0:	2113      	movs	r1, #19
 80026d2:	4628      	mov	r0, r5
 80026d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026d8:	f7fd bda8 	b.w	800022c <d_make_comp>
 80026dc:	789a      	ldrb	r2, [r3, #2]
 80026de:	2100      	movs	r1, #0
 80026e0:	4628      	mov	r0, r5
 80026e2:	2a00      	cmp	r2, #0
 80026e4:	f000 8101 	beq.w	80028ea <d_encoding+0x596>
 80026e8:	1cda      	adds	r2, r3, #3
 80026ea:	60ea      	str	r2, [r5, #12]
 80026ec:	789b      	ldrb	r3, [r3, #2]
 80026ee:	2b6e      	cmp	r3, #110	; 0x6e
 80026f0:	f040 80fb 	bne.w	80028ea <d_encoding+0x596>
 80026f4:	f7ff fe2e 	bl	8002354 <d_encoding>
 80026f8:	2300      	movs	r3, #0
 80026fa:	4602      	mov	r2, r0
 80026fc:	2149      	movs	r1, #73	; 0x49
 80026fe:	4628      	mov	r0, r5
 8002700:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002704:	f7fd bd92 	b.w	800022c <d_make_comp>
 8002708:	4628      	mov	r0, r5
 800270a:	f7fe fe5b 	bl	80013c4 <d_name>
 800270e:	4604      	mov	r4, r0
 8002710:	4628      	mov	r0, r5
 8002712:	f7fd ff05 	bl	8000520 <d_number_component>
 8002716:	4622      	mov	r2, r4
 8002718:	4603      	mov	r3, r0
 800271a:	2116      	movs	r1, #22
 800271c:	4628      	mov	r0, r5
 800271e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002722:	f7fd bd83 	b.w	800022c <d_make_comp>
 8002726:	2176      	movs	r1, #118	; 0x76
 8002728:	4628      	mov	r0, r5
 800272a:	f7fe f883 	bl	8000834 <d_call_offset>
 800272e:	2800      	cmp	r0, #0
 8002730:	f43f ae41 	beq.w	80023b6 <d_encoding+0x62>
 8002734:	2100      	movs	r1, #0
 8002736:	4628      	mov	r0, r5
 8002738:	f7ff fe0c 	bl	8002354 <d_encoding>
 800273c:	2300      	movs	r3, #0
 800273e:	4602      	mov	r2, r0
 8002740:	2110      	movs	r1, #16
 8002742:	4628      	mov	r0, r5
 8002744:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002748:	f7fd bd70 	b.w	800022c <d_make_comp>
 800274c:	2168      	movs	r1, #104	; 0x68
 800274e:	4628      	mov	r0, r5
 8002750:	f7fe f870 	bl	8000834 <d_call_offset>
 8002754:	2800      	cmp	r0, #0
 8002756:	f43f ae2e 	beq.w	80023b6 <d_encoding+0x62>
 800275a:	2100      	movs	r1, #0
 800275c:	4628      	mov	r0, r5
 800275e:	f7ff fdf9 	bl	8002354 <d_encoding>
 8002762:	2300      	movs	r3, #0
 8002764:	4602      	mov	r2, r0
 8002766:	210f      	movs	r1, #15
 8002768:	4628      	mov	r0, r5
 800276a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800276e:	f7fd bd5d 	b.w	800022c <d_make_comp>
 8002772:	2100      	movs	r1, #0
 8002774:	4628      	mov	r0, r5
 8002776:	f7fe f85d 	bl	8000834 <d_call_offset>
 800277a:	2800      	cmp	r0, #0
 800277c:	f43f ae1b 	beq.w	80023b6 <d_encoding+0x62>
 8002780:	2100      	movs	r1, #0
 8002782:	4628      	mov	r0, r5
 8002784:	f7fe f856 	bl	8000834 <d_call_offset>
 8002788:	2800      	cmp	r0, #0
 800278a:	f43f ae14 	beq.w	80023b6 <d_encoding+0x62>
 800278e:	2100      	movs	r1, #0
 8002790:	4628      	mov	r0, r5
 8002792:	f7ff fddf 	bl	8002354 <d_encoding>
 8002796:	2300      	movs	r3, #0
 8002798:	4602      	mov	r2, r0
 800279a:	2111      	movs	r1, #17
 800279c:	4628      	mov	r0, r5
 800279e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027a2:	f7fd bd43 	b.w	800022c <d_make_comp>
 80027a6:	4628      	mov	r0, r5
 80027a8:	f7fe fe0c 	bl	80013c4 <d_name>
 80027ac:	2300      	movs	r3, #0
 80027ae:	4602      	mov	r2, r0
 80027b0:	2115      	movs	r1, #21
 80027b2:	4628      	mov	r0, r5
 80027b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027b8:	f7fd bd38 	b.w	800022c <d_make_comp>
 80027bc:	310f      	adds	r1, #15
 80027be:	6329      	str	r1, [r5, #48]	; 0x30
 80027c0:	4628      	mov	r0, r5
 80027c2:	f7fe ffb7 	bl	8001734 <d_type>
 80027c6:	2300      	movs	r3, #0
 80027c8:	4602      	mov	r2, r0
 80027ca:	2109      	movs	r1, #9
 80027cc:	4628      	mov	r0, r5
 80027ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027d2:	f7fd bd2b 	b.w	800022c <d_make_comp>
 80027d6:	310a      	adds	r1, #10
 80027d8:	6329      	str	r1, [r5, #48]	; 0x30
 80027da:	4628      	mov	r0, r5
 80027dc:	f7fe ffaa 	bl	8001734 <d_type>
 80027e0:	2300      	movs	r3, #0
 80027e2:	4602      	mov	r2, r0
 80027e4:	210a      	movs	r1, #10
 80027e6:	4628      	mov	r0, r5
 80027e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027ec:	f7fd bd1e 	b.w	800022c <d_make_comp>
 80027f0:	4628      	mov	r0, r5
 80027f2:	f7fe ff9f 	bl	8001734 <d_type>
 80027f6:	2300      	movs	r3, #0
 80027f8:	4602      	mov	r2, r0
 80027fa:	210d      	movs	r1, #13
 80027fc:	4628      	mov	r0, r5
 80027fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002802:	f7fd bd13 	b.w	800022c <d_make_comp>
 8002806:	4628      	mov	r0, r5
 8002808:	f7fe ff94 	bl	8001734 <d_type>
 800280c:	2300      	movs	r3, #0
 800280e:	4602      	mov	r2, r0
 8002810:	2112      	movs	r1, #18
 8002812:	4628      	mov	r0, r5
 8002814:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002818:	f7fd bd08 	b.w	800022c <d_make_comp>
 800281c:	4628      	mov	r0, r5
 800281e:	f7fe ff89 	bl	8001734 <d_type>
 8002822:	2300      	movs	r3, #0
 8002824:	4602      	mov	r2, r0
 8002826:	210c      	movs	r1, #12
 8002828:	4628      	mov	r0, r5
 800282a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800282e:	f7fd bcfd 	b.w	800022c <d_make_comp>
 8002832:	4628      	mov	r0, r5
 8002834:	f7fe fdc6 	bl	80013c4 <d_name>
 8002838:	2300      	movs	r3, #0
 800283a:	4602      	mov	r2, r0
 800283c:	2114      	movs	r1, #20
 800283e:	4628      	mov	r0, r5
 8002840:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002844:	f7fd bcf2 	b.w	800022c <d_make_comp>
 8002848:	4628      	mov	r0, r5
 800284a:	f7fe ff73 	bl	8001734 <d_type>
 800284e:	2300      	movs	r3, #0
 8002850:	4602      	mov	r2, r0
 8002852:	210e      	movs	r1, #14
 8002854:	4628      	mov	r0, r5
 8002856:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800285a:	f7fd bce7 	b.w	800022c <d_make_comp>
 800285e:	4628      	mov	r0, r5
 8002860:	f7fe ff68 	bl	8001734 <d_type>
 8002864:	4604      	mov	r4, r0
 8002866:	f105 000c 	add.w	r0, r5, #12
 800286a:	f7fd fe2f 	bl	80004cc <d_number.isra.0>
 800286e:	2800      	cmp	r0, #0
 8002870:	f6ff ada1 	blt.w	80023b6 <d_encoding+0x62>
 8002874:	68eb      	ldr	r3, [r5, #12]
 8002876:	781a      	ldrb	r2, [r3, #0]
 8002878:	2a5f      	cmp	r2, #95	; 0x5f
 800287a:	f47f ad9c 	bne.w	80023b6 <d_encoding+0x62>
 800287e:	3301      	adds	r3, #1
 8002880:	60eb      	str	r3, [r5, #12]
 8002882:	4628      	mov	r0, r5
 8002884:	f7fe ff56 	bl	8001734 <d_type>
 8002888:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800288a:	4602      	mov	r2, r0
 800288c:	1d59      	adds	r1, r3, #5
 800288e:	6329      	str	r1, [r5, #48]	; 0x30
 8002890:	4623      	mov	r3, r4
 8002892:	4628      	mov	r0, r5
 8002894:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002898:	210b      	movs	r1, #11
 800289a:	f7fd bcc7 	b.w	800022c <d_make_comp>
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	e574      	b.n	800238c <d_encoding+0x38>
 80028a2:	68eb      	ldr	r3, [r5, #12]
 80028a4:	2400      	movs	r4, #0
 80028a6:	440b      	add	r3, r1
 80028a8:	60eb      	str	r3, [r5, #12]
 80028aa:	e585      	b.n	80023b8 <d_encoding+0x64>
 80028ac:	787b      	ldrb	r3, [r7, #1]
 80028ae:	2b53      	cmp	r3, #83	; 0x53
 80028b0:	d027      	beq.n	8002902 <d_encoding+0x5ae>
 80028b2:	2b5f      	cmp	r3, #95	; 0x5f
 80028b4:	d023      	beq.n	80028fe <d_encoding+0x5aa>
 80028b6:	2b24      	cmp	r3, #36	; 0x24
 80028b8:	f47f ad7d 	bne.w	80023b6 <d_encoding+0x62>
 80028bc:	4618      	mov	r0, r3
 80028be:	6969      	ldr	r1, [r5, #20]
 80028c0:	69ab      	ldr	r3, [r5, #24]
 80028c2:	4299      	cmp	r1, r3
 80028c4:	da1f      	bge.n	8002906 <d_encoding+0x5b2>
 80028c6:	692c      	ldr	r4, [r5, #16]
 80028c8:	1c4f      	adds	r7, r1, #1
 80028ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80028ce:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
 80028d2:	616f      	str	r7, [r5, #20]
 80028d4:	d017      	beq.n	8002906 <d_encoding+0x5b2>
 80028d6:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
 80028da:	6058      	str	r0, [r3, #4]
 80028dc:	68ef      	ldr	r7, [r5, #12]
 80028de:	3e02      	subs	r6, #2
 80028e0:	3702      	adds	r7, #2
 80028e2:	60ef      	str	r7, [r5, #12]
 80028e4:	e6db      	b.n	800269e <d_encoding+0x34a>
 80028e6:	461a      	mov	r2, r3
 80028e8:	e6e4      	b.n	80026b4 <d_encoding+0x360>
 80028ea:	f7ff fd33 	bl	8002354 <d_encoding>
 80028ee:	2300      	movs	r3, #0
 80028f0:	4602      	mov	r2, r0
 80028f2:	2148      	movs	r1, #72	; 0x48
 80028f4:	4628      	mov	r0, r5
 80028f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028fa:	f7fd bc97 	b.w	800022c <d_make_comp>
 80028fe:	202e      	movs	r0, #46	; 0x2e
 8002900:	e7dd      	b.n	80028be <d_encoding+0x56a>
 8002902:	202f      	movs	r0, #47	; 0x2f
 8002904:	e7db      	b.n	80028be <d_encoding+0x56a>
 8002906:	68eb      	ldr	r3, [r5, #12]
 8002908:	2400      	movs	r4, #0
 800290a:	3302      	adds	r3, #2
 800290c:	60eb      	str	r3, [r5, #12]
 800290e:	e553      	b.n	80023b8 <d_encoding+0x64>

08002910 <d_expr_primary>:
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002912:	68c2      	ldr	r2, [r0, #12]
 8002914:	7813      	ldrb	r3, [r2, #0]
 8002916:	2b4c      	cmp	r3, #76	; 0x4c
 8002918:	d001      	beq.n	800291e <d_expr_primary+0xe>
 800291a:	2000      	movs	r0, #0
 800291c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800291e:	1c53      	adds	r3, r2, #1
 8002920:	60c3      	str	r3, [r0, #12]
 8002922:	7851      	ldrb	r1, [r2, #1]
 8002924:	4605      	mov	r5, r0
 8002926:	295f      	cmp	r1, #95	; 0x5f
 8002928:	d03a      	beq.n	80029a0 <d_expr_primary+0x90>
 800292a:	295a      	cmp	r1, #90	; 0x5a
 800292c:	d03f      	beq.n	80029ae <d_expr_primary+0x9e>
 800292e:	f7fe ff01 	bl	8001734 <d_type>
 8002932:	2800      	cmp	r0, #0
 8002934:	d0f1      	beq.n	800291a <d_expr_primary+0xa>
 8002936:	7803      	ldrb	r3, [r0, #0]
 8002938:	2b27      	cmp	r3, #39	; 0x27
 800293a:	d046      	beq.n	80029ca <d_expr_primary+0xba>
 800293c:	68ee      	ldr	r6, [r5, #12]
 800293e:	7833      	ldrb	r3, [r6, #0]
 8002940:	2b6e      	cmp	r3, #110	; 0x6e
 8002942:	d04b      	beq.n	80029dc <d_expr_primary+0xcc>
 8002944:	213c      	movs	r1, #60	; 0x3c
 8002946:	2b45      	cmp	r3, #69	; 0x45
 8002948:	d04e      	beq.n	80029e8 <d_expr_primary+0xd8>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0e5      	beq.n	800291a <d_expr_primary+0xa>
 800294e:	4633      	mov	r3, r6
 8002950:	e001      	b.n	8002956 <d_expr_primary+0x46>
 8002952:	2c00      	cmp	r4, #0
 8002954:	d0e1      	beq.n	800291a <d_expr_primary+0xa>
 8002956:	3301      	adds	r3, #1
 8002958:	60eb      	str	r3, [r5, #12]
 800295a:	781c      	ldrb	r4, [r3, #0]
 800295c:	2c45      	cmp	r4, #69	; 0x45
 800295e:	d1f8      	bne.n	8002952 <d_expr_primary+0x42>
 8002960:	1b9c      	subs	r4, r3, r6
 8002962:	696b      	ldr	r3, [r5, #20]
 8002964:	69aa      	ldr	r2, [r5, #24]
 8002966:	4293      	cmp	r3, r2
 8002968:	da2d      	bge.n	80029c6 <d_expr_primary+0xb6>
 800296a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800296e:	692f      	ldr	r7, [r5, #16]
 8002970:	3301      	adds	r3, #1
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	616b      	str	r3, [r5, #20]
 8002976:	18bb      	adds	r3, r7, r2
 8002978:	d025      	beq.n	80029c6 <d_expr_primary+0xb6>
 800297a:	b326      	cbz	r6, 80029c6 <d_expr_primary+0xb6>
 800297c:	b31c      	cbz	r4, 80029c6 <d_expr_primary+0xb6>
 800297e:	f04f 0e00 	mov.w	lr, #0
 8002982:	f807 e002 	strb.w	lr, [r7, r2]
 8002986:	605e      	str	r6, [r3, #4]
 8002988:	609c      	str	r4, [r3, #8]
 800298a:	4602      	mov	r2, r0
 800298c:	4628      	mov	r0, r5
 800298e:	f7fd fc4d 	bl	800022c <d_make_comp>
 8002992:	68eb      	ldr	r3, [r5, #12]
 8002994:	781a      	ldrb	r2, [r3, #0]
 8002996:	2a45      	cmp	r2, #69	; 0x45
 8002998:	d1bf      	bne.n	800291a <d_expr_primary+0xa>
 800299a:	3301      	adds	r3, #1
 800299c:	60eb      	str	r3, [r5, #12]
 800299e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029a0:	1c93      	adds	r3, r2, #2
 80029a2:	60c3      	str	r3, [r0, #12]
 80029a4:	7892      	ldrb	r2, [r2, #2]
 80029a6:	2a5a      	cmp	r2, #90	; 0x5a
 80029a8:	bf18      	it	ne
 80029aa:	2000      	movne	r0, #0
 80029ac:	d107      	bne.n	80029be <d_expr_primary+0xae>
 80029ae:	3301      	adds	r3, #1
 80029b0:	60eb      	str	r3, [r5, #12]
 80029b2:	2100      	movs	r1, #0
 80029b4:	4628      	mov	r0, r5
 80029b6:	f7ff fccd 	bl	8002354 <d_encoding>
 80029ba:	68eb      	ldr	r3, [r5, #12]
 80029bc:	781a      	ldrb	r2, [r3, #0]
 80029be:	2a45      	cmp	r2, #69	; 0x45
 80029c0:	d0eb      	beq.n	800299a <d_expr_primary+0x8a>
 80029c2:	2000      	movs	r0, #0
 80029c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029c6:	2300      	movs	r3, #0
 80029c8:	e7df      	b.n	800298a <d_expr_primary+0x7a>
 80029ca:	6843      	ldr	r3, [r0, #4]
 80029cc:	7c1a      	ldrb	r2, [r3, #16]
 80029ce:	2a00      	cmp	r2, #0
 80029d0:	d0b4      	beq.n	800293c <d_expr_primary+0x2c>
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	632b      	str	r3, [r5, #48]	; 0x30
 80029da:	e7af      	b.n	800293c <d_expr_primary+0x2c>
 80029dc:	1c72      	adds	r2, r6, #1
 80029de:	60ea      	str	r2, [r5, #12]
 80029e0:	7873      	ldrb	r3, [r6, #1]
 80029e2:	213d      	movs	r1, #61	; 0x3d
 80029e4:	4616      	mov	r6, r2
 80029e6:	e7ae      	b.n	8002946 <d_expr_primary+0x36>
 80029e8:	2400      	movs	r4, #0
 80029ea:	e7ba      	b.n	8002962 <d_expr_primary+0x52>

080029ec <d_print_comp_inner>:
 80029ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029f0:	4604      	mov	r4, r0
 80029f2:	b095      	sub	sp, #84	; 0x54
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	f000 80db 	beq.w	8002bb0 <d_print_comp_inner+0x1c4>
 80029fa:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
 80029fe:	2f00      	cmp	r7, #0
 8002a00:	f040 80c2 	bne.w	8002b88 <d_print_comp_inner+0x19c>
 8002a04:	7813      	ldrb	r3, [r2, #0]
 8002a06:	4688      	mov	r8, r1
 8002a08:	4615      	mov	r5, r2
 8002a0a:	2b4d      	cmp	r3, #77	; 0x4d
 8002a0c:	f201 81ea 	bhi.w	8003de4 <d_print_comp_inner+0x13f8>
 8002a10:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002a14:	043b0459 	.word	0x043b0459
 8002a18:	03a4043b 	.word	0x03a4043b
 8002a1c:	048804a4 	.word	0x048804a4
 8002a20:	038e04e9 	.word	0x038e04e9
 8002a24:	0330037c 	.word	0x0330037c
 8002a28:	030a0356 	.word	0x030a0356
 8002a2c:	029802e4 	.word	0x029802e4
 8002a30:	027202be 	.word	0x027202be
 8002a34:	01f0024c 	.word	0x01f0024c
 8002a38:	01ca0226 	.word	0x01ca0226
 8002a3c:	015801a4 	.word	0x015801a4
 8002a40:	0132017e 	.word	0x0132017e
 8002a44:	00f2010b 	.word	0x00f2010b
 8002a48:	00f200f2 	.word	0x00f200f2
 8002a4c:	00d400d4 	.word	0x00d400d4
 8002a50:	00d400d4 	.word	0x00d400d4
 8002a54:	00d400d4 	.word	0x00d400d4
 8002a58:	06d800d4 	.word	0x06d800d4
 8002a5c:	00d406d8 	.word	0x00d406d8
 8002a60:	06ac00d4 	.word	0x06ac00d4
 8002a64:	069606ff 	.word	0x069606ff
 8002a68:	07040720 	.word	0x07040720
 8002a6c:	0704078c 	.word	0x0704078c
 8002a70:	057b057b 	.word	0x057b057b
 8002a74:	06080632 	.word	0x06080632
 8002a78:	09e805e2 	.word	0x09e805e2
 8002a7c:	069105af 	.word	0x069105af
 8002a80:	004e0656 	.word	0x004e0656
 8002a84:	09500484 	.word	0x09500484
 8002a88:	08e308e3 	.word	0x08e308e3
 8002a8c:	08b208b2 	.word	0x08b208b2
 8002a90:	0548088c 	.word	0x0548088c
 8002a94:	08e8053a 	.word	0x08e8053a
 8002a98:	09c20514 	.word	0x09c20514
 8002a9c:	099c0918 	.word	0x099c0918
 8002aa0:	07cf09e8 	.word	0x07cf09e8
 8002aa4:	07f50866 	.word	0x07f50866
 8002aa8:	0412081b 	.word	0x0412081b
 8002aac:	055200d4 	.word	0x055200d4
 8002ab0:	68ab      	ldr	r3, [r5, #8]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b38      	cmp	r3, #56	; 0x38
 8002ab6:	d17b      	bne.n	8002bb0 <d_print_comp_inner+0x1c4>
 8002ab8:	686a      	ldr	r2, [r5, #4]
 8002aba:	6853      	ldr	r3, [r2, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	7859      	ldrb	r1, [r3, #1]
 8002ac0:	2963      	cmp	r1, #99	; 0x63
 8002ac2:	f002 8150 	beq.w	8004d66 <d_print_comp_inner+0x237a>
 8002ac6:	f105 0308 	add.w	r3, r5, #8
 8002aca:	4641      	mov	r1, r8
 8002acc:	4620      	mov	r0, r4
 8002ace:	f003 fbc9 	bl	8006264 <d_maybe_print_fold_expression.isra.15>
 8002ad2:	4606      	mov	r6, r0
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	d157      	bne.n	8002b88 <d_print_comp_inner+0x19c>
 8002ad8:	686b      	ldr	r3, [r5, #4]
 8002ada:	781a      	ldrb	r2, [r3, #0]
 8002adc:	2a31      	cmp	r2, #49	; 0x31
 8002ade:	f002 8371 	beq.w	80051c4 <d_print_comp_inner+0x27d8>
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	49c7      	ldr	r1, [pc, #796]	; (8002e04 <d_print_comp_inner+0x418>)
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	f003 feec 	bl	80068c4 <strcmp>
 8002aec:	68ab      	ldr	r3, [r5, #8]
 8002aee:	b920      	cbnz	r0, 8002afa <d_print_comp_inner+0x10e>
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	7811      	ldrb	r1, [r2, #0]
 8002af4:	2903      	cmp	r1, #3
 8002af6:	f002 83ab 	beq.w	8005250 <d_print_comp_inner+0x2864>
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	4641      	mov	r1, r8
 8002afe:	4620      	mov	r0, r4
 8002b00:	f003 fb4c 	bl	800619c <d_print_subexpr>
 8002b04:	686f      	ldr	r7, [r5, #4]
 8002b06:	49c0      	ldr	r1, [pc, #768]	; (8002e08 <d_print_comp_inner+0x41c>)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8d3 9000 	ldr.w	r9, [r3]
 8002b0e:	4648      	mov	r0, r9
 8002b10:	f003 fed8 	bl	80068c4 <strcmp>
 8002b14:	4606      	mov	r6, r0
 8002b16:	2800      	cmp	r0, #0
 8002b18:	f042 8275 	bne.w	8005006 <d_print_comp_inner+0x261a>
 8002b1c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002b20:	29ff      	cmp	r1, #255	; 0xff
 8002b22:	f002 8450 	beq.w	80053c6 <d_print_comp_inner+0x29da>
 8002b26:	235b      	movs	r3, #91	; 0x5b
 8002b28:	1c4a      	adds	r2, r1, #1
 8002b2a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002b2e:	5463      	strb	r3, [r4, r1]
 8002b30:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002b34:	68ab      	ldr	r3, [r5, #8]
 8002b36:	4641      	mov	r1, r8
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f002 fd00 	bl	8005540 <d_print_comp>
 8002b40:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002b44:	29ff      	cmp	r1, #255	; 0xff
 8002b46:	f002 842b 	beq.w	80053a0 <d_print_comp_inner+0x29b4>
 8002b4a:	235d      	movs	r3, #93	; 0x5d
 8002b4c:	1c4a      	adds	r2, r1, #1
 8002b4e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002b52:	5463      	strb	r3, [r4, r1]
 8002b54:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002b58:	686b      	ldr	r3, [r5, #4]
 8002b5a:	781a      	ldrb	r2, [r3, #0]
 8002b5c:	2a31      	cmp	r2, #49	; 0x31
 8002b5e:	d113      	bne.n	8002b88 <d_print_comp_inner+0x19c>
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	2a01      	cmp	r2, #1
 8002b66:	d10f      	bne.n	8002b88 <d_print_comp_inner+0x19c>
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b3e      	cmp	r3, #62	; 0x3e
 8002b6e:	d10b      	bne.n	8002b88 <d_print_comp_inner+0x19c>
 8002b70:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002b74:	29ff      	cmp	r1, #255	; 0xff
 8002b76:	f002 8488 	beq.w	800548a <d_print_comp_inner+0x2a9e>
 8002b7a:	2329      	movs	r3, #41	; 0x29
 8002b7c:	1c4a      	adds	r2, r1, #1
 8002b7e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002b82:	5463      	strb	r3, [r4, r1]
 8002b84:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002b88:	b015      	add	sp, #84	; 0x54
 8002b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b8e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f2c1 84a8 	blt.w	80044e8 <d_print_comp_inner+0x1afc>
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f002 8438 	beq.w	800540e <d_print_comp_inner+0x2a22>
 8002b9e:	6880      	ldr	r0, [r0, #8]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b110      	cbz	r0, 8002baa <d_print_comp_inner+0x1be>
 8002ba4:	7802      	ldrb	r2, [r0, #0]
 8002ba6:	2a2f      	cmp	r2, #47	; 0x2f
 8002ba8:	d0f6      	beq.n	8002b98 <d_print_comp_inner+0x1ac>
 8002baa:	b10f      	cbz	r7, 8002bb0 <d_print_comp_inner+0x1c4>
 8002bac:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8002bb6:	b015      	add	sp, #84	; 0x54
 8002bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bbc:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	ab14      	add	r3, sp, #80	; 0x50
 8002bc4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8002bc8:	f843 cd40 	str.w	ip, [r3, #-64]!
 8002bcc:	9505      	str	r5, [sp, #20]
 8002bce:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002bd2:	9106      	str	r1, [sp, #24]
 8002bd4:	9207      	str	r2, [sp, #28]
 8002bd6:	686a      	ldr	r2, [r5, #4]
 8002bd8:	4641      	mov	r1, r8
 8002bda:	4620      	mov	r0, r4
 8002bdc:	f002 fcb0 	bl	8005540 <d_print_comp>
 8002be0:	9b06      	ldr	r3, [sp, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f001 838d 	beq.w	8004302 <d_print_comp_inner+0x1916>
 8002be8:	9b04      	ldr	r3, [sp, #16]
 8002bea:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002bee:	2f00      	cmp	r7, #0
 8002bf0:	d0ca      	beq.n	8002b88 <d_print_comp_inner+0x19c>
 8002bf2:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8002bf6:	e7c7      	b.n	8002b88 <d_print_comp_inner+0x19c>
 8002bf8:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 8002bfc:	f1bc 0f00 	cmp.w	ip, #0
 8002c00:	d0de      	beq.n	8002bc0 <d_print_comp_inner+0x1d4>
 8002c02:	4662      	mov	r2, ip
 8002c04:	e005      	b.n	8002c12 <d_print_comp_inner+0x226>
 8002c06:	428b      	cmp	r3, r1
 8002c08:	f001 86bc 	beq.w	8004984 <d_print_comp_inner+0x1f98>
 8002c0c:	6812      	ldr	r2, [r2, #0]
 8002c0e:	2a00      	cmp	r2, #0
 8002c10:	d0d6      	beq.n	8002bc0 <d_print_comp_inner+0x1d4>
 8002c12:	6890      	ldr	r0, [r2, #8]
 8002c14:	2800      	cmp	r0, #0
 8002c16:	d1f9      	bne.n	8002c0c <d_print_comp_inner+0x220>
 8002c18:	6851      	ldr	r1, [r2, #4]
 8002c1a:	7809      	ldrb	r1, [r1, #0]
 8002c1c:	f1a1 0e19 	sub.w	lr, r1, #25
 8002c20:	f1be 0f02 	cmp.w	lr, #2
 8002c24:	d9ef      	bls.n	8002c06 <d_print_comp_inner+0x21a>
 8002c26:	4607      	mov	r7, r0
 8002c28:	e7ca      	b.n	8002bc0 <d_print_comp_inner+0x1d4>
 8002c2a:	68af      	ldr	r7, [r5, #8]
 8002c2c:	686d      	ldr	r5, [r5, #4]
 8002c2e:	2f00      	cmp	r7, #0
 8002c30:	d0aa      	beq.n	8002b88 <d_print_comp_inner+0x19c>
 8002c32:	f04f 0800 	mov.w	r8, #0
 8002c36:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002c3a:	442f      	add	r7, r5
 8002c3c:	e008      	b.n	8002c50 <d_print_comp_inner+0x264>
 8002c3e:	460b      	mov	r3, r1
 8002c40:	3101      	adds	r1, #1
 8002c42:	42bd      	cmp	r5, r7
 8002c44:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002c48:	54e6      	strb	r6, [r4, r3]
 8002c4a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8002c4e:	d09b      	beq.n	8002b88 <d_print_comp_inner+0x19c>
 8002c50:	29ff      	cmp	r1, #255	; 0xff
 8002c52:	f815 6b01 	ldrb.w	r6, [r5], #1
 8002c56:	d1f2      	bne.n	8002c3e <d_print_comp_inner+0x252>
 8002c58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c60:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002c64:	4620      	mov	r0, r4
 8002c66:	4798      	blx	r3
 8002c68:	2101      	movs	r1, #1
 8002c6a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002c6e:	2300      	movs	r3, #0
 8002c70:	440a      	add	r2, r1
 8002c72:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002c76:	e7e4      	b.n	8002c42 <d_print_comp_inner+0x256>
 8002c78:	4e64      	ldr	r6, [pc, #400]	; (8002e0c <d_print_comp_inner+0x420>)
 8002c7a:	f04f 0900 	mov.w	r9, #0
 8002c7e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002c82:	f106 0a11 	add.w	sl, r6, #17
 8002c86:	e009      	b.n	8002c9c <d_print_comp_inner+0x2b0>
 8002c88:	460b      	mov	r3, r1
 8002c8a:	3101      	adds	r1, #1
 8002c8c:	4556      	cmp	r6, sl
 8002c8e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002c92:	54e7      	strb	r7, [r4, r3]
 8002c94:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002c98:	f001 829a 	beq.w	80041d0 <d_print_comp_inner+0x17e4>
 8002c9c:	29ff      	cmp	r1, #255	; 0xff
 8002c9e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002ca2:	d1f1      	bne.n	8002c88 <d_print_comp_inner+0x29c>
 8002ca4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ca8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002cac:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	4798      	blx	r3
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002cba:	2300      	movs	r3, #0
 8002cbc:	440a      	add	r2, r1
 8002cbe:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002cc2:	e7e3      	b.n	8002c8c <d_print_comp_inner+0x2a0>
 8002cc4:	4e52      	ldr	r6, [pc, #328]	; (8002e10 <d_print_comp_inner+0x424>)
 8002cc6:	f04f 0900 	mov.w	r9, #0
 8002cca:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002cce:	f106 0a19 	add.w	sl, r6, #25
 8002cd2:	e009      	b.n	8002ce8 <d_print_comp_inner+0x2fc>
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	3101      	adds	r1, #1
 8002cd8:	4556      	cmp	r6, sl
 8002cda:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002cde:	54e7      	strb	r7, [r4, r3]
 8002ce0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002ce4:	f001 82ac 	beq.w	8004240 <d_print_comp_inner+0x1854>
 8002ce8:	29ff      	cmp	r1, #255	; 0xff
 8002cea:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002cee:	d1f1      	bne.n	8002cd4 <d_print_comp_inner+0x2e8>
 8002cf0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002cf4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002cf8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	4798      	blx	r3
 8002d00:	2101      	movs	r1, #1
 8002d02:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002d06:	2300      	movs	r3, #0
 8002d08:	440a      	add	r2, r1
 8002d0a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002d0e:	e7e3      	b.n	8002cd8 <d_print_comp_inner+0x2ec>
 8002d10:	4e40      	ldr	r6, [pc, #256]	; (8002e14 <d_print_comp_inner+0x428>)
 8002d12:	f04f 0900 	mov.w	r9, #0
 8002d16:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002d1a:	f106 0a15 	add.w	sl, r6, #21
 8002d1e:	e009      	b.n	8002d34 <d_print_comp_inner+0x348>
 8002d20:	460b      	mov	r3, r1
 8002d22:	3101      	adds	r1, #1
 8002d24:	4556      	cmp	r6, sl
 8002d26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002d2a:	54e7      	strb	r7, [r4, r3]
 8002d2c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002d30:	f001 8255 	beq.w	80041de <d_print_comp_inner+0x17f2>
 8002d34:	29ff      	cmp	r1, #255	; 0xff
 8002d36:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002d3a:	d1f1      	bne.n	8002d20 <d_print_comp_inner+0x334>
 8002d3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d44:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002d48:	4620      	mov	r0, r4
 8002d4a:	4798      	blx	r3
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002d52:	2300      	movs	r3, #0
 8002d54:	440a      	add	r2, r1
 8002d56:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002d5a:	e7e3      	b.n	8002d24 <d_print_comp_inner+0x338>
 8002d5c:	4e2e      	ldr	r6, [pc, #184]	; (8002e18 <d_print_comp_inner+0x42c>)
 8002d5e:	f04f 0900 	mov.w	r9, #0
 8002d62:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002d66:	f106 0a16 	add.w	sl, r6, #22
 8002d6a:	e009      	b.n	8002d80 <d_print_comp_inner+0x394>
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	3101      	adds	r1, #1
 8002d70:	4556      	cmp	r6, sl
 8002d72:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002d76:	54e7      	strb	r7, [r4, r3]
 8002d78:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002d7c:	f001 8267 	beq.w	800424e <d_print_comp_inner+0x1862>
 8002d80:	29ff      	cmp	r1, #255	; 0xff
 8002d82:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002d86:	d1f1      	bne.n	8002d6c <d_print_comp_inner+0x380>
 8002d88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d90:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002d94:	4620      	mov	r0, r4
 8002d96:	4798      	blx	r3
 8002d98:	2101      	movs	r1, #1
 8002d9a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002d9e:	2300      	movs	r3, #0
 8002da0:	440a      	add	r2, r1
 8002da2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002da6:	e7e3      	b.n	8002d70 <d_print_comp_inner+0x384>
 8002da8:	4e1c      	ldr	r6, [pc, #112]	; (8002e1c <d_print_comp_inner+0x430>)
 8002daa:	f04f 0900 	mov.w	r9, #0
 8002dae:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002db2:	f106 0a13 	add.w	sl, r6, #19
 8002db6:	e009      	b.n	8002dcc <d_print_comp_inner+0x3e0>
 8002db8:	460b      	mov	r3, r1
 8002dba:	3101      	adds	r1, #1
 8002dbc:	45b2      	cmp	sl, r6
 8002dbe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002dc2:	54e7      	strb	r7, [r4, r3]
 8002dc4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002dc8:	f001 807c 	beq.w	8003ec4 <d_print_comp_inner+0x14d8>
 8002dcc:	29ff      	cmp	r1, #255	; 0xff
 8002dce:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002dd2:	d1f1      	bne.n	8002db8 <d_print_comp_inner+0x3cc>
 8002dd4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002dd8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ddc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002de0:	4620      	mov	r0, r4
 8002de2:	4798      	blx	r3
 8002de4:	2101      	movs	r1, #1
 8002de6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002dea:	2300      	movs	r3, #0
 8002dec:	440a      	add	r2, r1
 8002dee:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002df2:	e7e3      	b.n	8002dbc <d_print_comp_inner+0x3d0>
 8002df4:	4e0a      	ldr	r6, [pc, #40]	; (8002e20 <d_print_comp_inner+0x434>)
 8002df6:	f04f 0900 	mov.w	r9, #0
 8002dfa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002dfe:	f106 0a1a 	add.w	sl, r6, #26
 8002e02:	e019      	b.n	8002e38 <d_print_comp_inner+0x44c>
 8002e04:	08022a38 	.word	0x08022a38
 8002e08:	08022c34 	.word	0x08022c34
 8002e0c:	08022bc3 	.word	0x08022bc3
 8002e10:	08022b8f 	.word	0x08022b8f
 8002e14:	08022bab 	.word	0x08022bab
 8002e18:	08022b77 	.word	0x08022b77
 8002e1c:	08022b63 	.word	0x08022b63
 8002e20:	08022b37 	.word	0x08022b37
 8002e24:	460b      	mov	r3, r1
 8002e26:	3101      	adds	r1, #1
 8002e28:	4556      	cmp	r6, sl
 8002e2a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002e2e:	54e7      	strb	r7, [r4, r3]
 8002e30:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002e34:	f001 8054 	beq.w	8003ee0 <d_print_comp_inner+0x14f4>
 8002e38:	29ff      	cmp	r1, #255	; 0xff
 8002e3a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002e3e:	d1f1      	bne.n	8002e24 <d_print_comp_inner+0x438>
 8002e40:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e48:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	4798      	blx	r3
 8002e50:	2101      	movs	r1, #1
 8002e52:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002e56:	2300      	movs	r3, #0
 8002e58:	440a      	add	r2, r1
 8002e5a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002e5e:	e7e3      	b.n	8002e28 <d_print_comp_inner+0x43c>
 8002e60:	4eb5      	ldr	r6, [pc, #724]	; (8003138 <d_print_comp_inner+0x74c>)
 8002e62:	f04f 0900 	mov.w	r9, #0
 8002e66:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002e6a:	f106 0a0f 	add.w	sl, r6, #15
 8002e6e:	e009      	b.n	8002e84 <d_print_comp_inner+0x498>
 8002e70:	460b      	mov	r3, r1
 8002e72:	3101      	adds	r1, #1
 8002e74:	4556      	cmp	r6, sl
 8002e76:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002e7a:	54e7      	strb	r7, [r4, r3]
 8002e7c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002e80:	f001 8027 	beq.w	8003ed2 <d_print_comp_inner+0x14e6>
 8002e84:	29ff      	cmp	r1, #255	; 0xff
 8002e86:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002e8a:	d1f1      	bne.n	8002e70 <d_print_comp_inner+0x484>
 8002e8c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e94:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002e98:	4620      	mov	r0, r4
 8002e9a:	4798      	blx	r3
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	440a      	add	r2, r1
 8002ea6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002eaa:	e7e3      	b.n	8002e74 <d_print_comp_inner+0x488>
 8002eac:	4ea3      	ldr	r6, [pc, #652]	; (800313c <d_print_comp_inner+0x750>)
 8002eae:	f04f 0900 	mov.w	r9, #0
 8002eb2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002eb6:	f106 0a11 	add.w	sl, r6, #17
 8002eba:	e009      	b.n	8002ed0 <d_print_comp_inner+0x4e4>
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	3101      	adds	r1, #1
 8002ec0:	4556      	cmp	r6, sl
 8002ec2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002ec6:	54e7      	strb	r7, [r4, r3]
 8002ec8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002ecc:	f001 800f 	beq.w	8003eee <d_print_comp_inner+0x1502>
 8002ed0:	29ff      	cmp	r1, #255	; 0xff
 8002ed2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002ed6:	d1f1      	bne.n	8002ebc <d_print_comp_inner+0x4d0>
 8002ed8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002edc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ee0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	4798      	blx	r3
 8002ee8:	2101      	movs	r1, #1
 8002eea:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002eee:	2300      	movs	r3, #0
 8002ef0:	440a      	add	r2, r1
 8002ef2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002ef6:	e7e3      	b.n	8002ec0 <d_print_comp_inner+0x4d4>
 8002ef8:	4e91      	ldr	r6, [pc, #580]	; (8003140 <d_print_comp_inner+0x754>)
 8002efa:	f04f 0900 	mov.w	r9, #0
 8002efe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f02:	f106 0a15 	add.w	sl, r6, #21
 8002f06:	e009      	b.n	8002f1c <d_print_comp_inner+0x530>
 8002f08:	460b      	mov	r3, r1
 8002f0a:	3101      	adds	r1, #1
 8002f0c:	4556      	cmp	r6, sl
 8002f0e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f12:	54e7      	strb	r7, [r4, r3]
 8002f14:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002f18:	f000 87b8 	beq.w	8003e8c <d_print_comp_inner+0x14a0>
 8002f1c:	29ff      	cmp	r1, #255	; 0xff
 8002f1e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002f22:	d1f1      	bne.n	8002f08 <d_print_comp_inner+0x51c>
 8002f24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f28:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f2c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f30:	4620      	mov	r0, r4
 8002f32:	4798      	blx	r3
 8002f34:	2101      	movs	r1, #1
 8002f36:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	440a      	add	r2, r1
 8002f3e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002f42:	e7e3      	b.n	8002f0c <d_print_comp_inner+0x520>
 8002f44:	4e7f      	ldr	r6, [pc, #508]	; (8003144 <d_print_comp_inner+0x758>)
 8002f46:	f04f 0900 	mov.w	r9, #0
 8002f4a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f4e:	f106 0a12 	add.w	sl, r6, #18
 8002f52:	e009      	b.n	8002f68 <d_print_comp_inner+0x57c>
 8002f54:	460b      	mov	r3, r1
 8002f56:	3101      	adds	r1, #1
 8002f58:	45b2      	cmp	sl, r6
 8002f5a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f5e:	54e7      	strb	r7, [r4, r3]
 8002f60:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002f64:	f000 87a0 	beq.w	8003ea8 <d_print_comp_inner+0x14bc>
 8002f68:	29ff      	cmp	r1, #255	; 0xff
 8002f6a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002f6e:	d1f1      	bne.n	8002f54 <d_print_comp_inner+0x568>
 8002f70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f78:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	4798      	blx	r3
 8002f80:	2101      	movs	r1, #1
 8002f82:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002f86:	2300      	movs	r3, #0
 8002f88:	440a      	add	r2, r1
 8002f8a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002f8e:	e7e3      	b.n	8002f58 <d_print_comp_inner+0x56c>
 8002f90:	4e6d      	ldr	r6, [pc, #436]	; (8003148 <d_print_comp_inner+0x75c>)
 8002f92:	f04f 0900 	mov.w	r9, #0
 8002f96:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f9a:	f106 0a10 	add.w	sl, r6, #16
 8002f9e:	e009      	b.n	8002fb4 <d_print_comp_inner+0x5c8>
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	3101      	adds	r1, #1
 8002fa4:	4556      	cmp	r6, sl
 8002fa6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002faa:	54e7      	strb	r7, [r4, r3]
 8002fac:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002fb0:	f000 8773 	beq.w	8003e9a <d_print_comp_inner+0x14ae>
 8002fb4:	29ff      	cmp	r1, #255	; 0xff
 8002fb6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002fba:	d1f1      	bne.n	8002fa0 <d_print_comp_inner+0x5b4>
 8002fbc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fc0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fc4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002fc8:	4620      	mov	r0, r4
 8002fca:	4798      	blx	r3
 8002fcc:	2101      	movs	r1, #1
 8002fce:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	440a      	add	r2, r1
 8002fd6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002fda:	e7e3      	b.n	8002fa4 <d_print_comp_inner+0x5b8>
 8002fdc:	4e5b      	ldr	r6, [pc, #364]	; (800314c <d_print_comp_inner+0x760>)
 8002fde:	f04f 0900 	mov.w	r9, #0
 8002fe2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002fe6:	f106 0a0d 	add.w	sl, r6, #13
 8002fea:	e009      	b.n	8003000 <d_print_comp_inner+0x614>
 8002fec:	460b      	mov	r3, r1
 8002fee:	3101      	adds	r1, #1
 8002ff0:	4556      	cmp	r6, sl
 8002ff2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002ff6:	54e7      	strb	r7, [r4, r3]
 8002ff8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002ffc:	f000 875b 	beq.w	8003eb6 <d_print_comp_inner+0x14ca>
 8003000:	29ff      	cmp	r1, #255	; 0xff
 8003002:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003006:	d1f1      	bne.n	8002fec <d_print_comp_inner+0x600>
 8003008:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800300c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003010:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003014:	4620      	mov	r0, r4
 8003016:	4798      	blx	r3
 8003018:	2101      	movs	r1, #1
 800301a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800301e:	2300      	movs	r3, #0
 8003020:	440a      	add	r2, r1
 8003022:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003026:	e7e3      	b.n	8002ff0 <d_print_comp_inner+0x604>
 8003028:	4e49      	ldr	r6, [pc, #292]	; (8003150 <d_print_comp_inner+0x764>)
 800302a:	f04f 0900 	mov.w	r9, #0
 800302e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003032:	f106 0a18 	add.w	sl, r6, #24
 8003036:	e009      	b.n	800304c <d_print_comp_inner+0x660>
 8003038:	460b      	mov	r3, r1
 800303a:	3101      	adds	r1, #1
 800303c:	45b2      	cmp	sl, r6
 800303e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003042:	54e7      	strb	r7, [r4, r3]
 8003044:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003048:	f000 86e8 	beq.w	8003e1c <d_print_comp_inner+0x1430>
 800304c:	29ff      	cmp	r1, #255	; 0xff
 800304e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003052:	d1f1      	bne.n	8003038 <d_print_comp_inner+0x64c>
 8003054:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003058:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800305c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003060:	4620      	mov	r0, r4
 8003062:	4798      	blx	r3
 8003064:	2101      	movs	r1, #1
 8003066:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800306a:	2300      	movs	r3, #0
 800306c:	440a      	add	r2, r1
 800306e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003072:	e7e3      	b.n	800303c <d_print_comp_inner+0x650>
 8003074:	4e37      	ldr	r6, [pc, #220]	; (8003154 <d_print_comp_inner+0x768>)
 8003076:	f04f 0900 	mov.w	r9, #0
 800307a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800307e:	f106 0a0b 	add.w	sl, r6, #11
 8003082:	e009      	b.n	8003098 <d_print_comp_inner+0x6ac>
 8003084:	460b      	mov	r3, r1
 8003086:	3101      	adds	r1, #1
 8003088:	45b2      	cmp	sl, r6
 800308a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800308e:	54e7      	strb	r7, [r4, r3]
 8003090:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003094:	f000 87cf 	beq.w	8004036 <d_print_comp_inner+0x164a>
 8003098:	29ff      	cmp	r1, #255	; 0xff
 800309a:	f816 7b01 	ldrb.w	r7, [r6], #1
 800309e:	d1f1      	bne.n	8003084 <d_print_comp_inner+0x698>
 80030a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030a8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80030ac:	4620      	mov	r0, r4
 80030ae:	4798      	blx	r3
 80030b0:	2101      	movs	r1, #1
 80030b2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80030b6:	2300      	movs	r3, #0
 80030b8:	440a      	add	r2, r1
 80030ba:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80030be:	e7e3      	b.n	8003088 <d_print_comp_inner+0x69c>
 80030c0:	4e25      	ldr	r6, [pc, #148]	; (8003158 <d_print_comp_inner+0x76c>)
 80030c2:	f04f 0900 	mov.w	r9, #0
 80030c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80030ca:	f106 0a08 	add.w	sl, r6, #8
 80030ce:	e009      	b.n	80030e4 <d_print_comp_inner+0x6f8>
 80030d0:	460b      	mov	r3, r1
 80030d2:	3101      	adds	r1, #1
 80030d4:	45b2      	cmp	sl, r6
 80030d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80030da:	54e7      	strb	r7, [r4, r3]
 80030dc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80030e0:	f000 86cd 	beq.w	8003e7e <d_print_comp_inner+0x1492>
 80030e4:	29ff      	cmp	r1, #255	; 0xff
 80030e6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80030ea:	d1f1      	bne.n	80030d0 <d_print_comp_inner+0x6e4>
 80030ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030f4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80030f8:	4620      	mov	r0, r4
 80030fa:	4798      	blx	r3
 80030fc:	2101      	movs	r1, #1
 80030fe:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003102:	2300      	movs	r3, #0
 8003104:	440a      	add	r2, r1
 8003106:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800310a:	e7e3      	b.n	80030d4 <d_print_comp_inner+0x6e8>
 800310c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003110:	29ff      	cmp	r1, #255	; 0xff
 8003112:	f001 8480 	beq.w	8004a16 <d_print_comp_inner+0x202a>
 8003116:	1c4a      	adds	r2, r1, #1
 8003118:	237e      	movs	r3, #126	; 0x7e
 800311a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800311e:	5463      	strb	r3, [r4, r1]
 8003120:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003124:	4641      	mov	r1, r8
 8003126:	68aa      	ldr	r2, [r5, #8]
 8003128:	4620      	mov	r0, r4
 800312a:	f002 fa09 	bl	8005540 <d_print_comp>
 800312e:	e52b      	b.n	8002b88 <d_print_comp_inner+0x19c>
 8003130:	68aa      	ldr	r2, [r5, #8]
 8003132:	f002 fa05 	bl	8005540 <d_print_comp>
 8003136:	e527      	b.n	8002b88 <d_print_comp_inner+0x19c>
 8003138:	08022b53 	.word	0x08022b53
 800313c:	08022b23 	.word	0x08022b23
 8003140:	08022b1f 	.word	0x08022b1f
 8003144:	08022af7 	.word	0x08022af7
 8003148:	08022b0b 	.word	0x08022b0b
 800314c:	08022ae8 	.word	0x08022ae8
 8003150:	08022ac3 	.word	0x08022ac3
 8003154:	08022aac 	.word	0x08022aac
 8003158:	08022ab7 	.word	0x08022ab7
 800315c:	2200      	movs	r2, #0
 800315e:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8003162:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8003166:	686e      	ldr	r6, [r5, #4]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	2e00      	cmp	r6, #0
 800316c:	f000 8651 	beq.w	8003e12 <d_print_comp_inner+0x1426>
 8003170:	f10d 0910 	add.w	r9, sp, #16
 8003174:	4617      	mov	r7, r2
 8003176:	4696      	mov	lr, r2
 8003178:	464b      	mov	r3, r9
 800317a:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
 800317e:	7831      	ldrb	r1, [r6, #0]
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f1a1 021c 	sub.w	r2, r1, #28
 8003186:	2a04      	cmp	r2, #4
 8003188:	605e      	str	r6, [r3, #4]
 800318a:	f8c3 e008 	str.w	lr, [r3, #8]
 800318e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8003192:	f107 0701 	add.w	r7, r7, #1
 8003196:	4618      	mov	r0, r3
 8003198:	f240 862f 	bls.w	8003dfa <d_print_comp_inner+0x140e>
 800319c:	294c      	cmp	r1, #76	; 0x4c
 800319e:	f000 862c 	beq.w	8003dfa <d_print_comp_inner+0x140e>
 80031a2:	2904      	cmp	r1, #4
 80031a4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80031a8:	f001 87c2 	beq.w	8005130 <d_print_comp_inner+0x2744>
 80031ac:	2902      	cmp	r1, #2
 80031ae:	d11a      	bne.n	80031e6 <d_print_comp_inner+0x7fa>
 80031b0:	f8d6 b008 	ldr.w	fp, [r6, #8]
 80031b4:	f89b 3000 	ldrb.w	r3, [fp]
 80031b8:	2b46      	cmp	r3, #70	; 0x46
 80031ba:	f002 803c 	beq.w	8005236 <d_print_comp_inner+0x284a>
 80031be:	462b      	mov	r3, r5
 80031c0:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
 80031c4:	9601      	str	r6, [sp, #4]
 80031c6:	465d      	mov	r5, fp
 80031c8:	4676      	mov	r6, lr
 80031ca:	46a2      	mov	sl, r4
 80031cc:	469b      	mov	fp, r3
 80031ce:	782b      	ldrb	r3, [r5, #0]
 80031d0:	f1a3 021c 	sub.w	r2, r3, #28
 80031d4:	2a04      	cmp	r2, #4
 80031d6:	f241 8062 	bls.w	800429e <d_print_comp_inner+0x18b2>
 80031da:	2b4c      	cmp	r3, #76	; 0x4c
 80031dc:	f001 805f 	beq.w	800429e <d_print_comp_inner+0x18b2>
 80031e0:	4654      	mov	r4, sl
 80031e2:	465d      	mov	r5, fp
 80031e4:	9e01      	ldr	r6, [sp, #4]
 80031e6:	68aa      	ldr	r2, [r5, #8]
 80031e8:	4641      	mov	r1, r8
 80031ea:	4620      	mov	r0, r4
 80031ec:	f002 f9a8 	bl	8005540 <d_print_comp>
 80031f0:	7833      	ldrb	r3, [r6, #0]
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	f002 8027 	beq.w	8005246 <d_print_comp_inner+0x285a>
 80031f8:	2520      	movs	r5, #32
 80031fa:	eb09 1907 	add.w	r9, r9, r7, lsl #4
 80031fe:	f859 6c08 	ldr.w	r6, [r9, #-8]
 8003202:	3f01      	subs	r7, #1
 8003204:	b986      	cbnz	r6, 8003228 <d_print_comp_inner+0x83c>
 8003206:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800320a:	29ff      	cmp	r1, #255	; 0xff
 800320c:	f002 804a 	beq.w	80052a4 <d_print_comp_inner+0x28b8>
 8003210:	1c4b      	adds	r3, r1, #1
 8003212:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003216:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 800321a:	5465      	strb	r5, [r4, r1]
 800321c:	4620      	mov	r0, r4
 800321e:	4641      	mov	r1, r8
 8003220:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003224:	f002 f99c 	bl	8005560 <d_print_mod>
 8003228:	f1a9 0910 	sub.w	r9, r9, #16
 800322c:	2f00      	cmp	r7, #0
 800322e:	d1e6      	bne.n	80031fe <d_print_comp_inner+0x812>
 8003230:	9b00      	ldr	r3, [sp, #0]
 8003232:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003236:	e4a7      	b.n	8002b88 <d_print_comp_inner+0x19c>
 8003238:	4ed2      	ldr	r6, [pc, #840]	; (8003584 <d_print_comp_inner+0xb98>)
 800323a:	686a      	ldr	r2, [r5, #4]
 800323c:	f002 f980 	bl	8005540 <d_print_comp>
 8003240:	f04f 0900 	mov.w	r9, #0
 8003244:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003248:	f106 0a05 	add.w	sl, r6, #5
 800324c:	e009      	b.n	8003262 <d_print_comp_inner+0x876>
 800324e:	460b      	mov	r3, r1
 8003250:	3101      	adds	r1, #1
 8003252:	45b2      	cmp	sl, r6
 8003254:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003258:	54e7      	strb	r7, [r4, r3]
 800325a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800325e:	f000 86d7 	beq.w	8004010 <d_print_comp_inner+0x1624>
 8003262:	29ff      	cmp	r1, #255	; 0xff
 8003264:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003268:	d1f1      	bne.n	800324e <d_print_comp_inner+0x862>
 800326a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800326e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003272:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003276:	4620      	mov	r0, r4
 8003278:	4798      	blx	r3
 800327a:	2101      	movs	r1, #1
 800327c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003280:	2300      	movs	r3, #0
 8003282:	440a      	add	r2, r1
 8003284:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003288:	e7e3      	b.n	8003252 <d_print_comp_inner+0x866>
 800328a:	686a      	ldr	r2, [r5, #4]
 800328c:	f002 f958 	bl	8005540 <d_print_comp>
 8003290:	f018 0904 	ands.w	r9, r8, #4
 8003294:	f001 82af 	beq.w	80047f6 <d_print_comp_inner+0x1e0a>
 8003298:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800329c:	29ff      	cmp	r1, #255	; 0xff
 800329e:	f001 85a1 	beq.w	8004de4 <d_print_comp_inner+0x23f8>
 80032a2:	1c4a      	adds	r2, r1, #1
 80032a4:	232e      	movs	r3, #46	; 0x2e
 80032a6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80032aa:	5463      	strb	r3, [r4, r1]
 80032ac:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80032b0:	68ad      	ldr	r5, [r5, #8]
 80032b2:	782b      	ldrb	r3, [r5, #0]
 80032b4:	2b46      	cmp	r3, #70	; 0x46
 80032b6:	f001 83d1 	beq.w	8004a5c <d_print_comp_inner+0x2070>
 80032ba:	462a      	mov	r2, r5
 80032bc:	4641      	mov	r1, r8
 80032be:	4620      	mov	r0, r4
 80032c0:	f002 f93e 	bl	8005540 <d_print_comp>
 80032c4:	e460      	b.n	8002b88 <d_print_comp_inner+0x19c>
 80032c6:	f011 0804 	ands.w	r8, r1, #4
 80032ca:	f041 8090 	bne.w	80043ee <d_print_comp_inner+0x1a02>
 80032ce:	68af      	ldr	r7, [r5, #8]
 80032d0:	686d      	ldr	r5, [r5, #4]
 80032d2:	2f00      	cmp	r7, #0
 80032d4:	f43f ac58 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 80032d8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80032dc:	442f      	add	r7, r5
 80032de:	e009      	b.n	80032f4 <d_print_comp_inner+0x908>
 80032e0:	460b      	mov	r3, r1
 80032e2:	3101      	adds	r1, #1
 80032e4:	42bd      	cmp	r5, r7
 80032e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80032ea:	54e6      	strb	r6, [r4, r3]
 80032ec:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80032f0:	f43f ac4a 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 80032f4:	29ff      	cmp	r1, #255	; 0xff
 80032f6:	f815 6b01 	ldrb.w	r6, [r5], #1
 80032fa:	d1f1      	bne.n	80032e0 <d_print_comp_inner+0x8f4>
 80032fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003300:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003304:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003308:	4620      	mov	r0, r4
 800330a:	4798      	blx	r3
 800330c:	2101      	movs	r1, #1
 800330e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003312:	2300      	movs	r3, #0
 8003314:	440a      	add	r2, r1
 8003316:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800331a:	e7e3      	b.n	80032e4 <d_print_comp_inner+0x8f8>
 800331c:	2301      	movs	r3, #1
 800331e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8003322:	e431      	b.n	8002b88 <d_print_comp_inner+0x19c>
 8003324:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
 8003328:	2b00      	cmp	r3, #0
 800332a:	f041 810a 	bne.w	8004542 <d_print_comp_inner+0x1b56>
 800332e:	1d29      	adds	r1, r5, #4
 8003330:	f7fd faaa 	bl	8000888 <d_lookup_template_argument.isra.6>
 8003334:	2800      	cmp	r0, #0
 8003336:	f43f ac3b 	beq.w	8002bb0 <d_print_comp_inner+0x1c4>
 800333a:	7803      	ldrb	r3, [r0, #0]
 800333c:	2b2f      	cmp	r3, #47	; 0x2f
 800333e:	f001 8401 	beq.w	8004b44 <d_print_comp_inner+0x2158>
 8003342:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8003346:	4602      	mov	r2, r0
 8003348:	682b      	ldr	r3, [r5, #0]
 800334a:	4641      	mov	r1, r8
 800334c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003350:	4620      	mov	r0, r4
 8003352:	f002 f8f5 	bl	8005540 <d_print_comp>
 8003356:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 800335a:	e415      	b.n	8002b88 <d_print_comp_inner+0x19c>
 800335c:	2300      	movs	r3, #0
 800335e:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
 8003362:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
 8003366:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800336a:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
 800336e:	f011 0f04 	tst.w	r1, #4
 8003372:	686e      	ldr	r6, [r5, #4]
 8003374:	d005      	beq.n	8003382 <d_print_comp_inner+0x996>
 8003376:	7833      	ldrb	r3, [r6, #0]
 8003378:	b91b      	cbnz	r3, 8003382 <d_print_comp_inner+0x996>
 800337a:	68b2      	ldr	r2, [r6, #8]
 800337c:	2a06      	cmp	r2, #6
 800337e:	f001 8543 	beq.w	8004e08 <d_print_comp_inner+0x241c>
 8003382:	4632      	mov	r2, r6
 8003384:	4641      	mov	r1, r8
 8003386:	4620      	mov	r0, r4
 8003388:	f002 f8da 	bl	8005540 <d_print_comp>
 800338c:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003390:	2b3c      	cmp	r3, #60	; 0x3c
 8003392:	f001 8279 	beq.w	8004888 <d_print_comp_inner+0x1e9c>
 8003396:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800339a:	2bff      	cmp	r3, #255	; 0xff
 800339c:	f001 8490 	beq.w	8004cc0 <d_print_comp_inner+0x22d4>
 80033a0:	1c59      	adds	r1, r3, #1
 80033a2:	223c      	movs	r2, #60	; 0x3c
 80033a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80033a8:	54e2      	strb	r2, [r4, r3]
 80033aa:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80033ae:	4641      	mov	r1, r8
 80033b0:	68aa      	ldr	r2, [r5, #8]
 80033b2:	4620      	mov	r0, r4
 80033b4:	f002 f8c4 	bl	8005540 <d_print_comp>
 80033b8:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80033bc:	2b3e      	cmp	r3, #62	; 0x3e
 80033be:	f001 823e 	beq.w	800483e <d_print_comp_inner+0x1e52>
 80033c2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80033c6:	2bff      	cmp	r3, #255	; 0xff
 80033c8:	f001 8467 	beq.w	8004c9a <d_print_comp_inner+0x22ae>
 80033cc:	1c59      	adds	r1, r3, #1
 80033ce:	223e      	movs	r2, #62	; 0x3e
 80033d0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80033d4:	54e2      	strb	r2, [r4, r3]
 80033d6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80033da:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80033de:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
 80033e2:	f7ff bbd1 	b.w	8002b88 <d_print_comp_inner+0x19c>
 80033e6:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80033ea:	f1b9 0f00 	cmp.w	r9, #0
 80033ee:	f001 8085 	beq.w	80044fc <d_print_comp_inner+0x1b10>
 80033f2:	4d65      	ldr	r5, [pc, #404]	; (8003588 <d_print_comp_inner+0xb9c>)
 80033f4:	f04f 0800 	mov.w	r8, #0
 80033f8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80033fc:	1daf      	adds	r7, r5, #6
 80033fe:	e009      	b.n	8003414 <d_print_comp_inner+0xa28>
 8003400:	460b      	mov	r3, r1
 8003402:	3101      	adds	r1, #1
 8003404:	42af      	cmp	r7, r5
 8003406:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800340a:	54e6      	strb	r6, [r4, r3]
 800340c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003410:	f000 8786 	beq.w	8004320 <d_print_comp_inner+0x1934>
 8003414:	29ff      	cmp	r1, #255	; 0xff
 8003416:	f815 6b01 	ldrb.w	r6, [r5], #1
 800341a:	d1f1      	bne.n	8003400 <d_print_comp_inner+0xa14>
 800341c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003420:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003424:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003428:	4620      	mov	r0, r4
 800342a:	4798      	blx	r3
 800342c:	2101      	movs	r1, #1
 800342e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003432:	2300      	movs	r3, #0
 8003434:	440a      	add	r2, r1
 8003436:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800343a:	e7e3      	b.n	8003404 <d_print_comp_inner+0xa18>
 800343c:	4e53      	ldr	r6, [pc, #332]	; (800358c <d_print_comp_inner+0xba0>)
 800343e:	f04f 0900 	mov.w	r9, #0
 8003442:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003446:	f106 0a0a 	add.w	sl, r6, #10
 800344a:	e009      	b.n	8003460 <d_print_comp_inner+0xa74>
 800344c:	460b      	mov	r3, r1
 800344e:	3101      	adds	r1, #1
 8003450:	4556      	cmp	r6, sl
 8003452:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003456:	54e7      	strb	r7, [r4, r3]
 8003458:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800345c:	f000 8705 	beq.w	800426a <d_print_comp_inner+0x187e>
 8003460:	29ff      	cmp	r1, #255	; 0xff
 8003462:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003466:	d1f1      	bne.n	800344c <d_print_comp_inner+0xa60>
 8003468:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800346c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003470:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003474:	4620      	mov	r0, r4
 8003476:	4798      	blx	r3
 8003478:	2101      	movs	r1, #1
 800347a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800347e:	2300      	movs	r3, #0
 8003480:	440a      	add	r2, r1
 8003482:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003486:	e7e3      	b.n	8003450 <d_print_comp_inner+0xa64>
 8003488:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800348c:	792d      	ldrb	r5, [r5, #4]
 800348e:	29ff      	cmp	r1, #255	; 0xff
 8003490:	f001 82af 	beq.w	80049f2 <d_print_comp_inner+0x2006>
 8003494:	1c4b      	adds	r3, r1, #1
 8003496:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800349a:	5465      	strb	r5, [r4, r1]
 800349c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80034a0:	f7ff bb72 	b.w	8002b88 <d_print_comp_inner+0x19c>
 80034a4:	686a      	ldr	r2, [r5, #4]
 80034a6:	f002 f84b 	bl	8005540 <d_print_comp>
 80034aa:	68aa      	ldr	r2, [r5, #8]
 80034ac:	4641      	mov	r1, r8
 80034ae:	4620      	mov	r0, r4
 80034b0:	f002 f846 	bl	8005540 <d_print_comp>
 80034b4:	f7ff bb68 	b.w	8002b88 <d_print_comp_inner+0x19c>
 80034b8:	4e35      	ldr	r6, [pc, #212]	; (8003590 <d_print_comp_inner+0xba4>)
 80034ba:	686a      	ldr	r2, [r5, #4]
 80034bc:	f002 f840 	bl	8005540 <d_print_comp>
 80034c0:	f04f 0900 	mov.w	r9, #0
 80034c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80034c8:	f106 0a08 	add.w	sl, r6, #8
 80034cc:	e009      	b.n	80034e2 <d_print_comp_inner+0xaf6>
 80034ce:	460b      	mov	r3, r1
 80034d0:	3101      	adds	r1, #1
 80034d2:	4556      	cmp	r6, sl
 80034d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80034d8:	54e7      	strb	r7, [r4, r3]
 80034da:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80034de:	f000 850d 	beq.w	8003efc <d_print_comp_inner+0x1510>
 80034e2:	29ff      	cmp	r1, #255	; 0xff
 80034e4:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80034e8:	d1f1      	bne.n	80034ce <d_print_comp_inner+0xae2>
 80034ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034f2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80034f6:	4620      	mov	r0, r4
 80034f8:	4798      	blx	r3
 80034fa:	2101      	movs	r1, #1
 80034fc:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003500:	2300      	movs	r3, #0
 8003502:	440a      	add	r2, r1
 8003504:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003508:	e7e3      	b.n	80034d2 <d_print_comp_inner+0xae6>
 800350a:	686a      	ldr	r2, [r5, #4]
 800350c:	b10a      	cbz	r2, 8003512 <d_print_comp_inner+0xb26>
 800350e:	f002 f817 	bl	8005540 <d_print_comp>
 8003512:	68ab      	ldr	r3, [r5, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f43f ab37 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 800351a:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 800351e:	2efd      	cmp	r6, #253	; 0xfd
 8003520:	f201 81c0 	bhi.w	80048a4 <d_print_comp_inner+0x1eb8>
 8003524:	4f1b      	ldr	r7, [pc, #108]	; (8003594 <d_print_comp_inner+0xba8>)
 8003526:	f107 0b02 	add.w	fp, r7, #2
 800352a:	e00a      	b.n	8003542 <d_print_comp_inner+0xb56>
 800352c:	46b2      	mov	sl, r6
 800352e:	3601      	adds	r6, #1
 8003530:	455f      	cmp	r7, fp
 8003532:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003536:	f804 900a 	strb.w	r9, [r4, sl]
 800353a:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800353e:	f000 86c9 	beq.w	80042d4 <d_print_comp_inner+0x18e8>
 8003542:	2eff      	cmp	r6, #255	; 0xff
 8003544:	f817 9b01 	ldrb.w	r9, [r7], #1
 8003548:	d1f0      	bne.n	800352c <d_print_comp_inner+0xb40>
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	4631      	mov	r1, r6
 8003550:	2601      	movs	r6, #1
 8003552:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8003556:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800355a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800355e:	4620      	mov	r0, r4
 8003560:	4798      	blx	r3
 8003562:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003566:	f04f 0a00 	mov.w	sl, #0
 800356a:	4433      	add	r3, r6
 800356c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003570:	e7de      	b.n	8003530 <d_print_comp_inner+0xb44>
 8003572:	4e09      	ldr	r6, [pc, #36]	; (8003598 <d_print_comp_inner+0xbac>)
 8003574:	f04f 0900 	mov.w	r9, #0
 8003578:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800357c:	f106 0a09 	add.w	sl, r6, #9
 8003580:	e016      	b.n	80035b0 <d_print_comp_inner+0xbc4>
 8003582:	bf00      	nop
 8003584:	08022a78 	.word	0x08022a78
 8003588:	08022c88 	.word	0x08022c88
 800358c:	08022c70 	.word	0x08022c70
 8003590:	08022cef 	.word	0x08022cef
 8003594:	08022c0c 	.word	0x08022c0c
 8003598:	08022c1b 	.word	0x08022c1b
 800359c:	460b      	mov	r3, r1
 800359e:	3101      	adds	r1, #1
 80035a0:	4556      	cmp	r6, sl
 80035a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80035a6:	54e7      	strb	r7, [r4, r3]
 80035a8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80035ac:	f000 8596 	beq.w	80040dc <d_print_comp_inner+0x16f0>
 80035b0:	29ff      	cmp	r1, #255	; 0xff
 80035b2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80035b6:	d1f1      	bne.n	800359c <d_print_comp_inner+0xbb0>
 80035b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035c0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80035c4:	4620      	mov	r0, r4
 80035c6:	4798      	blx	r3
 80035c8:	2101      	movs	r1, #1
 80035ca:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80035ce:	2300      	movs	r3, #0
 80035d0:	440a      	add	r2, r1
 80035d2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80035d6:	e7e3      	b.n	80035a0 <d_print_comp_inner+0xbb4>
 80035d8:	4ed2      	ldr	r6, [pc, #840]	; (8003924 <d_print_comp_inner+0xf38>)
 80035da:	f04f 0900 	mov.w	r9, #0
 80035de:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80035e2:	f106 0a09 	add.w	sl, r6, #9
 80035e6:	e009      	b.n	80035fc <d_print_comp_inner+0xc10>
 80035e8:	460b      	mov	r3, r1
 80035ea:	3101      	adds	r1, #1
 80035ec:	4556      	cmp	r6, sl
 80035ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80035f2:	54e7      	strb	r7, [r4, r3]
 80035f4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80035f8:	f000 8599 	beq.w	800412e <d_print_comp_inner+0x1742>
 80035fc:	29ff      	cmp	r1, #255	; 0xff
 80035fe:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003602:	d1f1      	bne.n	80035e8 <d_print_comp_inner+0xbfc>
 8003604:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003608:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800360c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003610:	4620      	mov	r0, r4
 8003612:	4798      	blx	r3
 8003614:	2101      	movs	r1, #1
 8003616:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800361a:	2300      	movs	r3, #0
 800361c:	440a      	add	r2, r1
 800361e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003622:	e7e3      	b.n	80035ec <d_print_comp_inner+0xc00>
 8003624:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8003628:	4dbf      	ldr	r5, [pc, #764]	; (8003928 <d_print_comp_inner+0xf3c>)
 800362a:	f04f 0800 	mov.w	r8, #0
 800362e:	f8da 7008 	ldr.w	r7, [sl, #8]
 8003632:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003636:	f105 0908 	add.w	r9, r5, #8
 800363a:	e009      	b.n	8003650 <d_print_comp_inner+0xc64>
 800363c:	460b      	mov	r3, r1
 800363e:	3101      	adds	r1, #1
 8003640:	45a9      	cmp	r9, r5
 8003642:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003646:	54e6      	strb	r6, [r4, r3]
 8003648:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800364c:	f000 8508 	beq.w	8004060 <d_print_comp_inner+0x1674>
 8003650:	29ff      	cmp	r1, #255	; 0xff
 8003652:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003656:	d1f1      	bne.n	800363c <d_print_comp_inner+0xc50>
 8003658:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800365c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003660:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003664:	4620      	mov	r0, r4
 8003666:	4798      	blx	r3
 8003668:	2101      	movs	r1, #1
 800366a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800366e:	2300      	movs	r3, #0
 8003670:	440a      	add	r2, r1
 8003672:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003676:	e7e3      	b.n	8003640 <d_print_comp_inner+0xc54>
 8003678:	686a      	ldr	r2, [r5, #4]
 800367a:	68ae      	ldr	r6, [r5, #8]
 800367c:	b10a      	cbz	r2, 8003682 <d_print_comp_inner+0xc96>
 800367e:	f001 ff5f 	bl	8005540 <d_print_comp>
 8003682:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003686:	2bff      	cmp	r3, #255	; 0xff
 8003688:	f001 82b5 	beq.w	8004bf6 <d_print_comp_inner+0x220a>
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	257b      	movs	r5, #123	; 0x7b
 8003690:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003694:	4641      	mov	r1, r8
 8003696:	54e5      	strb	r5, [r4, r3]
 8003698:	4632      	mov	r2, r6
 800369a:	4620      	mov	r0, r4
 800369c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80036a0:	f001 ff4e 	bl	8005540 <d_print_comp>
 80036a4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80036a8:	29ff      	cmp	r1, #255	; 0xff
 80036aa:	f001 81e9 	beq.w	8004a80 <d_print_comp_inner+0x2094>
 80036ae:	1c4a      	adds	r2, r1, #1
 80036b0:	237d      	movs	r3, #125	; 0x7d
 80036b2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80036b6:	5463      	strb	r3, [r4, r1]
 80036b8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80036bc:	f7ff ba64 	b.w	8002b88 <d_print_comp_inner+0x19c>
 80036c0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80036c4:	68ae      	ldr	r6, [r5, #8]
 80036c6:	f899 3000 	ldrb.w	r3, [r9]
 80036ca:	2b31      	cmp	r3, #49	; 0x31
 80036cc:	f000 87cc 	beq.w	8004668 <d_print_comp_inner+0x1c7c>
 80036d0:	2b33      	cmp	r3, #51	; 0x33
 80036d2:	f041 86d7 	bne.w	8005484 <d_print_comp_inner+0x2a98>
 80036d6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80036da:	29ff      	cmp	r1, #255	; 0xff
 80036dc:	f001 84c7 	beq.w	800506e <d_print_comp_inner+0x2682>
 80036e0:	2328      	movs	r3, #40	; 0x28
 80036e2:	1c4a      	adds	r2, r1, #1
 80036e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80036e8:	5463      	strb	r3, [r4, r1]
 80036ea:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80036ee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80036f2:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 80036f6:	a904      	add	r1, sp, #16
 80036f8:	461a      	mov	r2, r3
 80036fa:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
 80036fe:	4620      	mov	r0, r4
 8003700:	4641      	mov	r1, r8
 8003702:	9304      	str	r3, [sp, #16]
 8003704:	9505      	str	r5, [sp, #20]
 8003706:	f7ff f971 	bl	80029ec <d_print_comp_inner>
 800370a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800370e:	9b05      	ldr	r3, [sp, #20]
 8003710:	29ff      	cmp	r1, #255	; 0xff
 8003712:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003716:	f001 8499 	beq.w	800504c <d_print_comp_inner+0x2660>
 800371a:	2329      	movs	r3, #41	; 0x29
 800371c:	1c4a      	adds	r2, r1, #1
 800371e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003722:	5463      	strb	r3, [r4, r1]
 8003724:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003728:	4632      	mov	r2, r6
 800372a:	4641      	mov	r1, r8
 800372c:	4620      	mov	r0, r4
 800372e:	f002 fd35 	bl	800619c <d_print_subexpr>
 8003732:	f7ff ba29 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003736:	686a      	ldr	r2, [r5, #4]
 8003738:	f002 fcf2 	bl	8006120 <d_print_expr_op>
 800373c:	f7ff ba24 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003740:	f011 0f20 	tst.w	r1, #32
 8003744:	f040 8753 	bne.w	80045ee <d_print_comp_inner+0x1c02>
 8003748:	686a      	ldr	r2, [r5, #4]
 800374a:	b11a      	cbz	r2, 8003754 <d_print_comp_inner+0xd68>
 800374c:	f018 0640 	ands.w	r6, r8, #64	; 0x40
 8003750:	f001 81d1 	beq.w	8004af6 <d_print_comp_inner+0x210a>
 8003754:	f028 0860 	bic.w	r8, r8, #96	; 0x60
 8003758:	f105 0208 	add.w	r2, r5, #8
 800375c:	4641      	mov	r1, r8
 800375e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003762:	4620      	mov	r0, r4
 8003764:	f002 fbe8 	bl	8005f38 <d_print_function_type.isra.11>
 8003768:	f7ff ba0e 	b.w	8002b88 <d_print_comp_inner+0x19c>
 800376c:	f011 0804 	ands.w	r8, r1, #4
 8003770:	686b      	ldr	r3, [r5, #4]
 8003772:	f040 8613 	bne.w	800439c <d_print_comp_inner+0x19b0>
 8003776:	e893 00a0 	ldmia.w	r3, {r5, r7}
 800377a:	2f00      	cmp	r7, #0
 800377c:	f43f aa04 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 8003780:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003784:	442f      	add	r7, r5
 8003786:	e009      	b.n	800379c <d_print_comp_inner+0xdb0>
 8003788:	460b      	mov	r3, r1
 800378a:	3101      	adds	r1, #1
 800378c:	42bd      	cmp	r5, r7
 800378e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003792:	54e6      	strb	r6, [r4, r3]
 8003794:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003798:	f43f a9f6 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 800379c:	29ff      	cmp	r1, #255	; 0xff
 800379e:	f815 6b01 	ldrb.w	r6, [r5], #1
 80037a2:	d1f1      	bne.n	8003788 <d_print_comp_inner+0xd9c>
 80037a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80037a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80037ac:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80037b0:	4620      	mov	r0, r4
 80037b2:	4798      	blx	r3
 80037b4:	2101      	movs	r1, #1
 80037b6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80037ba:	2300      	movs	r3, #0
 80037bc:	440a      	add	r2, r1
 80037be:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80037c2:	e7e3      	b.n	800378c <d_print_comp_inner+0xda0>
 80037c4:	6869      	ldr	r1, [r5, #4]
 80037c6:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
 80037ca:	780b      	ldrb	r3, [r1, #0]
 80037cc:	2f00      	cmp	r7, #0
 80037ce:	f040 85e2 	bne.w	8004396 <d_print_comp_inner+0x19aa>
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	f001 81c8 	beq.w	8004b68 <d_print_comp_inner+0x217c>
 80037d8:	2b23      	cmp	r3, #35	; 0x23
 80037da:	f000 868a 	beq.w	80044f2 <d_print_comp_inner+0x1b06>
 80037de:	782a      	ldrb	r2, [r5, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	f000 8686 	beq.w	80044f2 <d_print_comp_inner+0x1b06>
 80037e6:	2b24      	cmp	r3, #36	; 0x24
 80037e8:	f47f a9e8 	bne.w	8002bbc <d_print_comp_inner+0x1d0>
 80037ec:	2300      	movs	r3, #0
 80037ee:	684a      	ldr	r2, [r1, #4]
 80037f0:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 80037f4:	a814      	add	r0, sp, #80	; 0x50
 80037f6:	f840 1d40 	str.w	r1, [r0, #-64]!
 80037fa:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 80037fe:	9505      	str	r5, [sp, #20]
 8003800:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8003804:	9306      	str	r3, [sp, #24]
 8003806:	9107      	str	r1, [sp, #28]
 8003808:	2a00      	cmp	r2, #0
 800380a:	f47f a9e5 	bne.w	8002bd8 <d_print_comp_inner+0x1ec>
 800380e:	f7ff b9e2 	b.w	8002bd6 <d_print_comp_inner+0x1ea>
 8003812:	686a      	ldr	r2, [r5, #4]
 8003814:	f001 fe94 	bl	8005540 <d_print_comp>
 8003818:	f7ff b9b6 	b.w	8002b88 <d_print_comp_inner+0x19c>
 800381c:	2700      	movs	r7, #0
 800381e:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 8003822:	ab14      	add	r3, sp, #80	; 0x50
 8003824:	f843 2d40 	str.w	r2, [r3, #-64]!
 8003828:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800382c:	f8d0 6110 	ldr.w	r6, [r0, #272]	; 0x110
 8003830:	68aa      	ldr	r2, [r5, #8]
 8003832:	9505      	str	r5, [sp, #20]
 8003834:	9706      	str	r7, [sp, #24]
 8003836:	9607      	str	r6, [sp, #28]
 8003838:	f001 fe82 	bl	8005540 <d_print_comp>
 800383c:	9b06      	ldr	r3, [sp, #24]
 800383e:	b923      	cbnz	r3, 800384a <d_print_comp_inner+0xe5e>
 8003840:	462a      	mov	r2, r5
 8003842:	4641      	mov	r1, r8
 8003844:	4620      	mov	r0, r4
 8003846:	f001 fe8b 	bl	8005560 <d_print_mod>
 800384a:	9b04      	ldr	r3, [sp, #16]
 800384c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003850:	f7ff b99a 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003854:	f8d0 a114 	ldr.w	sl, [r0, #276]	; 0x114
 8003858:	2200      	movs	r2, #0
 800385a:	4651      	mov	r1, sl
 800385c:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 8003860:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8003864:	f849 ad40 	str.w	sl, [r9, #-64]!
 8003868:	f8cd a000 	str.w	sl, [sp]
 800386c:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
 8003870:	9505      	str	r5, [sp, #20]
 8003872:	9206      	str	r2, [sp, #24]
 8003874:	9307      	str	r3, [sp, #28]
 8003876:	2900      	cmp	r1, #0
 8003878:	f001 83a3 	beq.w	8004fc2 <d_print_comp_inner+0x25d6>
 800387c:	684b      	ldr	r3, [r1, #4]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	3b19      	subs	r3, #25
 8003882:	2b02      	cmp	r3, #2
 8003884:	f201 839d 	bhi.w	8004fc2 <d_print_comp_inner+0x25d6>
 8003888:	46ac      	mov	ip, r5
 800388a:	2701      	movs	r7, #1
 800388c:	460e      	mov	r6, r1
 800388e:	464d      	mov	r5, r9
 8003890:	e004      	b.n	800389c <d_print_comp_inner+0xeb0>
 8003892:	6873      	ldr	r3, [r6, #4]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	3b19      	subs	r3, #25
 8003898:	2b02      	cmp	r3, #2
 800389a:	d81c      	bhi.n	80038d6 <d_print_comp_inner+0xeea>
 800389c:	68b3      	ldr	r3, [r6, #8]
 800389e:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 80038a2:	b9ab      	cbnz	r3, 80038d0 <d_print_comp_inner+0xee4>
 80038a4:	2f03      	cmp	r7, #3
 80038a6:	f201 80fd 	bhi.w	8004aa4 <d_print_comp_inner+0x20b8>
 80038aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80038ae:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
 80038b2:	eb0e 0b0a 	add.w	fp, lr, sl
 80038b6:	f1ab 0e40 	sub.w	lr, fp, #64	; 0x40
 80038ba:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80038be:	2301      	movs	r3, #1
 80038c0:	f84b 5c40 	str.w	r5, [fp, #-64]
 80038c4:	eb09 050a 	add.w	r5, r9, sl
 80038c8:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 80038cc:	3701      	adds	r7, #1
 80038ce:	60b3      	str	r3, [r6, #8]
 80038d0:	6836      	ldr	r6, [r6, #0]
 80038d2:	2e00      	cmp	r6, #0
 80038d4:	d1dd      	bne.n	8003892 <d_print_comp_inner+0xea6>
 80038d6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80038da:	4641      	mov	r1, r8
 80038dc:	4620      	mov	r0, r4
 80038de:	4665      	mov	r5, ip
 80038e0:	f001 fe2e 	bl	8005540 <d_print_comp>
 80038e4:	9a00      	ldr	r2, [sp, #0]
 80038e6:	9b06      	ldr	r3, [sp, #24]
 80038e8:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f47f a94b 	bne.w	8002b88 <d_print_comp_inner+0x19c>
 80038f2:	2f01      	cmp	r7, #1
 80038f4:	d00c      	beq.n	8003910 <d_print_comp_inner+0xf24>
 80038f6:	eb09 1907 	add.w	r9, r9, r7, lsl #4
 80038fa:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 80038fe:	3f01      	subs	r7, #1
 8003900:	4641      	mov	r1, r8
 8003902:	4620      	mov	r0, r4
 8003904:	f001 fe2c 	bl	8005560 <d_print_mod>
 8003908:	2f01      	cmp	r7, #1
 800390a:	f1a9 0910 	sub.w	r9, r9, #16
 800390e:	d1f4      	bne.n	80038fa <d_print_comp_inner+0xf0e>
 8003910:	1d2a      	adds	r2, r5, #4
 8003912:	4641      	mov	r1, r8
 8003914:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003918:	4620      	mov	r0, r4
 800391a:	f002 fa31 	bl	8005d80 <d_print_array_type.isra.10>
 800391e:	f7ff b933 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003922:	bf00      	nop
 8003924:	08022c1b 	.word	0x08022c1b
 8003928:	08022c0f 	.word	0x08022c0f
 800392c:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f040 8673 	bne.w	800461c <d_print_comp_inner+0x1c30>
 8003936:	686a      	ldr	r2, [r5, #4]
 8003938:	4bd5      	ldr	r3, [pc, #852]	; (8003c90 <d_print_comp_inner+0x12a4>)
 800393a:	6851      	ldr	r1, [r2, #4]
 800393c:	4299      	cmp	r1, r3
 800393e:	f000 8669 	beq.w	8004614 <d_print_comp_inner+0x1c28>
 8003942:	4641      	mov	r1, r8
 8003944:	4620      	mov	r0, r4
 8003946:	f001 fdfb 	bl	8005540 <d_print_comp>
 800394a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800394e:	2bff      	cmp	r3, #255	; 0xff
 8003950:	f001 82b4 	beq.w	8004ebc <d_print_comp_inner+0x24d0>
 8003954:	1c59      	adds	r1, r3, #1
 8003956:	2220      	movs	r2, #32
 8003958:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800395c:	54e2      	strb	r2, [r4, r3]
 800395e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003962:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8595 	beq.w	8004496 <d_print_comp_inner+0x1aaa>
 800396c:	4dc9      	ldr	r5, [pc, #804]	; (8003c94 <d_print_comp_inner+0x12a8>)
 800396e:	f04f 0800 	mov.w	r8, #0
 8003972:	1daf      	adds	r7, r5, #6
 8003974:	e009      	b.n	800398a <d_print_comp_inner+0xf9e>
 8003976:	460b      	mov	r3, r1
 8003978:	3101      	adds	r1, #1
 800397a:	42bd      	cmp	r5, r7
 800397c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003980:	54e6      	strb	r6, [r4, r3]
 8003982:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003986:	f43f a8ff 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 800398a:	29ff      	cmp	r1, #255	; 0xff
 800398c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003990:	d1f1      	bne.n	8003976 <d_print_comp_inner+0xf8a>
 8003992:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003996:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800399a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800399e:	4620      	mov	r0, r4
 80039a0:	4798      	blx	r3
 80039a2:	2101      	movs	r1, #1
 80039a4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80039a8:	2300      	movs	r3, #0
 80039aa:	440a      	add	r2, r1
 80039ac:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80039b0:	e7e3      	b.n	800397a <d_print_comp_inner+0xf8e>
 80039b2:	4eb9      	ldr	r6, [pc, #740]	; (8003c98 <d_print_comp_inner+0x12ac>)
 80039b4:	f04f 0800 	mov.w	r8, #0
 80039b8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80039bc:	f106 090e 	add.w	r9, r6, #14
 80039c0:	e009      	b.n	80039d6 <d_print_comp_inner+0xfea>
 80039c2:	460b      	mov	r3, r1
 80039c4:	3101      	adds	r1, #1
 80039c6:	45b1      	cmp	r9, r6
 80039c8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80039cc:	54e7      	strb	r7, [r4, r3]
 80039ce:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80039d2:	f000 83b3 	beq.w	800413c <d_print_comp_inner+0x1750>
 80039d6:	29ff      	cmp	r1, #255	; 0xff
 80039d8:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80039dc:	d1f1      	bne.n	80039c2 <d_print_comp_inner+0xfd6>
 80039de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039e6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80039ea:	4620      	mov	r0, r4
 80039ec:	4798      	blx	r3
 80039ee:	2101      	movs	r1, #1
 80039f0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80039f4:	2300      	movs	r3, #0
 80039f6:	440a      	add	r2, r1
 80039f8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80039fc:	e7e3      	b.n	80039c6 <d_print_comp_inner+0xfda>
 80039fe:	4ea7      	ldr	r6, [pc, #668]	; (8003c9c <d_print_comp_inner+0x12b0>)
 8003a00:	f04f 0900 	mov.w	r9, #0
 8003a04:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003a08:	f106 0a1a 	add.w	sl, r6, #26
 8003a0c:	e009      	b.n	8003a22 <d_print_comp_inner+0x1036>
 8003a0e:	460b      	mov	r3, r1
 8003a10:	3101      	adds	r1, #1
 8003a12:	4556      	cmp	r6, sl
 8003a14:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a18:	54e7      	strb	r7, [r4, r3]
 8003a1a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003a1e:	f000 82f0 	beq.w	8004002 <d_print_comp_inner+0x1616>
 8003a22:	29ff      	cmp	r1, #255	; 0xff
 8003a24:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003a28:	d1f1      	bne.n	8003a0e <d_print_comp_inner+0x1022>
 8003a2a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a32:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003a36:	4620      	mov	r0, r4
 8003a38:	4798      	blx	r3
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003a40:	2300      	movs	r3, #0
 8003a42:	440a      	add	r2, r1
 8003a44:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003a48:	e7e3      	b.n	8003a12 <d_print_comp_inner+0x1026>
 8003a4a:	6869      	ldr	r1, [r5, #4]
 8003a4c:	f7fc ff38 	bl	80008c0 <d_find_pack>
 8003a50:	f04f 0900 	mov.w	r9, #0
 8003a54:	2800      	cmp	r0, #0
 8003a56:	f001 835f 	beq.w	8005118 <d_print_comp_inner+0x272c>
 8003a5a:	7803      	ldrb	r3, [r0, #0]
 8003a5c:	2b2f      	cmp	r3, #47	; 0x2f
 8003a5e:	f040 8457 	bne.w	8004310 <d_print_comp_inner+0x1924>
 8003a62:	6843      	ldr	r3, [r0, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8453 	beq.w	8004310 <d_print_comp_inner+0x1924>
 8003a6a:	6880      	ldr	r0, [r0, #8]
 8003a6c:	f109 0901 	add.w	r9, r9, #1
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d1f2      	bne.n	8003a5a <d_print_comp_inner+0x106e>
 8003a74:	686b      	ldr	r3, [r5, #4]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	f04f 0a00 	mov.w	sl, #0
 8003a7c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8003a86:	9a00      	ldr	r2, [sp, #0]
 8003a88:	4641      	mov	r1, r8
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f001 fd58 	bl	8005540 <d_print_comp>
 8003a90:	9b01      	ldr	r3, [sp, #4]
 8003a92:	42bb      	cmp	r3, r7
 8003a94:	f340 81ab 	ble.w	8003dee <d_print_comp_inner+0x1402>
 8003a98:	4d81      	ldr	r5, [pc, #516]	; (8003ca0 <d_print_comp_inner+0x12b4>)
 8003a9a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003a9e:	f105 0b02 	add.w	fp, r5, #2
 8003aa2:	e009      	b.n	8003ab8 <d_print_comp_inner+0x10cc>
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	3101      	adds	r1, #1
 8003aa8:	45ab      	cmp	fp, r5
 8003aaa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003aae:	54e6      	strb	r6, [r4, r3]
 8003ab0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003ab4:	f000 819b 	beq.w	8003dee <d_print_comp_inner+0x1402>
 8003ab8:	29ff      	cmp	r1, #255	; 0xff
 8003aba:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003abe:	d1f1      	bne.n	8003aa4 <d_print_comp_inner+0x10b8>
 8003ac0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ac4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003ac8:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003acc:	4620      	mov	r0, r4
 8003ace:	4798      	blx	r3
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	440a      	add	r2, r1
 8003ada:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003ade:	e7e3      	b.n	8003aa8 <d_print_comp_inner+0x10bc>
 8003ae0:	4e70      	ldr	r6, [pc, #448]	; (8003ca4 <d_print_comp_inner+0x12b8>)
 8003ae2:	f04f 0900 	mov.w	r9, #0
 8003ae6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003aea:	f106 0a16 	add.w	sl, r6, #22
 8003aee:	e009      	b.n	8003b04 <d_print_comp_inner+0x1118>
 8003af0:	460b      	mov	r3, r1
 8003af2:	3101      	adds	r1, #1
 8003af4:	45b2      	cmp	sl, r6
 8003af6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003afa:	54e7      	strb	r7, [r4, r3]
 8003afc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003b00:	f000 835f 	beq.w	80041c2 <d_print_comp_inner+0x17d6>
 8003b04:	29ff      	cmp	r1, #255	; 0xff
 8003b06:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003b0a:	d1f1      	bne.n	8003af0 <d_print_comp_inner+0x1104>
 8003b0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b14:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003b18:	4620      	mov	r0, r4
 8003b1a:	4798      	blx	r3
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003b22:	2300      	movs	r3, #0
 8003b24:	440a      	add	r2, r1
 8003b26:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003b2a:	e7e3      	b.n	8003af4 <d_print_comp_inner+0x1108>
 8003b2c:	4e5e      	ldr	r6, [pc, #376]	; (8003ca8 <d_print_comp_inner+0x12bc>)
 8003b2e:	f04f 0900 	mov.w	r9, #0
 8003b32:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003b36:	f106 0a0e 	add.w	sl, r6, #14
 8003b3a:	e009      	b.n	8003b50 <d_print_comp_inner+0x1164>
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	3101      	adds	r1, #1
 8003b40:	4556      	cmp	r6, sl
 8003b42:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b46:	54e7      	strb	r7, [r4, r3]
 8003b48:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003b4c:	f000 83a0 	beq.w	8004290 <d_print_comp_inner+0x18a4>
 8003b50:	29ff      	cmp	r1, #255	; 0xff
 8003b52:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003b56:	d1f1      	bne.n	8003b3c <d_print_comp_inner+0x1150>
 8003b58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b60:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003b64:	4620      	mov	r0, r4
 8003b66:	4798      	blx	r3
 8003b68:	2101      	movs	r1, #1
 8003b6a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003b6e:	2300      	movs	r3, #0
 8003b70:	440a      	add	r2, r1
 8003b72:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003b76:	e7e3      	b.n	8003b40 <d_print_comp_inner+0x1154>
 8003b78:	686a      	ldr	r2, [r5, #4]
 8003b7a:	7811      	ldrb	r1, [r2, #0]
 8003b7c:	2927      	cmp	r1, #39	; 0x27
 8003b7e:	f000 8615 	beq.w	80047ac <d_print_comp_inner+0x1dc0>
 8003b82:	2600      	movs	r6, #0
 8003b84:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003b88:	29ff      	cmp	r1, #255	; 0xff
 8003b8a:	f001 80c7 	beq.w	8004d1c <d_print_comp_inner+0x2330>
 8003b8e:	2328      	movs	r3, #40	; 0x28
 8003b90:	1c4a      	adds	r2, r1, #1
 8003b92:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003b96:	5463      	strb	r3, [r4, r1]
 8003b98:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003b9c:	686a      	ldr	r2, [r5, #4]
 8003b9e:	4641      	mov	r1, r8
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f001 fccd 	bl	8005540 <d_print_comp>
 8003ba6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003baa:	2bff      	cmp	r3, #255	; 0xff
 8003bac:	f001 809b 	beq.w	8004ce6 <d_print_comp_inner+0x22fa>
 8003bb0:	2229      	movs	r2, #41	; 0x29
 8003bb2:	1c59      	adds	r1, r3, #1
 8003bb4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003bb8:	54e2      	strb	r2, [r4, r3]
 8003bba:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003bbe:	782b      	ldrb	r3, [r5, #0]
 8003bc0:	2b3d      	cmp	r3, #61	; 0x3d
 8003bc2:	f000 86e6 	beq.w	8004992 <d_print_comp_inner+0x1fa6>
 8003bc6:	2e08      	cmp	r6, #8
 8003bc8:	f000 867f 	beq.w	80048ca <d_print_comp_inner+0x1ede>
 8003bcc:	68aa      	ldr	r2, [r5, #8]
 8003bce:	4641      	mov	r1, r8
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	f001 fcb5 	bl	8005540 <d_print_comp>
 8003bd6:	f7fe bfd7 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8003be0:	f7fe bfd2 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003be4:	686a      	ldr	r2, [r5, #4]
 8003be6:	a804      	add	r0, sp, #16
 8003be8:	4930      	ldr	r1, [pc, #192]	; (8003cac <d_print_comp_inner+0x12c0>)
 8003bea:	f014 f851 	bl	8017c90 <sprintf>
 8003bee:	a804      	add	r0, sp, #16
 8003bf0:	f002 fe72 	bl	80068d8 <strlen>
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	f43e afc7 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 8003bfa:	ad04      	add	r5, sp, #16
 8003bfc:	f04f 0800 	mov.w	r8, #0
 8003c00:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003c04:	182f      	adds	r7, r5, r0
 8003c06:	e009      	b.n	8003c1c <d_print_comp_inner+0x1230>
 8003c08:	460b      	mov	r3, r1
 8003c0a:	3101      	adds	r1, #1
 8003c0c:	42bd      	cmp	r5, r7
 8003c0e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003c12:	54e6      	strb	r6, [r4, r3]
 8003c14:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003c18:	f43e afb6 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 8003c1c:	29ff      	cmp	r1, #255	; 0xff
 8003c1e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003c22:	d1f1      	bne.n	8003c08 <d_print_comp_inner+0x121c>
 8003c24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c28:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c2c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003c30:	4620      	mov	r0, r4
 8003c32:	4798      	blx	r3
 8003c34:	2101      	movs	r1, #1
 8003c36:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	440a      	add	r2, r1
 8003c3e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003c42:	e7e3      	b.n	8003c0c <d_print_comp_inner+0x1220>
 8003c44:	4e1a      	ldr	r6, [pc, #104]	; (8003cb0 <d_print_comp_inner+0x12c4>)
 8003c46:	f04f 0900 	mov.w	r9, #0
 8003c4a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003c4e:	f106 0a1c 	add.w	sl, r6, #28
 8003c52:	e009      	b.n	8003c68 <d_print_comp_inner+0x127c>
 8003c54:	460b      	mov	r3, r1
 8003c56:	3101      	adds	r1, #1
 8003c58:	4556      	cmp	r6, sl
 8003c5a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003c5e:	54e7      	strb	r7, [r4, r3]
 8003c60:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003c64:	f000 82fa 	beq.w	800425c <d_print_comp_inner+0x1870>
 8003c68:	29ff      	cmp	r1, #255	; 0xff
 8003c6a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003c6e:	d1f1      	bne.n	8003c54 <d_print_comp_inner+0x1268>
 8003c70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c78:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	4798      	blx	r3
 8003c80:	2101      	movs	r1, #1
 8003c82:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003c86:	2300      	movs	r3, #0
 8003c88:	440a      	add	r2, r1
 8003c8a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003c8e:	e7e3      	b.n	8003c58 <d_print_comp_inner+0x126c>
 8003c90:	0801c41c 	.word	0x0801c41c
 8003c94:	08022bfc 	.word	0x08022bfc
 8003c98:	08022cdf 	.word	0x08022cdf
 8003c9c:	08022bd7 	.word	0x08022bd7
 8003ca0:	08022c0c 	.word	0x08022c0c
 8003ca4:	08022bdb 	.word	0x08022bdb
 8003ca8:	08022c5f 	.word	0x08022c5f
 8003cac:	08022a30 	.word	0x08022a30
 8003cb0:	08022caf 	.word	0x08022caf
 8003cb4:	68ab      	ldr	r3, [r5, #8]
 8003cb6:	781a      	ldrb	r2, [r3, #0]
 8003cb8:	2a3a      	cmp	r2, #58	; 0x3a
 8003cba:	f47e af79 	bne.w	8002bb0 <d_print_comp_inner+0x1c4>
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b3b      	cmp	r3, #59	; 0x3b
 8003cc4:	f47e af74 	bne.w	8002bb0 <d_print_comp_inner+0x1c4>
 8003cc8:	f105 0308 	add.w	r3, r5, #8
 8003ccc:	686a      	ldr	r2, [r5, #4]
 8003cce:	f002 fac9 	bl	8006264 <d_maybe_print_fold_expression.isra.15>
 8003cd2:	4606      	mov	r6, r0
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	f47e af57 	bne.w	8002b88 <d_print_comp_inner+0x19c>
 8003cda:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8003cde:	68aa      	ldr	r2, [r5, #8]
 8003ce0:	f8da 1004 	ldr.w	r1, [sl, #4]
 8003ce4:	6893      	ldr	r3, [r2, #8]
 8003ce6:	6808      	ldr	r0, [r1, #0]
 8003ce8:	49d6      	ldr	r1, [pc, #856]	; (8004044 <d_print_comp_inner+0x1658>)
 8003cea:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8003cee:	685f      	ldr	r7, [r3, #4]
 8003cf0:	689d      	ldr	r5, [r3, #8]
 8003cf2:	f002 fde7 	bl	80068c4 <strcmp>
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	f001 82e4 	beq.w	80052c4 <d_print_comp_inner+0x28d8>
 8003cfc:	2204      	movs	r2, #4
 8003cfe:	49d2      	ldr	r1, [pc, #840]	; (8004048 <d_print_comp_inner+0x165c>)
 8003d00:	4620      	mov	r0, r4
 8003d02:	f7fc fbb1 	bl	8000468 <d_append_buffer>
 8003d06:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003d0a:	b183      	cbz	r3, 8003d2e <d_print_comp_inner+0x1342>
 8003d0c:	4641      	mov	r1, r8
 8003d0e:	464a      	mov	r2, r9
 8003d10:	4620      	mov	r0, r4
 8003d12:	f002 fa43 	bl	800619c <d_print_subexpr>
 8003d16:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003d1a:	29ff      	cmp	r1, #255	; 0xff
 8003d1c:	f001 83ee 	beq.w	80054fc <d_print_comp_inner+0x2b10>
 8003d20:	2320      	movs	r3, #32
 8003d22:	1c4a      	adds	r2, r1, #1
 8003d24:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003d28:	5463      	strb	r3, [r4, r1]
 8003d2a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003d2e:	463a      	mov	r2, r7
 8003d30:	4641      	mov	r1, r8
 8003d32:	4620      	mov	r0, r4
 8003d34:	f001 fc04 	bl	8005540 <d_print_comp>
 8003d38:	2d00      	cmp	r5, #0
 8003d3a:	f43e af25 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 8003d3e:	462a      	mov	r2, r5
 8003d40:	4641      	mov	r1, r8
 8003d42:	4620      	mov	r0, r4
 8003d44:	f002 fa2a 	bl	800619c <d_print_subexpr>
 8003d48:	f7fe bf1e 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003d4c:	4ebf      	ldr	r6, [pc, #764]	; (800404c <d_print_comp_inner+0x1660>)
 8003d4e:	f04f 0900 	mov.w	r9, #0
 8003d52:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003d56:	f106 0a08 	add.w	sl, r6, #8
 8003d5a:	e009      	b.n	8003d70 <d_print_comp_inner+0x1384>
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	3101      	adds	r1, #1
 8003d60:	4556      	cmp	r6, sl
 8003d62:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003d66:	54e7      	strb	r7, [r4, r3]
 8003d68:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003d6c:	f000 80d9 	beq.w	8003f22 <d_print_comp_inner+0x1536>
 8003d70:	29ff      	cmp	r1, #255	; 0xff
 8003d72:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003d76:	d1f1      	bne.n	8003d5c <d_print_comp_inner+0x1370>
 8003d78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d80:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d84:	4620      	mov	r0, r4
 8003d86:	4798      	blx	r3
 8003d88:	2101      	movs	r1, #1
 8003d8a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003d8e:	2300      	movs	r3, #0
 8003d90:	440a      	add	r2, r1
 8003d92:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003d96:	e7e3      	b.n	8003d60 <d_print_comp_inner+0x1374>
 8003d98:	4ead      	ldr	r6, [pc, #692]	; (8004050 <d_print_comp_inner+0x1664>)
 8003d9a:	f04f 0900 	mov.w	r9, #0
 8003d9e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003da2:	f106 0a1d 	add.w	sl, r6, #29
 8003da6:	e009      	b.n	8003dbc <d_print_comp_inner+0x13d0>
 8003da8:	460b      	mov	r3, r1
 8003daa:	3101      	adds	r1, #1
 8003dac:	45b2      	cmp	sl, r6
 8003dae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003db2:	54e7      	strb	r7, [r4, r3]
 8003db4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003db8:	f000 81fc 	beq.w	80041b4 <d_print_comp_inner+0x17c8>
 8003dbc:	29ff      	cmp	r1, #255	; 0xff
 8003dbe:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003dc2:	d1f1      	bne.n	8003da8 <d_print_comp_inner+0x13bc>
 8003dc4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003dc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003dcc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	4798      	blx	r3
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003dda:	2300      	movs	r3, #0
 8003ddc:	440a      	add	r2, r1
 8003dde:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003de2:	e7e3      	b.n	8003dac <d_print_comp_inner+0x13c0>
 8003de4:	2301      	movs	r3, #1
 8003de6:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8003dea:	f7fe becd 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003dee:	3701      	adds	r7, #1
 8003df0:	454f      	cmp	r7, r9
 8003df2:	f47f ae46 	bne.w	8003a82 <d_print_comp_inner+0x1096>
 8003df6:	f7fe bec7 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003dfa:	6876      	ldr	r6, [r6, #4]
 8003dfc:	2e00      	cmp	r6, #0
 8003dfe:	f001 8070 	beq.w	8004ee2 <d_print_comp_inner+0x24f6>
 8003e02:	2f04      	cmp	r7, #4
 8003e04:	f103 0310 	add.w	r3, r3, #16
 8003e08:	4602      	mov	r2, r0
 8003e0a:	f47f a9b8 	bne.w	800317e <d_print_comp_inner+0x792>
 8003e0e:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8003e12:	2301      	movs	r3, #1
 8003e14:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003e18:	f7fe beb6 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003e1c:	4e8d      	ldr	r6, [pc, #564]	; (8004054 <d_print_comp_inner+0x1668>)
 8003e1e:	4641      	mov	r1, r8
 8003e20:	686a      	ldr	r2, [r5, #4]
 8003e22:	4620      	mov	r0, r4
 8003e24:	f001 fb8c 	bl	8005540 <d_print_comp>
 8003e28:	f04f 0900 	mov.w	r9, #0
 8003e2c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003e30:	f106 0a04 	add.w	sl, r6, #4
 8003e34:	e008      	b.n	8003e48 <d_print_comp_inner+0x145c>
 8003e36:	460b      	mov	r3, r1
 8003e38:	3101      	adds	r1, #1
 8003e3a:	45b2      	cmp	sl, r6
 8003e3c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003e40:	54e7      	strb	r7, [r4, r3]
 8003e42:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003e46:	d013      	beq.n	8003e70 <d_print_comp_inner+0x1484>
 8003e48:	29ff      	cmp	r1, #255	; 0xff
 8003e4a:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003e4e:	d1f2      	bne.n	8003e36 <d_print_comp_inner+0x144a>
 8003e50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e58:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	4798      	blx	r3
 8003e60:	2101      	movs	r1, #1
 8003e62:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003e66:	2300      	movs	r3, #0
 8003e68:	440a      	add	r2, r1
 8003e6a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003e6e:	e7e4      	b.n	8003e3a <d_print_comp_inner+0x144e>
 8003e70:	68aa      	ldr	r2, [r5, #8]
 8003e72:	4641      	mov	r1, r8
 8003e74:	4620      	mov	r0, r4
 8003e76:	f001 fb63 	bl	8005540 <d_print_comp>
 8003e7a:	f7fe be85 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003e7e:	686a      	ldr	r2, [r5, #4]
 8003e80:	4641      	mov	r1, r8
 8003e82:	4620      	mov	r0, r4
 8003e84:	f001 fb5c 	bl	8005540 <d_print_comp>
 8003e88:	f7fe be7e 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003e8c:	686a      	ldr	r2, [r5, #4]
 8003e8e:	4641      	mov	r1, r8
 8003e90:	4620      	mov	r0, r4
 8003e92:	f001 fb55 	bl	8005540 <d_print_comp>
 8003e96:	f7fe be77 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003e9a:	686a      	ldr	r2, [r5, #4]
 8003e9c:	4641      	mov	r1, r8
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f001 fb4e 	bl	8005540 <d_print_comp>
 8003ea4:	f7fe be70 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003ea8:	686a      	ldr	r2, [r5, #4]
 8003eaa:	4641      	mov	r1, r8
 8003eac:	4620      	mov	r0, r4
 8003eae:	f001 fb47 	bl	8005540 <d_print_comp>
 8003eb2:	f7fe be69 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003eb6:	686a      	ldr	r2, [r5, #4]
 8003eb8:	4641      	mov	r1, r8
 8003eba:	4620      	mov	r0, r4
 8003ebc:	f001 fb40 	bl	8005540 <d_print_comp>
 8003ec0:	f7fe be62 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003ec4:	686a      	ldr	r2, [r5, #4]
 8003ec6:	4641      	mov	r1, r8
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f001 fb39 	bl	8005540 <d_print_comp>
 8003ece:	f7fe be5b 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003ed2:	686a      	ldr	r2, [r5, #4]
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	f001 fb32 	bl	8005540 <d_print_comp>
 8003edc:	f7fe be54 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003ee0:	686a      	ldr	r2, [r5, #4]
 8003ee2:	4641      	mov	r1, r8
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f001 fb2b 	bl	8005540 <d_print_comp>
 8003eea:	f7fe be4d 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003eee:	686a      	ldr	r2, [r5, #4]
 8003ef0:	4641      	mov	r1, r8
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f001 fb24 	bl	8005540 <d_print_comp>
 8003ef8:	f7fe be46 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003efc:	4641      	mov	r1, r8
 8003efe:	68aa      	ldr	r2, [r5, #8]
 8003f00:	4620      	mov	r0, r4
 8003f02:	f001 fb1d 	bl	8005540 <d_print_comp>
 8003f06:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f0a:	29ff      	cmp	r1, #255	; 0xff
 8003f0c:	f000 855f 	beq.w	80049ce <d_print_comp_inner+0x1fe2>
 8003f10:	1c4a      	adds	r2, r1, #1
 8003f12:	235d      	movs	r3, #93	; 0x5d
 8003f14:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003f18:	5463      	strb	r3, [r4, r1]
 8003f1a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003f1e:	f7fe be33 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8003f22:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003f26:	4641      	mov	r1, r8
 8003f28:	3301      	adds	r3, #1
 8003f2a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8003f2e:	686a      	ldr	r2, [r5, #4]
 8003f30:	4620      	mov	r0, r4
 8003f32:	f001 fb05 	bl	8005540 <d_print_comp>
 8003f36:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003f3a:	4e47      	ldr	r6, [pc, #284]	; (8004058 <d_print_comp_inner+0x166c>)
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	f04f 0900 	mov.w	r9, #0
 8003f42:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f46:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8003f4a:	f106 0802 	add.w	r8, r6, #2
 8003f4e:	e008      	b.n	8003f62 <d_print_comp_inner+0x1576>
 8003f50:	460b      	mov	r3, r1
 8003f52:	3101      	adds	r1, #1
 8003f54:	4546      	cmp	r6, r8
 8003f56:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003f5a:	54e7      	strb	r7, [r4, r3]
 8003f5c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003f60:	d013      	beq.n	8003f8a <d_print_comp_inner+0x159e>
 8003f62:	29ff      	cmp	r1, #255	; 0xff
 8003f64:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003f68:	d1f2      	bne.n	8003f50 <d_print_comp_inner+0x1564>
 8003f6a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f6e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f72:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003f76:	4620      	mov	r0, r4
 8003f78:	4798      	blx	r3
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003f80:	2300      	movs	r3, #0
 8003f82:	440a      	add	r2, r1
 8003f84:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003f88:	e7e4      	b.n	8003f54 <d_print_comp_inner+0x1568>
 8003f8a:	68aa      	ldr	r2, [r5, #8]
 8003f8c:	a804      	add	r0, sp, #16
 8003f8e:	3201      	adds	r2, #1
 8003f90:	4932      	ldr	r1, [pc, #200]	; (800405c <d_print_comp_inner+0x1670>)
 8003f92:	f013 fe7d 	bl	8017c90 <sprintf>
 8003f96:	a804      	add	r0, sp, #16
 8003f98:	f002 fc9e 	bl	80068d8 <strlen>
 8003f9c:	b318      	cbz	r0, 8003fe6 <d_print_comp_inner+0x15fa>
 8003f9e:	ad04      	add	r5, sp, #16
 8003fa0:	f04f 0800 	mov.w	r8, #0
 8003fa4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003fa8:	182f      	adds	r7, r5, r0
 8003faa:	e008      	b.n	8003fbe <d_print_comp_inner+0x15d2>
 8003fac:	460b      	mov	r3, r1
 8003fae:	3101      	adds	r1, #1
 8003fb0:	42af      	cmp	r7, r5
 8003fb2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003fb6:	54e6      	strb	r6, [r4, r3]
 8003fb8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003fbc:	d015      	beq.n	8003fea <d_print_comp_inner+0x15fe>
 8003fbe:	29ff      	cmp	r1, #255	; 0xff
 8003fc0:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003fc4:	d1f2      	bne.n	8003fac <d_print_comp_inner+0x15c0>
 8003fc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003fca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003fce:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	4798      	blx	r3
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003fdc:	2300      	movs	r3, #0
 8003fde:	440a      	add	r2, r1
 8003fe0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003fe4:	e7e4      	b.n	8003fb0 <d_print_comp_inner+0x15c4>
 8003fe6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003fea:	29ff      	cmp	r1, #255	; 0xff
 8003fec:	f000 855f 	beq.w	8004aae <d_print_comp_inner+0x20c2>
 8003ff0:	1c4a      	adds	r2, r1, #1
 8003ff2:	237d      	movs	r3, #125	; 0x7d
 8003ff4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003ff8:	5463      	strb	r3, [r4, r1]
 8003ffa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003ffe:	f7fe bdc3 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004002:	686a      	ldr	r2, [r5, #4]
 8004004:	4641      	mov	r1, r8
 8004006:	4620      	mov	r0, r4
 8004008:	f001 fa9a 	bl	8005540 <d_print_comp>
 800400c:	f7fe bdbc 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004010:	4641      	mov	r1, r8
 8004012:	68aa      	ldr	r2, [r5, #8]
 8004014:	4620      	mov	r0, r4
 8004016:	f001 fa93 	bl	8005540 <d_print_comp>
 800401a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800401e:	29ff      	cmp	r1, #255	; 0xff
 8004020:	f000 850a 	beq.w	8004a38 <d_print_comp_inner+0x204c>
 8004024:	1c4a      	adds	r2, r1, #1
 8004026:	235d      	movs	r3, #93	; 0x5d
 8004028:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800402c:	5463      	strb	r3, [r4, r1]
 800402e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004032:	f7fe bda9 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004036:	686a      	ldr	r2, [r5, #4]
 8004038:	4641      	mov	r1, r8
 800403a:	4620      	mov	r0, r4
 800403c:	f001 fa80 	bl	8005540 <d_print_comp>
 8004040:	f7fe bda2 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004044:	08022a44 	.word	0x08022a44
 8004048:	08022c3c 	.word	0x08022c3c
 800404c:	08022ccf 	.word	0x08022ccf
 8004050:	08022c8f 	.word	0x08022c8f
 8004054:	08022ae0 	.word	0x08022ae0
 8004058:	08022cdc 	.word	0x08022cdc
 800405c:	08022a30 	.word	0x08022a30
 8004060:	f8da 5004 	ldr.w	r5, [sl, #4]
 8004064:	782b      	ldrb	r3, [r5, #0]
 8004066:	3b61      	subs	r3, #97	; 0x61
 8004068:	2b19      	cmp	r3, #25
 800406a:	d809      	bhi.n	8004080 <d_print_comp_inner+0x1694>
 800406c:	29ff      	cmp	r1, #255	; 0xff
 800406e:	f000 8795 	beq.w	8004f9c <d_print_comp_inner+0x25b0>
 8004072:	2320      	movs	r3, #32
 8004074:	1c4a      	adds	r2, r1, #1
 8004076:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800407a:	5463      	strb	r3, [r4, r1]
 800407c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004080:	19eb      	adds	r3, r5, r7
 8004082:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004086:	2b20      	cmp	r3, #32
 8004088:	bf08      	it	eq
 800408a:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 800408e:	2f00      	cmp	r7, #0
 8004090:	f43e ad7a 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 8004094:	f04f 0800 	mov.w	r8, #0
 8004098:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800409c:	442f      	add	r7, r5
 800409e:	e009      	b.n	80040b4 <d_print_comp_inner+0x16c8>
 80040a0:	460b      	mov	r3, r1
 80040a2:	3101      	adds	r1, #1
 80040a4:	42af      	cmp	r7, r5
 80040a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80040aa:	54e6      	strb	r6, [r4, r3]
 80040ac:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80040b0:	f43e ad6a 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 80040b4:	29ff      	cmp	r1, #255	; 0xff
 80040b6:	f815 6b01 	ldrb.w	r6, [r5], #1
 80040ba:	d1f1      	bne.n	80040a0 <d_print_comp_inner+0x16b4>
 80040bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80040c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80040c4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80040c8:	4620      	mov	r0, r4
 80040ca:	4798      	blx	r3
 80040cc:	2101      	movs	r1, #1
 80040ce:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80040d2:	2300      	movs	r3, #0
 80040d4:	440a      	add	r2, r1
 80040d6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80040da:	e7e3      	b.n	80040a4 <d_print_comp_inner+0x16b8>
 80040dc:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 80040e0:	b13a      	cbz	r2, 80040f2 <d_print_comp_inner+0x1706>
 80040e2:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 80040e6:	ab14      	add	r3, sp, #80	; 0x50
 80040e8:	f843 1d48 	str.w	r1, [r3, #-72]!
 80040ec:	9203      	str	r2, [sp, #12]
 80040ee:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80040f2:	686b      	ldr	r3, [r5, #4]
 80040f4:	781a      	ldrb	r2, [r3, #0]
 80040f6:	2a04      	cmp	r2, #4
 80040f8:	f000 830d 	beq.w	8004716 <d_print_comp_inner+0x1d2a>
 80040fc:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 8004100:	a804      	add	r0, sp, #16
 8004102:	461a      	mov	r2, r3
 8004104:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8004108:	4641      	mov	r1, r8
 800410a:	4620      	mov	r0, r4
 800410c:	9304      	str	r3, [sp, #16]
 800410e:	9505      	str	r5, [sp, #20]
 8004110:	f7fe fc6c 	bl	80029ec <d_print_comp_inner>
 8004114:	9a05      	ldr	r2, [sp, #20]
 8004116:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 800411a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 800411e:	2b00      	cmp	r3, #0
 8004120:	f43e ad32 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 8004124:	9b02      	ldr	r3, [sp, #8]
 8004126:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800412a:	f7fe bd2d 	b.w	8002b88 <d_print_comp_inner+0x19c>
 800412e:	68aa      	ldr	r2, [r5, #8]
 8004130:	4641      	mov	r1, r8
 8004132:	4620      	mov	r0, r4
 8004134:	f001 fa04 	bl	8005540 <d_print_comp>
 8004138:	f7fe bd26 	b.w	8002b88 <d_print_comp_inner+0x19c>
 800413c:	686a      	ldr	r2, [r5, #4]
 800413e:	a804      	add	r0, sp, #16
 8004140:	3201      	adds	r2, #1
 8004142:	49d7      	ldr	r1, [pc, #860]	; (80044a0 <d_print_comp_inner+0x1ab4>)
 8004144:	f013 fda4 	bl	8017c90 <sprintf>
 8004148:	a804      	add	r0, sp, #16
 800414a:	f002 fbc5 	bl	80068d8 <strlen>
 800414e:	b318      	cbz	r0, 8004198 <d_print_comp_inner+0x17ac>
 8004150:	ad04      	add	r5, sp, #16
 8004152:	f04f 0800 	mov.w	r8, #0
 8004156:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800415a:	182f      	adds	r7, r5, r0
 800415c:	e008      	b.n	8004170 <d_print_comp_inner+0x1784>
 800415e:	460b      	mov	r3, r1
 8004160:	3101      	adds	r1, #1
 8004162:	42bd      	cmp	r5, r7
 8004164:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004168:	54e6      	strb	r6, [r4, r3]
 800416a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800416e:	d015      	beq.n	800419c <d_print_comp_inner+0x17b0>
 8004170:	29ff      	cmp	r1, #255	; 0xff
 8004172:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004176:	d1f2      	bne.n	800415e <d_print_comp_inner+0x1772>
 8004178:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800417c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004180:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004184:	4620      	mov	r0, r4
 8004186:	4798      	blx	r3
 8004188:	2101      	movs	r1, #1
 800418a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800418e:	2300      	movs	r3, #0
 8004190:	440a      	add	r2, r1
 8004192:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004196:	e7e4      	b.n	8004162 <d_print_comp_inner+0x1776>
 8004198:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800419c:	29ff      	cmp	r1, #255	; 0xff
 800419e:	f000 8404 	beq.w	80049aa <d_print_comp_inner+0x1fbe>
 80041a2:	1c4a      	adds	r2, r1, #1
 80041a4:	237d      	movs	r3, #125	; 0x7d
 80041a6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80041aa:	5463      	strb	r3, [r4, r1]
 80041ac:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80041b0:	f7fe bcea 	b.w	8002b88 <d_print_comp_inner+0x19c>
 80041b4:	686a      	ldr	r2, [r5, #4]
 80041b6:	4641      	mov	r1, r8
 80041b8:	4620      	mov	r0, r4
 80041ba:	f001 f9c1 	bl	8005540 <d_print_comp>
 80041be:	f7fe bce3 	b.w	8002b88 <d_print_comp_inner+0x19c>
 80041c2:	686a      	ldr	r2, [r5, #4]
 80041c4:	4641      	mov	r1, r8
 80041c6:	4620      	mov	r0, r4
 80041c8:	f001 f9ba 	bl	8005540 <d_print_comp>
 80041cc:	f7fe bcdc 	b.w	8002b88 <d_print_comp_inner+0x19c>
 80041d0:	686a      	ldr	r2, [r5, #4]
 80041d2:	4641      	mov	r1, r8
 80041d4:	4620      	mov	r0, r4
 80041d6:	f001 f9b3 	bl	8005540 <d_print_comp>
 80041da:	f7fe bcd5 	b.w	8002b88 <d_print_comp_inner+0x19c>
 80041de:	4eb1      	ldr	r6, [pc, #708]	; (80044a4 <d_print_comp_inner+0x1ab8>)
 80041e0:	4641      	mov	r1, r8
 80041e2:	68aa      	ldr	r2, [r5, #8]
 80041e4:	4620      	mov	r0, r4
 80041e6:	f001 f9ab 	bl	8005540 <d_print_comp>
 80041ea:	f04f 0900 	mov.w	r9, #0
 80041ee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80041f2:	f106 0a05 	add.w	sl, r6, #5
 80041f6:	e008      	b.n	800420a <d_print_comp_inner+0x181e>
 80041f8:	460b      	mov	r3, r1
 80041fa:	3101      	adds	r1, #1
 80041fc:	4556      	cmp	r6, sl
 80041fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004202:	54e7      	strb	r7, [r4, r3]
 8004204:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004208:	d013      	beq.n	8004232 <d_print_comp_inner+0x1846>
 800420a:	29ff      	cmp	r1, #255	; 0xff
 800420c:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004210:	d1f2      	bne.n	80041f8 <d_print_comp_inner+0x180c>
 8004212:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004216:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800421a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800421e:	4620      	mov	r0, r4
 8004220:	4798      	blx	r3
 8004222:	2101      	movs	r1, #1
 8004224:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004228:	2300      	movs	r3, #0
 800422a:	440a      	add	r2, r1
 800422c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004230:	e7e4      	b.n	80041fc <d_print_comp_inner+0x1810>
 8004232:	686a      	ldr	r2, [r5, #4]
 8004234:	4641      	mov	r1, r8
 8004236:	4620      	mov	r0, r4
 8004238:	f001 f982 	bl	8005540 <d_print_comp>
 800423c:	f7fe bca4 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004240:	686a      	ldr	r2, [r5, #4]
 8004242:	4641      	mov	r1, r8
 8004244:	4620      	mov	r0, r4
 8004246:	f001 f97b 	bl	8005540 <d_print_comp>
 800424a:	f7fe bc9d 	b.w	8002b88 <d_print_comp_inner+0x19c>
 800424e:	686a      	ldr	r2, [r5, #4]
 8004250:	4641      	mov	r1, r8
 8004252:	4620      	mov	r0, r4
 8004254:	f001 f974 	bl	8005540 <d_print_comp>
 8004258:	f7fe bc96 	b.w	8002b88 <d_print_comp_inner+0x19c>
 800425c:	686a      	ldr	r2, [r5, #4]
 800425e:	4641      	mov	r1, r8
 8004260:	4620      	mov	r0, r4
 8004262:	f001 f96d 	bl	8005540 <d_print_comp>
 8004266:	f7fe bc8f 	b.w	8002b88 <d_print_comp_inner+0x19c>
 800426a:	4641      	mov	r1, r8
 800426c:	686a      	ldr	r2, [r5, #4]
 800426e:	4620      	mov	r0, r4
 8004270:	f001 f966 	bl	8005540 <d_print_comp>
 8004274:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004278:	29ff      	cmp	r1, #255	; 0xff
 800427a:	f000 842a 	beq.w	8004ad2 <d_print_comp_inner+0x20e6>
 800427e:	1c4a      	adds	r2, r1, #1
 8004280:	2329      	movs	r3, #41	; 0x29
 8004282:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004286:	5463      	strb	r3, [r4, r1]
 8004288:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800428c:	f7fe bc7c 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004290:	686a      	ldr	r2, [r5, #4]
 8004292:	4641      	mov	r1, r8
 8004294:	4620      	mov	r0, r4
 8004296:	f001 f953 	bl	8005540 <d_print_comp>
 800429a:	f7fe bc75 	b.w	8002b88 <d_print_comp_inner+0x19c>
 800429e:	2f04      	cmp	r7, #4
 80042a0:	f106 0e10 	add.w	lr, r6, #16
 80042a4:	f1a6 0410 	sub.w	r4, r6, #16
 80042a8:	f000 8724 	beq.w	80050f4 <d_print_comp_inner+0x2708>
 80042ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80042b0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80042b4:	2300      	movs	r3, #0
 80042b6:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
 80042ba:	f84e 4c10 	str.w	r4, [lr, #-16]
 80042be:	f84e 5c1c 	str.w	r5, [lr, #-28]
 80042c2:	f84e 3c18 	str.w	r3, [lr, #-24]
 80042c6:	f84e cc14 	str.w	ip, [lr, #-20]
 80042ca:	4676      	mov	r6, lr
 80042cc:	686d      	ldr	r5, [r5, #4]
 80042ce:	3701      	adds	r7, #1
 80042d0:	f7fe bf7d 	b.w	80031ce <d_print_comp_inner+0x7e2>
 80042d4:	68aa      	ldr	r2, [r5, #8]
 80042d6:	4641      	mov	r1, r8
 80042d8:	4620      	mov	r0, r4
 80042da:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 80042de:	f001 f92f 	bl	8005540 <d_print_comp>
 80042e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80042e6:	429d      	cmp	r5, r3
 80042e8:	f47e ac4e 	bne.w	8002b88 <d_print_comp_inner+0x19c>
 80042ec:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80042f0:	42b3      	cmp	r3, r6
 80042f2:	f47e ac49 	bne.w	8002b88 <d_print_comp_inner+0x19c>
 80042f6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80042fa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80042fe:	f7fe bc43 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004302:	462a      	mov	r2, r5
 8004304:	4641      	mov	r1, r8
 8004306:	4620      	mov	r0, r4
 8004308:	f001 f92a 	bl	8005560 <d_print_mod>
 800430c:	f7fe bc6c 	b.w	8002be8 <d_print_comp_inner+0x1fc>
 8004310:	686b      	ldr	r3, [r5, #4]
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	f1b9 0f00 	cmp.w	r9, #0
 8004318:	f47f abae 	bne.w	8003a78 <d_print_comp_inner+0x108c>
 800431c:	f7fe bc34 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004320:	464a      	mov	r2, r9
 8004322:	a804      	add	r0, sp, #16
 8004324:	495e      	ldr	r1, [pc, #376]	; (80044a0 <d_print_comp_inner+0x1ab4>)
 8004326:	f013 fcb3 	bl	8017c90 <sprintf>
 800432a:	a804      	add	r0, sp, #16
 800432c:	f002 fad4 	bl	80068d8 <strlen>
 8004330:	b318      	cbz	r0, 800437a <d_print_comp_inner+0x198e>
 8004332:	ad04      	add	r5, sp, #16
 8004334:	f04f 0800 	mov.w	r8, #0
 8004338:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800433c:	182f      	adds	r7, r5, r0
 800433e:	e008      	b.n	8004352 <d_print_comp_inner+0x1966>
 8004340:	460b      	mov	r3, r1
 8004342:	3101      	adds	r1, #1
 8004344:	42af      	cmp	r7, r5
 8004346:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800434a:	54e6      	strb	r6, [r4, r3]
 800434c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004350:	d015      	beq.n	800437e <d_print_comp_inner+0x1992>
 8004352:	29ff      	cmp	r1, #255	; 0xff
 8004354:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004358:	d1f2      	bne.n	8004340 <d_print_comp_inner+0x1954>
 800435a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800435e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004362:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004366:	4620      	mov	r0, r4
 8004368:	4798      	blx	r3
 800436a:	2101      	movs	r1, #1
 800436c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004370:	2300      	movs	r3, #0
 8004372:	440a      	add	r2, r1
 8004374:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004378:	e7e4      	b.n	8004344 <d_print_comp_inner+0x1958>
 800437a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800437e:	29ff      	cmp	r1, #255	; 0xff
 8004380:	f000 84df 	beq.w	8004d42 <d_print_comp_inner+0x2356>
 8004384:	1c4a      	adds	r2, r1, #1
 8004386:	237d      	movs	r3, #125	; 0x7d
 8004388:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800438c:	5463      	strb	r3, [r4, r1]
 800438e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004392:	f7fe bbf9 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004396:	2700      	movs	r7, #0
 8004398:	f7ff ba1e 	b.w	80037d8 <d_print_comp_inner+0xdec>
 800439c:	68df      	ldr	r7, [r3, #12]
 800439e:	689d      	ldr	r5, [r3, #8]
 80043a0:	2f00      	cmp	r7, #0
 80043a2:	f43e abf1 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 80043a6:	f04f 0800 	mov.w	r8, #0
 80043aa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80043ae:	442f      	add	r7, r5
 80043b0:	e009      	b.n	80043c6 <d_print_comp_inner+0x19da>
 80043b2:	460b      	mov	r3, r1
 80043b4:	3101      	adds	r1, #1
 80043b6:	42bd      	cmp	r5, r7
 80043b8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80043bc:	54e6      	strb	r6, [r4, r3]
 80043be:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80043c2:	f43e abe1 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 80043c6:	29ff      	cmp	r1, #255	; 0xff
 80043c8:	f815 6b01 	ldrb.w	r6, [r5], #1
 80043cc:	d1f1      	bne.n	80043b2 <d_print_comp_inner+0x19c6>
 80043ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80043d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80043d6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80043da:	4620      	mov	r0, r4
 80043dc:	4798      	blx	r3
 80043de:	2101      	movs	r1, #1
 80043e0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80043e4:	2300      	movs	r3, #0
 80043e6:	440a      	add	r2, r1
 80043e8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80043ec:	e7e3      	b.n	80043b6 <d_print_comp_inner+0x19ca>
 80043ee:	686e      	ldr	r6, [r5, #4]
 80043f0:	68af      	ldr	r7, [r5, #8]
 80043f2:	4437      	add	r7, r6
 80043f4:	42be      	cmp	r6, r7
 80043f6:	f4be abc7 	bcs.w	8002b88 <d_print_comp_inner+0x19c>
 80043fa:	f04f 0800 	mov.w	r8, #0
 80043fe:	e00d      	b.n	800441c <d_print_comp_inner+0x1a30>
 8004400:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004404:	29ff      	cmp	r1, #255	; 0xff
 8004406:	d036      	beq.n	8004476 <d_print_comp_inner+0x1a8a>
 8004408:	1c4b      	adds	r3, r1, #1
 800440a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800440e:	5465      	strb	r5, [r4, r1]
 8004410:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004414:	3601      	adds	r6, #1
 8004416:	42b7      	cmp	r7, r6
 8004418:	f67e abb6 	bls.w	8002b88 <d_print_comp_inner+0x19c>
 800441c:	1bbb      	subs	r3, r7, r6
 800441e:	2b03      	cmp	r3, #3
 8004420:	7835      	ldrb	r5, [r6, #0]
 8004422:	dded      	ble.n	8004400 <d_print_comp_inner+0x1a14>
 8004424:	2d5f      	cmp	r5, #95	; 0x5f
 8004426:	d1eb      	bne.n	8004400 <d_print_comp_inner+0x1a14>
 8004428:	7873      	ldrb	r3, [r6, #1]
 800442a:	2b5f      	cmp	r3, #95	; 0x5f
 800442c:	d1e8      	bne.n	8004400 <d_print_comp_inner+0x1a14>
 800442e:	78b3      	ldrb	r3, [r6, #2]
 8004430:	2b55      	cmp	r3, #85	; 0x55
 8004432:	d1e5      	bne.n	8004400 <d_print_comp_inner+0x1a14>
 8004434:	1cf3      	adds	r3, r6, #3
 8004436:	429f      	cmp	r7, r3
 8004438:	d9e2      	bls.n	8004400 <d_print_comp_inner+0x1a14>
 800443a:	2000      	movs	r0, #0
 800443c:	e006      	b.n	800444c <d_print_comp_inner+0x1a60>
 800443e:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
 8004442:	429f      	cmp	r7, r3
 8004444:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8004448:	f000 85c9 	beq.w	8004fde <d_print_comp_inner+0x25f2>
 800444c:	4699      	mov	r9, r3
 800444e:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004452:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8004456:	b2d1      	uxtb	r1, r2
 8004458:	2909      	cmp	r1, #9
 800445a:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
 800445e:	d9f0      	bls.n	8004442 <d_print_comp_inner+0x1a56>
 8004460:	f1be 0f05 	cmp.w	lr, #5
 8004464:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 8004468:	d9e9      	bls.n	800443e <d_print_comp_inner+0x1a52>
 800446a:	2a05      	cmp	r2, #5
 800446c:	f200 8745 	bhi.w	80052fa <d_print_comp_inner+0x290e>
 8004470:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
 8004474:	e7e5      	b.n	8004442 <d_print_comp_inner+0x1a56>
 8004476:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800447a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800447e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004482:	4620      	mov	r0, r4
 8004484:	4798      	blx	r3
 8004486:	2301      	movs	r3, #1
 8004488:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800448c:	2100      	movs	r1, #0
 800448e:	441a      	add	r2, r3
 8004490:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004494:	e7b9      	b.n	800440a <d_print_comp_inner+0x1a1e>
 8004496:	4d04      	ldr	r5, [pc, #16]	; (80044a8 <d_print_comp_inner+0x1abc>)
 8004498:	4698      	mov	r8, r3
 800449a:	1daf      	adds	r7, r5, #6
 800449c:	e010      	b.n	80044c0 <d_print_comp_inner+0x1ad4>
 800449e:	bf00      	nop
 80044a0:	08022a30 	.word	0x08022a30
 80044a4:	08022ba4 	.word	0x08022ba4
 80044a8:	08022c04 	.word	0x08022c04
 80044ac:	460b      	mov	r3, r1
 80044ae:	3101      	adds	r1, #1
 80044b0:	42bd      	cmp	r5, r7
 80044b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80044b6:	54e6      	strb	r6, [r4, r3]
 80044b8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80044bc:	f43e ab64 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 80044c0:	29ff      	cmp	r1, #255	; 0xff
 80044c2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80044c6:	d1f1      	bne.n	80044ac <d_print_comp_inner+0x1ac0>
 80044c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80044cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80044d0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80044d4:	4620      	mov	r0, r4
 80044d6:	4798      	blx	r3
 80044d8:	2101      	movs	r1, #1
 80044da:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80044de:	2300      	movs	r3, #0
 80044e0:	440a      	add	r2, r1
 80044e2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80044e6:	e7e3      	b.n	80044b0 <d_print_comp_inner+0x1ac4>
 80044e8:	782b      	ldrb	r3, [r5, #0]
 80044ea:	2b2f      	cmp	r3, #47	; 0x2f
 80044ec:	f47e ab66 	bne.w	8002bbc <d_print_comp_inner+0x1d0>
 80044f0:	4601      	mov	r1, r0
 80044f2:	460d      	mov	r5, r1
 80044f4:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 80044f8:	f7fe bb62 	b.w	8002bc0 <d_print_comp_inner+0x1d4>
 80044fc:	4dd7      	ldr	r5, [pc, #860]	; (800485c <d_print_comp_inner+0x1e70>)
 80044fe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004502:	1d2f      	adds	r7, r5, #4
 8004504:	e009      	b.n	800451a <d_print_comp_inner+0x1b2e>
 8004506:	460b      	mov	r3, r1
 8004508:	3101      	adds	r1, #1
 800450a:	42af      	cmp	r7, r5
 800450c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004510:	54e6      	strb	r6, [r4, r3]
 8004512:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004516:	f43e ab37 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 800451a:	29ff      	cmp	r1, #255	; 0xff
 800451c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004520:	d1f1      	bne.n	8004506 <d_print_comp_inner+0x1b1a>
 8004522:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004526:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800452a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800452e:	4620      	mov	r0, r4
 8004530:	4798      	blx	r3
 8004532:	2101      	movs	r1, #1
 8004534:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004538:	2300      	movs	r3, #0
 800453a:	440a      	add	r2, r1
 800453c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004540:	e7e3      	b.n	800450a <d_print_comp_inner+0x1b1e>
 8004542:	4ec7      	ldr	r6, [pc, #796]	; (8004860 <d_print_comp_inner+0x1e74>)
 8004544:	f04f 0800 	mov.w	r8, #0
 8004548:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800454c:	f106 0905 	add.w	r9, r6, #5
 8004550:	e008      	b.n	8004564 <d_print_comp_inner+0x1b78>
 8004552:	460b      	mov	r3, r1
 8004554:	3101      	adds	r1, #1
 8004556:	45b1      	cmp	r9, r6
 8004558:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800455c:	54e7      	strb	r7, [r4, r3]
 800455e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004562:	d013      	beq.n	800458c <d_print_comp_inner+0x1ba0>
 8004564:	29ff      	cmp	r1, #255	; 0xff
 8004566:	f816 7b01 	ldrb.w	r7, [r6], #1
 800456a:	d1f2      	bne.n	8004552 <d_print_comp_inner+0x1b66>
 800456c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004570:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004574:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004578:	4620      	mov	r0, r4
 800457a:	4798      	blx	r3
 800457c:	2101      	movs	r1, #1
 800457e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004582:	2300      	movs	r3, #0
 8004584:	440a      	add	r2, r1
 8004586:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800458a:	e7e4      	b.n	8004556 <d_print_comp_inner+0x1b6a>
 800458c:	686a      	ldr	r2, [r5, #4]
 800458e:	a804      	add	r0, sp, #16
 8004590:	3201      	adds	r2, #1
 8004592:	49b4      	ldr	r1, [pc, #720]	; (8004864 <d_print_comp_inner+0x1e78>)
 8004594:	f013 fb7c 	bl	8017c90 <sprintf>
 8004598:	a804      	add	r0, sp, #16
 800459a:	f002 f99d 	bl	80068d8 <strlen>
 800459e:	2800      	cmp	r0, #0
 80045a0:	f43e aaf2 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 80045a4:	ad04      	add	r5, sp, #16
 80045a6:	f04f 0800 	mov.w	r8, #0
 80045aa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80045ae:	182f      	adds	r7, r5, r0
 80045b0:	e009      	b.n	80045c6 <d_print_comp_inner+0x1bda>
 80045b2:	460b      	mov	r3, r1
 80045b4:	3101      	adds	r1, #1
 80045b6:	42af      	cmp	r7, r5
 80045b8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80045bc:	54e6      	strb	r6, [r4, r3]
 80045be:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80045c2:	f43e aae1 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 80045c6:	29ff      	cmp	r1, #255	; 0xff
 80045c8:	f815 6b01 	ldrb.w	r6, [r5], #1
 80045cc:	d1f1      	bne.n	80045b2 <d_print_comp_inner+0x1bc6>
 80045ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80045d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80045d6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80045da:	4620      	mov	r0, r4
 80045dc:	4798      	blx	r3
 80045de:	2101      	movs	r1, #1
 80045e0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80045e4:	2300      	movs	r3, #0
 80045e6:	440a      	add	r2, r1
 80045e8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80045ec:	e7e3      	b.n	80045b6 <d_print_comp_inner+0x1bca>
 80045ee:	f021 0860 	bic.w	r8, r1, #96	; 0x60
 80045f2:	f105 0208 	add.w	r2, r5, #8
 80045f6:	4641      	mov	r1, r8
 80045f8:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80045fc:	f001 fc9c 	bl	8005f38 <d_print_function_type.isra.11>
 8004600:	686a      	ldr	r2, [r5, #4]
 8004602:	2a00      	cmp	r2, #0
 8004604:	f43e aac0 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 8004608:	4641      	mov	r1, r8
 800460a:	4620      	mov	r0, r4
 800460c:	f000 ff98 	bl	8005540 <d_print_comp>
 8004610:	f7fe baba 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004614:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004618:	f7ff b9a3 	b.w	8003962 <d_print_comp_inner+0xf76>
 800461c:	4e92      	ldr	r6, [pc, #584]	; (8004868 <d_print_comp_inner+0x1e7c>)
 800461e:	f04f 0900 	mov.w	r9, #0
 8004622:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004626:	f106 0a05 	add.w	sl, r6, #5
 800462a:	e009      	b.n	8004640 <d_print_comp_inner+0x1c54>
 800462c:	460b      	mov	r3, r1
 800462e:	3101      	adds	r1, #1
 8004630:	45b2      	cmp	sl, r6
 8004632:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004636:	54e7      	strb	r7, [r4, r3]
 8004638:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800463c:	f43f a97b 	beq.w	8003936 <d_print_comp_inner+0xf4a>
 8004640:	29ff      	cmp	r1, #255	; 0xff
 8004642:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004646:	d1f1      	bne.n	800462c <d_print_comp_inner+0x1c40>
 8004648:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800464c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004650:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004654:	4620      	mov	r0, r4
 8004656:	4798      	blx	r3
 8004658:	2101      	movs	r1, #1
 800465a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800465e:	2300      	movs	r3, #0
 8004660:	440a      	add	r2, r1
 8004662:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004666:	e7e3      	b.n	8004630 <d_print_comp_inner+0x1c44>
 8004668:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800466c:	497f      	ldr	r1, [pc, #508]	; (800486c <d_print_comp_inner+0x1e80>)
 800466e:	681f      	ldr	r7, [r3, #0]
 8004670:	4638      	mov	r0, r7
 8004672:	f002 f927 	bl	80068c4 <strcmp>
 8004676:	f896 a000 	ldrb.w	sl, [r6]
 800467a:	b918      	cbnz	r0, 8004684 <d_print_comp_inner+0x1c98>
 800467c:	f1ba 0f03 	cmp.w	sl, #3
 8004680:	f000 851e 	beq.w	80050c0 <d_print_comp_inner+0x26d4>
 8004684:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
 8004688:	f000 8600 	beq.w	800528c <d_print_comp_inner+0x28a0>
 800468c:	4978      	ldr	r1, [pc, #480]	; (8004870 <d_print_comp_inner+0x1e84>)
 800468e:	4638      	mov	r0, r7
 8004690:	f002 f918 	bl	80068c4 <strcmp>
 8004694:	4605      	mov	r5, r0
 8004696:	2800      	cmp	r0, #0
 8004698:	f000 8136 	beq.w	8004908 <d_print_comp_inner+0x1f1c>
 800469c:	4975      	ldr	r1, [pc, #468]	; (8004874 <d_print_comp_inner+0x1e88>)
 800469e:	4638      	mov	r0, r7
 80046a0:	f002 f910 	bl	80068c4 <strcmp>
 80046a4:	2800      	cmp	r0, #0
 80046a6:	f000 82b9 	beq.w	8004c1c <d_print_comp_inner+0x2230>
 80046aa:	464a      	mov	r2, r9
 80046ac:	4641      	mov	r1, r8
 80046ae:	4620      	mov	r0, r4
 80046b0:	f001 fd36 	bl	8006120 <d_print_expr_op>
 80046b4:	2f00      	cmp	r7, #0
 80046b6:	f43f a837 	beq.w	8003728 <d_print_comp_inner+0xd3c>
 80046ba:	496f      	ldr	r1, [pc, #444]	; (8004878 <d_print_comp_inner+0x1e8c>)
 80046bc:	4638      	mov	r0, r7
 80046be:	f002 f901 	bl	80068c4 <strcmp>
 80046c2:	2800      	cmp	r0, #0
 80046c4:	f000 8387 	beq.w	8004dd6 <d_print_comp_inner+0x23ea>
 80046c8:	4638      	mov	r0, r7
 80046ca:	496c      	ldr	r1, [pc, #432]	; (800487c <d_print_comp_inner+0x1e90>)
 80046cc:	f002 f8fa 	bl	80068c4 <strcmp>
 80046d0:	4605      	mov	r5, r0
 80046d2:	2800      	cmp	r0, #0
 80046d4:	f47f a828 	bne.w	8003728 <d_print_comp_inner+0xd3c>
 80046d8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80046dc:	2bff      	cmp	r3, #255	; 0xff
 80046de:	f000 84de 	beq.w	800509e <d_print_comp_inner+0x26b2>
 80046e2:	2528      	movs	r5, #40	; 0x28
 80046e4:	1c58      	adds	r0, r3, #1
 80046e6:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 80046ea:	4641      	mov	r1, r8
 80046ec:	54e5      	strb	r5, [r4, r3]
 80046ee:	4632      	mov	r2, r6
 80046f0:	4620      	mov	r0, r4
 80046f2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80046f6:	f000 ff23 	bl	8005540 <d_print_comp>
 80046fa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80046fe:	29ff      	cmp	r1, #255	; 0xff
 8004700:	f000 8470 	beq.w	8004fe4 <d_print_comp_inner+0x25f8>
 8004704:	2329      	movs	r3, #41	; 0x29
 8004706:	1c4a      	adds	r2, r1, #1
 8004708:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800470c:	5463      	strb	r3, [r4, r1]
 800470e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004712:	f7fe ba39 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004716:	6858      	ldr	r0, [r3, #4]
 8004718:	f10d 0910 	add.w	r9, sp, #16
 800471c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004720:	4602      	mov	r2, r0
 8004722:	9004      	str	r0, [sp, #16]
 8004724:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 8004728:	4641      	mov	r1, r8
 800472a:	4620      	mov	r0, r4
 800472c:	9305      	str	r3, [sp, #20]
 800472e:	f7fe f95d 	bl	80029ec <d_print_comp_inner>
 8004732:	9a05      	ldr	r2, [sp, #20]
 8004734:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004738:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 800473c:	b113      	cbz	r3, 8004744 <d_print_comp_inner+0x1d58>
 800473e:	9b02      	ldr	r3, [sp, #8]
 8004740:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004744:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004748:	2b3c      	cmp	r3, #60	; 0x3c
 800474a:	f000 83db 	beq.w	8004f04 <d_print_comp_inner+0x2518>
 800474e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004752:	29ff      	cmp	r1, #255	; 0xff
 8004754:	f000 8469 	beq.w	800502a <d_print_comp_inner+0x263e>
 8004758:	233c      	movs	r3, #60	; 0x3c
 800475a:	1c4a      	adds	r2, r1, #1
 800475c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004760:	5463      	strb	r3, [r4, r1]
 8004762:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004766:	686b      	ldr	r3, [r5, #4]
 8004768:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	4641      	mov	r1, r8
 8004770:	461a      	mov	r2, r3
 8004772:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 8004776:	4620      	mov	r0, r4
 8004778:	9304      	str	r3, [sp, #16]
 800477a:	9505      	str	r5, [sp, #20]
 800477c:	f7fe f936 	bl	80029ec <d_print_comp_inner>
 8004780:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004784:	9a05      	ldr	r2, [sp, #20]
 8004786:	2b3e      	cmp	r3, #62	; 0x3e
 8004788:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 800478c:	f000 83ad 	beq.w	8004eea <d_print_comp_inner+0x24fe>
 8004790:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004794:	29ff      	cmp	r1, #255	; 0xff
 8004796:	f000 849c 	beq.w	80050d2 <d_print_comp_inner+0x26e6>
 800479a:	233e      	movs	r3, #62	; 0x3e
 800479c:	1c4a      	adds	r2, r1, #1
 800479e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80047a2:	5463      	strb	r3, [r4, r1]
 80047a4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80047a8:	f7fe b9ee 	b.w	8002b88 <d_print_comp_inner+0x19c>
 80047ac:	6852      	ldr	r2, [r2, #4]
 80047ae:	7c16      	ldrb	r6, [r2, #16]
 80047b0:	2e00      	cmp	r6, #0
 80047b2:	f43f a9e7 	beq.w	8003b84 <d_print_comp_inner+0x1198>
 80047b6:	2e06      	cmp	r6, #6
 80047b8:	f240 8339 	bls.w	8004e2e <d_print_comp_inner+0x2442>
 80047bc:	2e07      	cmp	r6, #7
 80047be:	f47f a9e1 	bne.w	8003b84 <d_print_comp_inner+0x1198>
 80047c2:	68aa      	ldr	r2, [r5, #8]
 80047c4:	7811      	ldrb	r1, [r2, #0]
 80047c6:	2900      	cmp	r1, #0
 80047c8:	f47f a9dc 	bne.w	8003b84 <d_print_comp_inner+0x1198>
 80047cc:	6891      	ldr	r1, [r2, #8]
 80047ce:	2901      	cmp	r1, #1
 80047d0:	f47f a9d8 	bne.w	8003b84 <d_print_comp_inner+0x1198>
 80047d4:	2b3c      	cmp	r3, #60	; 0x3c
 80047d6:	f47f a9d5 	bne.w	8003b84 <d_print_comp_inner+0x1198>
 80047da:	6853      	ldr	r3, [r2, #4]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b30      	cmp	r3, #48	; 0x30
 80047e0:	f000 8628 	beq.w	8005434 <d_print_comp_inner+0x2a48>
 80047e4:	2b31      	cmp	r3, #49	; 0x31
 80047e6:	f47f a9cd 	bne.w	8003b84 <d_print_comp_inner+0x1198>
 80047ea:	2204      	movs	r2, #4
 80047ec:	4924      	ldr	r1, [pc, #144]	; (8004880 <d_print_comp_inner+0x1e94>)
 80047ee:	f7fb fe3b 	bl	8000468 <d_append_buffer>
 80047f2:	f7fe b9c9 	b.w	8002b88 <d_print_comp_inner+0x19c>
 80047f6:	4e23      	ldr	r6, [pc, #140]	; (8004884 <d_print_comp_inner+0x1e98>)
 80047f8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80047fc:	f106 0a02 	add.w	sl, r6, #2
 8004800:	e009      	b.n	8004816 <d_print_comp_inner+0x1e2a>
 8004802:	460b      	mov	r3, r1
 8004804:	3101      	adds	r1, #1
 8004806:	45b2      	cmp	sl, r6
 8004808:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800480c:	54e7      	strb	r7, [r4, r3]
 800480e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004812:	f43e ad4d 	beq.w	80032b0 <d_print_comp_inner+0x8c4>
 8004816:	29ff      	cmp	r1, #255	; 0xff
 8004818:	f816 7b01 	ldrb.w	r7, [r6], #1
 800481c:	d1f1      	bne.n	8004802 <d_print_comp_inner+0x1e16>
 800481e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004822:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004826:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800482a:	4620      	mov	r0, r4
 800482c:	4798      	blx	r3
 800482e:	2101      	movs	r1, #1
 8004830:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004834:	2300      	movs	r3, #0
 8004836:	440a      	add	r2, r1
 8004838:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800483c:	e7e3      	b.n	8004806 <d_print_comp_inner+0x1e1a>
 800483e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004842:	29ff      	cmp	r1, #255	; 0xff
 8004844:	f000 84e6 	beq.w	8005214 <d_print_comp_inner+0x2828>
 8004848:	2220      	movs	r2, #32
 800484a:	1c4b      	adds	r3, r1, #1
 800484c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004850:	5462      	strb	r2, [r4, r1]
 8004852:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004856:	f7fe bdb6 	b.w	80033c6 <d_print_comp_inner+0x9da>
 800485a:	bf00      	nop
 800485c:	08022c80 	.word	0x08022c80
 8004860:	08022aa4 	.word	0x08022aa4
 8004864:	08022a30 	.word	0x08022a30
 8004868:	08022bf4 	.word	0x08022bf4
 800486c:	08022c28 	.word	0x08022c28
 8004870:	08022cfc 	.word	0x08022cfc
 8004874:	08022a34 	.word	0x08022a34
 8004878:	08022c2c 	.word	0x08022c2c
 800487c:	08022f3c 	.word	0x08022f3c
 8004880:	08022c58 	.word	0x08022c58
 8004884:	08022a80 	.word	0x08022a80
 8004888:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800488c:	29ff      	cmp	r1, #255	; 0xff
 800488e:	f000 8467 	beq.w	8005160 <d_print_comp_inner+0x2774>
 8004892:	2220      	movs	r2, #32
 8004894:	1c4b      	adds	r3, r1, #1
 8004896:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800489a:	5462      	strb	r2, [r4, r1]
 800489c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80048a0:	f7fe bd7b 	b.w	800339a <d_print_comp_inner+0x9ae>
 80048a4:	2700      	movs	r7, #0
 80048a6:	55a7      	strb	r7, [r4, r6]
 80048a8:	4631      	mov	r1, r6
 80048aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80048b2:	4620      	mov	r0, r4
 80048b4:	4798      	blx	r3
 80048b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80048ba:	463e      	mov	r6, r7
 80048bc:	3301      	adds	r3, #1
 80048be:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 80048c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80048c6:	f7fe be2d 	b.w	8003524 <d_print_comp_inner+0xb38>
 80048ca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80048ce:	29ff      	cmp	r1, #255	; 0xff
 80048d0:	f000 8467 	beq.w	80051a2 <d_print_comp_inner+0x27b6>
 80048d4:	235b      	movs	r3, #91	; 0x5b
 80048d6:	1c4a      	adds	r2, r1, #1
 80048d8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80048dc:	5463      	strb	r3, [r4, r1]
 80048de:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80048e2:	4641      	mov	r1, r8
 80048e4:	68aa      	ldr	r2, [r5, #8]
 80048e6:	4620      	mov	r0, r4
 80048e8:	f000 fe2a 	bl	8005540 <d_print_comp>
 80048ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80048f0:	29ff      	cmp	r1, #255	; 0xff
 80048f2:	f000 8314 	beq.w	8004f1e <d_print_comp_inner+0x2532>
 80048f6:	235d      	movs	r3, #93	; 0x5d
 80048f8:	1c4a      	adds	r2, r1, #1
 80048fa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80048fe:	5463      	strb	r3, [r4, r1]
 8004900:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004904:	f7fe b940 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004908:	4631      	mov	r1, r6
 800490a:	4620      	mov	r0, r4
 800490c:	f7fb ffd8 	bl	80008c0 <d_find_pack>
 8004910:	b928      	cbnz	r0, 800491e <d_print_comp_inner+0x1f32>
 8004912:	e007      	b.n	8004924 <d_print_comp_inner+0x1f38>
 8004914:	6843      	ldr	r3, [r0, #4]
 8004916:	b12b      	cbz	r3, 8004924 <d_print_comp_inner+0x1f38>
 8004918:	6880      	ldr	r0, [r0, #8]
 800491a:	3501      	adds	r5, #1
 800491c:	b110      	cbz	r0, 8004924 <d_print_comp_inner+0x1f38>
 800491e:	7803      	ldrb	r3, [r0, #0]
 8004920:	2b2f      	cmp	r3, #47	; 0x2f
 8004922:	d0f7      	beq.n	8004914 <d_print_comp_inner+0x1f28>
 8004924:	462a      	mov	r2, r5
 8004926:	a804      	add	r0, sp, #16
 8004928:	49d5      	ldr	r1, [pc, #852]	; (8004c80 <d_print_comp_inner+0x2294>)
 800492a:	f013 f9b1 	bl	8017c90 <sprintf>
 800492e:	a804      	add	r0, sp, #16
 8004930:	f001 ffd2 	bl	80068d8 <strlen>
 8004934:	2800      	cmp	r0, #0
 8004936:	f43e a927 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 800493a:	ad04      	add	r5, sp, #16
 800493c:	f04f 0800 	mov.w	r8, #0
 8004940:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004944:	182f      	adds	r7, r5, r0
 8004946:	e009      	b.n	800495c <d_print_comp_inner+0x1f70>
 8004948:	460b      	mov	r3, r1
 800494a:	3101      	adds	r1, #1
 800494c:	42bd      	cmp	r5, r7
 800494e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004952:	54e6      	strb	r6, [r4, r3]
 8004954:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004958:	f43e a916 	beq.w	8002b88 <d_print_comp_inner+0x19c>
 800495c:	29ff      	cmp	r1, #255	; 0xff
 800495e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004962:	d1f1      	bne.n	8004948 <d_print_comp_inner+0x1f5c>
 8004964:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004968:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800496c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004970:	4620      	mov	r0, r4
 8004972:	4798      	blx	r3
 8004974:	2101      	movs	r1, #1
 8004976:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800497a:	2300      	movs	r3, #0
 800497c:	440a      	add	r2, r1
 800497e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004982:	e7e3      	b.n	800494c <d_print_comp_inner+0x1f60>
 8004984:	686a      	ldr	r2, [r5, #4]
 8004986:	4641      	mov	r1, r8
 8004988:	4620      	mov	r0, r4
 800498a:	f000 fdd9 	bl	8005540 <d_print_comp>
 800498e:	f7fe b8fb 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004992:	29ff      	cmp	r1, #255	; 0xff
 8004994:	f000 83d4 	beq.w	8005140 <d_print_comp_inner+0x2754>
 8004998:	232d      	movs	r3, #45	; 0x2d
 800499a:	1c4a      	adds	r2, r1, #1
 800499c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80049a0:	5463      	strb	r3, [r4, r1]
 80049a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80049a6:	f7ff b90e 	b.w	8003bc6 <d_print_comp_inner+0x11da>
 80049aa:	2500      	movs	r5, #0
 80049ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80049b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80049b4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80049b8:	4620      	mov	r0, r4
 80049ba:	4798      	blx	r3
 80049bc:	2201      	movs	r2, #1
 80049be:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049c2:	4629      	mov	r1, r5
 80049c4:	4413      	add	r3, r2
 80049c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049ca:	f7ff bbeb 	b.w	80041a4 <d_print_comp_inner+0x17b8>
 80049ce:	2500      	movs	r5, #0
 80049d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80049d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80049d8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80049dc:	4620      	mov	r0, r4
 80049de:	4798      	blx	r3
 80049e0:	2201      	movs	r2, #1
 80049e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049e6:	4629      	mov	r1, r5
 80049e8:	4413      	add	r3, r2
 80049ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049ee:	f7ff ba90 	b.w	8003f12 <d_print_comp_inner+0x1526>
 80049f2:	2600      	movs	r6, #0
 80049f4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80049f8:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80049fc:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004a00:	4798      	blx	r3
 8004a02:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a06:	4631      	mov	r1, r6
 8004a08:	3301      	adds	r3, #1
 8004a0a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004a0e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a12:	f7fe bd3f 	b.w	8003494 <d_print_comp_inner+0xaa8>
 8004a16:	2600      	movs	r6, #0
 8004a18:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004a1c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004a20:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8004a24:	4798      	blx	r3
 8004a26:	2201      	movs	r2, #1
 8004a28:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	4413      	add	r3, r2
 8004a30:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a34:	f7fe bb70 	b.w	8003118 <d_print_comp_inner+0x72c>
 8004a38:	2500      	movs	r5, #0
 8004a3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a42:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004a46:	4620      	mov	r0, r4
 8004a48:	4798      	blx	r3
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a50:	4629      	mov	r1, r5
 8004a52:	4413      	add	r3, r2
 8004a54:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a58:	f7ff bae5 	b.w	8004026 <d_print_comp_inner+0x163a>
 8004a5c:	220d      	movs	r2, #13
 8004a5e:	4989      	ldr	r1, [pc, #548]	; (8004c84 <d_print_comp_inner+0x2298>)
 8004a60:	4620      	mov	r0, r4
 8004a62:	f7fb fd01 	bl	8000468 <d_append_buffer>
 8004a66:	68a9      	ldr	r1, [r5, #8]
 8004a68:	4620      	mov	r0, r4
 8004a6a:	3101      	adds	r1, #1
 8004a6c:	f7fb ffac 	bl	80009c8 <d_append_num>
 8004a70:	2203      	movs	r2, #3
 8004a72:	4985      	ldr	r1, [pc, #532]	; (8004c88 <d_print_comp_inner+0x229c>)
 8004a74:	4620      	mov	r0, r4
 8004a76:	f7fb fcf7 	bl	8000468 <d_append_buffer>
 8004a7a:	686d      	ldr	r5, [r5, #4]
 8004a7c:	f7fe bc1d 	b.w	80032ba <d_print_comp_inner+0x8ce>
 8004a80:	2500      	movs	r5, #0
 8004a82:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a86:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a8a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004a8e:	4620      	mov	r0, r4
 8004a90:	4798      	blx	r3
 8004a92:	2201      	movs	r2, #1
 8004a94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a98:	4629      	mov	r1, r5
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004aa0:	f7fe be06 	b.w	80036b0 <d_print_comp_inner+0xcc4>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8004aaa:	f7fe b86d 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004aae:	2500      	movs	r5, #0
 8004ab0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ab4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ab8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004abc:	4620      	mov	r0, r4
 8004abe:	4798      	blx	r3
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	4413      	add	r3, r2
 8004aca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ace:	f7ff ba90 	b.w	8003ff2 <d_print_comp_inner+0x1606>
 8004ad2:	2500      	movs	r5, #0
 8004ad4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ad8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004adc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	4798      	blx	r3
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004aea:	4629      	mov	r1, r5
 8004aec:	4413      	add	r3, r2
 8004aee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004af2:	f7ff bbc5 	b.w	8004280 <d_print_comp_inner+0x1894>
 8004af6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8004afa:	a914      	add	r1, sp, #80	; 0x50
 8004afc:	f841 3d40 	str.w	r3, [r1, #-64]!
 8004b00:	f028 0860 	bic.w	r8, r8, #96	; 0x60
 8004b04:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8004b08:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	4641      	mov	r1, r8
 8004b10:	9606      	str	r6, [sp, #24]
 8004b12:	9307      	str	r3, [sp, #28]
 8004b14:	9505      	str	r5, [sp, #20]
 8004b16:	f000 fd13 	bl	8005540 <d_print_comp>
 8004b1a:	9b04      	ldr	r3, [sp, #16]
 8004b1c:	9e06      	ldr	r6, [sp, #24]
 8004b1e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8004b22:	2e00      	cmp	r6, #0
 8004b24:	f47e a830 	bne.w	8002b88 <d_print_comp_inner+0x19c>
 8004b28:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004b2c:	29ff      	cmp	r1, #255	; 0xff
 8004b2e:	f000 840b 	beq.w	8005348 <d_print_comp_inner+0x295c>
 8004b32:	2320      	movs	r3, #32
 8004b34:	1c4a      	adds	r2, r1, #1
 8004b36:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004b3a:	5463      	strb	r3, [r4, r1]
 8004b3c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004b40:	f7fe be0a 	b.w	8003758 <d_print_comp_inner+0xd6c>
 8004b44:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f6fe abfa 	blt.w	8003342 <d_print_comp_inner+0x956>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 829f 	beq.w	8005092 <d_print_comp_inner+0x26a6>
 8004b54:	6880      	ldr	r0, [r0, #8]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	f43e a829 	beq.w	8002bb0 <d_print_comp_inner+0x1c4>
 8004b5e:	7802      	ldrb	r2, [r0, #0]
 8004b60:	2a2f      	cmp	r2, #47	; 0x2f
 8004b62:	d0f4      	beq.n	8004b4e <d_print_comp_inner+0x2162>
 8004b64:	f7fe b824 	b.w	8002bb0 <d_print_comp_inner+0x1c4>
 8004b68:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
 8004b6c:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
 8004b70:	f1be 0f00 	cmp.w	lr, #0
 8004b74:	dd14      	ble.n	8004ba0 <d_print_comp_inner+0x21b4>
 8004b76:	6813      	ldr	r3, [r2, #0]
 8004b78:	4299      	cmp	r1, r3
 8004b7a:	f000 83f7 	beq.w	800536c <d_print_comp_inner+0x2980>
 8004b7e:	463b      	mov	r3, r7
 8004b80:	f102 0008 	add.w	r0, r2, #8
 8004b84:	46a4      	mov	ip, r4
 8004b86:	e007      	b.n	8004b98 <d_print_comp_inner+0x21ac>
 8004b88:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8004b8c:	4681      	mov	r9, r0
 8004b8e:	42a1      	cmp	r1, r4
 8004b90:	f100 0008 	add.w	r0, r0, #8
 8004b94:	f000 81d3 	beq.w	8004f3e <d_print_comp_inner+0x2552>
 8004b98:	3301      	adds	r3, #1
 8004b9a:	459e      	cmp	lr, r3
 8004b9c:	d1f4      	bne.n	8004b88 <d_print_comp_inner+0x219c>
 8004b9e:	4664      	mov	r4, ip
 8004ba0:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8004ba4:	459e      	cmp	lr, r3
 8004ba6:	f280 84bb 	bge.w	8005520 <d_print_comp_inner+0x2b34>
 8004baa:	f10e 0301 	add.w	r3, lr, #1
 8004bae:	eb02 09ce 	add.w	r9, r2, lr, lsl #3
 8004bb2:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
 8004bb6:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
 8004bba:	f8d4 e110 	ldr.w	lr, [r4, #272]	; 0x110
 8004bbe:	f109 0904 	add.w	r9, r9, #4
 8004bc2:	4672      	mov	r2, lr
 8004bc4:	2a00      	cmp	r2, #0
 8004bc6:	f000 848e 	beq.w	80054e6 <d_print_comp_inner+0x2afa>
 8004bca:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8004bce:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8004bd2:	f100 0e01 	add.w	lr, r0, #1
 8004bd6:	4298      	cmp	r0, r3
 8004bd8:	f280 84a2 	bge.w	8005520 <d_print_comp_inner+0x2b34>
 8004bdc:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8004be0:	f8c4 e13c 	str.w	lr, [r4, #316]	; 0x13c
 8004be4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004be8:	6850      	ldr	r0, [r2, #4]
 8004bea:	6058      	str	r0, [r3, #4]
 8004bec:	f8c9 3000 	str.w	r3, [r9]
 8004bf0:	6812      	ldr	r2, [r2, #0]
 8004bf2:	4699      	mov	r9, r3
 8004bf4:	e7e6      	b.n	8004bc4 <d_print_comp_inner+0x21d8>
 8004bf6:	2500      	movs	r5, #0
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004bfe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c02:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004c06:	4620      	mov	r0, r4
 8004c08:	4798      	blx	r3
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
 8004c10:	462b      	mov	r3, r5
 8004c12:	4411      	add	r1, r2
 8004c14:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8004c18:	f7fe bd39 	b.w	800368e <d_print_comp_inner+0xca2>
 8004c1c:	2e00      	cmp	r6, #0
 8004c1e:	f000 844d 	beq.w	80054bc <d_print_comp_inner+0x2ad0>
 8004c22:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
 8004c26:	f040 8488 	bne.w	800553a <d_print_comp_inner+0x2b4e>
 8004c2a:	6873      	ldr	r3, [r6, #4]
 8004c2c:	b373      	cbz	r3, 8004c8c <d_print_comp_inner+0x22a0>
 8004c2e:	4607      	mov	r7, r0
 8004c30:	e007      	b.n	8004c42 <d_print_comp_inner+0x2256>
 8004c32:	3701      	adds	r7, #1
 8004c34:	68b6      	ldr	r6, [r6, #8]
 8004c36:	b356      	cbz	r6, 8004c8e <d_print_comp_inner+0x22a2>
 8004c38:	7833      	ldrb	r3, [r6, #0]
 8004c3a:	2b2f      	cmp	r3, #47	; 0x2f
 8004c3c:	d127      	bne.n	8004c8e <d_print_comp_inner+0x22a2>
 8004c3e:	6873      	ldr	r3, [r6, #4]
 8004c40:	b32b      	cbz	r3, 8004c8e <d_print_comp_inner+0x22a2>
 8004c42:	781a      	ldrb	r2, [r3, #0]
 8004c44:	2a4a      	cmp	r2, #74	; 0x4a
 8004c46:	d1f4      	bne.n	8004c32 <d_print_comp_inner+0x2246>
 8004c48:	6859      	ldr	r1, [r3, #4]
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f7fb fe38 	bl	80008c0 <d_find_pack>
 8004c50:	b198      	cbz	r0, 8004c7a <d_print_comp_inner+0x228e>
 8004c52:	7803      	ldrb	r3, [r0, #0]
 8004c54:	2b2f      	cmp	r3, #47	; 0x2f
 8004c56:	f040 846c 	bne.w	8005532 <d_print_comp_inner+0x2b46>
 8004c5a:	6843      	ldr	r3, [r0, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 8464 	beq.w	800552a <d_print_comp_inner+0x2b3e>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2000      	movs	r0, #0
 8004c66:	e004      	b.n	8004c72 <d_print_comp_inner+0x2286>
 8004c68:	781a      	ldrb	r2, [r3, #0]
 8004c6a:	2a2f      	cmp	r2, #47	; 0x2f
 8004c6c:	d105      	bne.n	8004c7a <d_print_comp_inner+0x228e>
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	b11a      	cbz	r2, 8004c7a <d_print_comp_inner+0x228e>
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	3001      	adds	r0, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f6      	bne.n	8004c68 <d_print_comp_inner+0x227c>
 8004c7a:	4407      	add	r7, r0
 8004c7c:	e7da      	b.n	8004c34 <d_print_comp_inner+0x2248>
 8004c7e:	bf00      	nop
 8004c80:	08022a30 	.word	0x08022a30
 8004c84:	08022a84 	.word	0x08022a84
 8004c88:	08022a94 	.word	0x08022a94
 8004c8c:	461f      	mov	r7, r3
 8004c8e:	4639      	mov	r1, r7
 8004c90:	4620      	mov	r0, r4
 8004c92:	f7fb fe99 	bl	80009c8 <d_append_num>
 8004c96:	f7fd bf77 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004c9a:	2500      	movs	r5, #0
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ca2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ca6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004caa:	4620      	mov	r0, r4
 8004cac:	4798      	blx	r3
 8004cae:	2101      	movs	r1, #1
 8004cb0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004cb4:	462b      	mov	r3, r5
 8004cb6:	440a      	add	r2, r1
 8004cb8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004cbc:	f7fe bb87 	b.w	80033ce <d_print_comp_inner+0x9e2>
 8004cc0:	2600      	movs	r6, #0
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ccc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	4798      	blx	r3
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004cda:	4633      	mov	r3, r6
 8004cdc:	440a      	add	r2, r1
 8004cde:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004ce2:	f7fe bb5e 	b.w	80033a2 <d_print_comp_inner+0x9b6>
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	4619      	mov	r1, r3
 8004cea:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8004cee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cf2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	4798      	blx	r3
 8004cfa:	2329      	movs	r3, #41	; 0x29
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	7023      	strb	r3, [r4, #0]
 8004d00:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d04:	782a      	ldrb	r2, [r5, #0]
 8004d06:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004d0a:	2a3d      	cmp	r2, #61	; 0x3d
 8004d0c:	440b      	add	r3, r1
 8004d0e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004d12:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004d16:	f47e af56 	bne.w	8003bc6 <d_print_comp_inner+0x11da>
 8004d1a:	e63d      	b.n	8004998 <d_print_comp_inner+0x1fac>
 8004d1c:	2700      	movs	r7, #0
 8004d1e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d22:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004d26:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	4798      	blx	r3
 8004d2e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004d32:	4639      	mov	r1, r7
 8004d34:	3301      	adds	r3, #1
 8004d36:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8004d3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004d3e:	f7fe bf26 	b.w	8003b8e <d_print_comp_inner+0x11a2>
 8004d42:	2500      	movs	r5, #0
 8004d44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d4c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004d50:	4620      	mov	r0, r4
 8004d52:	4798      	blx	r3
 8004d54:	2201      	movs	r2, #1
 8004d56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004d5a:	4629      	mov	r1, r5
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004d62:	f7ff bb10 	b.w	8004386 <d_print_comp_inner+0x199a>
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
 8004d6c:	2901      	cmp	r1, #1
 8004d6e:	d903      	bls.n	8004d78 <d_print_comp_inner+0x238c>
 8004d70:	3b72      	subs	r3, #114	; 0x72
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	f63d aea7 	bhi.w	8002ac6 <d_print_comp_inner+0xda>
 8004d78:	4641      	mov	r1, r8
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f001 f9d0 	bl	8006120 <d_print_expr_op>
 8004d80:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004d84:	29ff      	cmp	r1, #255	; 0xff
 8004d86:	f000 8271 	beq.w	800526c <d_print_comp_inner+0x2880>
 8004d8a:	233c      	movs	r3, #60	; 0x3c
 8004d8c:	1c4a      	adds	r2, r1, #1
 8004d8e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004d92:	5463      	strb	r3, [r4, r1]
 8004d94:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d98:	68ab      	ldr	r3, [r5, #8]
 8004d9a:	4641      	mov	r1, r8
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f000 fbce 	bl	8005540 <d_print_comp>
 8004da4:	2202      	movs	r2, #2
 8004da6:	49d5      	ldr	r1, [pc, #852]	; (80050fc <d_print_comp_inner+0x2710>)
 8004da8:	4620      	mov	r0, r4
 8004daa:	f7fb fb5d 	bl	8000468 <d_append_buffer>
 8004dae:	68ab      	ldr	r3, [r5, #8]
 8004db0:	4641      	mov	r1, r8
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	4620      	mov	r0, r4
 8004db6:	f000 fbc3 	bl	8005540 <d_print_comp>
 8004dba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004dbe:	29ff      	cmp	r1, #255	; 0xff
 8004dc0:	f000 81df 	beq.w	8005182 <d_print_comp_inner+0x2796>
 8004dc4:	2329      	movs	r3, #41	; 0x29
 8004dc6:	1c4a      	adds	r2, r1, #1
 8004dc8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004dcc:	5463      	strb	r3, [r4, r1]
 8004dce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004dd2:	f7fd bed9 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004dd6:	4632      	mov	r2, r6
 8004dd8:	4641      	mov	r1, r8
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f000 fbb0 	bl	8005540 <d_print_comp>
 8004de0:	f7fd bed2 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004de4:	2600      	movs	r6, #0
 8004de6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004dea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004dee:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004df2:	4620      	mov	r0, r4
 8004df4:	4798      	blx	r3
 8004df6:	2201      	movs	r2, #1
 8004df8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004dfc:	4631      	mov	r1, r6
 8004dfe:	4413      	add	r3, r2
 8004e00:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e04:	f7fe ba4e 	b.w	80032a4 <d_print_comp_inner+0x8b8>
 8004e08:	49bd      	ldr	r1, [pc, #756]	; (8005100 <d_print_comp_inner+0x2714>)
 8004e0a:	6870      	ldr	r0, [r6, #4]
 8004e0c:	f012 ffa9 	bl	8017d62 <strncmp>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	f47e aab6 	bne.w	8003382 <d_print_comp_inner+0x996>
 8004e16:	68aa      	ldr	r2, [r5, #8]
 8004e18:	4641      	mov	r1, r8
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f000 fb90 	bl	8005540 <d_print_comp>
 8004e20:	2202      	movs	r2, #2
 8004e22:	49b8      	ldr	r1, [pc, #736]	; (8005104 <d_print_comp_inner+0x2718>)
 8004e24:	4620      	mov	r0, r4
 8004e26:	f7fb fb1f 	bl	8000468 <d_append_buffer>
 8004e2a:	f7fe bad6 	b.w	80033da <d_print_comp_inner+0x9ee>
 8004e2e:	68aa      	ldr	r2, [r5, #8]
 8004e30:	7817      	ldrb	r7, [r2, #0]
 8004e32:	2f00      	cmp	r7, #0
 8004e34:	f47e aea6 	bne.w	8003b84 <d_print_comp_inner+0x1198>
 8004e38:	2b3d      	cmp	r3, #61	; 0x3d
 8004e3a:	f000 82ef 	beq.w	800541c <d_print_comp_inner+0x2a30>
 8004e3e:	68aa      	ldr	r2, [r5, #8]
 8004e40:	4641      	mov	r1, r8
 8004e42:	4620      	mov	r0, r4
 8004e44:	3e02      	subs	r6, #2
 8004e46:	f000 fb7b 	bl	8005540 <d_print_comp>
 8004e4a:	2e04      	cmp	r6, #4
 8004e4c:	f63d ae9c 	bhi.w	8002b88 <d_print_comp_inner+0x19c>
 8004e50:	e8df f006 	tbb	[pc, r6]
 8004e54:	0a111826 	.word	0x0a111826
 8004e58:	03          	.byte	0x03
 8004e59:	00          	.byte	0x00
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	2203      	movs	r2, #3
 8004e5e:	49aa      	ldr	r1, [pc, #680]	; (8005108 <d_print_comp_inner+0x271c>)
 8004e60:	f7fb fb02 	bl	8000468 <d_append_buffer>
 8004e64:	f7fd be90 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004e68:	4620      	mov	r0, r4
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	49a7      	ldr	r1, [pc, #668]	; (800510c <d_print_comp_inner+0x2720>)
 8004e6e:	f7fb fafb 	bl	8000468 <d_append_buffer>
 8004e72:	f7fd be89 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004e76:	4620      	mov	r0, r4
 8004e78:	2202      	movs	r2, #2
 8004e7a:	49a5      	ldr	r1, [pc, #660]	; (8005110 <d_print_comp_inner+0x2724>)
 8004e7c:	f7fb faf4 	bl	8000468 <d_append_buffer>
 8004e80:	f7fd be82 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004e84:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004e88:	29ff      	cmp	r1, #255	; 0xff
 8004e8a:	f000 831a 	beq.w	80054c2 <d_print_comp_inner+0x2ad6>
 8004e8e:	236c      	movs	r3, #108	; 0x6c
 8004e90:	1c4a      	adds	r2, r1, #1
 8004e92:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e96:	5463      	strb	r3, [r4, r1]
 8004e98:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e9c:	f7fd be74 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004ea0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004ea4:	29ff      	cmp	r1, #255	; 0xff
 8004ea6:	f000 82db 	beq.w	8005460 <d_print_comp_inner+0x2a74>
 8004eaa:	2375      	movs	r3, #117	; 0x75
 8004eac:	1c4a      	adds	r2, r1, #1
 8004eae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004eb2:	5463      	strb	r3, [r4, r1]
 8004eb4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004eb8:	f7fd be66 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004ebc:	2600      	movs	r6, #0
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ec4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ec8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004ecc:	4620      	mov	r0, r4
 8004ece:	4798      	blx	r3
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004ed6:	4633      	mov	r3, r6
 8004ed8:	440a      	add	r2, r1
 8004eda:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004ede:	f7fe bd3a 	b.w	8003956 <d_print_comp_inner+0xf6a>
 8004ee2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8004ee6:	f7fe bf94 	b.w	8003e12 <d_print_comp_inner+0x1426>
 8004eea:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004eee:	29ff      	cmp	r1, #255	; 0xff
 8004ef0:	f000 8244 	beq.w	800537c <d_print_comp_inner+0x2990>
 8004ef4:	2320      	movs	r3, #32
 8004ef6:	1c4a      	adds	r2, r1, #1
 8004ef8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004efc:	5463      	strb	r3, [r4, r1]
 8004efe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f02:	e445      	b.n	8004790 <d_print_comp_inner+0x1da4>
 8004f04:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004f08:	29ff      	cmp	r1, #255	; 0xff
 8004f0a:	f000 826e 	beq.w	80053ea <d_print_comp_inner+0x29fe>
 8004f0e:	2320      	movs	r3, #32
 8004f10:	1c4a      	adds	r2, r1, #1
 8004f12:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004f16:	5463      	strb	r3, [r4, r1]
 8004f18:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f1c:	e417      	b.n	800474e <d_print_comp_inner+0x1d62>
 8004f1e:	2500      	movs	r5, #0
 8004f20:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f24:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004f28:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	4798      	blx	r3
 8004f30:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f34:	4629      	mov	r1, r5
 8004f36:	3301      	adds	r3, #1
 8004f38:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f3c:	e4db      	b.n	80048f6 <d_print_comp_inner+0x1f0a>
 8004f3e:	4664      	mov	r4, ip
 8004f40:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8004f44:	b1d8      	cbz	r0, 8004f7e <d_print_comp_inner+0x2592>
 8004f46:	6802      	ldr	r2, [r0, #0]
 8004f48:	4291      	cmp	r1, r2
 8004f4a:	d00a      	beq.n	8004f62 <d_print_comp_inner+0x2576>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	e004      	b.n	8004f5a <d_print_comp_inner+0x256e>
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	b1a3      	cbz	r3, 8004f7e <d_print_comp_inner+0x2592>
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4291      	cmp	r1, r2
 8004f58:	d003      	beq.n	8004f62 <d_print_comp_inner+0x2576>
 8004f5a:	4295      	cmp	r5, r2
 8004f5c:	d1f8      	bne.n	8004f50 <d_print_comp_inner+0x2564>
 8004f5e:	4298      	cmp	r0, r3
 8004f60:	d0f6      	beq.n	8004f50 <d_print_comp_inner+0x2564>
 8004f62:	3104      	adds	r1, #4
 8004f64:	4620      	mov	r0, r4
 8004f66:	f7fb fc8f 	bl	8000888 <d_lookup_template_argument.isra.6>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	f43d ae20 	beq.w	8002bb0 <d_print_comp_inner+0x1c4>
 8004f70:	7803      	ldrb	r3, [r0, #0]
 8004f72:	2b2f      	cmp	r3, #47	; 0x2f
 8004f74:	f43d ae0b 	beq.w	8002b8e <d_print_comp_inner+0x1a2>
 8004f78:	4601      	mov	r1, r0
 8004f7a:	f7fe bc2d 	b.w	80037d8 <d_print_comp_inner+0xdec>
 8004f7e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004f82:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8004f86:	3104      	adds	r1, #4
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004f8e:	f7fb fc7b 	bl	8000888 <d_lookup_template_argument.isra.6>
 8004f92:	2800      	cmp	r0, #0
 8004f94:	f43d ae0a 	beq.w	8002bac <d_print_comp_inner+0x1c0>
 8004f98:	2701      	movs	r7, #1
 8004f9a:	e7e9      	b.n	8004f70 <d_print_comp_inner+0x2584>
 8004f9c:	2500      	movs	r5, #0
 8004f9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004fa2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004fa6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004faa:	4620      	mov	r0, r4
 8004fac:	4798      	blx	r3
 8004fae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	f8da 5004 	ldr.w	r5, [sl, #4]
 8004fba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004fbe:	f7ff b858 	b.w	8004072 <d_print_comp_inner+0x1686>
 8004fc2:	68aa      	ldr	r2, [r5, #8]
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f000 faba 	bl	8005540 <d_print_comp>
 8004fcc:	9a00      	ldr	r2, [sp, #0]
 8004fce:	9b06      	ldr	r3, [sp, #24]
 8004fd0:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f43e ac9b 	beq.w	8003910 <d_print_comp_inner+0xf24>
 8004fda:	f7fd bdd5 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8004fde:	255f      	movs	r5, #95	; 0x5f
 8004fe0:	f7ff ba0e 	b.w	8004400 <d_print_comp_inner+0x1a14>
 8004fe4:	2500      	movs	r5, #0
 8004fe6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004fea:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004fee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	4798      	blx	r3
 8004ff6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005002:	f7ff bb7f 	b.w	8004704 <d_print_comp_inner+0x1d18>
 8005006:	4648      	mov	r0, r9
 8005008:	4942      	ldr	r1, [pc, #264]	; (8005114 <d_print_comp_inner+0x2728>)
 800500a:	f001 fc5b 	bl	80068c4 <strcmp>
 800500e:	b120      	cbz	r0, 800501a <d_print_comp_inner+0x262e>
 8005010:	463a      	mov	r2, r7
 8005012:	4641      	mov	r1, r8
 8005014:	4620      	mov	r0, r4
 8005016:	f001 f883 	bl	8006120 <d_print_expr_op>
 800501a:	68ab      	ldr	r3, [r5, #8]
 800501c:	4641      	mov	r1, r8
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	4620      	mov	r0, r4
 8005022:	f001 f8bb 	bl	800619c <d_print_subexpr>
 8005026:	f7fd bd97 	b.w	8002b58 <d_print_comp_inner+0x16c>
 800502a:	2600      	movs	r6, #0
 800502c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005030:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005034:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005038:	4620      	mov	r0, r4
 800503a:	4798      	blx	r3
 800503c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005040:	4631      	mov	r1, r6
 8005042:	3301      	adds	r3, #1
 8005044:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005048:	f7ff bb86 	b.w	8004758 <d_print_comp_inner+0x1d6c>
 800504c:	2500      	movs	r5, #0
 800504e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005052:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005056:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800505a:	4620      	mov	r0, r4
 800505c:	4798      	blx	r3
 800505e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005062:	4629      	mov	r1, r5
 8005064:	3301      	adds	r3, #1
 8005066:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800506a:	f7fe bb56 	b.w	800371a <d_print_comp_inner+0xd2e>
 800506e:	2500      	movs	r5, #0
 8005070:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005074:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005078:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800507c:	4798      	blx	r3
 800507e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005082:	4629      	mov	r1, r5
 8005084:	3301      	adds	r3, #1
 8005086:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800508a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800508e:	f7fe bb27 	b.w	80036e0 <d_print_comp_inner+0xcf4>
 8005092:	6840      	ldr	r0, [r0, #4]
 8005094:	2800      	cmp	r0, #0
 8005096:	f43d ad8b 	beq.w	8002bb0 <d_print_comp_inner+0x1c4>
 800509a:	f7fe b952 	b.w	8003342 <d_print_comp_inner+0x956>
 800509e:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 80050a2:	4619      	mov	r1, r3
 80050a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80050a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80050ac:	4620      	mov	r0, r4
 80050ae:	4798      	blx	r3
 80050b0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80050b4:	462b      	mov	r3, r5
 80050b6:	3201      	adds	r2, #1
 80050b8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80050bc:	f7ff bb11 	b.w	80046e2 <d_print_comp_inner+0x1cf6>
 80050c0:	6873      	ldr	r3, [r6, #4]
 80050c2:	781a      	ldrb	r2, [r3, #0]
 80050c4:	2a01      	cmp	r2, #1
 80050c6:	f000 8153 	beq.w	8005370 <d_print_comp_inner+0x2984>
 80050ca:	f896 a000 	ldrb.w	sl, [r6]
 80050ce:	f7ff badd 	b.w	800468c <d_print_comp_inner+0x1ca0>
 80050d2:	2500      	movs	r5, #0
 80050d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80050d8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80050dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80050e0:	4620      	mov	r0, r4
 80050e2:	4798      	blx	r3
 80050e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80050e8:	4629      	mov	r1, r5
 80050ea:	3301      	adds	r3, #1
 80050ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80050f0:	f7ff bb53 	b.w	800479a <d_print_comp_inner+0x1dae>
 80050f4:	4654      	mov	r4, sl
 80050f6:	f7fe be8c 	b.w	8003e12 <d_print_comp_inner+0x1426>
 80050fa:	bf00      	nop
 80050fc:	08022c30 	.word	0x08022c30
 8005100:	08022a98 	.word	0x08022a98
 8005104:	08022aa0 	.word	0x08022aa0
 8005108:	08022c4c 	.word	0x08022c4c
 800510c:	08022c48 	.word	0x08022c48
 8005110:	08022c44 	.word	0x08022c44
 8005114:	08022a38 	.word	0x08022a38
 8005118:	686a      	ldr	r2, [r5, #4]
 800511a:	4641      	mov	r1, r8
 800511c:	4620      	mov	r0, r4
 800511e:	f001 f83d 	bl	800619c <d_print_subexpr>
 8005122:	4620      	mov	r0, r4
 8005124:	2203      	movs	r2, #3
 8005126:	49e2      	ldr	r1, [pc, #904]	; (80054b0 <d_print_comp_inner+0x2ac4>)
 8005128:	f7fb f99e 	bl	8000468 <d_append_buffer>
 800512c:	f7fd bd2c 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8005130:	ab14      	add	r3, sp, #80	; 0x50
 8005132:	f843 cd48 	str.w	ip, [r3, #-72]!
 8005136:	9603      	str	r6, [sp, #12]
 8005138:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800513c:	f7fe b853 	b.w	80031e6 <d_print_comp_inner+0x7fa>
 8005140:	2700      	movs	r7, #0
 8005142:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005146:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800514a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800514e:	4620      	mov	r0, r4
 8005150:	4798      	blx	r3
 8005152:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005156:	4639      	mov	r1, r7
 8005158:	3301      	adds	r3, #1
 800515a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800515e:	e41b      	b.n	8004998 <d_print_comp_inner+0x1fac>
 8005160:	2600      	movs	r6, #0
 8005162:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005166:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800516a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800516e:	4620      	mov	r0, r4
 8005170:	4798      	blx	r3
 8005172:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005176:	4631      	mov	r1, r6
 8005178:	3301      	adds	r3, #1
 800517a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800517e:	f7ff bb88 	b.w	8004892 <d_print_comp_inner+0x1ea6>
 8005182:	2500      	movs	r5, #0
 8005184:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005188:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800518c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005190:	4620      	mov	r0, r4
 8005192:	4798      	blx	r3
 8005194:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005198:	4629      	mov	r1, r5
 800519a:	3301      	adds	r3, #1
 800519c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80051a0:	e610      	b.n	8004dc4 <d_print_comp_inner+0x23d8>
 80051a2:	2600      	movs	r6, #0
 80051a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80051a8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80051ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80051b0:	4620      	mov	r0, r4
 80051b2:	4798      	blx	r3
 80051b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80051b8:	4631      	mov	r1, r6
 80051ba:	3301      	adds	r3, #1
 80051bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80051c0:	f7ff bb88 	b.w	80048d4 <d_print_comp_inner+0x1ee8>
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	6891      	ldr	r1, [r2, #8]
 80051c8:	2901      	cmp	r1, #1
 80051ca:	f47d ac8a 	bne.w	8002ae2 <d_print_comp_inner+0xf6>
 80051ce:	6852      	ldr	r2, [r2, #4]
 80051d0:	7812      	ldrb	r2, [r2, #0]
 80051d2:	2a3e      	cmp	r2, #62	; 0x3e
 80051d4:	f47d ac85 	bne.w	8002ae2 <d_print_comp_inner+0xf6>
 80051d8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80051dc:	29ff      	cmp	r1, #255	; 0xff
 80051de:	d10f      	bne.n	8005200 <d_print_comp_inner+0x2814>
 80051e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80051e4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80051e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80051ec:	4620      	mov	r0, r4
 80051ee:	4798      	blx	r3
 80051f0:	4631      	mov	r1, r6
 80051f2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80051f6:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80051fa:	3301      	adds	r3, #1
 80051fc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005200:	2328      	movs	r3, #40	; 0x28
 8005202:	1c4a      	adds	r2, r1, #1
 8005204:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005208:	5463      	strb	r3, [r4, r1]
 800520a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800520e:	686b      	ldr	r3, [r5, #4]
 8005210:	f7fd bc67 	b.w	8002ae2 <d_print_comp_inner+0xf6>
 8005214:	2500      	movs	r5, #0
 8005216:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800521a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800521e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005222:	4620      	mov	r0, r4
 8005224:	4798      	blx	r3
 8005226:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800522a:	4629      	mov	r1, r5
 800522c:	3301      	adds	r3, #1
 800522e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005232:	f7ff bb09 	b.w	8004848 <d_print_comp_inner+0x1e5c>
 8005236:	f8db b004 	ldr.w	fp, [fp, #4]
 800523a:	f1bb 0f00 	cmp.w	fp, #0
 800523e:	f43e ade8 	beq.w	8003e12 <d_print_comp_inner+0x1426>
 8005242:	f7fd bfbc 	b.w	80031be <d_print_comp_inner+0x7d2>
 8005246:	9b02      	ldr	r3, [sp, #8]
 8005248:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800524c:	f7fd bfd4 	b.w	80031f8 <d_print_comp_inner+0x80c>
 8005250:	6893      	ldr	r3, [r2, #8]
 8005252:	4641      	mov	r1, r8
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	4620      	mov	r0, r4
 8005258:	2b29      	cmp	r3, #41	; 0x29
 800525a:	bf1c      	itt	ne
 800525c:	2301      	movne	r3, #1
 800525e:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 8005262:	6852      	ldr	r2, [r2, #4]
 8005264:	f000 ff9a 	bl	800619c <d_print_subexpr>
 8005268:	f7fd bc4c 	b.w	8002b04 <d_print_comp_inner+0x118>
 800526c:	2600      	movs	r6, #0
 800526e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005272:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005276:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800527a:	4620      	mov	r0, r4
 800527c:	4798      	blx	r3
 800527e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005282:	4631      	mov	r1, r6
 8005284:	3301      	adds	r3, #1
 8005286:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800528a:	e57e      	b.n	8004d8a <d_print_comp_inner+0x239e>
 800528c:	6872      	ldr	r2, [r6, #4]
 800528e:	4641      	mov	r1, r8
 8005290:	4620      	mov	r0, r4
 8005292:	f000 ff83 	bl	800619c <d_print_subexpr>
 8005296:	464a      	mov	r2, r9
 8005298:	4641      	mov	r1, r8
 800529a:	4620      	mov	r0, r4
 800529c:	f000 ff40 	bl	8006120 <d_print_expr_op>
 80052a0:	f7fd bc72 	b.w	8002b88 <d_print_comp_inner+0x19c>
 80052a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80052a8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80052ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80052b0:	4620      	mov	r0, r4
 80052b2:	4798      	blx	r3
 80052b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80052b8:	4631      	mov	r1, r6
 80052ba:	3301      	adds	r3, #1
 80052bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80052c0:	f7fd bfa6 	b.w	8003210 <d_print_comp_inner+0x824>
 80052c4:	464a      	mov	r2, r9
 80052c6:	4641      	mov	r1, r8
 80052c8:	4620      	mov	r0, r4
 80052ca:	f000 ff67 	bl	800619c <d_print_subexpr>
 80052ce:	4652      	mov	r2, sl
 80052d0:	4641      	mov	r1, r8
 80052d2:	4620      	mov	r0, r4
 80052d4:	f000 ff24 	bl	8006120 <d_print_expr_op>
 80052d8:	463a      	mov	r2, r7
 80052da:	4641      	mov	r1, r8
 80052dc:	4620      	mov	r0, r4
 80052de:	f000 ff5d 	bl	800619c <d_print_subexpr>
 80052e2:	4620      	mov	r0, r4
 80052e4:	2203      	movs	r2, #3
 80052e6:	4973      	ldr	r1, [pc, #460]	; (80054b4 <d_print_comp_inner+0x2ac8>)
 80052e8:	f7fb f8be 	bl	8000468 <d_append_buffer>
 80052ec:	462a      	mov	r2, r5
 80052ee:	4641      	mov	r1, r8
 80052f0:	4620      	mov	r0, r4
 80052f2:	f000 ff53 	bl	800619c <d_print_subexpr>
 80052f6:	f7fd bc47 	b.w	8002b88 <d_print_comp_inner+0x19c>
 80052fa:	454f      	cmp	r7, r9
 80052fc:	f67f ae6f 	bls.w	8004fde <d_print_comp_inner+0x25f2>
 8005300:	2d5f      	cmp	r5, #95	; 0x5f
 8005302:	f47f ae6c 	bne.w	8004fde <d_print_comp_inner+0x25f2>
 8005306:	28ff      	cmp	r0, #255	; 0xff
 8005308:	f63f a87a 	bhi.w	8004400 <d_print_comp_inner+0x1a14>
 800530c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005310:	b2c5      	uxtb	r5, r0
 8005312:	29ff      	cmp	r1, #255	; 0xff
 8005314:	d10f      	bne.n	8005336 <d_print_comp_inner+0x294a>
 8005316:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800531a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800531e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005322:	4620      	mov	r0, r4
 8005324:	4798      	blx	r3
 8005326:	2100      	movs	r1, #0
 8005328:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800532c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005330:	3301      	adds	r3, #1
 8005332:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005336:	1c4b      	adds	r3, r1, #1
 8005338:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800533c:	464e      	mov	r6, r9
 800533e:	5465      	strb	r5, [r4, r1]
 8005340:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005344:	f7ff b866 	b.w	8004414 <d_print_comp_inner+0x1a28>
 8005348:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800534c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005350:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005354:	4620      	mov	r0, r4
 8005356:	4798      	blx	r3
 8005358:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800535c:	4631      	mov	r1, r6
 800535e:	3301      	adds	r3, #1
 8005360:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005364:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005368:	f7ff bbe3 	b.w	8004b32 <d_print_comp_inner+0x2146>
 800536c:	4691      	mov	r9, r2
 800536e:	e5e7      	b.n	8004f40 <d_print_comp_inner+0x2554>
 8005370:	68b2      	ldr	r2, [r6, #8]
 8005372:	7812      	ldrb	r2, [r2, #0]
 8005374:	2a29      	cmp	r2, #41	; 0x29
 8005376:	bf08      	it	eq
 8005378:	461e      	moveq	r6, r3
 800537a:	e6a6      	b.n	80050ca <d_print_comp_inner+0x26de>
 800537c:	2500      	movs	r5, #0
 800537e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005382:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005386:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800538a:	4620      	mov	r0, r4
 800538c:	4798      	blx	r3
 800538e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005392:	4629      	mov	r1, r5
 8005394:	3301      	adds	r3, #1
 8005396:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800539a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800539e:	e5a9      	b.n	8004ef4 <d_print_comp_inner+0x2508>
 80053a0:	2600      	movs	r6, #0
 80053a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053a6:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80053aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053ae:	4620      	mov	r0, r4
 80053b0:	4798      	blx	r3
 80053b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80053b6:	4631      	mov	r1, r6
 80053b8:	3301      	adds	r3, #1
 80053ba:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80053be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80053c2:	f7fd bbc2 	b.w	8002b4a <d_print_comp_inner+0x15e>
 80053c6:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 80053ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053d2:	4620      	mov	r0, r4
 80053d4:	4798      	blx	r3
 80053d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80053da:	4631      	mov	r1, r6
 80053dc:	3301      	adds	r3, #1
 80053de:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80053e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80053e6:	f7fd bb9e 	b.w	8002b26 <d_print_comp_inner+0x13a>
 80053ea:	2600      	movs	r6, #0
 80053ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053f0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80053f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053f8:	4620      	mov	r0, r4
 80053fa:	4798      	blx	r3
 80053fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005400:	4631      	mov	r1, r6
 8005402:	3301      	adds	r3, #1
 8005404:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005408:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800540c:	e57f      	b.n	8004f0e <d_print_comp_inner+0x2522>
 800540e:	6841      	ldr	r1, [r0, #4]
 8005410:	2900      	cmp	r1, #0
 8005412:	f43d abca 	beq.w	8002baa <d_print_comp_inner+0x1be>
 8005416:	780b      	ldrb	r3, [r1, #0]
 8005418:	f7fe b9de 	b.w	80037d8 <d_print_comp_inner+0xdec>
 800541c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005420:	29ff      	cmp	r1, #255	; 0xff
 8005422:	d00d      	beq.n	8005440 <d_print_comp_inner+0x2a54>
 8005424:	232d      	movs	r3, #45	; 0x2d
 8005426:	1c4a      	adds	r2, r1, #1
 8005428:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800542c:	5463      	strb	r3, [r4, r1]
 800542e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005432:	e504      	b.n	8004e3e <d_print_comp_inner+0x2452>
 8005434:	2205      	movs	r2, #5
 8005436:	4920      	ldr	r1, [pc, #128]	; (80054b8 <d_print_comp_inner+0x2acc>)
 8005438:	f7fb f816 	bl	8000468 <d_append_buffer>
 800543c:	f7fd bba4 	b.w	8002b88 <d_print_comp_inner+0x19c>
 8005440:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005444:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005448:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800544c:	4798      	blx	r3
 800544e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005452:	4639      	mov	r1, r7
 8005454:	3301      	adds	r3, #1
 8005456:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 800545a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800545e:	e7e1      	b.n	8005424 <d_print_comp_inner+0x2a38>
 8005460:	2500      	movs	r5, #0
 8005462:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005466:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800546a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800546e:	4620      	mov	r0, r4
 8005470:	4798      	blx	r3
 8005472:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005476:	4629      	mov	r1, r5
 8005478:	3301      	adds	r3, #1
 800547a:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800547e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005482:	e512      	b.n	8004eaa <d_print_comp_inner+0x24be>
 8005484:	2700      	movs	r7, #0
 8005486:	f7ff b910 	b.w	80046aa <d_print_comp_inner+0x1cbe>
 800548a:	2500      	movs	r5, #0
 800548c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005490:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005494:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005498:	4620      	mov	r0, r4
 800549a:	4798      	blx	r3
 800549c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80054a0:	4629      	mov	r1, r5
 80054a2:	3301      	adds	r3, #1
 80054a4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 80054a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80054ac:	f7fd bb65 	b.w	8002b7a <d_print_comp_inner+0x18e>
 80054b0:	08022c7c 	.word	0x08022c7c
 80054b4:	08022c38 	.word	0x08022c38
 80054b8:	08022c50 	.word	0x08022c50
 80054bc:	4637      	mov	r7, r6
 80054be:	f7ff bbe6 	b.w	8004c8e <d_print_comp_inner+0x22a2>
 80054c2:	2500      	movs	r5, #0
 80054c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80054c8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80054cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80054d0:	4620      	mov	r0, r4
 80054d2:	4798      	blx	r3
 80054d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80054d8:	4629      	mov	r1, r5
 80054da:	3301      	adds	r3, #1
 80054dc:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 80054e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80054e4:	e4d3      	b.n	8004e8e <d_print_comp_inner+0x24a2>
 80054e6:	f8c9 2000 	str.w	r2, [r9]
 80054ea:	3104      	adds	r1, #4
 80054ec:	4620      	mov	r0, r4
 80054ee:	f7fb f9cb 	bl	8000888 <d_lookup_template_argument.isra.6>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	f47f ad3c 	bne.w	8004f70 <d_print_comp_inner+0x2584>
 80054f8:	f7fd bb5a 	b.w	8002bb0 <d_print_comp_inner+0x1c4>
 80054fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005500:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005504:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005508:	4620      	mov	r0, r4
 800550a:	4798      	blx	r3
 800550c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005510:	4631      	mov	r1, r6
 8005512:	3301      	adds	r3, #1
 8005514:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005518:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800551c:	f7fe bc00 	b.w	8003d20 <d_print_comp_inner+0x1334>
 8005520:	2301      	movs	r3, #1
 8005522:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005526:	f7fd bb2f 	b.w	8002b88 <d_print_comp_inner+0x19c>
 800552a:	4618      	mov	r0, r3
 800552c:	4407      	add	r7, r0
 800552e:	f7ff bb81 	b.w	8004c34 <d_print_comp_inner+0x2248>
 8005532:	2000      	movs	r0, #0
 8005534:	4407      	add	r7, r0
 8005536:	f7ff bb7d 	b.w	8004c34 <d_print_comp_inner+0x2248>
 800553a:	4607      	mov	r7, r0
 800553c:	f7ff bba7 	b.w	8004c8e <d_print_comp_inner+0x22a2>

08005540 <d_print_comp>:
 8005540:	b510      	push	{r4, lr}
 8005542:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 8005546:	b082      	sub	sp, #8
 8005548:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 800554c:	4604      	mov	r4, r0
 800554e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005552:	f7fd fa4b 	bl	80029ec <d_print_comp_inner>
 8005556:	9b01      	ldr	r3, [sp, #4]
 8005558:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800555c:	b002      	add	sp, #8
 800555e:	bd10      	pop	{r4, pc}

08005560 <d_print_mod>:
 8005560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005564:	7813      	ldrb	r3, [r2, #0]
 8005566:	b082      	sub	sp, #8
 8005568:	3b03      	subs	r3, #3
 800556a:	4615      	mov	r5, r2
 800556c:	4604      	mov	r4, r0
 800556e:	4688      	mov	r8, r1
 8005570:	2b49      	cmp	r3, #73	; 0x49
 8005572:	f200 8229 	bhi.w	80059c8 <d_print_mod+0x468>
 8005576:	e8df f013 	tbh	[pc, r3, lsl #1]
 800557a:	01e9      	.short	0x01e9
 800557c:	02270227 	.word	0x02270227
 8005580:	02270227 	.word	0x02270227
 8005584:	02270227 	.word	0x02270227
 8005588:	02270227 	.word	0x02270227
 800558c:	02270227 	.word	0x02270227
 8005590:	02270227 	.word	0x02270227
 8005594:	02270227 	.word	0x02270227
 8005598:	02270227 	.word	0x02270227
 800559c:	02270227 	.word	0x02270227
 80055a0:	02270227 	.word	0x02270227
 80055a4:	01ee0227 	.word	0x01ee0227
 80055a8:	01aa0184 	.word	0x01aa0184
 80055ac:	018401ee 	.word	0x018401ee
 80055b0:	01cf01aa 	.word	0x01cf01aa
 80055b4:	006f01dc 	.word	0x006f01dc
 80055b8:	009d008d 	.word	0x009d008d
 80055bc:	00d000ac 	.word	0x00d000ac
 80055c0:	022700f5 	.word	0x022700f5
 80055c4:	02270227 	.word	0x02270227
 80055c8:	011a0227 	.word	0x011a0227
 80055cc:	015e0227 	.word	0x015e0227
 80055d0:	02270227 	.word	0x02270227
 80055d4:	02270227 	.word	0x02270227
 80055d8:	02270227 	.word	0x02270227
 80055dc:	02270227 	.word	0x02270227
 80055e0:	02270227 	.word	0x02270227
 80055e4:	02270227 	.word	0x02270227
 80055e8:	02270227 	.word	0x02270227
 80055ec:	02270227 	.word	0x02270227
 80055f0:	02270227 	.word	0x02270227
 80055f4:	02270227 	.word	0x02270227
 80055f8:	02270227 	.word	0x02270227
 80055fc:	02270227 	.word	0x02270227
 8005600:	02270227 	.word	0x02270227
 8005604:	02270227 	.word	0x02270227
 8005608:	02270227 	.word	0x02270227
 800560c:	004a      	.short	0x004a
 800560e:	4dd6      	ldr	r5, [pc, #856]	; (8005968 <d_print_mod+0x408>)
 8005610:	f04f 0800 	mov.w	r8, #0
 8005614:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005618:	f105 0711 	add.w	r7, r5, #17
 800561c:	e008      	b.n	8005630 <d_print_mod+0xd0>
 800561e:	460b      	mov	r3, r1
 8005620:	3101      	adds	r1, #1
 8005622:	42bd      	cmp	r5, r7
 8005624:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005628:	54e6      	strb	r6, [r4, r3]
 800562a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800562e:	d02e      	beq.n	800568e <d_print_mod+0x12e>
 8005630:	29ff      	cmp	r1, #255	; 0xff
 8005632:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005636:	d1f2      	bne.n	800561e <d_print_mod+0xbe>
 8005638:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800563c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005640:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005644:	4620      	mov	r0, r4
 8005646:	4798      	blx	r3
 8005648:	2101      	movs	r1, #1
 800564a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800564e:	2300      	movs	r3, #0
 8005650:	440a      	add	r2, r1
 8005652:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005656:	e7e4      	b.n	8005622 <d_print_mod+0xc2>
 8005658:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800565c:	29ff      	cmp	r1, #255	; 0xff
 800565e:	f000 81fe 	beq.w	8005a5e <d_print_mod+0x4fe>
 8005662:	1c4a      	adds	r2, r1, #1
 8005664:	2320      	movs	r3, #32
 8005666:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800566a:	5463      	strb	r3, [r4, r1]
 800566c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005670:	68ab      	ldr	r3, [r5, #8]
 8005672:	4641      	mov	r1, r8
 8005674:	461a      	mov	r2, r3
 8005676:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 800567a:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 800567e:	4620      	mov	r0, r4
 8005680:	e88d 0028 	stmia.w	sp, {r3, r5}
 8005684:	f7fd f9b2 	bl	80029ec <d_print_comp_inner>
 8005688:	9b01      	ldr	r3, [sp, #4]
 800568a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800568e:	b002      	add	sp, #8
 8005690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005694:	f011 0504 	ands.w	r5, r1, #4
 8005698:	d1f9      	bne.n	800568e <d_print_mod+0x12e>
 800569a:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800569e:	2bff      	cmp	r3, #255	; 0xff
 80056a0:	f000 8222 	beq.w	8005ae8 <d_print_mod+0x588>
 80056a4:	222a      	movs	r2, #42	; 0x2a
 80056a6:	1c59      	adds	r1, r3, #1
 80056a8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80056ac:	54e2      	strb	r2, [r4, r3]
 80056ae:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80056b2:	e7ec      	b.n	800568e <d_print_mod+0x12e>
 80056b4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80056b8:	29ff      	cmp	r1, #255	; 0xff
 80056ba:	f000 81bf 	beq.w	8005a3c <d_print_mod+0x4dc>
 80056be:	1c4a      	adds	r2, r1, #1
 80056c0:	2326      	movs	r3, #38	; 0x26
 80056c2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80056c6:	5463      	strb	r3, [r4, r1]
 80056c8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80056cc:	b002      	add	sp, #8
 80056ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80056d6:	4da5      	ldr	r5, [pc, #660]	; (800596c <d_print_mod+0x40c>)
 80056d8:	f04f 0800 	mov.w	r8, #0
 80056dc:	1caf      	adds	r7, r5, #2
 80056de:	e008      	b.n	80056f2 <d_print_mod+0x192>
 80056e0:	460b      	mov	r3, r1
 80056e2:	3101      	adds	r1, #1
 80056e4:	42bd      	cmp	r5, r7
 80056e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80056ea:	54e6      	strb	r6, [r4, r3]
 80056ec:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80056f0:	d0cd      	beq.n	800568e <d_print_mod+0x12e>
 80056f2:	29ff      	cmp	r1, #255	; 0xff
 80056f4:	f815 6b01 	ldrb.w	r6, [r5], #1
 80056f8:	d1f2      	bne.n	80056e0 <d_print_mod+0x180>
 80056fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80056fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005702:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005706:	4620      	mov	r0, r4
 8005708:	4798      	blx	r3
 800570a:	2101      	movs	r1, #1
 800570c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005710:	2300      	movs	r3, #0
 8005712:	440a      	add	r2, r1
 8005714:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005718:	e7e4      	b.n	80056e4 <d_print_mod+0x184>
 800571a:	4d95      	ldr	r5, [pc, #596]	; (8005970 <d_print_mod+0x410>)
 800571c:	f04f 0800 	mov.w	r8, #0
 8005720:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005724:	f105 0708 	add.w	r7, r5, #8
 8005728:	e008      	b.n	800573c <d_print_mod+0x1dc>
 800572a:	460b      	mov	r3, r1
 800572c:	3101      	adds	r1, #1
 800572e:	42bd      	cmp	r5, r7
 8005730:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005734:	54e6      	strb	r6, [r4, r3]
 8005736:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800573a:	d0a8      	beq.n	800568e <d_print_mod+0x12e>
 800573c:	29ff      	cmp	r1, #255	; 0xff
 800573e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005742:	d1f2      	bne.n	800572a <d_print_mod+0x1ca>
 8005744:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005748:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800574c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005750:	4620      	mov	r0, r4
 8005752:	4798      	blx	r3
 8005754:	2101      	movs	r1, #1
 8005756:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800575a:	2300      	movs	r3, #0
 800575c:	440a      	add	r2, r1
 800575e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005762:	e7e4      	b.n	800572e <d_print_mod+0x1ce>
 8005764:	4d83      	ldr	r5, [pc, #524]	; (8005974 <d_print_mod+0x414>)
 8005766:	f04f 0800 	mov.w	r8, #0
 800576a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800576e:	f105 070a 	add.w	r7, r5, #10
 8005772:	e008      	b.n	8005786 <d_print_mod+0x226>
 8005774:	460b      	mov	r3, r1
 8005776:	3101      	adds	r1, #1
 8005778:	42bd      	cmp	r5, r7
 800577a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800577e:	54e6      	strb	r6, [r4, r3]
 8005780:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005784:	d083      	beq.n	800568e <d_print_mod+0x12e>
 8005786:	29ff      	cmp	r1, #255	; 0xff
 8005788:	f815 6b01 	ldrb.w	r6, [r5], #1
 800578c:	d1f2      	bne.n	8005774 <d_print_mod+0x214>
 800578e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005792:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005796:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800579a:	4620      	mov	r0, r4
 800579c:	4798      	blx	r3
 800579e:	2101      	movs	r1, #1
 80057a0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80057a4:	2300      	movs	r3, #0
 80057a6:	440a      	add	r2, r1
 80057a8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80057ac:	e7e4      	b.n	8005778 <d_print_mod+0x218>
 80057ae:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 80057b2:	2b28      	cmp	r3, #40	; 0x28
 80057b4:	d00b      	beq.n	80057ce <d_print_mod+0x26e>
 80057b6:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80057ba:	2bff      	cmp	r3, #255	; 0xff
 80057bc:	f000 812c 	beq.w	8005a18 <d_print_mod+0x4b8>
 80057c0:	2220      	movs	r2, #32
 80057c2:	1c59      	adds	r1, r3, #1
 80057c4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80057c8:	54e2      	strb	r2, [r4, r3]
 80057ca:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80057ce:	686b      	ldr	r3, [r5, #4]
 80057d0:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 80057d4:	4641      	mov	r1, r8
 80057d6:	461a      	mov	r2, r3
 80057d8:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 80057dc:	4620      	mov	r0, r4
 80057de:	e88d 0028 	stmia.w	sp, {r3, r5}
 80057e2:	f7fd f903 	bl	80029ec <d_print_comp_inner>
 80057e6:	4d64      	ldr	r5, [pc, #400]	; (8005978 <d_print_mod+0x418>)
 80057e8:	9b01      	ldr	r3, [sp, #4]
 80057ea:	2700      	movs	r7, #0
 80057ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80057f0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80057f4:	f105 0803 	add.w	r8, r5, #3
 80057f8:	e009      	b.n	800580e <d_print_mod+0x2ae>
 80057fa:	460b      	mov	r3, r1
 80057fc:	3101      	adds	r1, #1
 80057fe:	4545      	cmp	r5, r8
 8005800:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005804:	54e6      	strb	r6, [r4, r3]
 8005806:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800580a:	f43f af40 	beq.w	800568e <d_print_mod+0x12e>
 800580e:	29ff      	cmp	r1, #255	; 0xff
 8005810:	f815 6b01 	ldrb.w	r6, [r5], #1
 8005814:	d1f1      	bne.n	80057fa <d_print_mod+0x29a>
 8005816:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800581a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800581e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005822:	4620      	mov	r0, r4
 8005824:	4798      	blx	r3
 8005826:	2101      	movs	r1, #1
 8005828:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800582c:	2300      	movs	r3, #0
 800582e:	440a      	add	r2, r1
 8005830:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005834:	e7e3      	b.n	80057fe <d_print_mod+0x29e>
 8005836:	4e51      	ldr	r6, [pc, #324]	; (800597c <d_print_mod+0x41c>)
 8005838:	f04f 0900 	mov.w	r9, #0
 800583c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005840:	f106 0a0a 	add.w	sl, r6, #10
 8005844:	e009      	b.n	800585a <d_print_mod+0x2fa>
 8005846:	460b      	mov	r3, r1
 8005848:	3101      	adds	r1, #1
 800584a:	4556      	cmp	r6, sl
 800584c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005850:	54e7      	strb	r7, [r4, r3]
 8005852:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8005856:	f000 80c4 	beq.w	80059e2 <d_print_mod+0x482>
 800585a:	29ff      	cmp	r1, #255	; 0xff
 800585c:	f816 7b01 	ldrb.w	r7, [r6], #1
 8005860:	d1f1      	bne.n	8005846 <d_print_mod+0x2e6>
 8005862:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005866:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800586a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800586e:	4620      	mov	r0, r4
 8005870:	4798      	blx	r3
 8005872:	2101      	movs	r1, #1
 8005874:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005878:	2300      	movs	r3, #0
 800587a:	440a      	add	r2, r1
 800587c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005880:	e7e3      	b.n	800584a <d_print_mod+0x2ea>
 8005882:	4d3f      	ldr	r5, [pc, #252]	; (8005980 <d_print_mod+0x420>)
 8005884:	f04f 0800 	mov.w	r8, #0
 8005888:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800588c:	f105 0709 	add.w	r7, r5, #9
 8005890:	e009      	b.n	80058a6 <d_print_mod+0x346>
 8005892:	460b      	mov	r3, r1
 8005894:	3101      	adds	r1, #1
 8005896:	42bd      	cmp	r5, r7
 8005898:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800589c:	54e6      	strb	r6, [r4, r3]
 800589e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80058a2:	f43f aef4 	beq.w	800568e <d_print_mod+0x12e>
 80058a6:	29ff      	cmp	r1, #255	; 0xff
 80058a8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80058ac:	d1f1      	bne.n	8005892 <d_print_mod+0x332>
 80058ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80058b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80058b6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80058ba:	4620      	mov	r0, r4
 80058bc:	4798      	blx	r3
 80058be:	2101      	movs	r1, #1
 80058c0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80058c4:	2300      	movs	r3, #0
 80058c6:	440a      	add	r2, r1
 80058c8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80058cc:	e7e3      	b.n	8005896 <d_print_mod+0x336>
 80058ce:	4d2d      	ldr	r5, [pc, #180]	; (8005984 <d_print_mod+0x424>)
 80058d0:	f04f 0800 	mov.w	r8, #0
 80058d4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80058d8:	1daf      	adds	r7, r5, #6
 80058da:	e009      	b.n	80058f0 <d_print_mod+0x390>
 80058dc:	460b      	mov	r3, r1
 80058de:	3101      	adds	r1, #1
 80058e0:	42bd      	cmp	r5, r7
 80058e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80058e6:	54e6      	strb	r6, [r4, r3]
 80058e8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80058ec:	f43f aecf 	beq.w	800568e <d_print_mod+0x12e>
 80058f0:	29ff      	cmp	r1, #255	; 0xff
 80058f2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80058f6:	d1f1      	bne.n	80058dc <d_print_mod+0x37c>
 80058f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80058fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005900:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005904:	4620      	mov	r0, r4
 8005906:	4798      	blx	r3
 8005908:	2101      	movs	r1, #1
 800590a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800590e:	2300      	movs	r3, #0
 8005910:	440a      	add	r2, r1
 8005912:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005916:	e7e3      	b.n	80058e0 <d_print_mod+0x380>
 8005918:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800591c:	2bff      	cmp	r3, #255	; 0xff
 800591e:	f000 80d1 	beq.w	8005ac4 <d_print_mod+0x564>
 8005922:	2220      	movs	r2, #32
 8005924:	1c59      	adds	r1, r3, #1
 8005926:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800592a:	54e2      	strb	r2, [r4, r3]
 800592c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005930:	e6c2      	b.n	80056b8 <d_print_mod+0x158>
 8005932:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005936:	2bff      	cmp	r3, #255	; 0xff
 8005938:	f000 80b2 	beq.w	8005aa0 <d_print_mod+0x540>
 800593c:	2220      	movs	r2, #32
 800593e:	1c59      	adds	r1, r3, #1
 8005940:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005944:	54e2      	strb	r2, [r4, r3]
 8005946:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800594a:	e6c4      	b.n	80056d6 <d_print_mod+0x176>
 800594c:	686b      	ldr	r3, [r5, #4]
 800594e:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
 8005952:	461a      	mov	r2, r3
 8005954:	e691      	b.n	800567a <d_print_mod+0x11a>
 8005956:	4d0c      	ldr	r5, [pc, #48]	; (8005988 <d_print_mod+0x428>)
 8005958:	f04f 0800 	mov.w	r8, #0
 800595c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005960:	f105 0709 	add.w	r7, r5, #9
 8005964:	e01c      	b.n	80059a0 <d_print_mod+0x440>
 8005966:	bf00      	nop
 8005968:	08022d1f 	.word	0x08022d1f
 800596c:	08022d34 	.word	0x08022d34
 8005970:	08022d37 	.word	0x08022d37
 8005974:	08022d44 	.word	0x08022d44
 8005978:	08022d50 	.word	0x08022d50
 800597c:	08022d54 	.word	0x08022d54
 8005980:	08022d0b 	.word	0x08022d0b
 8005984:	08022d18 	.word	0x08022d18
 8005988:	08022cff 	.word	0x08022cff
 800598c:	460b      	mov	r3, r1
 800598e:	3101      	adds	r1, #1
 8005990:	42af      	cmp	r7, r5
 8005992:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005996:	54e6      	strb	r6, [r4, r3]
 8005998:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800599c:	f43f ae77 	beq.w	800568e <d_print_mod+0x12e>
 80059a0:	29ff      	cmp	r1, #255	; 0xff
 80059a2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80059a6:	d1f1      	bne.n	800598c <d_print_mod+0x42c>
 80059a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80059ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80059b0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80059b4:	4620      	mov	r0, r4
 80059b6:	4798      	blx	r3
 80059b8:	2101      	movs	r1, #1
 80059ba:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80059be:	2300      	movs	r3, #0
 80059c0:	440a      	add	r2, r1
 80059c2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80059c6:	e7e3      	b.n	8005990 <d_print_mod+0x430>
 80059c8:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 80059cc:	462a      	mov	r2, r5
 80059ce:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	9500      	str	r5, [sp, #0]
 80059d6:	f7fd f809 	bl	80029ec <d_print_comp_inner>
 80059da:	9b01      	ldr	r3, [sp, #4]
 80059dc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80059e0:	e655      	b.n	800568e <d_print_mod+0x12e>
 80059e2:	686b      	ldr	r3, [r5, #4]
 80059e4:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 80059e8:	461a      	mov	r2, r3
 80059ea:	4641      	mov	r1, r8
 80059ec:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 80059f0:	4620      	mov	r0, r4
 80059f2:	e88d 0028 	stmia.w	sp, {r3, r5}
 80059f6:	f7fc fff9 	bl	80029ec <d_print_comp_inner>
 80059fa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80059fe:	9b01      	ldr	r3, [sp, #4]
 8005a00:	29ff      	cmp	r1, #255	; 0xff
 8005a02:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005a06:	d03a      	beq.n	8005a7e <d_print_mod+0x51e>
 8005a08:	1c4a      	adds	r2, r1, #1
 8005a0a:	2329      	movs	r3, #41	; 0x29
 8005a0c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005a10:	5463      	strb	r3, [r4, r1]
 8005a12:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005a16:	e63a      	b.n	800568e <d_print_mod+0x12e>
 8005a18:	2600      	movs	r6, #0
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005a20:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005a24:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005a28:	4798      	blx	r3
 8005a2a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005a2e:	4633      	mov	r3, r6
 8005a30:	3201      	adds	r2, #1
 8005a32:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005a36:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005a3a:	e6c1      	b.n	80057c0 <d_print_mod+0x260>
 8005a3c:	2500      	movs	r5, #0
 8005a3e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a42:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a46:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	4798      	blx	r3
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a54:	4629      	mov	r1, r5
 8005a56:	4413      	add	r3, r2
 8005a58:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a5c:	e630      	b.n	80056c0 <d_print_mod+0x160>
 8005a5e:	2600      	movs	r6, #0
 8005a60:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005a64:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005a68:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005a6c:	4798      	blx	r3
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a74:	4631      	mov	r1, r6
 8005a76:	4413      	add	r3, r2
 8005a78:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a7c:	e5f2      	b.n	8005664 <d_print_mod+0x104>
 8005a7e:	2500      	movs	r5, #0
 8005a80:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a88:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	4798      	blx	r3
 8005a90:	2201      	movs	r2, #1
 8005a92:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a96:	4629      	mov	r1, r5
 8005a98:	4413      	add	r3, r2
 8005a9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a9e:	e7b4      	b.n	8005a0a <d_print_mod+0x4aa>
 8005aa0:	2500      	movs	r5, #0
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005aa8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005aac:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005ab0:	4798      	blx	r3
 8005ab2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005ab6:	462b      	mov	r3, r5
 8005ab8:	3201      	adds	r2, #1
 8005aba:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005abe:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005ac2:	e73b      	b.n	800593c <d_print_mod+0x3dc>
 8005ac4:	2500      	movs	r5, #0
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005acc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005ad0:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005ad4:	4798      	blx	r3
 8005ad6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005ada:	462b      	mov	r3, r5
 8005adc:	3201      	adds	r2, #1
 8005ade:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005ae2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005ae6:	e71c      	b.n	8005922 <d_print_mod+0x3c2>
 8005ae8:	4619      	mov	r1, r3
 8005aea:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005aee:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005af2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005af6:	4798      	blx	r3
 8005af8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005afc:	462b      	mov	r3, r5
 8005afe:	3201      	adds	r2, #1
 8005b00:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005b04:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005b08:	e5cc      	b.n	80056a4 <d_print_mod+0x144>
 8005b0a:	bf00      	nop

08005b0c <d_print_mod_list>:
 8005b0c:	2a00      	cmp	r2, #0
 8005b0e:	f000 80a1 	beq.w	8005c54 <d_print_mod_list+0x148>
 8005b12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b16:	461e      	mov	r6, r3
 8005b18:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8005b1c:	b089      	sub	sp, #36	; 0x24
 8005b1e:	4605      	mov	r5, r0
 8005b20:	bb43      	cbnz	r3, 8005b74 <d_print_mod_list+0x68>
 8005b22:	460f      	mov	r7, r1
 8005b24:	4614      	mov	r4, r2
 8005b26:	f04f 0801 	mov.w	r8, #1
 8005b2a:	e002      	b.n	8005b32 <d_print_mod_list+0x26>
 8005b2c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8005b30:	bb03      	cbnz	r3, 8005b74 <d_print_mod_list+0x68>
 8005b32:	68a3      	ldr	r3, [r4, #8]
 8005b34:	b9db      	cbnz	r3, 8005b6e <d_print_mod_list+0x62>
 8005b36:	6862      	ldr	r2, [r4, #4]
 8005b38:	7813      	ldrb	r3, [r2, #0]
 8005b3a:	b92e      	cbnz	r6, 8005b48 <d_print_mod_list+0x3c>
 8005b3c:	f1a3 011c 	sub.w	r1, r3, #28
 8005b40:	2904      	cmp	r1, #4
 8005b42:	d914      	bls.n	8005b6e <d_print_mod_list+0x62>
 8005b44:	2b4c      	cmp	r3, #76	; 0x4c
 8005b46:	d012      	beq.n	8005b6e <d_print_mod_list+0x62>
 8005b48:	68e1      	ldr	r1, [r4, #12]
 8005b4a:	2b29      	cmp	r3, #41	; 0x29
 8005b4c:	f8c4 8008 	str.w	r8, [r4, #8]
 8005b50:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
 8005b54:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
 8005b58:	d00f      	beq.n	8005b7a <d_print_mod_list+0x6e>
 8005b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b5c:	d018      	beq.n	8005b90 <d_print_mod_list+0x84>
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d021      	beq.n	8005ba6 <d_print_mod_list+0x9a>
 8005b62:	4639      	mov	r1, r7
 8005b64:	4628      	mov	r0, r5
 8005b66:	f7ff fcfb 	bl	8005560 <d_print_mod>
 8005b6a:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005b6e:	6824      	ldr	r4, [r4, #0]
 8005b70:	2c00      	cmp	r4, #0
 8005b72:	d1db      	bne.n	8005b2c <d_print_mod_list+0x20>
 8005b74:	b009      	add	sp, #36	; 0x24
 8005b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	3208      	adds	r2, #8
 8005b7e:	4639      	mov	r1, r7
 8005b80:	4628      	mov	r0, r5
 8005b82:	f000 f9d9 	bl	8005f38 <d_print_function_type.isra.11>
 8005b86:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005b8a:	b009      	add	sp, #36	; 0x24
 8005b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	3204      	adds	r2, #4
 8005b94:	4639      	mov	r1, r7
 8005b96:	4628      	mov	r0, r5
 8005b98:	f000 f8f2 	bl	8005d80 <d_print_array_type.isra.10>
 8005b9c:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005ba0:	b009      	add	sp, #36	; 0x24
 8005ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba6:	2600      	movs	r6, #0
 8005ba8:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
 8005bac:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 8005bb0:	6852      	ldr	r2, [r2, #4]
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	f7ff fcc3 	bl	8005540 <d_print_comp>
 8005bba:	f017 0a04 	ands.w	sl, r7, #4
 8005bbe:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
 8005bc2:	d023      	beq.n	8005c0c <d_print_mod_list+0x100>
 8005bc4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005bc8:	29ff      	cmp	r1, #255	; 0xff
 8005bca:	f000 80c1 	beq.w	8005d50 <d_print_mod_list+0x244>
 8005bce:	1c4a      	adds	r2, r1, #1
 8005bd0:	232e      	movs	r3, #46	; 0x2e
 8005bd2:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 8005bd6:	546b      	strb	r3, [r5, r1]
 8005bd8:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 8005bdc:	6863      	ldr	r3, [r4, #4]
 8005bde:	689c      	ldr	r4, [r3, #8]
 8005be0:	7823      	ldrb	r3, [r4, #0]
 8005be2:	2b46      	cmp	r3, #70	; 0x46
 8005be4:	d037      	beq.n	8005c56 <d_print_mod_list+0x14a>
 8005be6:	f1a3 021c 	sub.w	r2, r3, #28
 8005bea:	2a04      	cmp	r2, #4
 8005bec:	d90b      	bls.n	8005c06 <d_print_mod_list+0xfa>
 8005bee:	2b4c      	cmp	r3, #76	; 0x4c
 8005bf0:	d009      	beq.n	8005c06 <d_print_mod_list+0xfa>
 8005bf2:	4622      	mov	r2, r4
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f7ff fca2 	bl	8005540 <d_print_comp>
 8005bfc:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005c00:	b009      	add	sp, #36	; 0x24
 8005c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c06:	6864      	ldr	r4, [r4, #4]
 8005c08:	7823      	ldrb	r3, [r4, #0]
 8005c0a:	e7ec      	b.n	8005be6 <d_print_mod_list+0xda>
 8005c0c:	4e58      	ldr	r6, [pc, #352]	; (8005d70 <d_print_mod_list+0x264>)
 8005c0e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005c12:	f106 0b02 	add.w	fp, r6, #2
 8005c16:	e009      	b.n	8005c2c <d_print_mod_list+0x120>
 8005c18:	460b      	mov	r3, r1
 8005c1a:	3101      	adds	r1, #1
 8005c1c:	455e      	cmp	r6, fp
 8005c1e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005c22:	f805 8003 	strb.w	r8, [r5, r3]
 8005c26:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005c2a:	d0d7      	beq.n	8005bdc <d_print_mod_list+0xd0>
 8005c2c:	29ff      	cmp	r1, #255	; 0xff
 8005c2e:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005c32:	d1f1      	bne.n	8005c18 <d_print_mod_list+0x10c>
 8005c34:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005c38:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005c3c:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
 8005c40:	4628      	mov	r0, r5
 8005c42:	4798      	blx	r3
 8005c44:	2101      	movs	r1, #1
 8005c46:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
 8005c52:	e7e3      	b.n	8005c1c <d_print_mod_list+0x110>
 8005c54:	4770      	bx	lr
 8005c56:	4e47      	ldr	r6, [pc, #284]	; (8005d74 <d_print_mod_list+0x268>)
 8005c58:	f04f 0b00 	mov.w	fp, #0
 8005c5c:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005c60:	f106 0a0d 	add.w	sl, r6, #13
 8005c64:	e009      	b.n	8005c7a <d_print_mod_list+0x16e>
 8005c66:	460b      	mov	r3, r1
 8005c68:	3101      	adds	r1, #1
 8005c6a:	45b2      	cmp	sl, r6
 8005c6c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005c70:	f805 8003 	strb.w	r8, [r5, r3]
 8005c74:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005c78:	d013      	beq.n	8005ca2 <d_print_mod_list+0x196>
 8005c7a:	29ff      	cmp	r1, #255	; 0xff
 8005c7c:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005c80:	d1f1      	bne.n	8005c66 <d_print_mod_list+0x15a>
 8005c82:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005c86:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005c8a:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005c8e:	4628      	mov	r0, r5
 8005c90:	4798      	blx	r3
 8005c92:	2101      	movs	r1, #1
 8005c94:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 8005c98:	2300      	movs	r3, #0
 8005c9a:	440a      	add	r2, r1
 8005c9c:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
 8005ca0:	e7e3      	b.n	8005c6a <d_print_mod_list+0x15e>
 8005ca2:	68a2      	ldr	r2, [r4, #8]
 8005ca4:	a801      	add	r0, sp, #4
 8005ca6:	3201      	adds	r2, #1
 8005ca8:	4933      	ldr	r1, [pc, #204]	; (8005d78 <d_print_mod_list+0x26c>)
 8005caa:	f011 fff1 	bl	8017c90 <sprintf>
 8005cae:	a801      	add	r0, sp, #4
 8005cb0:	f000 fe12 	bl	80068d8 <strlen>
 8005cb4:	b328      	cbz	r0, 8005d02 <d_print_mod_list+0x1f6>
 8005cb6:	ae01      	add	r6, sp, #4
 8005cb8:	f04f 0b00 	mov.w	fp, #0
 8005cbc:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005cc0:	eb06 0a00 	add.w	sl, r6, r0
 8005cc4:	e009      	b.n	8005cda <d_print_mod_list+0x1ce>
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	3101      	adds	r1, #1
 8005cca:	45b2      	cmp	sl, r6
 8005ccc:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005cd0:	f805 8003 	strb.w	r8, [r5, r3]
 8005cd4:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005cd8:	d015      	beq.n	8005d06 <d_print_mod_list+0x1fa>
 8005cda:	29ff      	cmp	r1, #255	; 0xff
 8005cdc:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005ce0:	d1f1      	bne.n	8005cc6 <d_print_mod_list+0x1ba>
 8005ce2:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005ce6:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005cea:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005cee:	4628      	mov	r0, r5
 8005cf0:	4798      	blx	r3
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	440a      	add	r2, r1
 8005cfc:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
 8005d00:	e7e3      	b.n	8005cca <d_print_mod_list+0x1be>
 8005d02:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005d06:	4e1d      	ldr	r6, [pc, #116]	; (8005d7c <d_print_mod_list+0x270>)
 8005d08:	f04f 0b00 	mov.w	fp, #0
 8005d0c:	f106 0a03 	add.w	sl, r6, #3
 8005d10:	e00a      	b.n	8005d28 <d_print_mod_list+0x21c>
 8005d12:	460b      	mov	r3, r1
 8005d14:	3101      	adds	r1, #1
 8005d16:	45b2      	cmp	sl, r6
 8005d18:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005d1c:	f805 8003 	strb.w	r8, [r5, r3]
 8005d20:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005d24:	f43f af6f 	beq.w	8005c06 <d_print_mod_list+0xfa>
 8005d28:	29ff      	cmp	r1, #255	; 0xff
 8005d2a:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005d2e:	d1f0      	bne.n	8005d12 <d_print_mod_list+0x206>
 8005d30:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005d34:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005d38:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	4798      	blx	r3
 8005d40:	2101      	movs	r1, #1
 8005d42:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 8005d46:	2300      	movs	r3, #0
 8005d48:	440a      	add	r2, r1
 8005d4a:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
 8005d4e:	e7e2      	b.n	8005d16 <d_print_mod_list+0x20a>
 8005d50:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005d54:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005d58:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	4798      	blx	r3
 8005d60:	2201      	movs	r2, #1
 8005d62:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005d66:	4631      	mov	r1, r6
 8005d68:	4413      	add	r3, r2
 8005d6a:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005d6e:	e72f      	b.n	8005bd0 <d_print_mod_list+0xc4>
 8005d70:	08022a80 	.word	0x08022a80
 8005d74:	08022a84 	.word	0x08022a84
 8005d78:	08022a30 	.word	0x08022a30
 8005d7c:	08022a94 	.word	0x08022a94

08005d80 <d_print_array_type.isra.10>:
 8005d80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d84:	4604      	mov	r4, r0
 8005d86:	460f      	mov	r7, r1
 8005d88:	4690      	mov	r8, r2
 8005d8a:	b163      	cbz	r3, 8005da6 <d_print_array_type.isra.10+0x26>
 8005d8c:	461e      	mov	r6, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	6893      	ldr	r3, [r2, #8]
 8005d92:	b393      	cbz	r3, 8005dfa <d_print_array_type.isra.10+0x7a>
 8005d94:	6812      	ldr	r2, [r2, #0]
 8005d96:	2a00      	cmp	r2, #0
 8005d98:	d1fa      	bne.n	8005d90 <d_print_array_type.isra.10+0x10>
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	4639      	mov	r1, r7
 8005d9e:	4632      	mov	r2, r6
 8005da0:	4620      	mov	r0, r4
 8005da2:	f7ff feb3 	bl	8005b0c <d_print_mod_list>
 8005da6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005daa:	29ff      	cmp	r1, #255	; 0xff
 8005dac:	f000 808d 	beq.w	8005eca <d_print_array_type.isra.10+0x14a>
 8005db0:	1c4b      	adds	r3, r1, #1
 8005db2:	2220      	movs	r2, #32
 8005db4:	2bff      	cmp	r3, #255	; 0xff
 8005db6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005dba:	5462      	strb	r2, [r4, r1]
 8005dbc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005dc0:	d068      	beq.n	8005e94 <d_print_array_type.isra.10+0x114>
 8005dc2:	225b      	movs	r2, #91	; 0x5b
 8005dc4:	1c59      	adds	r1, r3, #1
 8005dc6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005dca:	54e2      	strb	r2, [r4, r3]
 8005dcc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005dd0:	f8d8 2000 	ldr.w	r2, [r8]
 8005dd4:	b12a      	cbz	r2, 8005de2 <d_print_array_type.isra.10+0x62>
 8005dd6:	4639      	mov	r1, r7
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f7ff fbb1 	bl	8005540 <d_print_comp>
 8005dde:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005de2:	29ff      	cmp	r1, #255	; 0xff
 8005de4:	f000 8082 	beq.w	8005eec <d_print_array_type.isra.10+0x16c>
 8005de8:	1c4a      	adds	r2, r1, #1
 8005dea:	235d      	movs	r3, #93	; 0x5d
 8005dec:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005df0:	5463      	strb	r3, [r4, r1]
 8005df2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005df6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfa:	6852      	ldr	r2, [r2, #4]
 8005dfc:	7812      	ldrb	r2, [r2, #0]
 8005dfe:	2a2a      	cmp	r2, #42	; 0x2a
 8005e00:	d03f      	beq.n	8005e82 <d_print_array_type.isra.10+0x102>
 8005e02:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8005f34 <d_print_array_type.isra.10+0x1b4>
 8005e06:	461d      	mov	r5, r3
 8005e08:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005e0c:	f109 0b02 	add.w	fp, r9, #2
 8005e10:	e00a      	b.n	8005e28 <d_print_array_type.isra.10+0xa8>
 8005e12:	460b      	mov	r3, r1
 8005e14:	45cb      	cmp	fp, r9
 8005e16:	f101 0101 	add.w	r1, r1, #1
 8005e1a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e1e:	f804 a003 	strb.w	sl, [r4, r3]
 8005e22:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005e26:	d01a      	beq.n	8005e5e <d_print_array_type.isra.10+0xde>
 8005e28:	29ff      	cmp	r1, #255	; 0xff
 8005e2a:	f819 ab01 	ldrb.w	sl, [r9], #1
 8005e2e:	d1f0      	bne.n	8005e12 <d_print_array_type.isra.10+0x92>
 8005e30:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e38:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	4798      	blx	r3
 8005e40:	2101      	movs	r1, #1
 8005e42:	2300      	movs	r3, #0
 8005e44:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005e48:	45cb      	cmp	fp, r9
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005e50:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e54:	f804 a003 	strb.w	sl, [r4, r3]
 8005e58:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005e5c:	d1e4      	bne.n	8005e28 <d_print_array_type.isra.10+0xa8>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	4632      	mov	r2, r6
 8005e62:	4639      	mov	r1, r7
 8005e64:	4620      	mov	r0, r4
 8005e66:	f7ff fe51 	bl	8005b0c <d_print_mod_list>
 8005e6a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005e6e:	2bff      	cmp	r3, #255	; 0xff
 8005e70:	d04d      	beq.n	8005f0e <d_print_array_type.isra.10+0x18e>
 8005e72:	1c59      	adds	r1, r3, #1
 8005e74:	2229      	movs	r2, #41	; 0x29
 8005e76:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e7a:	54e2      	strb	r2, [r4, r3]
 8005e7c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005e80:	e793      	b.n	8005daa <d_print_array_type.isra.10+0x2a>
 8005e82:	4632      	mov	r2, r6
 8005e84:	4639      	mov	r1, r7
 8005e86:	4620      	mov	r0, r4
 8005e88:	f7ff fe40 	bl	8005b0c <d_print_mod_list>
 8005e8c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005e90:	2bff      	cmp	r3, #255	; 0xff
 8005e92:	d196      	bne.n	8005dc2 <d_print_array_type.isra.10+0x42>
 8005e94:	2200      	movs	r2, #0
 8005e96:	4619      	mov	r1, r3
 8005e98:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8005e9c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ea0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	4798      	blx	r3
 8005ea8:	235b      	movs	r3, #91	; 0x5b
 8005eaa:	2101      	movs	r1, #1
 8005eac:	7023      	strb	r3, [r4, #0]
 8005eae:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005eb2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005eb6:	f8d8 2000 	ldr.w	r2, [r8]
 8005eba:	440b      	add	r3, r1
 8005ebc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005ec0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005ec4:	2a00      	cmp	r2, #0
 8005ec6:	d186      	bne.n	8005dd6 <d_print_array_type.isra.10+0x56>
 8005ec8:	e78e      	b.n	8005de8 <d_print_array_type.isra.10+0x68>
 8005eca:	2500      	movs	r5, #0
 8005ecc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ed0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ed4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005ed8:	4620      	mov	r0, r4
 8005eda:	4798      	blx	r3
 8005edc:	2301      	movs	r3, #1
 8005ede:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	441a      	add	r2, r3
 8005ee6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005eea:	e762      	b.n	8005db2 <d_print_array_type.isra.10+0x32>
 8005eec:	2500      	movs	r5, #0
 8005eee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ef2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ef6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005efa:	4620      	mov	r0, r4
 8005efc:	4798      	blx	r3
 8005efe:	2201      	movs	r2, #1
 8005f00:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005f04:	4629      	mov	r1, r5
 8005f06:	4413      	add	r3, r2
 8005f08:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005f0c:	e76d      	b.n	8005dea <d_print_array_type.isra.10+0x6a>
 8005f0e:	2500      	movs	r5, #0
 8005f10:	4619      	mov	r1, r3
 8005f12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005f16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005f1a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005f1e:	4620      	mov	r0, r4
 8005f20:	4798      	blx	r3
 8005f22:	2101      	movs	r1, #1
 8005f24:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005f28:	462b      	mov	r3, r5
 8005f2a:	440a      	add	r2, r1
 8005f2c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005f30:	e7a0      	b.n	8005e74 <d_print_array_type.isra.10+0xf4>
 8005f32:	bf00      	nop
 8005f34:	08022c78 	.word	0x08022c78

08005f38 <d_print_function_type.isra.11>:
 8005f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	b083      	sub	sp, #12
 8005f40:	460e      	mov	r6, r1
 8005f42:	4617      	mov	r7, r2
 8005f44:	461d      	mov	r5, r3
 8005f46:	b34b      	cbz	r3, 8005f9c <d_print_function_type.isra.11+0x64>
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	bb3b      	cbnz	r3, 8005f9c <d_print_function_type.isra.11+0x64>
 8005f4c:	462a      	mov	r2, r5
 8005f4e:	2001      	movs	r0, #1
 8005f50:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 800611c <d_print_function_type.isra.11+0x1e4>
 8005f54:	e006      	b.n	8005f64 <d_print_function_type.isra.11+0x2c>
 8005f56:	f411 6f60 	tst.w	r1, #3584	; 0xe00
 8005f5a:	d15b      	bne.n	8006014 <d_print_function_type.isra.11+0xdc>
 8005f5c:	6812      	ldr	r2, [r2, #0]
 8005f5e:	b1ea      	cbz	r2, 8005f9c <d_print_function_type.isra.11+0x64>
 8005f60:	6893      	ldr	r3, [r2, #8]
 8005f62:	b9db      	cbnz	r3, 8005f9c <d_print_function_type.isra.11+0x64>
 8005f64:	6853      	ldr	r3, [r2, #4]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	3b19      	subs	r3, #25
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b12      	cmp	r3, #18
 8005f6e:	fa00 f103 	lsl.w	r1, r0, r3
 8005f72:	d8f3      	bhi.n	8005f5c <d_print_function_type.isra.11+0x24>
 8005f74:	ea11 0f0e 	tst.w	r1, lr
 8005f78:	d0ed      	beq.n	8005f56 <d_print_function_type.isra.11+0x1e>
 8005f7a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d04e      	beq.n	8006020 <d_print_function_type.isra.11+0xe8>
 8005f82:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005f86:	2bff      	cmp	r3, #255	; 0xff
 8005f88:	f000 80b5 	beq.w	80060f6 <d_print_function_type.isra.11+0x1be>
 8005f8c:	1c59      	adds	r1, r3, #1
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005f94:	54e2      	strb	r2, [r4, r3]
 8005f96:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005f9a:	e043      	b.n	8006024 <d_print_function_type.isra.11+0xec>
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8005fa8:	4631      	mov	r1, r6
 8005faa:	462a      	mov	r2, r5
 8005fac:	4620      	mov	r0, r4
 8005fae:	f7ff fdad 	bl	8005b0c <d_print_mod_list>
 8005fb2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005fb6:	29ff      	cmp	r1, #255	; 0xff
 8005fb8:	d056      	beq.n	8006068 <d_print_function_type.isra.11+0x130>
 8005fba:	1c4b      	adds	r3, r1, #1
 8005fbc:	2228      	movs	r2, #40	; 0x28
 8005fbe:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005fc2:	5462      	strb	r2, [r4, r1]
 8005fc4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005fc8:	6838      	ldr	r0, [r7, #0]
 8005fca:	b178      	cbz	r0, 8005fec <d_print_function_type.isra.11+0xb4>
 8005fcc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	9000      	str	r0, [sp, #0]
 8005fd4:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 8005fd8:	4631      	mov	r1, r6
 8005fda:	4620      	mov	r0, r4
 8005fdc:	9301      	str	r3, [sp, #4]
 8005fde:	f7fc fd05 	bl	80029ec <d_print_comp_inner>
 8005fe2:	9a01      	ldr	r2, [sp, #4]
 8005fe4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005fe8:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8005fec:	2bff      	cmp	r3, #255	; 0xff
 8005fee:	d04d      	beq.n	800608c <d_print_function_type.isra.11+0x154>
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	2029      	movs	r0, #41	; 0x29
 8005ff4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	54e0      	strb	r0, [r4, r3]
 8005ffc:	462a      	mov	r2, r5
 8005ffe:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 8006002:	2301      	movs	r3, #1
 8006004:	4620      	mov	r0, r4
 8006006:	f7ff fd81 	bl	8005b0c <d_print_mod_list>
 800600a:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 800600e:	b003      	add	sp, #12
 8006010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006014:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8006018:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800601c:	2a28      	cmp	r2, #40	; 0x28
 800601e:	d1ae      	bne.n	8005f7e <d_print_function_type.isra.11+0x46>
 8006020:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006024:	29ff      	cmp	r1, #255	; 0xff
 8006026:	d054      	beq.n	80060d2 <d_print_function_type.isra.11+0x19a>
 8006028:	1c4a      	adds	r2, r1, #1
 800602a:	2328      	movs	r3, #40	; 0x28
 800602c:	f04f 0900 	mov.w	r9, #0
 8006030:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006034:	5463      	strb	r3, [r4, r1]
 8006036:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 800603a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800603e:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8006042:	464b      	mov	r3, r9
 8006044:	462a      	mov	r2, r5
 8006046:	4631      	mov	r1, r6
 8006048:	4620      	mov	r0, r4
 800604a:	f7ff fd5f 	bl	8005b0c <d_print_mod_list>
 800604e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006052:	2bff      	cmp	r3, #255	; 0xff
 8006054:	d02c      	beq.n	80060b0 <d_print_function_type.isra.11+0x178>
 8006056:	1c59      	adds	r1, r3, #1
 8006058:	2229      	movs	r2, #41	; 0x29
 800605a:	29ff      	cmp	r1, #255	; 0xff
 800605c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006060:	54e2      	strb	r2, [r4, r3]
 8006062:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006066:	d1a8      	bne.n	8005fba <d_print_function_type.isra.11+0x82>
 8006068:	f04f 0900 	mov.w	r9, #0
 800606c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006070:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006074:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8006078:	4620      	mov	r0, r4
 800607a:	4798      	blx	r3
 800607c:	2301      	movs	r3, #1
 800607e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8006082:	4649      	mov	r1, r9
 8006084:	441a      	add	r2, r3
 8006086:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800608a:	e797      	b.n	8005fbc <d_print_function_type.isra.11+0x84>
 800608c:	2700      	movs	r7, #0
 800608e:	4619      	mov	r1, r3
 8006090:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006094:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006098:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800609c:	4620      	mov	r0, r4
 800609e:	4798      	blx	r3
 80060a0:	2201      	movs	r2, #1
 80060a2:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
 80060a6:	463b      	mov	r3, r7
 80060a8:	4411      	add	r1, r2
 80060aa:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 80060ae:	e7a0      	b.n	8005ff2 <d_print_function_type.isra.11+0xba>
 80060b0:	4619      	mov	r1, r3
 80060b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80060b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060ba:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80060be:	4620      	mov	r0, r4
 80060c0:	4798      	blx	r3
 80060c2:	2101      	movs	r1, #1
 80060c4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80060c8:	464b      	mov	r3, r9
 80060ca:	440a      	add	r2, r1
 80060cc:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80060d0:	e7c2      	b.n	8006058 <d_print_function_type.isra.11+0x120>
 80060d2:	f04f 0800 	mov.w	r8, #0
 80060d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80060de:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80060e2:	4620      	mov	r0, r4
 80060e4:	4798      	blx	r3
 80060e6:	2201      	movs	r2, #1
 80060e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80060ec:	4641      	mov	r1, r8
 80060ee:	4413      	add	r3, r2
 80060f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80060f4:	e799      	b.n	800602a <d_print_function_type.isra.11+0xf2>
 80060f6:	f04f 0800 	mov.w	r8, #0
 80060fa:	4619      	mov	r1, r3
 80060fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006100:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006104:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006108:	4620      	mov	r0, r4
 800610a:	4798      	blx	r3
 800610c:	2101      	movs	r1, #1
 800610e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8006112:	4643      	mov	r3, r8
 8006114:	440a      	add	r2, r1
 8006116:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800611a:	e738      	b.n	8005f8e <d_print_function_type.isra.11+0x56>
 800611c:	00043107 	.word	0x00043107

08006120 <d_print_expr_op>:
 8006120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006124:	7815      	ldrb	r5, [r2, #0]
 8006126:	b082      	sub	sp, #8
 8006128:	2d31      	cmp	r5, #49	; 0x31
 800612a:	4613      	mov	r3, r2
 800612c:	4604      	mov	r4, r0
 800612e:	d00d      	beq.n	800614c <d_print_expr_op+0x2c>
 8006130:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
 8006134:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 8006138:	e88d 0028 	stmia.w	sp, {r3, r5}
 800613c:	f7fc fc56 	bl	80029ec <d_print_comp_inner>
 8006140:	9b01      	ldr	r3, [sp, #4]
 8006142:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8006146:	b002      	add	sp, #8
 8006148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800614c:	6853      	ldr	r3, [r2, #4]
 800614e:	689f      	ldr	r7, [r3, #8]
 8006150:	685d      	ldr	r5, [r3, #4]
 8006152:	2f00      	cmp	r7, #0
 8006154:	d0f7      	beq.n	8006146 <d_print_expr_op+0x26>
 8006156:	f04f 0800 	mov.w	r8, #0
 800615a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800615e:	442f      	add	r7, r5
 8006160:	e008      	b.n	8006174 <d_print_expr_op+0x54>
 8006162:	460b      	mov	r3, r1
 8006164:	3101      	adds	r1, #1
 8006166:	42bd      	cmp	r5, r7
 8006168:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800616c:	54e6      	strb	r6, [r4, r3]
 800616e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006172:	d0e8      	beq.n	8006146 <d_print_expr_op+0x26>
 8006174:	29ff      	cmp	r1, #255	; 0xff
 8006176:	f815 6b01 	ldrb.w	r6, [r5], #1
 800617a:	d1f2      	bne.n	8006162 <d_print_expr_op+0x42>
 800617c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006180:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006184:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006188:	4620      	mov	r0, r4
 800618a:	4798      	blx	r3
 800618c:	2101      	movs	r1, #1
 800618e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8006192:	2300      	movs	r3, #0
 8006194:	440a      	add	r2, r1
 8006196:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800619a:	e7e4      	b.n	8006166 <d_print_expr_op+0x46>

0800619c <d_print_subexpr>:
 800619c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800619e:	7813      	ldrb	r3, [r2, #0]
 80061a0:	b083      	sub	sp, #12
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	4615      	mov	r5, r2
 80061a6:	460e      	mov	r6, r1
 80061a8:	4604      	mov	r4, r0
 80061aa:	d929      	bls.n	8006200 <d_print_subexpr+0x64>
 80061ac:	2b30      	cmp	r3, #48	; 0x30
 80061ae:	d027      	beq.n	8006200 <d_print_subexpr+0x64>
 80061b0:	2b06      	cmp	r3, #6
 80061b2:	d025      	beq.n	8006200 <d_print_subexpr+0x64>
 80061b4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80061b8:	29ff      	cmp	r1, #255	; 0xff
 80061ba:	d031      	beq.n	8006220 <d_print_subexpr+0x84>
 80061bc:	1c4a      	adds	r2, r1, #1
 80061be:	2328      	movs	r3, #40	; 0x28
 80061c0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80061c4:	5463      	strb	r3, [r4, r1]
 80061c6:	f8d4 7128 	ldr.w	r7, [r4, #296]	; 0x128
 80061ca:	4631      	mov	r1, r6
 80061cc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80061d0:	462a      	mov	r2, r5
 80061d2:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 80061d6:	4620      	mov	r0, r4
 80061d8:	e88d 00a0 	stmia.w	sp, {r5, r7}
 80061dc:	f7fc fc06 	bl	80029ec <d_print_comp_inner>
 80061e0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80061e4:	9b01      	ldr	r3, [sp, #4]
 80061e6:	29ff      	cmp	r1, #255	; 0xff
 80061e8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80061ec:	d028      	beq.n	8006240 <d_print_subexpr+0xa4>
 80061ee:	1c4a      	adds	r2, r1, #1
 80061f0:	2329      	movs	r3, #41	; 0x29
 80061f2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80061f6:	5463      	strb	r3, [r4, r1]
 80061f8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80061fc:	b003      	add	sp, #12
 80061fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006200:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006204:	4631      	mov	r1, r6
 8006206:	462a      	mov	r2, r5
 8006208:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 800620c:	4620      	mov	r0, r4
 800620e:	9301      	str	r3, [sp, #4]
 8006210:	9500      	str	r5, [sp, #0]
 8006212:	f7fc fbeb 	bl	80029ec <d_print_comp_inner>
 8006216:	9b01      	ldr	r3, [sp, #4]
 8006218:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800621c:	b003      	add	sp, #12
 800621e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006220:	2700      	movs	r7, #0
 8006222:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006226:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800622a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800622e:	4798      	blx	r3
 8006230:	2201      	movs	r2, #1
 8006232:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006236:	4639      	mov	r1, r7
 8006238:	4413      	add	r3, r2
 800623a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800623e:	e7be      	b.n	80061be <d_print_subexpr+0x22>
 8006240:	2500      	movs	r5, #0
 8006242:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006246:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800624a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800624e:	4620      	mov	r0, r4
 8006250:	4798      	blx	r3
 8006252:	2201      	movs	r2, #1
 8006254:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006258:	4629      	mov	r1, r5
 800625a:	4413      	add	r3, r2
 800625c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006260:	e7c6      	b.n	80061f0 <d_print_subexpr+0x54>
 8006262:	bf00      	nop

08006264 <d_maybe_print_fold_expression.isra.15>:
 8006264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006268:	6852      	ldr	r2, [r2, #4]
 800626a:	6812      	ldr	r2, [r2, #0]
 800626c:	7815      	ldrb	r5, [r2, #0]
 800626e:	2d66      	cmp	r5, #102	; 0x66
 8006270:	d002      	beq.n	8006278 <d_maybe_print_fold_expression.isra.15+0x14>
 8006272:	2000      	movs	r0, #0
 8006274:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 800627e:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8006282:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8006286:	f899 3000 	ldrb.w	r3, [r9]
 800628a:	460e      	mov	r6, r1
 800628c:	2b3b      	cmp	r3, #59	; 0x3b
 800628e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006292:	bf04      	itt	eq
 8006294:	f8d9 5008 	ldreq.w	r5, [r9, #8]
 8006298:	f8d9 9004 	ldreq.w	r9, [r9, #4]
 800629c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 80062a0:	7853      	ldrb	r3, [r2, #1]
 80062a2:	bf18      	it	ne
 80062a4:	2500      	movne	r5, #0
 80062a6:	3b4c      	subs	r3, #76	; 0x4c
 80062a8:	4604      	mov	r4, r0
 80062aa:	2b26      	cmp	r3, #38	; 0x26
 80062ac:	d82b      	bhi.n	8006306 <d_maybe_print_fold_expression.isra.15+0xa2>
 80062ae:	e8df f003 	tbb	[pc, r3]
 80062b2:	2a90      	.short	0x2a90
 80062b4:	2a2a2a2a 	.word	0x2a2a2a2a
 80062b8:	2a2a2a90 	.word	0x2a2a2a90
 80062bc:	2a2a2a2a 	.word	0x2a2a2a2a
 80062c0:	2a2a2a2a 	.word	0x2a2a2a2a
 80062c4:	2a2a2a2a 	.word	0x2a2a2a2a
 80062c8:	2a2a2a2a 	.word	0x2a2a2a2a
 80062cc:	2a2a2a2a 	.word	0x2a2a2a2a
 80062d0:	2a6a2a2a 	.word	0x2a6a2a2a
 80062d4:	2a2a2a2a 	.word	0x2a2a2a2a
 80062d8:	2f          	.byte	0x2f
 80062d9:	00          	.byte	0x00
 80062da:	4642      	mov	r2, r8
 80062dc:	4631      	mov	r1, r6
 80062de:	4620      	mov	r0, r4
 80062e0:	f7ff ff1e 	bl	8006120 <d_print_expr_op>
 80062e4:	464a      	mov	r2, r9
 80062e6:	4631      	mov	r1, r6
 80062e8:	4620      	mov	r0, r4
 80062ea:	f7ff ff57 	bl	800619c <d_print_subexpr>
 80062ee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80062f2:	29ff      	cmp	r1, #255	; 0xff
 80062f4:	f000 80b0 	beq.w	8006458 <d_maybe_print_fold_expression.isra.15+0x1f4>
 80062f8:	1c4a      	adds	r2, r1, #1
 80062fa:	2329      	movs	r3, #41	; 0x29
 80062fc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006300:	5463      	strb	r3, [r4, r1]
 8006302:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006306:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 800630a:	2001      	movs	r0, #1
 800630c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006310:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006314:	29ff      	cmp	r1, #255	; 0xff
 8006316:	f000 80c2 	beq.w	800649e <d_maybe_print_fold_expression.isra.15+0x23a>
 800631a:	1c4a      	adds	r2, r1, #1
 800631c:	2328      	movs	r3, #40	; 0x28
 800631e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006322:	4620      	mov	r0, r4
 8006324:	5463      	strb	r3, [r4, r1]
 8006326:	464a      	mov	r2, r9
 8006328:	4631      	mov	r1, r6
 800632a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800632e:	4d64      	ldr	r5, [pc, #400]	; (80064c0 <d_maybe_print_fold_expression.isra.15+0x25c>)
 8006330:	f7ff ff34 	bl	800619c <d_print_subexpr>
 8006334:	4642      	mov	r2, r8
 8006336:	4631      	mov	r1, r6
 8006338:	4620      	mov	r0, r4
 800633a:	f7ff fef1 	bl	8006120 <d_print_expr_op>
 800633e:	f04f 0a00 	mov.w	sl, #0
 8006342:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006346:	f105 0804 	add.w	r8, r5, #4
 800634a:	e008      	b.n	800635e <d_maybe_print_fold_expression.isra.15+0xfa>
 800634c:	460b      	mov	r3, r1
 800634e:	3101      	adds	r1, #1
 8006350:	45a8      	cmp	r8, r5
 8006352:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006356:	54e6      	strb	r6, [r4, r3]
 8006358:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800635c:	d0d3      	beq.n	8006306 <d_maybe_print_fold_expression.isra.15+0xa2>
 800635e:	29ff      	cmp	r1, #255	; 0xff
 8006360:	f815 6b01 	ldrb.w	r6, [r5], #1
 8006364:	d1f2      	bne.n	800634c <d_maybe_print_fold_expression.isra.15+0xe8>
 8006366:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800636a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800636e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8006372:	4620      	mov	r0, r4
 8006374:	4798      	blx	r3
 8006376:	2101      	movs	r1, #1
 8006378:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800637c:	2300      	movs	r3, #0
 800637e:	440a      	add	r2, r1
 8006380:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006384:	e7e4      	b.n	8006350 <d_maybe_print_fold_expression.isra.15+0xec>
 8006386:	4d4f      	ldr	r5, [pc, #316]	; (80064c4 <d_maybe_print_fold_expression.isra.15+0x260>)
 8006388:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800638c:	f105 0b04 	add.w	fp, r5, #4
 8006390:	e009      	b.n	80063a6 <d_maybe_print_fold_expression.isra.15+0x142>
 8006392:	460b      	mov	r3, r1
 8006394:	3101      	adds	r1, #1
 8006396:	455d      	cmp	r5, fp
 8006398:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800639c:	f804 a003 	strb.w	sl, [r4, r3]
 80063a0:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80063a4:	d099      	beq.n	80062da <d_maybe_print_fold_expression.isra.15+0x76>
 80063a6:	29ff      	cmp	r1, #255	; 0xff
 80063a8:	f815 ab01 	ldrb.w	sl, [r5], #1
 80063ac:	d1f1      	bne.n	8006392 <d_maybe_print_fold_expression.isra.15+0x12e>
 80063ae:	f04f 0300 	mov.w	r3, #0
 80063b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80063b6:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80063ba:	4620      	mov	r0, r4
 80063bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80063c0:	4798      	blx	r3
 80063c2:	2101      	movs	r1, #1
 80063c4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80063c8:	2300      	movs	r3, #0
 80063ca:	440a      	add	r2, r1
 80063cc:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80063d0:	e7e1      	b.n	8006396 <d_maybe_print_fold_expression.isra.15+0x132>
 80063d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80063d6:	29ff      	cmp	r1, #255	; 0xff
 80063d8:	d04f      	beq.n	800647a <d_maybe_print_fold_expression.isra.15+0x216>
 80063da:	2328      	movs	r3, #40	; 0x28
 80063dc:	1c48      	adds	r0, r1, #1
 80063de:	464a      	mov	r2, r9
 80063e0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 80063e4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80064c8 <d_maybe_print_fold_expression.isra.15+0x264>
 80063e8:	5463      	strb	r3, [r4, r1]
 80063ea:	4620      	mov	r0, r4
 80063ec:	4631      	mov	r1, r6
 80063ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80063f2:	f7ff fed3 	bl	800619c <d_print_subexpr>
 80063f6:	4631      	mov	r1, r6
 80063f8:	4642      	mov	r2, r8
 80063fa:	4620      	mov	r0, r4
 80063fc:	f7ff fe90 	bl	8006120 <d_print_expr_op>
 8006400:	f109 0b03 	add.w	fp, r9, #3
 8006404:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006408:	e009      	b.n	800641e <d_maybe_print_fold_expression.isra.15+0x1ba>
 800640a:	460b      	mov	r3, r1
 800640c:	3101      	adds	r1, #1
 800640e:	45cb      	cmp	fp, r9
 8006410:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006414:	f804 a003 	strb.w	sl, [r4, r3]
 8006418:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800641c:	d015      	beq.n	800644a <d_maybe_print_fold_expression.isra.15+0x1e6>
 800641e:	29ff      	cmp	r1, #255	; 0xff
 8006420:	f819 ab01 	ldrb.w	sl, [r9], #1
 8006424:	d1f1      	bne.n	800640a <d_maybe_print_fold_expression.isra.15+0x1a6>
 8006426:	f04f 0300 	mov.w	r3, #0
 800642a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800642e:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006432:	4620      	mov	r0, r4
 8006434:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006438:	4798      	blx	r3
 800643a:	2101      	movs	r1, #1
 800643c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8006440:	2300      	movs	r3, #0
 8006442:	440a      	add	r2, r1
 8006444:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006448:	e7e1      	b.n	800640e <d_maybe_print_fold_expression.isra.15+0x1aa>
 800644a:	4642      	mov	r2, r8
 800644c:	4631      	mov	r1, r6
 800644e:	4620      	mov	r0, r4
 8006450:	f7ff fe66 	bl	8006120 <d_print_expr_op>
 8006454:	462a      	mov	r2, r5
 8006456:	e746      	b.n	80062e6 <d_maybe_print_fold_expression.isra.15+0x82>
 8006458:	2500      	movs	r5, #0
 800645a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800645e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006462:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006466:	4620      	mov	r0, r4
 8006468:	4798      	blx	r3
 800646a:	2201      	movs	r2, #1
 800646c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006470:	4629      	mov	r1, r5
 8006472:	4413      	add	r3, r2
 8006474:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006478:	e73f      	b.n	80062fa <d_maybe_print_fold_expression.isra.15+0x96>
 800647a:	f04f 0a00 	mov.w	sl, #0
 800647e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8006482:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
 8006486:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800648a:	4798      	blx	r3
 800648c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006490:	4651      	mov	r1, sl
 8006492:	3301      	adds	r3, #1
 8006494:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8006498:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800649c:	e79d      	b.n	80063da <d_maybe_print_fold_expression.isra.15+0x176>
 800649e:	2500      	movs	r5, #0
 80064a0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80064a4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80064a8:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 80064ac:	4798      	blx	r3
 80064ae:	2201      	movs	r2, #1
 80064b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80064b4:	4629      	mov	r1, r5
 80064b6:	4413      	add	r3, r2
 80064b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80064bc:	e72e      	b.n	800631c <d_maybe_print_fold_expression.isra.15+0xb8>
 80064be:	bf00      	nop
 80064c0:	08022d68 	.word	0x08022d68
 80064c4:	08022d60 	.word	0x08022d60
 80064c8:	08022c7c 	.word	0x08022c7c

080064cc <d_demangle_callback.constprop.17>:
 80064cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d0:	b0e7      	sub	sp, #412	; 0x19c
 80064d2:	f890 9000 	ldrb.w	r9, [r0]
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 80064dc:	4605      	mov	r5, r0
 80064de:	6079      	str	r1, [r7, #4]
 80064e0:	4616      	mov	r6, r2
 80064e2:	f000 80f3 	beq.w	80066cc <d_demangle_callback.constprop.17+0x200>
 80064e6:	2208      	movs	r2, #8
 80064e8:	49be      	ldr	r1, [pc, #760]	; (80067e4 <d_demangle_callback.constprop.17+0x318>)
 80064ea:	4628      	mov	r0, r5
 80064ec:	f011 fc39 	bl	8017d62 <strncmp>
 80064f0:	b948      	cbnz	r0, 8006506 <d_demangle_callback.constprop.17+0x3a>
 80064f2:	7a2b      	ldrb	r3, [r5, #8]
 80064f4:	2b2e      	cmp	r3, #46	; 0x2e
 80064f6:	f000 80d8 	beq.w	80066aa <d_demangle_callback.constprop.17+0x1de>
 80064fa:	2b5f      	cmp	r3, #95	; 0x5f
 80064fc:	f000 80d5 	beq.w	80066aa <d_demangle_callback.constprop.17+0x1de>
 8006500:	2b24      	cmp	r3, #36	; 0x24
 8006502:	f000 80d2 	beq.w	80066aa <d_demangle_callback.constprop.17+0x1de>
 8006506:	f04f 0800 	mov.w	r8, #0
 800650a:	4628      	mov	r0, r5
 800650c:	f000 f9e4 	bl	80068d8 <strlen>
 8006510:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 8006514:	0083      	lsls	r3, r0, #2
 8006516:	eb03 020a 	add.w	r2, r3, sl
 800651a:	0092      	lsls	r2, r2, #2
 800651c:	3208      	adds	r2, #8
 800651e:	ebad 0d02 	sub.w	sp, sp, r2
 8006522:	2400      	movs	r4, #0
 8006524:	46eb      	mov	fp, sp
 8006526:	2211      	movs	r2, #17
 8006528:	330a      	adds	r3, #10
 800652a:	f023 0307 	bic.w	r3, r3, #7
 800652e:	ebad 0d03 	sub.w	sp, sp, r3
 8006532:	63b8      	str	r0, [r7, #56]	; 0x38
 8006534:	f1b8 0f01 	cmp.w	r8, #1
 8006538:	4428      	add	r0, r5
 800653a:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 800653e:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
 8006542:	f8c7 a02c 	str.w	sl, [r7, #44]	; 0x2c
 8006546:	617d      	str	r5, [r7, #20]
 8006548:	623d      	str	r5, [r7, #32]
 800654a:	61b8      	str	r0, [r7, #24]
 800654c:	61fa      	str	r2, [r7, #28]
 800654e:	62bc      	str	r4, [r7, #40]	; 0x28
 8006550:	637c      	str	r4, [r7, #52]	; 0x34
 8006552:	63fc      	str	r4, [r7, #60]	; 0x3c
 8006554:	643c      	str	r4, [r7, #64]	; 0x40
 8006556:	647c      	str	r4, [r7, #68]	; 0x44
 8006558:	64bc      	str	r4, [r7, #72]	; 0x48
 800655a:	64fc      	str	r4, [r7, #76]	; 0x4c
 800655c:	f000 80bd 	beq.w	80066da <d_demangle_callback.constprop.17+0x20e>
 8006560:	f0c0 80d1 	bcc.w	8006706 <d_demangle_callback.constprop.17+0x23a>
 8006564:	7aea      	ldrb	r2, [r5, #11]
 8006566:	f1b8 0f02 	cmp.w	r8, #2
 800656a:	f105 030b 	add.w	r3, r5, #11
 800656e:	bf14      	ite	ne
 8006570:	f04f 0944 	movne.w	r9, #68	; 0x44
 8006574:	f04f 0943 	moveq.w	r9, #67	; 0x43
 8006578:	2a5f      	cmp	r2, #95	; 0x5f
 800657a:	623b      	str	r3, [r7, #32]
 800657c:	f000 80b6 	beq.w	80066ec <d_demangle_callback.constprop.17+0x220>
 8006580:	4618      	mov	r0, r3
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	f000 f9a8 	bl	80068d8 <strlen>
 8006588:	f1ba 0f00 	cmp.w	sl, #0
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	f340 80c3 	ble.w	8006718 <d_demangle_callback.constprop.17+0x24c>
 8006592:	2201      	movs	r2, #1
 8006594:	62ba      	str	r2, [r7, #40]	; 0x28
 8006596:	2800      	cmp	r0, #0
 8006598:	f000 80be 	beq.w	8006718 <d_demangle_callback.constprop.17+0x24c>
 800659c:	2200      	movs	r2, #0
 800659e:	f88b 2000 	strb.w	r2, [fp]
 80065a2:	465a      	mov	r2, fp
 80065a4:	f8cb 3004 	str.w	r3, [fp, #4]
 80065a8:	f8cb 0008 	str.w	r0, [fp, #8]
 80065ac:	4649      	mov	r1, r9
 80065ae:	2300      	movs	r3, #0
 80065b0:	f107 0014 	add.w	r0, r7, #20
 80065b4:	f7f9 fe3a 	bl	800022c <d_make_comp>
 80065b8:	6a3c      	ldr	r4, [r7, #32]
 80065ba:	4605      	mov	r5, r0
 80065bc:	4620      	mov	r0, r4
 80065be:	f000 f98b 	bl	80068d8 <strlen>
 80065c2:	1823      	adds	r3, r4, r0
 80065c4:	623b      	str	r3, [r7, #32]
 80065c6:	f814 9000 	ldrb.w	r9, [r4, r0]
 80065ca:	f1b9 0f00 	cmp.w	r9, #0
 80065ce:	f040 8087 	bne.w	80066e0 <d_demangle_callback.constprop.17+0x214>
 80065d2:	2d00      	cmp	r5, #0
 80065d4:	f000 8084 	beq.w	80066e0 <d_demangle_callback.constprop.17+0x214>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80065de:	462a      	mov	r2, r5
 80065e0:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 80065e4:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80065e8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 80065ec:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 80065f0:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80065f4:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80065f8:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 80065fc:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8006600:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 8006604:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 8006608:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 800660c:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 8006610:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 8006614:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 8006618:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 800661c:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 8006620:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 8006624:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 8006628:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 800662c:	f7f9 feca 	bl	80003c4 <d_count_templates_scopes>
 8006630:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
 8006634:	46e8      	mov	r8, sp
 8006636:	00d3      	lsls	r3, r2, #3
 8006638:	3308      	adds	r3, #8
 800663a:	ebad 0d03 	sub.w	sp, sp, r3
 800663e:	4668      	mov	r0, sp
 8006640:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
 8006644:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006648:	fb01 f102 	mul.w	r1, r1, r2
 800664c:	00ca      	lsls	r2, r1, #3
 800664e:	3208      	adds	r2, #8
 8006650:	ebad 0d02 	sub.w	sp, sp, r2
 8006654:	f107 060c 	add.w	r6, r7, #12
 8006658:	462a      	mov	r2, r5
 800665a:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
 800665e:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
 8006662:	4620      	mov	r0, r4
 8006664:	2111      	movs	r1, #17
 8006666:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
 800666a:	613b      	str	r3, [r7, #16]
 800666c:	60fd      	str	r5, [r7, #12]
 800666e:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
 8006672:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 8006676:	f7fc f9b9 	bl	80029ec <d_print_comp_inner>
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	4620      	mov	r0, r4
 800667e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8006682:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006686:	46c5      	mov	sp, r8
 8006688:	f804 9001 	strb.w	r9, [r4, r1]
 800668c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006690:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006694:	4798      	blx	r3
 8006696:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 800669a:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 800669e:	fab0 f080 	clz	r0, r0
 80066a2:	0940      	lsrs	r0, r0, #5
 80066a4:	46bd      	mov	sp, r7
 80066a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066aa:	7a6b      	ldrb	r3, [r5, #9]
 80066ac:	2b44      	cmp	r3, #68	; 0x44
 80066ae:	d002      	beq.n	80066b6 <d_demangle_callback.constprop.17+0x1ea>
 80066b0:	2b49      	cmp	r3, #73	; 0x49
 80066b2:	f47f af28 	bne.w	8006506 <d_demangle_callback.constprop.17+0x3a>
 80066b6:	7aaa      	ldrb	r2, [r5, #10]
 80066b8:	2a5f      	cmp	r2, #95	; 0x5f
 80066ba:	f47f af24 	bne.w	8006506 <d_demangle_callback.constprop.17+0x3a>
 80066be:	2b49      	cmp	r3, #73	; 0x49
 80066c0:	bf14      	ite	ne
 80066c2:	f04f 0803 	movne.w	r8, #3
 80066c6:	f04f 0802 	moveq.w	r8, #2
 80066ca:	e71e      	b.n	800650a <d_demangle_callback.constprop.17+0x3e>
 80066cc:	7843      	ldrb	r3, [r0, #1]
 80066ce:	2b5a      	cmp	r3, #90	; 0x5a
 80066d0:	f47f af09 	bne.w	80064e6 <d_demangle_callback.constprop.17+0x1a>
 80066d4:	f04f 0801 	mov.w	r8, #1
 80066d8:	e717      	b.n	800650a <d_demangle_callback.constprop.17+0x3e>
 80066da:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 80066de:	d01d      	beq.n	800671c <d_demangle_callback.constprop.17+0x250>
 80066e0:	2000      	movs	r0, #0
 80066e2:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 80066e6:	46bd      	mov	sp, r7
 80066e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ec:	7b2a      	ldrb	r2, [r5, #12]
 80066ee:	2a5a      	cmp	r2, #90	; 0x5a
 80066f0:	f47f af46 	bne.w	8006580 <d_demangle_callback.constprop.17+0xb4>
 80066f4:	350d      	adds	r5, #13
 80066f6:	4621      	mov	r1, r4
 80066f8:	f107 0014 	add.w	r0, r7, #20
 80066fc:	623d      	str	r5, [r7, #32]
 80066fe:	f7fb fe29 	bl	8002354 <d_encoding>
 8006702:	4602      	mov	r2, r0
 8006704:	e752      	b.n	80065ac <d_demangle_callback.constprop.17+0xe0>
 8006706:	f107 0014 	add.w	r0, r7, #20
 800670a:	f7fb f813 	bl	8001734 <d_type>
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	4605      	mov	r5, r0
 8006712:	f893 9000 	ldrb.w	r9, [r3]
 8006716:	e758      	b.n	80065ca <d_demangle_callback.constprop.17+0xfe>
 8006718:	2200      	movs	r2, #0
 800671a:	e747      	b.n	80065ac <d_demangle_callback.constprop.17+0xe0>
 800671c:	786b      	ldrb	r3, [r5, #1]
 800671e:	2b5a      	cmp	r3, #90	; 0x5a
 8006720:	d1de      	bne.n	80066e0 <d_demangle_callback.constprop.17+0x214>
 8006722:	3502      	adds	r5, #2
 8006724:	4641      	mov	r1, r8
 8006726:	f107 0014 	add.w	r0, r7, #20
 800672a:	623d      	str	r5, [r7, #32]
 800672c:	f7fb fe12 	bl	8002354 <d_encoding>
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	4605      	mov	r5, r0
 8006734:	07db      	lsls	r3, r3, #31
 8006736:	d550      	bpl.n	80067da <d_demangle_callback.constprop.17+0x30e>
 8006738:	6a38      	ldr	r0, [r7, #32]
 800673a:	f890 9000 	ldrb.w	r9, [r0]
 800673e:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8006742:	f47f af42 	bne.w	80065ca <d_demangle_callback.constprop.17+0xfe>
 8006746:	7843      	ldrb	r3, [r0, #1]
 8006748:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800674c:	2a19      	cmp	r2, #25
 800674e:	d938      	bls.n	80067c2 <d_demangle_callback.constprop.17+0x2f6>
 8006750:	2b5f      	cmp	r3, #95	; 0x5f
 8006752:	d036      	beq.n	80067c2 <d_demangle_callback.constprop.17+0x2f6>
 8006754:	3b30      	subs	r3, #48	; 0x30
 8006756:	2b09      	cmp	r3, #9
 8006758:	d83f      	bhi.n	80067da <d_demangle_callback.constprop.17+0x30e>
 800675a:	4602      	mov	r2, r0
 800675c:	7803      	ldrb	r3, [r0, #0]
 800675e:	2b2e      	cmp	r3, #46	; 0x2e
 8006760:	d111      	bne.n	8006786 <d_demangle_callback.constprop.17+0x2ba>
 8006762:	7853      	ldrb	r3, [r2, #1]
 8006764:	3b30      	subs	r3, #48	; 0x30
 8006766:	2b09      	cmp	r3, #9
 8006768:	d80d      	bhi.n	8006786 <d_demangle_callback.constprop.17+0x2ba>
 800676a:	7893      	ldrb	r3, [r2, #2]
 800676c:	3202      	adds	r2, #2
 800676e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006772:	2909      	cmp	r1, #9
 8006774:	d8f3      	bhi.n	800675e <d_demangle_callback.constprop.17+0x292>
 8006776:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800677a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800677e:	2909      	cmp	r1, #9
 8006780:	d9f9      	bls.n	8006776 <d_demangle_callback.constprop.17+0x2aa>
 8006782:	2b2e      	cmp	r3, #46	; 0x2e
 8006784:	d0ed      	beq.n	8006762 <d_demangle_callback.constprop.17+0x296>
 8006786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	623a      	str	r2, [r7, #32]
 800678c:	4299      	cmp	r1, r3
 800678e:	da16      	bge.n	80067be <d_demangle_callback.constprop.17+0x2f2>
 8006790:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
 8006794:	1c4b      	adds	r3, r1, #1
 8006796:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800679a:	62bb      	str	r3, [r7, #40]	; 0x28
 800679c:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
 80067a0:	d00d      	beq.n	80067be <d_demangle_callback.constprop.17+0x2f2>
 80067a2:	1a12      	subs	r2, r2, r0
 80067a4:	d00b      	beq.n	80067be <d_demangle_callback.constprop.17+0x2f2>
 80067a6:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
 80067aa:	6058      	str	r0, [r3, #4]
 80067ac:	609a      	str	r2, [r3, #8]
 80067ae:	462a      	mov	r2, r5
 80067b0:	214d      	movs	r1, #77	; 0x4d
 80067b2:	f107 0014 	add.w	r0, r7, #20
 80067b6:	f7f9 fd39 	bl	800022c <d_make_comp>
 80067ba:	4605      	mov	r5, r0
 80067bc:	e7bc      	b.n	8006738 <d_demangle_callback.constprop.17+0x26c>
 80067be:	2300      	movs	r3, #0
 80067c0:	e7f5      	b.n	80067ae <d_demangle_callback.constprop.17+0x2e2>
 80067c2:	1c81      	adds	r1, r0, #2
 80067c4:	460a      	mov	r2, r1
 80067c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067ca:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 80067ce:	f1be 0f19 	cmp.w	lr, #25
 80067d2:	d9f7      	bls.n	80067c4 <d_demangle_callback.constprop.17+0x2f8>
 80067d4:	2b5f      	cmp	r3, #95	; 0x5f
 80067d6:	d0f5      	beq.n	80067c4 <d_demangle_callback.constprop.17+0x2f8>
 80067d8:	e7c1      	b.n	800675e <d_demangle_callback.constprop.17+0x292>
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	f893 9000 	ldrb.w	r9, [r3]
 80067e0:	e6f3      	b.n	80065ca <d_demangle_callback.constprop.17+0xfe>
 80067e2:	bf00      	nop
 80067e4:	08022a0c 	.word	0x08022a0c

080067e8 <__cxa_demangle>:
 80067e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	b378      	cbz	r0, 8006850 <__cxa_demangle+0x68>
 80067f0:	b101      	cbz	r1, 80067f4 <__cxa_demangle+0xc>
 80067f2:	b36a      	cbz	r2, 8006850 <__cxa_demangle+0x68>
 80067f4:	2400      	movs	r4, #0
 80067f6:	4616      	mov	r6, r2
 80067f8:	460d      	mov	r5, r1
 80067fa:	466a      	mov	r2, sp
 80067fc:	4927      	ldr	r1, [pc, #156]	; (800689c <__cxa_demangle+0xb4>)
 80067fe:	461f      	mov	r7, r3
 8006800:	9400      	str	r4, [sp, #0]
 8006802:	9401      	str	r4, [sp, #4]
 8006804:	9402      	str	r4, [sp, #8]
 8006806:	9403      	str	r4, [sp, #12]
 8006808:	f7ff fe60 	bl	80064cc <d_demangle_callback.constprop.17>
 800680c:	2800      	cmp	r0, #0
 800680e:	d03e      	beq.n	800688e <__cxa_demangle+0xa6>
 8006810:	9b03      	ldr	r3, [sp, #12]
 8006812:	b1d3      	cbz	r3, 800684a <__cxa_demangle+0x62>
 8006814:	f04f 0801 	mov.w	r8, #1
 8006818:	9c00      	ldr	r4, [sp, #0]
 800681a:	b35c      	cbz	r4, 8006874 <__cxa_demangle+0x8c>
 800681c:	b33d      	cbz	r5, 800686e <__cxa_demangle+0x86>
 800681e:	4620      	mov	r0, r4
 8006820:	f000 f85a 	bl	80068d8 <strlen>
 8006824:	6833      	ldr	r3, [r6, #0]
 8006826:	4298      	cmp	r0, r3
 8006828:	d21b      	bcs.n	8006862 <__cxa_demangle+0x7a>
 800682a:	1c42      	adds	r2, r0, #1
 800682c:	4621      	mov	r1, r4
 800682e:	4628      	mov	r0, r5
 8006830:	f010 fd3f 	bl	80172b2 <memcpy>
 8006834:	4620      	mov	r0, r4
 8006836:	f010 fb0b 	bl	8016e50 <free>
 800683a:	462c      	mov	r4, r5
 800683c:	b10f      	cbz	r7, 8006842 <__cxa_demangle+0x5a>
 800683e:	2300      	movs	r3, #0
 8006840:	603b      	str	r3, [r7, #0]
 8006842:	4620      	mov	r0, r4
 8006844:	b004      	add	sp, #16
 8006846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800684a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800684e:	e7e3      	b.n	8006818 <__cxa_demangle+0x30>
 8006850:	b313      	cbz	r3, 8006898 <__cxa_demangle+0xb0>
 8006852:	2400      	movs	r4, #0
 8006854:	f06f 0202 	mvn.w	r2, #2
 8006858:	4620      	mov	r0, r4
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	b004      	add	sp, #16
 800685e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006862:	4628      	mov	r0, r5
 8006864:	f010 faf4 	bl	8016e50 <free>
 8006868:	f8c6 8000 	str.w	r8, [r6]
 800686c:	e7e6      	b.n	800683c <__cxa_demangle+0x54>
 800686e:	2e00      	cmp	r6, #0
 8006870:	d1fa      	bne.n	8006868 <__cxa_demangle+0x80>
 8006872:	e7e3      	b.n	800683c <__cxa_demangle+0x54>
 8006874:	b187      	cbz	r7, 8006898 <__cxa_demangle+0xb0>
 8006876:	f1b8 0f01 	cmp.w	r8, #1
 800687a:	d004      	beq.n	8006886 <__cxa_demangle+0x9e>
 800687c:	f06f 0301 	mvn.w	r3, #1
 8006880:	2400      	movs	r4, #0
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	e7dd      	b.n	8006842 <__cxa_demangle+0x5a>
 8006886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	e7d9      	b.n	8006842 <__cxa_demangle+0x5a>
 800688e:	9800      	ldr	r0, [sp, #0]
 8006890:	f010 fade 	bl	8016e50 <free>
 8006894:	2f00      	cmp	r7, #0
 8006896:	d1f1      	bne.n	800687c <__cxa_demangle+0x94>
 8006898:	2400      	movs	r4, #0
 800689a:	e7d2      	b.n	8006842 <__cxa_demangle+0x5a>
 800689c:	0800094d 	.word	0x0800094d

080068a0 <__gcclibcxx_demangle_callback>:
 80068a0:	b160      	cbz	r0, 80068bc <__gcclibcxx_demangle_callback+0x1c>
 80068a2:	b508      	push	{r3, lr}
 80068a4:	b139      	cbz	r1, 80068b6 <__gcclibcxx_demangle_callback+0x16>
 80068a6:	f7ff fe11 	bl	80064cc <d_demangle_callback.constprop.17>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	bf0c      	ite	eq
 80068ae:	f06f 0001 	mvneq.w	r0, #1
 80068b2:	2000      	movne	r0, #0
 80068b4:	bd08      	pop	{r3, pc}
 80068b6:	f06f 0002 	mvn.w	r0, #2
 80068ba:	bd08      	pop	{r3, pc}
 80068bc:	f06f 0002 	mvn.w	r0, #2
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop

080068c4 <strcmp>:
 80068c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068cc:	2a01      	cmp	r2, #1
 80068ce:	bf28      	it	cs
 80068d0:	429a      	cmpcs	r2, r3
 80068d2:	d0f7      	beq.n	80068c4 <strcmp>
 80068d4:	1ad0      	subs	r0, r2, r3
 80068d6:	4770      	bx	lr

080068d8 <strlen>:
 80068d8:	4603      	mov	r3, r0
 80068da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068de:	2a00      	cmp	r2, #0
 80068e0:	d1fb      	bne.n	80068da <strlen+0x2>
 80068e2:	1a18      	subs	r0, r3, r0
 80068e4:	3801      	subs	r0, #1
 80068e6:	4770      	bx	lr

080068e8 <__aeabi_drsub>:
 80068e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80068ec:	e002      	b.n	80068f4 <__adddf3>
 80068ee:	bf00      	nop

080068f0 <__aeabi_dsub>:
 80068f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080068f4 <__adddf3>:
 80068f4:	b530      	push	{r4, r5, lr}
 80068f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80068fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80068fe:	ea94 0f05 	teq	r4, r5
 8006902:	bf08      	it	eq
 8006904:	ea90 0f02 	teqeq	r0, r2
 8006908:	bf1f      	itttt	ne
 800690a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800690e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006912:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006916:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800691a:	f000 80e2 	beq.w	8006ae2 <__adddf3+0x1ee>
 800691e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006922:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006926:	bfb8      	it	lt
 8006928:	426d      	neglt	r5, r5
 800692a:	dd0c      	ble.n	8006946 <__adddf3+0x52>
 800692c:	442c      	add	r4, r5
 800692e:	ea80 0202 	eor.w	r2, r0, r2
 8006932:	ea81 0303 	eor.w	r3, r1, r3
 8006936:	ea82 0000 	eor.w	r0, r2, r0
 800693a:	ea83 0101 	eor.w	r1, r3, r1
 800693e:	ea80 0202 	eor.w	r2, r0, r2
 8006942:	ea81 0303 	eor.w	r3, r1, r3
 8006946:	2d36      	cmp	r5, #54	; 0x36
 8006948:	bf88      	it	hi
 800694a:	bd30      	pophi	{r4, r5, pc}
 800694c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006950:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006954:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006958:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800695c:	d002      	beq.n	8006964 <__adddf3+0x70>
 800695e:	4240      	negs	r0, r0
 8006960:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006964:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006968:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800696c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006970:	d002      	beq.n	8006978 <__adddf3+0x84>
 8006972:	4252      	negs	r2, r2
 8006974:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006978:	ea94 0f05 	teq	r4, r5
 800697c:	f000 80a7 	beq.w	8006ace <__adddf3+0x1da>
 8006980:	f1a4 0401 	sub.w	r4, r4, #1
 8006984:	f1d5 0e20 	rsbs	lr, r5, #32
 8006988:	db0d      	blt.n	80069a6 <__adddf3+0xb2>
 800698a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800698e:	fa22 f205 	lsr.w	r2, r2, r5
 8006992:	1880      	adds	r0, r0, r2
 8006994:	f141 0100 	adc.w	r1, r1, #0
 8006998:	fa03 f20e 	lsl.w	r2, r3, lr
 800699c:	1880      	adds	r0, r0, r2
 800699e:	fa43 f305 	asr.w	r3, r3, r5
 80069a2:	4159      	adcs	r1, r3
 80069a4:	e00e      	b.n	80069c4 <__adddf3+0xd0>
 80069a6:	f1a5 0520 	sub.w	r5, r5, #32
 80069aa:	f10e 0e20 	add.w	lr, lr, #32
 80069ae:	2a01      	cmp	r2, #1
 80069b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80069b4:	bf28      	it	cs
 80069b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80069ba:	fa43 f305 	asr.w	r3, r3, r5
 80069be:	18c0      	adds	r0, r0, r3
 80069c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80069c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80069c8:	d507      	bpl.n	80069da <__adddf3+0xe6>
 80069ca:	f04f 0e00 	mov.w	lr, #0
 80069ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80069d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80069d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80069da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80069de:	d31b      	bcc.n	8006a18 <__adddf3+0x124>
 80069e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80069e4:	d30c      	bcc.n	8006a00 <__adddf3+0x10c>
 80069e6:	0849      	lsrs	r1, r1, #1
 80069e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80069ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80069f0:	f104 0401 	add.w	r4, r4, #1
 80069f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80069f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80069fc:	f080 809a 	bcs.w	8006b34 <__adddf3+0x240>
 8006a00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006a04:	bf08      	it	eq
 8006a06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006a0a:	f150 0000 	adcs.w	r0, r0, #0
 8006a0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006a12:	ea41 0105 	orr.w	r1, r1, r5
 8006a16:	bd30      	pop	{r4, r5, pc}
 8006a18:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006a1c:	4140      	adcs	r0, r0
 8006a1e:	eb41 0101 	adc.w	r1, r1, r1
 8006a22:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a26:	f1a4 0401 	sub.w	r4, r4, #1
 8006a2a:	d1e9      	bne.n	8006a00 <__adddf3+0x10c>
 8006a2c:	f091 0f00 	teq	r1, #0
 8006a30:	bf04      	itt	eq
 8006a32:	4601      	moveq	r1, r0
 8006a34:	2000      	moveq	r0, #0
 8006a36:	fab1 f381 	clz	r3, r1
 8006a3a:	bf08      	it	eq
 8006a3c:	3320      	addeq	r3, #32
 8006a3e:	f1a3 030b 	sub.w	r3, r3, #11
 8006a42:	f1b3 0220 	subs.w	r2, r3, #32
 8006a46:	da0c      	bge.n	8006a62 <__adddf3+0x16e>
 8006a48:	320c      	adds	r2, #12
 8006a4a:	dd08      	ble.n	8006a5e <__adddf3+0x16a>
 8006a4c:	f102 0c14 	add.w	ip, r2, #20
 8006a50:	f1c2 020c 	rsb	r2, r2, #12
 8006a54:	fa01 f00c 	lsl.w	r0, r1, ip
 8006a58:	fa21 f102 	lsr.w	r1, r1, r2
 8006a5c:	e00c      	b.n	8006a78 <__adddf3+0x184>
 8006a5e:	f102 0214 	add.w	r2, r2, #20
 8006a62:	bfd8      	it	le
 8006a64:	f1c2 0c20 	rsble	ip, r2, #32
 8006a68:	fa01 f102 	lsl.w	r1, r1, r2
 8006a6c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006a70:	bfdc      	itt	le
 8006a72:	ea41 010c 	orrle.w	r1, r1, ip
 8006a76:	4090      	lslle	r0, r2
 8006a78:	1ae4      	subs	r4, r4, r3
 8006a7a:	bfa2      	ittt	ge
 8006a7c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006a80:	4329      	orrge	r1, r5
 8006a82:	bd30      	popge	{r4, r5, pc}
 8006a84:	ea6f 0404 	mvn.w	r4, r4
 8006a88:	3c1f      	subs	r4, #31
 8006a8a:	da1c      	bge.n	8006ac6 <__adddf3+0x1d2>
 8006a8c:	340c      	adds	r4, #12
 8006a8e:	dc0e      	bgt.n	8006aae <__adddf3+0x1ba>
 8006a90:	f104 0414 	add.w	r4, r4, #20
 8006a94:	f1c4 0220 	rsb	r2, r4, #32
 8006a98:	fa20 f004 	lsr.w	r0, r0, r4
 8006a9c:	fa01 f302 	lsl.w	r3, r1, r2
 8006aa0:	ea40 0003 	orr.w	r0, r0, r3
 8006aa4:	fa21 f304 	lsr.w	r3, r1, r4
 8006aa8:	ea45 0103 	orr.w	r1, r5, r3
 8006aac:	bd30      	pop	{r4, r5, pc}
 8006aae:	f1c4 040c 	rsb	r4, r4, #12
 8006ab2:	f1c4 0220 	rsb	r2, r4, #32
 8006ab6:	fa20 f002 	lsr.w	r0, r0, r2
 8006aba:	fa01 f304 	lsl.w	r3, r1, r4
 8006abe:	ea40 0003 	orr.w	r0, r0, r3
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	bd30      	pop	{r4, r5, pc}
 8006ac6:	fa21 f004 	lsr.w	r0, r1, r4
 8006aca:	4629      	mov	r1, r5
 8006acc:	bd30      	pop	{r4, r5, pc}
 8006ace:	f094 0f00 	teq	r4, #0
 8006ad2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006ad6:	bf06      	itte	eq
 8006ad8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006adc:	3401      	addeq	r4, #1
 8006ade:	3d01      	subne	r5, #1
 8006ae0:	e74e      	b.n	8006980 <__adddf3+0x8c>
 8006ae2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006ae6:	bf18      	it	ne
 8006ae8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006aec:	d029      	beq.n	8006b42 <__adddf3+0x24e>
 8006aee:	ea94 0f05 	teq	r4, r5
 8006af2:	bf08      	it	eq
 8006af4:	ea90 0f02 	teqeq	r0, r2
 8006af8:	d005      	beq.n	8006b06 <__adddf3+0x212>
 8006afa:	ea54 0c00 	orrs.w	ip, r4, r0
 8006afe:	bf04      	itt	eq
 8006b00:	4619      	moveq	r1, r3
 8006b02:	4610      	moveq	r0, r2
 8006b04:	bd30      	pop	{r4, r5, pc}
 8006b06:	ea91 0f03 	teq	r1, r3
 8006b0a:	bf1e      	ittt	ne
 8006b0c:	2100      	movne	r1, #0
 8006b0e:	2000      	movne	r0, #0
 8006b10:	bd30      	popne	{r4, r5, pc}
 8006b12:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006b16:	d105      	bne.n	8006b24 <__adddf3+0x230>
 8006b18:	0040      	lsls	r0, r0, #1
 8006b1a:	4149      	adcs	r1, r1
 8006b1c:	bf28      	it	cs
 8006b1e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006b22:	bd30      	pop	{r4, r5, pc}
 8006b24:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006b28:	bf3c      	itt	cc
 8006b2a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006b2e:	bd30      	popcc	{r4, r5, pc}
 8006b30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006b34:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006b38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b3c:	f04f 0000 	mov.w	r0, #0
 8006b40:	bd30      	pop	{r4, r5, pc}
 8006b42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006b46:	bf1a      	itte	ne
 8006b48:	4619      	movne	r1, r3
 8006b4a:	4610      	movne	r0, r2
 8006b4c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006b50:	bf1c      	itt	ne
 8006b52:	460b      	movne	r3, r1
 8006b54:	4602      	movne	r2, r0
 8006b56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006b5a:	bf06      	itte	eq
 8006b5c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006b60:	ea91 0f03 	teqeq	r1, r3
 8006b64:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006b68:	bd30      	pop	{r4, r5, pc}
 8006b6a:	bf00      	nop

08006b6c <__aeabi_ui2d>:
 8006b6c:	f090 0f00 	teq	r0, #0
 8006b70:	bf04      	itt	eq
 8006b72:	2100      	moveq	r1, #0
 8006b74:	4770      	bxeq	lr
 8006b76:	b530      	push	{r4, r5, lr}
 8006b78:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006b7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006b80:	f04f 0500 	mov.w	r5, #0
 8006b84:	f04f 0100 	mov.w	r1, #0
 8006b88:	e750      	b.n	8006a2c <__adddf3+0x138>
 8006b8a:	bf00      	nop

08006b8c <__aeabi_i2d>:
 8006b8c:	f090 0f00 	teq	r0, #0
 8006b90:	bf04      	itt	eq
 8006b92:	2100      	moveq	r1, #0
 8006b94:	4770      	bxeq	lr
 8006b96:	b530      	push	{r4, r5, lr}
 8006b98:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006b9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006ba0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006ba4:	bf48      	it	mi
 8006ba6:	4240      	negmi	r0, r0
 8006ba8:	f04f 0100 	mov.w	r1, #0
 8006bac:	e73e      	b.n	8006a2c <__adddf3+0x138>
 8006bae:	bf00      	nop

08006bb0 <__aeabi_f2d>:
 8006bb0:	0042      	lsls	r2, r0, #1
 8006bb2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8006bba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006bbe:	bf1f      	itttt	ne
 8006bc0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006bc4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006bc8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006bcc:	4770      	bxne	lr
 8006bce:	f092 0f00 	teq	r2, #0
 8006bd2:	bf14      	ite	ne
 8006bd4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006bd8:	4770      	bxeq	lr
 8006bda:	b530      	push	{r4, r5, lr}
 8006bdc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006be0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006be4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006be8:	e720      	b.n	8006a2c <__adddf3+0x138>
 8006bea:	bf00      	nop

08006bec <__aeabi_ul2d>:
 8006bec:	ea50 0201 	orrs.w	r2, r0, r1
 8006bf0:	bf08      	it	eq
 8006bf2:	4770      	bxeq	lr
 8006bf4:	b530      	push	{r4, r5, lr}
 8006bf6:	f04f 0500 	mov.w	r5, #0
 8006bfa:	e00a      	b.n	8006c12 <__aeabi_l2d+0x16>

08006bfc <__aeabi_l2d>:
 8006bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8006c00:	bf08      	it	eq
 8006c02:	4770      	bxeq	lr
 8006c04:	b530      	push	{r4, r5, lr}
 8006c06:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006c0a:	d502      	bpl.n	8006c12 <__aeabi_l2d+0x16>
 8006c0c:	4240      	negs	r0, r0
 8006c0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006c12:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006c16:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006c1a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006c1e:	f43f aedc 	beq.w	80069da <__adddf3+0xe6>
 8006c22:	f04f 0203 	mov.w	r2, #3
 8006c26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006c2a:	bf18      	it	ne
 8006c2c:	3203      	addne	r2, #3
 8006c2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006c32:	bf18      	it	ne
 8006c34:	3203      	addne	r2, #3
 8006c36:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006c3a:	f1c2 0320 	rsb	r3, r2, #32
 8006c3e:	fa00 fc03 	lsl.w	ip, r0, r3
 8006c42:	fa20 f002 	lsr.w	r0, r0, r2
 8006c46:	fa01 fe03 	lsl.w	lr, r1, r3
 8006c4a:	ea40 000e 	orr.w	r0, r0, lr
 8006c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8006c52:	4414      	add	r4, r2
 8006c54:	e6c1      	b.n	80069da <__adddf3+0xe6>
 8006c56:	bf00      	nop

08006c58 <__aeabi_dmul>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006c5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006c62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006c66:	bf1d      	ittte	ne
 8006c68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006c6c:	ea94 0f0c 	teqne	r4, ip
 8006c70:	ea95 0f0c 	teqne	r5, ip
 8006c74:	f000 f8de 	bleq	8006e34 <__aeabi_dmul+0x1dc>
 8006c78:	442c      	add	r4, r5
 8006c7a:	ea81 0603 	eor.w	r6, r1, r3
 8006c7e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006c82:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006c86:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006c8a:	bf18      	it	ne
 8006c8c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006c90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006c94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c98:	d038      	beq.n	8006d0c <__aeabi_dmul+0xb4>
 8006c9a:	fba0 ce02 	umull	ip, lr, r0, r2
 8006c9e:	f04f 0500 	mov.w	r5, #0
 8006ca2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006ca6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006caa:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006cae:	f04f 0600 	mov.w	r6, #0
 8006cb2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006cb6:	f09c 0f00 	teq	ip, #0
 8006cba:	bf18      	it	ne
 8006cbc:	f04e 0e01 	orrne.w	lr, lr, #1
 8006cc0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006cc4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006cc8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006ccc:	d204      	bcs.n	8006cd8 <__aeabi_dmul+0x80>
 8006cce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006cd2:	416d      	adcs	r5, r5
 8006cd4:	eb46 0606 	adc.w	r6, r6, r6
 8006cd8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006cdc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006ce0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006ce4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006ce8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006cec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006cf0:	bf88      	it	hi
 8006cf2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006cf6:	d81e      	bhi.n	8006d36 <__aeabi_dmul+0xde>
 8006cf8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006cfc:	bf08      	it	eq
 8006cfe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006d02:	f150 0000 	adcs.w	r0, r0, #0
 8006d06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006d10:	ea46 0101 	orr.w	r1, r6, r1
 8006d14:	ea40 0002 	orr.w	r0, r0, r2
 8006d18:	ea81 0103 	eor.w	r1, r1, r3
 8006d1c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006d20:	bfc2      	ittt	gt
 8006d22:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006d26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006d2a:	bd70      	popgt	{r4, r5, r6, pc}
 8006d2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006d30:	f04f 0e00 	mov.w	lr, #0
 8006d34:	3c01      	subs	r4, #1
 8006d36:	f300 80ab 	bgt.w	8006e90 <__aeabi_dmul+0x238>
 8006d3a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8006d3e:	bfde      	ittt	le
 8006d40:	2000      	movle	r0, #0
 8006d42:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006d46:	bd70      	pople	{r4, r5, r6, pc}
 8006d48:	f1c4 0400 	rsb	r4, r4, #0
 8006d4c:	3c20      	subs	r4, #32
 8006d4e:	da35      	bge.n	8006dbc <__aeabi_dmul+0x164>
 8006d50:	340c      	adds	r4, #12
 8006d52:	dc1b      	bgt.n	8006d8c <__aeabi_dmul+0x134>
 8006d54:	f104 0414 	add.w	r4, r4, #20
 8006d58:	f1c4 0520 	rsb	r5, r4, #32
 8006d5c:	fa00 f305 	lsl.w	r3, r0, r5
 8006d60:	fa20 f004 	lsr.w	r0, r0, r4
 8006d64:	fa01 f205 	lsl.w	r2, r1, r5
 8006d68:	ea40 0002 	orr.w	r0, r0, r2
 8006d6c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006d70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006d74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006d78:	fa21 f604 	lsr.w	r6, r1, r4
 8006d7c:	eb42 0106 	adc.w	r1, r2, r6
 8006d80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006d84:	bf08      	it	eq
 8006d86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006d8a:	bd70      	pop	{r4, r5, r6, pc}
 8006d8c:	f1c4 040c 	rsb	r4, r4, #12
 8006d90:	f1c4 0520 	rsb	r5, r4, #32
 8006d94:	fa00 f304 	lsl.w	r3, r0, r4
 8006d98:	fa20 f005 	lsr.w	r0, r0, r5
 8006d9c:	fa01 f204 	lsl.w	r2, r1, r4
 8006da0:	ea40 0002 	orr.w	r0, r0, r2
 8006da4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006da8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006dac:	f141 0100 	adc.w	r1, r1, #0
 8006db0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006db4:	bf08      	it	eq
 8006db6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006dba:	bd70      	pop	{r4, r5, r6, pc}
 8006dbc:	f1c4 0520 	rsb	r5, r4, #32
 8006dc0:	fa00 f205 	lsl.w	r2, r0, r5
 8006dc4:	ea4e 0e02 	orr.w	lr, lr, r2
 8006dc8:	fa20 f304 	lsr.w	r3, r0, r4
 8006dcc:	fa01 f205 	lsl.w	r2, r1, r5
 8006dd0:	ea43 0302 	orr.w	r3, r3, r2
 8006dd4:	fa21 f004 	lsr.w	r0, r1, r4
 8006dd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006ddc:	fa21 f204 	lsr.w	r2, r1, r4
 8006de0:	ea20 0002 	bic.w	r0, r0, r2
 8006de4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006de8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006dec:	bf08      	it	eq
 8006dee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006df2:	bd70      	pop	{r4, r5, r6, pc}
 8006df4:	f094 0f00 	teq	r4, #0
 8006df8:	d10f      	bne.n	8006e1a <__aeabi_dmul+0x1c2>
 8006dfa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006dfe:	0040      	lsls	r0, r0, #1
 8006e00:	eb41 0101 	adc.w	r1, r1, r1
 8006e04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006e08:	bf08      	it	eq
 8006e0a:	3c01      	subeq	r4, #1
 8006e0c:	d0f7      	beq.n	8006dfe <__aeabi_dmul+0x1a6>
 8006e0e:	ea41 0106 	orr.w	r1, r1, r6
 8006e12:	f095 0f00 	teq	r5, #0
 8006e16:	bf18      	it	ne
 8006e18:	4770      	bxne	lr
 8006e1a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8006e1e:	0052      	lsls	r2, r2, #1
 8006e20:	eb43 0303 	adc.w	r3, r3, r3
 8006e24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006e28:	bf08      	it	eq
 8006e2a:	3d01      	subeq	r5, #1
 8006e2c:	d0f7      	beq.n	8006e1e <__aeabi_dmul+0x1c6>
 8006e2e:	ea43 0306 	orr.w	r3, r3, r6
 8006e32:	4770      	bx	lr
 8006e34:	ea94 0f0c 	teq	r4, ip
 8006e38:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006e3c:	bf18      	it	ne
 8006e3e:	ea95 0f0c 	teqne	r5, ip
 8006e42:	d00c      	beq.n	8006e5e <__aeabi_dmul+0x206>
 8006e44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006e48:	bf18      	it	ne
 8006e4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006e4e:	d1d1      	bne.n	8006df4 <__aeabi_dmul+0x19c>
 8006e50:	ea81 0103 	eor.w	r1, r1, r3
 8006e54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006e58:	f04f 0000 	mov.w	r0, #0
 8006e5c:	bd70      	pop	{r4, r5, r6, pc}
 8006e5e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006e62:	bf06      	itte	eq
 8006e64:	4610      	moveq	r0, r2
 8006e66:	4619      	moveq	r1, r3
 8006e68:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006e6c:	d019      	beq.n	8006ea2 <__aeabi_dmul+0x24a>
 8006e6e:	ea94 0f0c 	teq	r4, ip
 8006e72:	d102      	bne.n	8006e7a <__aeabi_dmul+0x222>
 8006e74:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006e78:	d113      	bne.n	8006ea2 <__aeabi_dmul+0x24a>
 8006e7a:	ea95 0f0c 	teq	r5, ip
 8006e7e:	d105      	bne.n	8006e8c <__aeabi_dmul+0x234>
 8006e80:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006e84:	bf1c      	itt	ne
 8006e86:	4610      	movne	r0, r2
 8006e88:	4619      	movne	r1, r3
 8006e8a:	d10a      	bne.n	8006ea2 <__aeabi_dmul+0x24a>
 8006e8c:	ea81 0103 	eor.w	r1, r1, r3
 8006e90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006e94:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006e98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e9c:	f04f 0000 	mov.w	r0, #0
 8006ea0:	bd70      	pop	{r4, r5, r6, pc}
 8006ea2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006ea6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}

08006eac <__aeabi_ddiv>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006eb2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006eb6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006eba:	bf1d      	ittte	ne
 8006ebc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006ec0:	ea94 0f0c 	teqne	r4, ip
 8006ec4:	ea95 0f0c 	teqne	r5, ip
 8006ec8:	f000 f8a7 	bleq	800701a <__aeabi_ddiv+0x16e>
 8006ecc:	eba4 0405 	sub.w	r4, r4, r5
 8006ed0:	ea81 0e03 	eor.w	lr, r1, r3
 8006ed4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006ed8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006edc:	f000 8088 	beq.w	8006ff0 <__aeabi_ddiv+0x144>
 8006ee0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006ee4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006ee8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006eec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006ef0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006ef4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006ef8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006efc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006f00:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006f04:	429d      	cmp	r5, r3
 8006f06:	bf08      	it	eq
 8006f08:	4296      	cmpeq	r6, r2
 8006f0a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8006f0e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8006f12:	d202      	bcs.n	8006f1a <__aeabi_ddiv+0x6e>
 8006f14:	085b      	lsrs	r3, r3, #1
 8006f16:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f1a:	1ab6      	subs	r6, r6, r2
 8006f1c:	eb65 0503 	sbc.w	r5, r5, r3
 8006f20:	085b      	lsrs	r3, r3, #1
 8006f22:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006f2a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006f2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006f32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006f36:	bf22      	ittt	cs
 8006f38:	1ab6      	subcs	r6, r6, r2
 8006f3a:	4675      	movcs	r5, lr
 8006f3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8006f40:	085b      	lsrs	r3, r3, #1
 8006f42:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f46:	ebb6 0e02 	subs.w	lr, r6, r2
 8006f4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006f4e:	bf22      	ittt	cs
 8006f50:	1ab6      	subcs	r6, r6, r2
 8006f52:	4675      	movcs	r5, lr
 8006f54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006f58:	085b      	lsrs	r3, r3, #1
 8006f5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006f62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006f66:	bf22      	ittt	cs
 8006f68:	1ab6      	subcs	r6, r6, r2
 8006f6a:	4675      	movcs	r5, lr
 8006f6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006f70:	085b      	lsrs	r3, r3, #1
 8006f72:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f76:	ebb6 0e02 	subs.w	lr, r6, r2
 8006f7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006f7e:	bf22      	ittt	cs
 8006f80:	1ab6      	subcs	r6, r6, r2
 8006f82:	4675      	movcs	r5, lr
 8006f84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006f88:	ea55 0e06 	orrs.w	lr, r5, r6
 8006f8c:	d018      	beq.n	8006fc0 <__aeabi_ddiv+0x114>
 8006f8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006f92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006f96:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006f9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006f9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006fa2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006fa6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006faa:	d1c0      	bne.n	8006f2e <__aeabi_ddiv+0x82>
 8006fac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006fb0:	d10b      	bne.n	8006fca <__aeabi_ddiv+0x11e>
 8006fb2:	ea41 0100 	orr.w	r1, r1, r0
 8006fb6:	f04f 0000 	mov.w	r0, #0
 8006fba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006fbe:	e7b6      	b.n	8006f2e <__aeabi_ddiv+0x82>
 8006fc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006fc4:	bf04      	itt	eq
 8006fc6:	4301      	orreq	r1, r0
 8006fc8:	2000      	moveq	r0, #0
 8006fca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006fce:	bf88      	it	hi
 8006fd0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006fd4:	f63f aeaf 	bhi.w	8006d36 <__aeabi_dmul+0xde>
 8006fd8:	ebb5 0c03 	subs.w	ip, r5, r3
 8006fdc:	bf04      	itt	eq
 8006fde:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006fe2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006fe6:	f150 0000 	adcs.w	r0, r0, #0
 8006fea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006fee:	bd70      	pop	{r4, r5, r6, pc}
 8006ff0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006ff4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006ff8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006ffc:	bfc2      	ittt	gt
 8006ffe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007002:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007006:	bd70      	popgt	{r4, r5, r6, pc}
 8007008:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800700c:	f04f 0e00 	mov.w	lr, #0
 8007010:	3c01      	subs	r4, #1
 8007012:	e690      	b.n	8006d36 <__aeabi_dmul+0xde>
 8007014:	ea45 0e06 	orr.w	lr, r5, r6
 8007018:	e68d      	b.n	8006d36 <__aeabi_dmul+0xde>
 800701a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800701e:	ea94 0f0c 	teq	r4, ip
 8007022:	bf08      	it	eq
 8007024:	ea95 0f0c 	teqeq	r5, ip
 8007028:	f43f af3b 	beq.w	8006ea2 <__aeabi_dmul+0x24a>
 800702c:	ea94 0f0c 	teq	r4, ip
 8007030:	d10a      	bne.n	8007048 <__aeabi_ddiv+0x19c>
 8007032:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007036:	f47f af34 	bne.w	8006ea2 <__aeabi_dmul+0x24a>
 800703a:	ea95 0f0c 	teq	r5, ip
 800703e:	f47f af25 	bne.w	8006e8c <__aeabi_dmul+0x234>
 8007042:	4610      	mov	r0, r2
 8007044:	4619      	mov	r1, r3
 8007046:	e72c      	b.n	8006ea2 <__aeabi_dmul+0x24a>
 8007048:	ea95 0f0c 	teq	r5, ip
 800704c:	d106      	bne.n	800705c <__aeabi_ddiv+0x1b0>
 800704e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007052:	f43f aefd 	beq.w	8006e50 <__aeabi_dmul+0x1f8>
 8007056:	4610      	mov	r0, r2
 8007058:	4619      	mov	r1, r3
 800705a:	e722      	b.n	8006ea2 <__aeabi_dmul+0x24a>
 800705c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007060:	bf18      	it	ne
 8007062:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007066:	f47f aec5 	bne.w	8006df4 <__aeabi_dmul+0x19c>
 800706a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800706e:	f47f af0d 	bne.w	8006e8c <__aeabi_dmul+0x234>
 8007072:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8007076:	f47f aeeb 	bne.w	8006e50 <__aeabi_dmul+0x1f8>
 800707a:	e712      	b.n	8006ea2 <__aeabi_dmul+0x24a>

0800707c <__gedf2>:
 800707c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007080:	e006      	b.n	8007090 <__cmpdf2+0x4>
 8007082:	bf00      	nop

08007084 <__ledf2>:
 8007084:	f04f 0c01 	mov.w	ip, #1
 8007088:	e002      	b.n	8007090 <__cmpdf2+0x4>
 800708a:	bf00      	nop

0800708c <__cmpdf2>:
 800708c:	f04f 0c01 	mov.w	ip, #1
 8007090:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007094:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007098:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800709c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80070a0:	bf18      	it	ne
 80070a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80070a6:	d01b      	beq.n	80070e0 <__cmpdf2+0x54>
 80070a8:	b001      	add	sp, #4
 80070aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80070ae:	bf0c      	ite	eq
 80070b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80070b4:	ea91 0f03 	teqne	r1, r3
 80070b8:	bf02      	ittt	eq
 80070ba:	ea90 0f02 	teqeq	r0, r2
 80070be:	2000      	moveq	r0, #0
 80070c0:	4770      	bxeq	lr
 80070c2:	f110 0f00 	cmn.w	r0, #0
 80070c6:	ea91 0f03 	teq	r1, r3
 80070ca:	bf58      	it	pl
 80070cc:	4299      	cmppl	r1, r3
 80070ce:	bf08      	it	eq
 80070d0:	4290      	cmpeq	r0, r2
 80070d2:	bf2c      	ite	cs
 80070d4:	17d8      	asrcs	r0, r3, #31
 80070d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80070da:	f040 0001 	orr.w	r0, r0, #1
 80070de:	4770      	bx	lr
 80070e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80070e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80070e8:	d102      	bne.n	80070f0 <__cmpdf2+0x64>
 80070ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80070ee:	d107      	bne.n	8007100 <__cmpdf2+0x74>
 80070f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80070f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80070f8:	d1d6      	bne.n	80070a8 <__cmpdf2+0x1c>
 80070fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80070fe:	d0d3      	beq.n	80070a8 <__cmpdf2+0x1c>
 8007100:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop

08007108 <__aeabi_cdrcmple>:
 8007108:	4684      	mov	ip, r0
 800710a:	4610      	mov	r0, r2
 800710c:	4662      	mov	r2, ip
 800710e:	468c      	mov	ip, r1
 8007110:	4619      	mov	r1, r3
 8007112:	4663      	mov	r3, ip
 8007114:	e000      	b.n	8007118 <__aeabi_cdcmpeq>
 8007116:	bf00      	nop

08007118 <__aeabi_cdcmpeq>:
 8007118:	b501      	push	{r0, lr}
 800711a:	f7ff ffb7 	bl	800708c <__cmpdf2>
 800711e:	2800      	cmp	r0, #0
 8007120:	bf48      	it	mi
 8007122:	f110 0f00 	cmnmi.w	r0, #0
 8007126:	bd01      	pop	{r0, pc}

08007128 <__aeabi_dcmpeq>:
 8007128:	f84d ed08 	str.w	lr, [sp, #-8]!
 800712c:	f7ff fff4 	bl	8007118 <__aeabi_cdcmpeq>
 8007130:	bf0c      	ite	eq
 8007132:	2001      	moveq	r0, #1
 8007134:	2000      	movne	r0, #0
 8007136:	f85d fb08 	ldr.w	pc, [sp], #8
 800713a:	bf00      	nop

0800713c <__aeabi_dcmplt>:
 800713c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007140:	f7ff ffea 	bl	8007118 <__aeabi_cdcmpeq>
 8007144:	bf34      	ite	cc
 8007146:	2001      	movcc	r0, #1
 8007148:	2000      	movcs	r0, #0
 800714a:	f85d fb08 	ldr.w	pc, [sp], #8
 800714e:	bf00      	nop

08007150 <__aeabi_dcmple>:
 8007150:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007154:	f7ff ffe0 	bl	8007118 <__aeabi_cdcmpeq>
 8007158:	bf94      	ite	ls
 800715a:	2001      	movls	r0, #1
 800715c:	2000      	movhi	r0, #0
 800715e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007162:	bf00      	nop

08007164 <__aeabi_dcmpge>:
 8007164:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007168:	f7ff ffce 	bl	8007108 <__aeabi_cdrcmple>
 800716c:	bf94      	ite	ls
 800716e:	2001      	movls	r0, #1
 8007170:	2000      	movhi	r0, #0
 8007172:	f85d fb08 	ldr.w	pc, [sp], #8
 8007176:	bf00      	nop

08007178 <__aeabi_dcmpgt>:
 8007178:	f84d ed08 	str.w	lr, [sp, #-8]!
 800717c:	f7ff ffc4 	bl	8007108 <__aeabi_cdrcmple>
 8007180:	bf34      	ite	cc
 8007182:	2001      	movcc	r0, #1
 8007184:	2000      	movcs	r0, #0
 8007186:	f85d fb08 	ldr.w	pc, [sp], #8
 800718a:	bf00      	nop

0800718c <__aeabi_dcmpun>:
 800718c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007190:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007194:	d102      	bne.n	800719c <__aeabi_dcmpun+0x10>
 8007196:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800719a:	d10a      	bne.n	80071b2 <__aeabi_dcmpun+0x26>
 800719c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80071a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80071a4:	d102      	bne.n	80071ac <__aeabi_dcmpun+0x20>
 80071a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80071aa:	d102      	bne.n	80071b2 <__aeabi_dcmpun+0x26>
 80071ac:	f04f 0000 	mov.w	r0, #0
 80071b0:	4770      	bx	lr
 80071b2:	f04f 0001 	mov.w	r0, #1
 80071b6:	4770      	bx	lr

080071b8 <__aeabi_d2iz>:
 80071b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80071bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80071c0:	d215      	bcs.n	80071ee <__aeabi_d2iz+0x36>
 80071c2:	d511      	bpl.n	80071e8 <__aeabi_d2iz+0x30>
 80071c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80071c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80071cc:	d912      	bls.n	80071f4 <__aeabi_d2iz+0x3c>
 80071ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80071d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80071da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80071de:	fa23 f002 	lsr.w	r0, r3, r2
 80071e2:	bf18      	it	ne
 80071e4:	4240      	negne	r0, r0
 80071e6:	4770      	bx	lr
 80071e8:	f04f 0000 	mov.w	r0, #0
 80071ec:	4770      	bx	lr
 80071ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80071f2:	d105      	bne.n	8007200 <__aeabi_d2iz+0x48>
 80071f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80071f8:	bf08      	it	eq
 80071fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80071fe:	4770      	bx	lr
 8007200:	f04f 0000 	mov.w	r0, #0
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop

08007208 <__aeabi_uldivmod>:
 8007208:	b953      	cbnz	r3, 8007220 <__aeabi_uldivmod+0x18>
 800720a:	b94a      	cbnz	r2, 8007220 <__aeabi_uldivmod+0x18>
 800720c:	2900      	cmp	r1, #0
 800720e:	bf08      	it	eq
 8007210:	2800      	cmpeq	r0, #0
 8007212:	bf1c      	itt	ne
 8007214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800721c:	f001 b900 	b.w	8008420 <__aeabi_idiv0>
 8007220:	f1ad 0c08 	sub.w	ip, sp, #8
 8007224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007228:	f000 f806 	bl	8007238 <__udivmoddi4>
 800722c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007234:	b004      	add	sp, #16
 8007236:	4770      	bx	lr

08007238 <__udivmoddi4>:
 8007238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800723c:	468c      	mov	ip, r1
 800723e:	460e      	mov	r6, r1
 8007240:	4604      	mov	r4, r0
 8007242:	9d08      	ldr	r5, [sp, #32]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d150      	bne.n	80072ea <__udivmoddi4+0xb2>
 8007248:	428a      	cmp	r2, r1
 800724a:	4617      	mov	r7, r2
 800724c:	d96c      	bls.n	8007328 <__udivmoddi4+0xf0>
 800724e:	fab2 fe82 	clz	lr, r2
 8007252:	f1be 0f00 	cmp.w	lr, #0
 8007256:	d00b      	beq.n	8007270 <__udivmoddi4+0x38>
 8007258:	f1ce 0c20 	rsb	ip, lr, #32
 800725c:	fa01 f60e 	lsl.w	r6, r1, lr
 8007260:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007264:	fa02 f70e 	lsl.w	r7, r2, lr
 8007268:	ea4c 0c06 	orr.w	ip, ip, r6
 800726c:	fa00 f40e 	lsl.w	r4, r0, lr
 8007270:	0c3a      	lsrs	r2, r7, #16
 8007272:	fbbc f9f2 	udiv	r9, ip, r2
 8007276:	b2bb      	uxth	r3, r7
 8007278:	fb02 cc19 	mls	ip, r2, r9, ip
 800727c:	fb09 fa03 	mul.w	sl, r9, r3
 8007280:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007284:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8007288:	45b2      	cmp	sl, r6
 800728a:	d90a      	bls.n	80072a2 <__udivmoddi4+0x6a>
 800728c:	19f6      	adds	r6, r6, r7
 800728e:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
 8007292:	f080 8125 	bcs.w	80074e0 <__udivmoddi4+0x2a8>
 8007296:	45b2      	cmp	sl, r6
 8007298:	f240 8122 	bls.w	80074e0 <__udivmoddi4+0x2a8>
 800729c:	f1a9 0902 	sub.w	r9, r9, #2
 80072a0:	443e      	add	r6, r7
 80072a2:	eba6 060a 	sub.w	r6, r6, sl
 80072a6:	fbb6 f0f2 	udiv	r0, r6, r2
 80072aa:	fb02 6610 	mls	r6, r2, r0, r6
 80072ae:	fb00 f303 	mul.w	r3, r0, r3
 80072b2:	b2a4      	uxth	r4, r4
 80072b4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80072b8:	42a3      	cmp	r3, r4
 80072ba:	d909      	bls.n	80072d0 <__udivmoddi4+0x98>
 80072bc:	19e4      	adds	r4, r4, r7
 80072be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80072c2:	f080 810b 	bcs.w	80074dc <__udivmoddi4+0x2a4>
 80072c6:	42a3      	cmp	r3, r4
 80072c8:	f240 8108 	bls.w	80074dc <__udivmoddi4+0x2a4>
 80072cc:	3802      	subs	r0, #2
 80072ce:	443c      	add	r4, r7
 80072d0:	2100      	movs	r1, #0
 80072d2:	1ae4      	subs	r4, r4, r3
 80072d4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80072d8:	2d00      	cmp	r5, #0
 80072da:	d062      	beq.n	80073a2 <__udivmoddi4+0x16a>
 80072dc:	2300      	movs	r3, #0
 80072de:	fa24 f40e 	lsr.w	r4, r4, lr
 80072e2:	602c      	str	r4, [r5, #0]
 80072e4:	606b      	str	r3, [r5, #4]
 80072e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ea:	428b      	cmp	r3, r1
 80072ec:	d907      	bls.n	80072fe <__udivmoddi4+0xc6>
 80072ee:	2d00      	cmp	r5, #0
 80072f0:	d055      	beq.n	800739e <__udivmoddi4+0x166>
 80072f2:	2100      	movs	r1, #0
 80072f4:	e885 0041 	stmia.w	r5, {r0, r6}
 80072f8:	4608      	mov	r0, r1
 80072fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fe:	fab3 f183 	clz	r1, r3
 8007302:	2900      	cmp	r1, #0
 8007304:	f040 808f 	bne.w	8007426 <__udivmoddi4+0x1ee>
 8007308:	42b3      	cmp	r3, r6
 800730a:	d302      	bcc.n	8007312 <__udivmoddi4+0xda>
 800730c:	4282      	cmp	r2, r0
 800730e:	f200 80fc 	bhi.w	800750a <__udivmoddi4+0x2d2>
 8007312:	1a84      	subs	r4, r0, r2
 8007314:	eb66 0603 	sbc.w	r6, r6, r3
 8007318:	2001      	movs	r0, #1
 800731a:	46b4      	mov	ip, r6
 800731c:	2d00      	cmp	r5, #0
 800731e:	d040      	beq.n	80073a2 <__udivmoddi4+0x16a>
 8007320:	e885 1010 	stmia.w	r5, {r4, ip}
 8007324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007328:	b912      	cbnz	r2, 8007330 <__udivmoddi4+0xf8>
 800732a:	2701      	movs	r7, #1
 800732c:	fbb7 f7f2 	udiv	r7, r7, r2
 8007330:	fab7 fe87 	clz	lr, r7
 8007334:	f1be 0f00 	cmp.w	lr, #0
 8007338:	d135      	bne.n	80073a6 <__udivmoddi4+0x16e>
 800733a:	2101      	movs	r1, #1
 800733c:	1bf6      	subs	r6, r6, r7
 800733e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007342:	fa1f f887 	uxth.w	r8, r7
 8007346:	fbb6 f2fc 	udiv	r2, r6, ip
 800734a:	fb0c 6612 	mls	r6, ip, r2, r6
 800734e:	fb08 f002 	mul.w	r0, r8, r2
 8007352:	0c23      	lsrs	r3, r4, #16
 8007354:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8007358:	42b0      	cmp	r0, r6
 800735a:	d907      	bls.n	800736c <__udivmoddi4+0x134>
 800735c:	19f6      	adds	r6, r6, r7
 800735e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8007362:	d202      	bcs.n	800736a <__udivmoddi4+0x132>
 8007364:	42b0      	cmp	r0, r6
 8007366:	f200 80d2 	bhi.w	800750e <__udivmoddi4+0x2d6>
 800736a:	461a      	mov	r2, r3
 800736c:	1a36      	subs	r6, r6, r0
 800736e:	fbb6 f0fc 	udiv	r0, r6, ip
 8007372:	fb0c 6610 	mls	r6, ip, r0, r6
 8007376:	fb08 f800 	mul.w	r8, r8, r0
 800737a:	b2a3      	uxth	r3, r4
 800737c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8007380:	45a0      	cmp	r8, r4
 8007382:	d907      	bls.n	8007394 <__udivmoddi4+0x15c>
 8007384:	19e4      	adds	r4, r4, r7
 8007386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800738a:	d202      	bcs.n	8007392 <__udivmoddi4+0x15a>
 800738c:	45a0      	cmp	r8, r4
 800738e:	f200 80b9 	bhi.w	8007504 <__udivmoddi4+0x2cc>
 8007392:	4618      	mov	r0, r3
 8007394:	eba4 0408 	sub.w	r4, r4, r8
 8007398:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800739c:	e79c      	b.n	80072d8 <__udivmoddi4+0xa0>
 800739e:	4629      	mov	r1, r5
 80073a0:	4628      	mov	r0, r5
 80073a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80073aa:	f1ce 0320 	rsb	r3, lr, #32
 80073ae:	fa26 f203 	lsr.w	r2, r6, r3
 80073b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80073b6:	fbb2 f1fc 	udiv	r1, r2, ip
 80073ba:	fa1f f887 	uxth.w	r8, r7
 80073be:	fb0c 2211 	mls	r2, ip, r1, r2
 80073c2:	fa06 f60e 	lsl.w	r6, r6, lr
 80073c6:	fa20 f303 	lsr.w	r3, r0, r3
 80073ca:	fb01 f908 	mul.w	r9, r1, r8
 80073ce:	4333      	orrs	r3, r6
 80073d0:	0c1e      	lsrs	r6, r3, #16
 80073d2:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80073d6:	45b1      	cmp	r9, r6
 80073d8:	fa00 f40e 	lsl.w	r4, r0, lr
 80073dc:	d909      	bls.n	80073f2 <__udivmoddi4+0x1ba>
 80073de:	19f6      	adds	r6, r6, r7
 80073e0:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80073e4:	f080 808c 	bcs.w	8007500 <__udivmoddi4+0x2c8>
 80073e8:	45b1      	cmp	r9, r6
 80073ea:	f240 8089 	bls.w	8007500 <__udivmoddi4+0x2c8>
 80073ee:	3902      	subs	r1, #2
 80073f0:	443e      	add	r6, r7
 80073f2:	eba6 0609 	sub.w	r6, r6, r9
 80073f6:	fbb6 f0fc 	udiv	r0, r6, ip
 80073fa:	fb0c 6210 	mls	r2, ip, r0, r6
 80073fe:	fb00 f908 	mul.w	r9, r0, r8
 8007402:	b29e      	uxth	r6, r3
 8007404:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8007408:	45b1      	cmp	r9, r6
 800740a:	d907      	bls.n	800741c <__udivmoddi4+0x1e4>
 800740c:	19f6      	adds	r6, r6, r7
 800740e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007412:	d271      	bcs.n	80074f8 <__udivmoddi4+0x2c0>
 8007414:	45b1      	cmp	r9, r6
 8007416:	d96f      	bls.n	80074f8 <__udivmoddi4+0x2c0>
 8007418:	3802      	subs	r0, #2
 800741a:	443e      	add	r6, r7
 800741c:	eba6 0609 	sub.w	r6, r6, r9
 8007420:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8007424:	e78f      	b.n	8007346 <__udivmoddi4+0x10e>
 8007426:	f1c1 0720 	rsb	r7, r1, #32
 800742a:	fa22 f807 	lsr.w	r8, r2, r7
 800742e:	408b      	lsls	r3, r1
 8007430:	ea48 0303 	orr.w	r3, r8, r3
 8007434:	fa26 f407 	lsr.w	r4, r6, r7
 8007438:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800743c:	fbb4 f9fe 	udiv	r9, r4, lr
 8007440:	fa1f fc83 	uxth.w	ip, r3
 8007444:	fb0e 4419 	mls	r4, lr, r9, r4
 8007448:	408e      	lsls	r6, r1
 800744a:	fa20 f807 	lsr.w	r8, r0, r7
 800744e:	fb09 fa0c 	mul.w	sl, r9, ip
 8007452:	ea48 0806 	orr.w	r8, r8, r6
 8007456:	ea4f 4618 	mov.w	r6, r8, lsr #16
 800745a:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 800745e:	45a2      	cmp	sl, r4
 8007460:	fa02 f201 	lsl.w	r2, r2, r1
 8007464:	fa00 f601 	lsl.w	r6, r0, r1
 8007468:	d908      	bls.n	800747c <__udivmoddi4+0x244>
 800746a:	18e4      	adds	r4, r4, r3
 800746c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8007470:	d244      	bcs.n	80074fc <__udivmoddi4+0x2c4>
 8007472:	45a2      	cmp	sl, r4
 8007474:	d942      	bls.n	80074fc <__udivmoddi4+0x2c4>
 8007476:	f1a9 0902 	sub.w	r9, r9, #2
 800747a:	441c      	add	r4, r3
 800747c:	eba4 040a 	sub.w	r4, r4, sl
 8007480:	fbb4 f0fe 	udiv	r0, r4, lr
 8007484:	fb0e 4410 	mls	r4, lr, r0, r4
 8007488:	fb00 fc0c 	mul.w	ip, r0, ip
 800748c:	fa1f f888 	uxth.w	r8, r8
 8007490:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8007494:	45a4      	cmp	ip, r4
 8007496:	d907      	bls.n	80074a8 <__udivmoddi4+0x270>
 8007498:	18e4      	adds	r4, r4, r3
 800749a:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
 800749e:	d229      	bcs.n	80074f4 <__udivmoddi4+0x2bc>
 80074a0:	45a4      	cmp	ip, r4
 80074a2:	d927      	bls.n	80074f4 <__udivmoddi4+0x2bc>
 80074a4:	3802      	subs	r0, #2
 80074a6:	441c      	add	r4, r3
 80074a8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80074ac:	fba0 8902 	umull	r8, r9, r0, r2
 80074b0:	eba4 0c0c 	sub.w	ip, r4, ip
 80074b4:	45cc      	cmp	ip, r9
 80074b6:	46c2      	mov	sl, r8
 80074b8:	46ce      	mov	lr, r9
 80074ba:	d315      	bcc.n	80074e8 <__udivmoddi4+0x2b0>
 80074bc:	d012      	beq.n	80074e4 <__udivmoddi4+0x2ac>
 80074be:	b155      	cbz	r5, 80074d6 <__udivmoddi4+0x29e>
 80074c0:	ebb6 030a 	subs.w	r3, r6, sl
 80074c4:	eb6c 060e 	sbc.w	r6, ip, lr
 80074c8:	fa06 f707 	lsl.w	r7, r6, r7
 80074cc:	40cb      	lsrs	r3, r1
 80074ce:	431f      	orrs	r7, r3
 80074d0:	40ce      	lsrs	r6, r1
 80074d2:	602f      	str	r7, [r5, #0]
 80074d4:	606e      	str	r6, [r5, #4]
 80074d6:	2100      	movs	r1, #0
 80074d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074dc:	4610      	mov	r0, r2
 80074de:	e6f7      	b.n	80072d0 <__udivmoddi4+0x98>
 80074e0:	4689      	mov	r9, r1
 80074e2:	e6de      	b.n	80072a2 <__udivmoddi4+0x6a>
 80074e4:	4546      	cmp	r6, r8
 80074e6:	d2ea      	bcs.n	80074be <__udivmoddi4+0x286>
 80074e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80074ec:	eb69 0e03 	sbc.w	lr, r9, r3
 80074f0:	3801      	subs	r0, #1
 80074f2:	e7e4      	b.n	80074be <__udivmoddi4+0x286>
 80074f4:	4670      	mov	r0, lr
 80074f6:	e7d7      	b.n	80074a8 <__udivmoddi4+0x270>
 80074f8:	4618      	mov	r0, r3
 80074fa:	e78f      	b.n	800741c <__udivmoddi4+0x1e4>
 80074fc:	4681      	mov	r9, r0
 80074fe:	e7bd      	b.n	800747c <__udivmoddi4+0x244>
 8007500:	4611      	mov	r1, r2
 8007502:	e776      	b.n	80073f2 <__udivmoddi4+0x1ba>
 8007504:	3802      	subs	r0, #2
 8007506:	443c      	add	r4, r7
 8007508:	e744      	b.n	8007394 <__udivmoddi4+0x15c>
 800750a:	4608      	mov	r0, r1
 800750c:	e706      	b.n	800731c <__udivmoddi4+0xe4>
 800750e:	3a02      	subs	r2, #2
 8007510:	443e      	add	r6, r7
 8007512:	e72b      	b.n	800736c <__udivmoddi4+0x134>

08007514 <selfrel_offset31>:
 8007514:	6803      	ldr	r3, [r0, #0]
 8007516:	005a      	lsls	r2, r3, #1
 8007518:	bf4c      	ite	mi
 800751a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800751e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8007522:	4418      	add	r0, r3
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop

08007528 <search_EIT_table>:
 8007528:	b361      	cbz	r1, 8007584 <search_EIT_table+0x5c>
 800752a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752e:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8007532:	4690      	mov	r8, r2
 8007534:	4606      	mov	r6, r0
 8007536:	46d1      	mov	r9, sl
 8007538:	2700      	movs	r7, #0
 800753a:	eb07 0409 	add.w	r4, r7, r9
 800753e:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8007542:	1064      	asrs	r4, r4, #1
 8007544:	00e5      	lsls	r5, r4, #3
 8007546:	1971      	adds	r1, r6, r5
 8007548:	4608      	mov	r0, r1
 800754a:	f7ff ffe3 	bl	8007514 <selfrel_offset31>
 800754e:	45a2      	cmp	sl, r4
 8007550:	4683      	mov	fp, r0
 8007552:	f105 0008 	add.w	r0, r5, #8
 8007556:	4430      	add	r0, r6
 8007558:	d009      	beq.n	800756e <search_EIT_table+0x46>
 800755a:	f7ff ffdb 	bl	8007514 <selfrel_offset31>
 800755e:	45c3      	cmp	fp, r8
 8007560:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8007564:	d805      	bhi.n	8007572 <search_EIT_table+0x4a>
 8007566:	4540      	cmp	r0, r8
 8007568:	d209      	bcs.n	800757e <search_EIT_table+0x56>
 800756a:	1c67      	adds	r7, r4, #1
 800756c:	e7e5      	b.n	800753a <search_EIT_table+0x12>
 800756e:	45c3      	cmp	fp, r8
 8007570:	d905      	bls.n	800757e <search_EIT_table+0x56>
 8007572:	42a7      	cmp	r7, r4
 8007574:	d002      	beq.n	800757c <search_EIT_table+0x54>
 8007576:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800757a:	e7de      	b.n	800753a <search_EIT_table+0x12>
 800757c:	2100      	movs	r1, #0
 800757e:	4608      	mov	r0, r1
 8007580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007584:	4608      	mov	r0, r1
 8007586:	4770      	bx	lr

08007588 <__gnu_unwind_get_pr_addr>:
 8007588:	2801      	cmp	r0, #1
 800758a:	d007      	beq.n	800759c <__gnu_unwind_get_pr_addr+0x14>
 800758c:	2802      	cmp	r0, #2
 800758e:	d007      	beq.n	80075a0 <__gnu_unwind_get_pr_addr+0x18>
 8007590:	4b04      	ldr	r3, [pc, #16]	; (80075a4 <__gnu_unwind_get_pr_addr+0x1c>)
 8007592:	2800      	cmp	r0, #0
 8007594:	bf0c      	ite	eq
 8007596:	4618      	moveq	r0, r3
 8007598:	2000      	movne	r0, #0
 800759a:	4770      	bx	lr
 800759c:	4802      	ldr	r0, [pc, #8]	; (80075a8 <__gnu_unwind_get_pr_addr+0x20>)
 800759e:	4770      	bx	lr
 80075a0:	4802      	ldr	r0, [pc, #8]	; (80075ac <__gnu_unwind_get_pr_addr+0x24>)
 80075a2:	4770      	bx	lr
 80075a4:	08007c99 	.word	0x08007c99
 80075a8:	08007c9d 	.word	0x08007c9d
 80075ac:	08007ca1 	.word	0x08007ca1

080075b0 <get_eit_entry>:
 80075b0:	b530      	push	{r4, r5, lr}
 80075b2:	4b25      	ldr	r3, [pc, #148]	; (8007648 <get_eit_entry+0x98>)
 80075b4:	b083      	sub	sp, #12
 80075b6:	4604      	mov	r4, r0
 80075b8:	1e8d      	subs	r5, r1, #2
 80075ba:	b373      	cbz	r3, 800761a <get_eit_entry+0x6a>
 80075bc:	a901      	add	r1, sp, #4
 80075be:	4628      	mov	r0, r5
 80075c0:	f3af 8000 	nop.w
 80075c4:	b318      	cbz	r0, 800760e <get_eit_entry+0x5e>
 80075c6:	9901      	ldr	r1, [sp, #4]
 80075c8:	462a      	mov	r2, r5
 80075ca:	f7ff ffad 	bl	8007528 <search_EIT_table>
 80075ce:	4601      	mov	r1, r0
 80075d0:	b1e8      	cbz	r0, 800760e <get_eit_entry+0x5e>
 80075d2:	f7ff ff9f 	bl	8007514 <selfrel_offset31>
 80075d6:	684b      	ldr	r3, [r1, #4]
 80075d8:	64a0      	str	r0, [r4, #72]	; 0x48
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d011      	beq.n	8007602 <get_eit_entry+0x52>
 80075de:	2b00      	cmp	r3, #0
 80075e0:	db22      	blt.n	8007628 <get_eit_entry+0x78>
 80075e2:	1d08      	adds	r0, r1, #4
 80075e4:	f7ff ff96 	bl	8007514 <selfrel_offset31>
 80075e8:	2300      	movs	r3, #0
 80075ea:	64e0      	str	r0, [r4, #76]	; 0x4c
 80075ec:	6523      	str	r3, [r4, #80]	; 0x50
 80075ee:	6803      	ldr	r3, [r0, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	db1e      	blt.n	8007632 <get_eit_entry+0x82>
 80075f4:	f7ff ff8e 	bl	8007514 <selfrel_offset31>
 80075f8:	2300      	movs	r3, #0
 80075fa:	6120      	str	r0, [r4, #16]
 80075fc:	4618      	mov	r0, r3
 80075fe:	b003      	add	sp, #12
 8007600:	bd30      	pop	{r4, r5, pc}
 8007602:	2305      	movs	r3, #5
 8007604:	2200      	movs	r2, #0
 8007606:	4618      	mov	r0, r3
 8007608:	6122      	str	r2, [r4, #16]
 800760a:	b003      	add	sp, #12
 800760c:	bd30      	pop	{r4, r5, pc}
 800760e:	2309      	movs	r3, #9
 8007610:	2200      	movs	r2, #0
 8007612:	4618      	mov	r0, r3
 8007614:	6122      	str	r2, [r4, #16]
 8007616:	b003      	add	sp, #12
 8007618:	bd30      	pop	{r4, r5, pc}
 800761a:	4b0c      	ldr	r3, [pc, #48]	; (800764c <get_eit_entry+0x9c>)
 800761c:	490c      	ldr	r1, [pc, #48]	; (8007650 <get_eit_entry+0xa0>)
 800761e:	4618      	mov	r0, r3
 8007620:	1ac9      	subs	r1, r1, r3
 8007622:	10c9      	asrs	r1, r1, #3
 8007624:	9101      	str	r1, [sp, #4]
 8007626:	e7cf      	b.n	80075c8 <get_eit_entry+0x18>
 8007628:	2301      	movs	r3, #1
 800762a:	1d08      	adds	r0, r1, #4
 800762c:	64e0      	str	r0, [r4, #76]	; 0x4c
 800762e:	6523      	str	r3, [r4, #80]	; 0x50
 8007630:	e7dd      	b.n	80075ee <get_eit_entry+0x3e>
 8007632:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8007636:	f7ff ffa7 	bl	8007588 <__gnu_unwind_get_pr_addr>
 800763a:	2800      	cmp	r0, #0
 800763c:	6120      	str	r0, [r4, #16]
 800763e:	bf14      	ite	ne
 8007640:	2300      	movne	r3, #0
 8007642:	2309      	moveq	r3, #9
 8007644:	e7da      	b.n	80075fc <get_eit_entry+0x4c>
 8007646:	bf00      	nop
 8007648:	00000000 	.word	0x00000000
 800764c:	0802374c 	.word	0x0802374c
 8007650:	080238dc 	.word	0x080238dc

08007654 <restore_non_core_regs>:
 8007654:	6803      	ldr	r3, [r0, #0]
 8007656:	b510      	push	{r4, lr}
 8007658:	07da      	lsls	r2, r3, #31
 800765a:	4604      	mov	r4, r0
 800765c:	d406      	bmi.n	800766c <restore_non_core_regs+0x18>
 800765e:	079b      	lsls	r3, r3, #30
 8007660:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8007664:	d509      	bpl.n	800767a <restore_non_core_regs+0x26>
 8007666:	f000 fc57 	bl	8007f18 <__gnu_Unwind_Restore_VFP_D>
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	0759      	lsls	r1, r3, #29
 800766e:	d509      	bpl.n	8007684 <restore_non_core_regs+0x30>
 8007670:	071a      	lsls	r2, r3, #28
 8007672:	d50e      	bpl.n	8007692 <restore_non_core_regs+0x3e>
 8007674:	06db      	lsls	r3, r3, #27
 8007676:	d513      	bpl.n	80076a0 <restore_non_core_regs+0x4c>
 8007678:	bd10      	pop	{r4, pc}
 800767a:	f000 fc45 	bl	8007f08 <__gnu_Unwind_Restore_VFP>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	0759      	lsls	r1, r3, #29
 8007682:	d4f5      	bmi.n	8007670 <restore_non_core_regs+0x1c>
 8007684:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007688:	f000 fc4e 	bl	8007f28 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	071a      	lsls	r2, r3, #28
 8007690:	d4f0      	bmi.n	8007674 <restore_non_core_regs+0x20>
 8007692:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8007696:	f000 fc4f 	bl	8007f38 <__gnu_Unwind_Restore_WMMXD>
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	06db      	lsls	r3, r3, #27
 800769e:	d4eb      	bmi.n	8007678 <restore_non_core_regs+0x24>
 80076a0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80076a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076a8:	f000 bc8a 	b.w	8007fc0 <__gnu_Unwind_Restore_WMMXC>

080076ac <_Unwind_decode_typeinfo_ptr.isra.0>:
 80076ac:	6803      	ldr	r3, [r0, #0]
 80076ae:	b103      	cbz	r3, 80076b2 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80076b0:	4403      	add	r3, r0
 80076b2:	4618      	mov	r0, r3
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop

080076b8 <__gnu_unwind_24bit.isra.1>:
 80076b8:	2009      	movs	r0, #9
 80076ba:	4770      	bx	lr

080076bc <_Unwind_DebugHook>:
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop

080076c0 <unwind_phase2>:
 80076c0:	b570      	push	{r4, r5, r6, lr}
 80076c2:	4604      	mov	r4, r0
 80076c4:	460d      	mov	r5, r1
 80076c6:	e008      	b.n	80076da <unwind_phase2+0x1a>
 80076c8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80076ca:	6923      	ldr	r3, [r4, #16]
 80076cc:	6162      	str	r2, [r4, #20]
 80076ce:	4621      	mov	r1, r4
 80076d0:	462a      	mov	r2, r5
 80076d2:	2001      	movs	r0, #1
 80076d4:	4798      	blx	r3
 80076d6:	2808      	cmp	r0, #8
 80076d8:	d108      	bne.n	80076ec <unwind_phase2+0x2c>
 80076da:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80076dc:	4620      	mov	r0, r4
 80076de:	f7ff ff67 	bl	80075b0 <get_eit_entry>
 80076e2:	4606      	mov	r6, r0
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d0ef      	beq.n	80076c8 <unwind_phase2+0x8>
 80076e8:	f00f f84a 	bl	8016780 <abort>
 80076ec:	2807      	cmp	r0, #7
 80076ee:	d1fb      	bne.n	80076e8 <unwind_phase2+0x28>
 80076f0:	4630      	mov	r0, r6
 80076f2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80076f4:	f7ff ffe2 	bl	80076bc <_Unwind_DebugHook>
 80076f8:	1d28      	adds	r0, r5, #4
 80076fa:	f000 fbf9 	bl	8007ef0 <__restore_core_regs>
 80076fe:	bf00      	nop

08007700 <unwind_phase2_forced>:
 8007700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007704:	4605      	mov	r5, r0
 8007706:	2700      	movs	r7, #0
 8007708:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800770c:	ac03      	add	r4, sp, #12
 800770e:	1d0e      	adds	r6, r1, #4
 8007710:	4692      	mov	sl, r2
 8007712:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007716:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800771a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800771c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800771e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007722:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8007726:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800772a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800772e:	ac02      	add	r4, sp, #8
 8007730:	4628      	mov	r0, r5
 8007732:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007734:	6027      	str	r7, [r4, #0]
 8007736:	f7ff ff3b 	bl	80075b0 <get_eit_entry>
 800773a:	f1ba 0f00 	cmp.w	sl, #0
 800773e:	4607      	mov	r7, r0
 8007740:	bf14      	ite	ne
 8007742:	260a      	movne	r6, #10
 8007744:	2609      	moveq	r6, #9
 8007746:	b17f      	cbz	r7, 8007768 <unwind_phase2_forced+0x68>
 8007748:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800774a:	f046 0110 	orr.w	r1, r6, #16
 800774e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8007752:	462a      	mov	r2, r5
 8007754:	6463      	str	r3, [r4, #68]	; 0x44
 8007756:	2001      	movs	r0, #1
 8007758:	462b      	mov	r3, r5
 800775a:	47c0      	blx	r8
 800775c:	bb78      	cbnz	r0, 80077be <unwind_phase2_forced+0xbe>
 800775e:	4638      	mov	r0, r7
 8007760:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8007764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007768:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800776a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800776e:	616b      	str	r3, [r5, #20]
 8007770:	4621      	mov	r1, r4
 8007772:	a87a      	add	r0, sp, #488	; 0x1e8
 8007774:	f00f fd9d 	bl	80172b2 <memcpy>
 8007778:	692b      	ldr	r3, [r5, #16]
 800777a:	aa7a      	add	r2, sp, #488	; 0x1e8
 800777c:	4629      	mov	r1, r5
 800777e:	4630      	mov	r0, r6
 8007780:	4798      	blx	r3
 8007782:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8007784:	4682      	mov	sl, r0
 8007786:	e88d 0210 	stmia.w	sp, {r4, r9}
 800778a:	4631      	mov	r1, r6
 800778c:	6463      	str	r3, [r4, #68]	; 0x44
 800778e:	462a      	mov	r2, r5
 8007790:	462b      	mov	r3, r5
 8007792:	2001      	movs	r0, #1
 8007794:	47c0      	blx	r8
 8007796:	b990      	cbnz	r0, 80077be <unwind_phase2_forced+0xbe>
 8007798:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800779c:	a97a      	add	r1, sp, #488	; 0x1e8
 800779e:	4620      	mov	r0, r4
 80077a0:	f00f fd87 	bl	80172b2 <memcpy>
 80077a4:	f1ba 0f08 	cmp.w	sl, #8
 80077a8:	d106      	bne.n	80077b8 <unwind_phase2_forced+0xb8>
 80077aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80077ac:	4628      	mov	r0, r5
 80077ae:	f7ff feff 	bl	80075b0 <get_eit_entry>
 80077b2:	2609      	movs	r6, #9
 80077b4:	4607      	mov	r7, r0
 80077b6:	e7c6      	b.n	8007746 <unwind_phase2_forced+0x46>
 80077b8:	f1ba 0f07 	cmp.w	sl, #7
 80077bc:	d005      	beq.n	80077ca <unwind_phase2_forced+0xca>
 80077be:	2709      	movs	r7, #9
 80077c0:	4638      	mov	r0, r7
 80077c2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80077c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ca:	4638      	mov	r0, r7
 80077cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80077ce:	f7ff ff75 	bl	80076bc <_Unwind_DebugHook>
 80077d2:	a803      	add	r0, sp, #12
 80077d4:	f000 fb8c 	bl	8007ef0 <__restore_core_regs>

080077d8 <_Unwind_GetCFA>:
 80077d8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80077da:	4770      	bx	lr

080077dc <__gnu_Unwind_RaiseException>:
 80077dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077de:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80077e2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80077e4:	b0f9      	sub	sp, #484	; 0x1e4
 80077e6:	640b      	str	r3, [r1, #64]	; 0x40
 80077e8:	1d0e      	adds	r6, r1, #4
 80077ea:	ad01      	add	r5, sp, #4
 80077ec:	460f      	mov	r7, r1
 80077ee:	4604      	mov	r4, r0
 80077f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80077f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80077f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80077fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007800:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007804:	f8cd e000 	str.w	lr, [sp]
 8007808:	e006      	b.n	8007818 <__gnu_Unwind_RaiseException+0x3c>
 800780a:	6923      	ldr	r3, [r4, #16]
 800780c:	466a      	mov	r2, sp
 800780e:	4621      	mov	r1, r4
 8007810:	4798      	blx	r3
 8007812:	2808      	cmp	r0, #8
 8007814:	4605      	mov	r5, r0
 8007816:	d108      	bne.n	800782a <__gnu_Unwind_RaiseException+0x4e>
 8007818:	9910      	ldr	r1, [sp, #64]	; 0x40
 800781a:	4620      	mov	r0, r4
 800781c:	f7ff fec8 	bl	80075b0 <get_eit_entry>
 8007820:	2800      	cmp	r0, #0
 8007822:	d0f2      	beq.n	800780a <__gnu_Unwind_RaiseException+0x2e>
 8007824:	2009      	movs	r0, #9
 8007826:	b079      	add	sp, #484	; 0x1e4
 8007828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800782a:	4668      	mov	r0, sp
 800782c:	f7ff ff12 	bl	8007654 <restore_non_core_regs>
 8007830:	2d06      	cmp	r5, #6
 8007832:	d1f7      	bne.n	8007824 <__gnu_Unwind_RaiseException+0x48>
 8007834:	4639      	mov	r1, r7
 8007836:	4620      	mov	r0, r4
 8007838:	f7ff ff42 	bl	80076c0 <unwind_phase2>

0800783c <__gnu_Unwind_ForcedUnwind>:
 800783c:	b430      	push	{r4, r5}
 800783e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8007840:	60c1      	str	r1, [r0, #12]
 8007842:	6182      	str	r2, [r0, #24]
 8007844:	4619      	mov	r1, r3
 8007846:	641d      	str	r5, [r3, #64]	; 0x40
 8007848:	2200      	movs	r2, #0
 800784a:	bc30      	pop	{r4, r5}
 800784c:	e758      	b.n	8007700 <unwind_phase2_forced>
 800784e:	bf00      	nop

08007850 <__gnu_Unwind_Resume>:
 8007850:	b570      	push	{r4, r5, r6, lr}
 8007852:	6943      	ldr	r3, [r0, #20]
 8007854:	68c6      	ldr	r6, [r0, #12]
 8007856:	640b      	str	r3, [r1, #64]	; 0x40
 8007858:	b126      	cbz	r6, 8007864 <__gnu_Unwind_Resume+0x14>
 800785a:	2201      	movs	r2, #1
 800785c:	f7ff ff50 	bl	8007700 <unwind_phase2_forced>
 8007860:	f00e ff8e 	bl	8016780 <abort>
 8007864:	6903      	ldr	r3, [r0, #16]
 8007866:	460a      	mov	r2, r1
 8007868:	4604      	mov	r4, r0
 800786a:	460d      	mov	r5, r1
 800786c:	4601      	mov	r1, r0
 800786e:	2002      	movs	r0, #2
 8007870:	4798      	blx	r3
 8007872:	2807      	cmp	r0, #7
 8007874:	d007      	beq.n	8007886 <__gnu_Unwind_Resume+0x36>
 8007876:	2808      	cmp	r0, #8
 8007878:	d103      	bne.n	8007882 <__gnu_Unwind_Resume+0x32>
 800787a:	4629      	mov	r1, r5
 800787c:	4620      	mov	r0, r4
 800787e:	f7ff ff1f 	bl	80076c0 <unwind_phase2>
 8007882:	f00e ff7d 	bl	8016780 <abort>
 8007886:	4630      	mov	r0, r6
 8007888:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800788a:	f7ff ff17 	bl	80076bc <_Unwind_DebugHook>
 800788e:	1d28      	adds	r0, r5, #4
 8007890:	f000 fb2e 	bl	8007ef0 <__restore_core_regs>

08007894 <__gnu_Unwind_Resume_or_Rethrow>:
 8007894:	68c2      	ldr	r2, [r0, #12]
 8007896:	b12a      	cbz	r2, 80078a4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8007898:	b410      	push	{r4}
 800789a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 800789c:	2200      	movs	r2, #0
 800789e:	640c      	str	r4, [r1, #64]	; 0x40
 80078a0:	bc10      	pop	{r4}
 80078a2:	e72d      	b.n	8007700 <unwind_phase2_forced>
 80078a4:	e79a      	b.n	80077dc <__gnu_Unwind_RaiseException>
 80078a6:	bf00      	nop

080078a8 <_Unwind_Complete>:
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop

080078ac <_Unwind_DeleteException>:
 80078ac:	6883      	ldr	r3, [r0, #8]
 80078ae:	b113      	cbz	r3, 80078b6 <_Unwind_DeleteException+0xa>
 80078b0:	4601      	mov	r1, r0
 80078b2:	2001      	movs	r0, #1
 80078b4:	4718      	bx	r3
 80078b6:	4770      	bx	lr

080078b8 <_Unwind_VRS_Get>:
 80078b8:	b500      	push	{lr}
 80078ba:	2904      	cmp	r1, #4
 80078bc:	d807      	bhi.n	80078ce <_Unwind_VRS_Get+0x16>
 80078be:	e8df f001 	tbb	[pc, r1]
 80078c2:	0903      	.short	0x0903
 80078c4:	0906      	.short	0x0906
 80078c6:	09          	.byte	0x09
 80078c7:	00          	.byte	0x00
 80078c8:	b90b      	cbnz	r3, 80078ce <_Unwind_VRS_Get+0x16>
 80078ca:	2a0f      	cmp	r2, #15
 80078cc:	d905      	bls.n	80078da <_Unwind_VRS_Get+0x22>
 80078ce:	2002      	movs	r0, #2
 80078d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80078d4:	2001      	movs	r0, #1
 80078d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80078da:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80078de:	6852      	ldr	r2, [r2, #4]
 80078e0:	4618      	mov	r0, r3
 80078e2:	9b01      	ldr	r3, [sp, #4]
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80078ea:	bf00      	nop

080078ec <_Unwind_GetGR>:
 80078ec:	2300      	movs	r3, #0
 80078ee:	b510      	push	{r4, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	ac03      	add	r4, sp, #12
 80078f4:	460a      	mov	r2, r1
 80078f6:	9400      	str	r4, [sp, #0]
 80078f8:	4619      	mov	r1, r3
 80078fa:	f7ff ffdd 	bl	80078b8 <_Unwind_VRS_Get>
 80078fe:	9803      	ldr	r0, [sp, #12]
 8007900:	b004      	add	sp, #16
 8007902:	bd10      	pop	{r4, pc}

08007904 <_Unwind_VRS_Set>:
 8007904:	b500      	push	{lr}
 8007906:	2904      	cmp	r1, #4
 8007908:	d807      	bhi.n	800791a <_Unwind_VRS_Set+0x16>
 800790a:	e8df f001 	tbb	[pc, r1]
 800790e:	0903      	.short	0x0903
 8007910:	0906      	.short	0x0906
 8007912:	09          	.byte	0x09
 8007913:	00          	.byte	0x00
 8007914:	b90b      	cbnz	r3, 800791a <_Unwind_VRS_Set+0x16>
 8007916:	2a0f      	cmp	r2, #15
 8007918:	d905      	bls.n	8007926 <_Unwind_VRS_Set+0x22>
 800791a:	2002      	movs	r0, #2
 800791c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007920:	2001      	movs	r0, #1
 8007922:	f85d fb04 	ldr.w	pc, [sp], #4
 8007926:	9901      	ldr	r1, [sp, #4]
 8007928:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800792c:	6809      	ldr	r1, [r1, #0]
 800792e:	4618      	mov	r0, r3
 8007930:	6051      	str	r1, [r2, #4]
 8007932:	f85d fb04 	ldr.w	pc, [sp], #4
 8007936:	bf00      	nop

08007938 <_Unwind_SetGR>:
 8007938:	2300      	movs	r3, #0
 800793a:	b510      	push	{r4, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	ac04      	add	r4, sp, #16
 8007940:	f844 2d04 	str.w	r2, [r4, #-4]!
 8007944:	9400      	str	r4, [sp, #0]
 8007946:	460a      	mov	r2, r1
 8007948:	4619      	mov	r1, r3
 800794a:	f7ff ffdb 	bl	8007904 <_Unwind_VRS_Set>
 800794e:	b004      	add	sp, #16
 8007950:	bd10      	pop	{r4, pc}
 8007952:	bf00      	nop

08007954 <__gnu_Unwind_Backtrace>:
 8007954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007956:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800795a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800795c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8007960:	6413      	str	r3, [r2, #64]	; 0x40
 8007962:	1d15      	adds	r5, r2, #4
 8007964:	ac17      	add	r4, sp, #92	; 0x5c
 8007966:	4607      	mov	r7, r0
 8007968:	460e      	mov	r6, r1
 800796a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800796c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800796e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007976:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800797a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800797e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8007982:	e012      	b.n	80079aa <__gnu_Unwind_Backtrace+0x56>
 8007984:	210c      	movs	r1, #12
 8007986:	a816      	add	r0, sp, #88	; 0x58
 8007988:	466a      	mov	r2, sp
 800798a:	f7ff ffd5 	bl	8007938 <_Unwind_SetGR>
 800798e:	4631      	mov	r1, r6
 8007990:	a816      	add	r0, sp, #88	; 0x58
 8007992:	47b8      	blx	r7
 8007994:	b978      	cbnz	r0, 80079b6 <__gnu_Unwind_Backtrace+0x62>
 8007996:	9b04      	ldr	r3, [sp, #16]
 8007998:	aa16      	add	r2, sp, #88	; 0x58
 800799a:	4669      	mov	r1, sp
 800799c:	2008      	movs	r0, #8
 800799e:	4798      	blx	r3
 80079a0:	2805      	cmp	r0, #5
 80079a2:	4604      	mov	r4, r0
 80079a4:	d008      	beq.n	80079b8 <__gnu_Unwind_Backtrace+0x64>
 80079a6:	2809      	cmp	r0, #9
 80079a8:	d005      	beq.n	80079b6 <__gnu_Unwind_Backtrace+0x62>
 80079aa:	9926      	ldr	r1, [sp, #152]	; 0x98
 80079ac:	4668      	mov	r0, sp
 80079ae:	f7ff fdff 	bl	80075b0 <get_eit_entry>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d0e6      	beq.n	8007984 <__gnu_Unwind_Backtrace+0x30>
 80079b6:	2409      	movs	r4, #9
 80079b8:	a816      	add	r0, sp, #88	; 0x58
 80079ba:	f7ff fe4b 	bl	8007654 <restore_non_core_regs>
 80079be:	4620      	mov	r0, r4
 80079c0:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80079c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079c6:	bf00      	nop

080079c8 <__gnu_unwind_pr_common>:
 80079c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80079ce:	4691      	mov	r9, r2
 80079d0:	6822      	ldr	r2, [r4, #0]
 80079d2:	b08b      	sub	sp, #44	; 0x2c
 80079d4:	3404      	adds	r4, #4
 80079d6:	460d      	mov	r5, r1
 80079d8:	9207      	str	r2, [sp, #28]
 80079da:	9408      	str	r4, [sp, #32]
 80079dc:	f000 0b03 	and.w	fp, r0, #3
 80079e0:	461e      	mov	r6, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d160      	bne.n	8007aa8 <__gnu_unwind_pr_common+0xe0>
 80079e6:	2303      	movs	r3, #3
 80079e8:	0212      	lsls	r2, r2, #8
 80079ea:	9207      	str	r2, [sp, #28]
 80079ec:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80079f0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80079f4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80079f6:	f1bb 0f02 	cmp.w	fp, #2
 80079fa:	bf08      	it	eq
 80079fc:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80079fe:	f013 0301 	ands.w	r3, r3, #1
 8007a02:	d140      	bne.n	8007a86 <__gnu_unwind_pr_common+0xbe>
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	f000 0308 	and.w	r3, r0, #8
 8007a0a:	9303      	str	r3, [sp, #12]
 8007a0c:	f8d4 8000 	ldr.w	r8, [r4]
 8007a10:	f1b8 0f00 	cmp.w	r8, #0
 8007a14:	d039      	beq.n	8007a8a <__gnu_unwind_pr_common+0xc2>
 8007a16:	2e02      	cmp	r6, #2
 8007a18:	d043      	beq.n	8007aa2 <__gnu_unwind_pr_common+0xda>
 8007a1a:	f8b4 8000 	ldrh.w	r8, [r4]
 8007a1e:	8867      	ldrh	r7, [r4, #2]
 8007a20:	3404      	adds	r4, #4
 8007a22:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007a24:	f027 0a01 	bic.w	sl, r7, #1
 8007a28:	210f      	movs	r1, #15
 8007a2a:	4648      	mov	r0, r9
 8007a2c:	449a      	add	sl, r3
 8007a2e:	f7ff ff5d 	bl	80078ec <_Unwind_GetGR>
 8007a32:	4582      	cmp	sl, r0
 8007a34:	d833      	bhi.n	8007a9e <__gnu_unwind_pr_common+0xd6>
 8007a36:	f028 0301 	bic.w	r3, r8, #1
 8007a3a:	449a      	add	sl, r3
 8007a3c:	4550      	cmp	r0, sl
 8007a3e:	bf2c      	ite	cs
 8007a40:	2000      	movcs	r0, #0
 8007a42:	2001      	movcc	r0, #1
 8007a44:	007f      	lsls	r7, r7, #1
 8007a46:	f007 0702 	and.w	r7, r7, #2
 8007a4a:	f008 0801 	and.w	r8, r8, #1
 8007a4e:	ea47 0708 	orr.w	r7, r7, r8
 8007a52:	2f01      	cmp	r7, #1
 8007a54:	d03e      	beq.n	8007ad4 <__gnu_unwind_pr_common+0x10c>
 8007a56:	d335      	bcc.n	8007ac4 <__gnu_unwind_pr_common+0xfc>
 8007a58:	2f02      	cmp	r7, #2
 8007a5a:	d11c      	bne.n	8007a96 <__gnu_unwind_pr_common+0xce>
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a62:	9202      	str	r2, [sp, #8]
 8007a64:	f1bb 0f00 	cmp.w	fp, #0
 8007a68:	d176      	bne.n	8007b58 <__gnu_unwind_pr_common+0x190>
 8007a6a:	b128      	cbz	r0, 8007a78 <__gnu_unwind_pr_common+0xb0>
 8007a6c:	9903      	ldr	r1, [sp, #12]
 8007a6e:	2900      	cmp	r1, #0
 8007a70:	d07e      	beq.n	8007b70 <__gnu_unwind_pr_common+0x1a8>
 8007a72:	2a00      	cmp	r2, #0
 8007a74:	f000 80a6 	beq.w	8007bc4 <__gnu_unwind_pr_common+0x1fc>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	db77      	blt.n	8007b6c <__gnu_unwind_pr_common+0x1a4>
 8007a7c:	9b02      	ldr	r3, [sp, #8]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007a84:	e7c2      	b.n	8007a0c <__gnu_unwind_pr_common+0x44>
 8007a86:	2300      	movs	r3, #0
 8007a88:	9301      	str	r3, [sp, #4]
 8007a8a:	2e02      	cmp	r6, #2
 8007a8c:	dd3e      	ble.n	8007b0c <__gnu_unwind_pr_common+0x144>
 8007a8e:	f7ff fe13 	bl	80076b8 <__gnu_unwind_24bit.isra.1>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	d040      	beq.n	8007b18 <__gnu_unwind_pr_common+0x150>
 8007a96:	2009      	movs	r0, #9
 8007a98:	b00b      	add	sp, #44	; 0x2c
 8007a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	e7d0      	b.n	8007a44 <__gnu_unwind_pr_common+0x7c>
 8007aa2:	6867      	ldr	r7, [r4, #4]
 8007aa4:	3408      	adds	r4, #8
 8007aa6:	e7bc      	b.n	8007a22 <__gnu_unwind_pr_common+0x5a>
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	dca3      	bgt.n	80079f4 <__gnu_unwind_pr_common+0x2c>
 8007aac:	2102      	movs	r1, #2
 8007aae:	0c13      	lsrs	r3, r2, #16
 8007ab0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8007ab4:	0412      	lsls	r2, r2, #16
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007abc:	9207      	str	r2, [sp, #28]
 8007abe:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8007ac2:	e797      	b.n	80079f4 <__gnu_unwind_pr_common+0x2c>
 8007ac4:	f1bb 0f00 	cmp.w	fp, #0
 8007ac8:	d002      	beq.n	8007ad0 <__gnu_unwind_pr_common+0x108>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	f040 80bd 	bne.w	8007c4a <__gnu_unwind_pr_common+0x282>
 8007ad0:	3404      	adds	r4, #4
 8007ad2:	e79b      	b.n	8007a0c <__gnu_unwind_pr_common+0x44>
 8007ad4:	f1bb 0f00 	cmp.w	fp, #0
 8007ad8:	d125      	bne.n	8007b26 <__gnu_unwind_pr_common+0x15e>
 8007ada:	b1a8      	cbz	r0, 8007b08 <__gnu_unwind_pr_common+0x140>
 8007adc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8007ae0:	1c99      	adds	r1, r3, #2
 8007ae2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007ae6:	d0d6      	beq.n	8007a96 <__gnu_unwind_pr_common+0xce>
 8007ae8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8007aec:	3301      	adds	r3, #1
 8007aee:	9106      	str	r1, [sp, #24]
 8007af0:	f000 80a3 	beq.w	8007c3a <__gnu_unwind_pr_common+0x272>
 8007af4:	1d20      	adds	r0, r4, #4
 8007af6:	f7ff fdd9 	bl	80076ac <_Unwind_decode_typeinfo_ptr.isra.0>
 8007afa:	ab06      	add	r3, sp, #24
 8007afc:	4601      	mov	r1, r0
 8007afe:	4628      	mov	r0, r5
 8007b00:	f00d ff4c 	bl	801599c <__cxa_type_match>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d177      	bne.n	8007bf8 <__gnu_unwind_pr_common+0x230>
 8007b08:	3408      	adds	r4, #8
 8007b0a:	e77f      	b.n	8007a0c <__gnu_unwind_pr_common+0x44>
 8007b0c:	a907      	add	r1, sp, #28
 8007b0e:	4648      	mov	r0, r9
 8007b10:	f000 faf0 	bl	80080f4 <__gnu_unwind_execute>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d1be      	bne.n	8007a96 <__gnu_unwind_pr_common+0xce>
 8007b18:	9b01      	ldr	r3, [sp, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d15c      	bne.n	8007bd8 <__gnu_unwind_pr_common+0x210>
 8007b1e:	2008      	movs	r0, #8
 8007b20:	b00b      	add	sp, #44	; 0x2c
 8007b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b26:	210d      	movs	r1, #13
 8007b28:	4648      	mov	r0, r9
 8007b2a:	6a2f      	ldr	r7, [r5, #32]
 8007b2c:	f7ff fede 	bl	80078ec <_Unwind_GetGR>
 8007b30:	4287      	cmp	r7, r0
 8007b32:	d1e9      	bne.n	8007b08 <__gnu_unwind_pr_common+0x140>
 8007b34:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007b36:	429c      	cmp	r4, r3
 8007b38:	d1e6      	bne.n	8007b08 <__gnu_unwind_pr_common+0x140>
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f7ff fcea 	bl	8007514 <selfrel_offset31>
 8007b40:	210f      	movs	r1, #15
 8007b42:	4602      	mov	r2, r0
 8007b44:	4648      	mov	r0, r9
 8007b46:	f7ff fef7 	bl	8007938 <_Unwind_SetGR>
 8007b4a:	4648      	mov	r0, r9
 8007b4c:	462a      	mov	r2, r5
 8007b4e:	2100      	movs	r1, #0
 8007b50:	f7ff fef2 	bl	8007938 <_Unwind_SetGR>
 8007b54:	2007      	movs	r0, #7
 8007b56:	e79f      	b.n	8007a98 <__gnu_unwind_pr_common+0xd0>
 8007b58:	210d      	movs	r1, #13
 8007b5a:	4648      	mov	r0, r9
 8007b5c:	6a2f      	ldr	r7, [r5, #32]
 8007b5e:	f7ff fec5 	bl	80078ec <_Unwind_GetGR>
 8007b62:	4287      	cmp	r7, r0
 8007b64:	d058      	beq.n	8007c18 <__gnu_unwind_pr_common+0x250>
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	da87      	bge.n	8007a7c <__gnu_unwind_pr_common+0xb4>
 8007b6c:	3404      	adds	r4, #4
 8007b6e:	e785      	b.n	8007a7c <__gnu_unwind_pr_common+0xb4>
 8007b70:	9b02      	ldr	r3, [sp, #8]
 8007b72:	b33b      	cbz	r3, 8007bc4 <__gnu_unwind_pr_common+0x1fc>
 8007b74:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8007b78:	1d27      	adds	r7, r4, #4
 8007b7a:	f8cd b010 	str.w	fp, [sp, #16]
 8007b7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007b82:	46a3      	mov	fp, r4
 8007b84:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007b88:	461c      	mov	r4, r3
 8007b8a:	9605      	str	r6, [sp, #20]
 8007b8c:	e002      	b.n	8007b94 <__gnu_unwind_pr_common+0x1cc>
 8007b8e:	45b2      	cmp	sl, r6
 8007b90:	46b0      	mov	r8, r6
 8007b92:	d016      	beq.n	8007bc2 <__gnu_unwind_pr_common+0x1fa>
 8007b94:	4638      	mov	r0, r7
 8007b96:	9406      	str	r4, [sp, #24]
 8007b98:	f7ff fd88 	bl	80076ac <_Unwind_decode_typeinfo_ptr.isra.0>
 8007b9c:	ab06      	add	r3, sp, #24
 8007b9e:	4601      	mov	r1, r0
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f00d fefa 	bl	801599c <__cxa_type_match>
 8007ba8:	f108 0601 	add.w	r6, r8, #1
 8007bac:	3704      	adds	r7, #4
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d0ed      	beq.n	8007b8e <__gnu_unwind_pr_common+0x1c6>
 8007bb2:	9b02      	ldr	r3, [sp, #8]
 8007bb4:	465c      	mov	r4, fp
 8007bb6:	4543      	cmp	r3, r8
 8007bb8:	f8dd b010 	ldr.w	fp, [sp, #16]
 8007bbc:	9e05      	ldr	r6, [sp, #20]
 8007bbe:	d1d2      	bne.n	8007b66 <__gnu_unwind_pr_common+0x19e>
 8007bc0:	e000      	b.n	8007bc4 <__gnu_unwind_pr_common+0x1fc>
 8007bc2:	465c      	mov	r4, fp
 8007bc4:	4648      	mov	r0, r9
 8007bc6:	210d      	movs	r1, #13
 8007bc8:	f7ff fe90 	bl	80078ec <_Unwind_GetGR>
 8007bcc:	9b06      	ldr	r3, [sp, #24]
 8007bce:	6228      	str	r0, [r5, #32]
 8007bd0:	62ac      	str	r4, [r5, #40]	; 0x28
 8007bd2:	626b      	str	r3, [r5, #36]	; 0x24
 8007bd4:	2006      	movs	r0, #6
 8007bd6:	e75f      	b.n	8007a98 <__gnu_unwind_pr_common+0xd0>
 8007bd8:	210f      	movs	r1, #15
 8007bda:	4648      	mov	r0, r9
 8007bdc:	f7ff fe86 	bl	80078ec <_Unwind_GetGR>
 8007be0:	210e      	movs	r1, #14
 8007be2:	4602      	mov	r2, r0
 8007be4:	4648      	mov	r0, r9
 8007be6:	f7ff fea7 	bl	8007938 <_Unwind_SetGR>
 8007bea:	4648      	mov	r0, r9
 8007bec:	4a29      	ldr	r2, [pc, #164]	; (8007c94 <__gnu_unwind_pr_common+0x2cc>)
 8007bee:	210f      	movs	r1, #15
 8007bf0:	f7ff fea2 	bl	8007938 <_Unwind_SetGR>
 8007bf4:	2007      	movs	r0, #7
 8007bf6:	e74f      	b.n	8007a98 <__gnu_unwind_pr_common+0xd0>
 8007bf8:	4607      	mov	r7, r0
 8007bfa:	210d      	movs	r1, #13
 8007bfc:	4648      	mov	r0, r9
 8007bfe:	f7ff fe75 	bl	80078ec <_Unwind_GetGR>
 8007c02:	2f02      	cmp	r7, #2
 8007c04:	6228      	str	r0, [r5, #32]
 8007c06:	d11d      	bne.n	8007c44 <__gnu_unwind_pr_common+0x27c>
 8007c08:	462b      	mov	r3, r5
 8007c0a:	9a06      	ldr	r2, [sp, #24]
 8007c0c:	f843 2f2c 	str.w	r2, [r3, #44]!
 8007c10:	626b      	str	r3, [r5, #36]	; 0x24
 8007c12:	62ac      	str	r4, [r5, #40]	; 0x28
 8007c14:	2006      	movs	r0, #6
 8007c16:	e73f      	b.n	8007a98 <__gnu_unwind_pr_common+0xd0>
 8007c18:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007c1a:	429c      	cmp	r4, r3
 8007c1c:	d1a3      	bne.n	8007b66 <__gnu_unwind_pr_common+0x19e>
 8007c1e:	2204      	movs	r2, #4
 8007c20:	2700      	movs	r7, #0
 8007c22:	9902      	ldr	r1, [sp, #8]
 8007c24:	18a3      	adds	r3, r4, r2
 8007c26:	62a9      	str	r1, [r5, #40]	; 0x28
 8007c28:	62ef      	str	r7, [r5, #44]	; 0x2c
 8007c2a:	632a      	str	r2, [r5, #48]	; 0x30
 8007c2c:	636b      	str	r3, [r5, #52]	; 0x34
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	42bb      	cmp	r3, r7
 8007c32:	db1d      	blt.n	8007c70 <__gnu_unwind_pr_common+0x2a8>
 8007c34:	2301      	movs	r3, #1
 8007c36:	9301      	str	r3, [sp, #4]
 8007c38:	e720      	b.n	8007a7c <__gnu_unwind_pr_common+0xb4>
 8007c3a:	4648      	mov	r0, r9
 8007c3c:	210d      	movs	r1, #13
 8007c3e:	f7ff fe55 	bl	80078ec <_Unwind_GetGR>
 8007c42:	6228      	str	r0, [r5, #32]
 8007c44:	9b06      	ldr	r3, [sp, #24]
 8007c46:	626b      	str	r3, [r5, #36]	; 0x24
 8007c48:	e7e3      	b.n	8007c12 <__gnu_unwind_pr_common+0x24a>
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f7ff fc62 	bl	8007514 <selfrel_offset31>
 8007c50:	3404      	adds	r4, #4
 8007c52:	4606      	mov	r6, r0
 8007c54:	63ac      	str	r4, [r5, #56]	; 0x38
 8007c56:	4628      	mov	r0, r5
 8007c58:	f00d fefc 	bl	8015a54 <__cxa_begin_cleanup>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	f43f af1a 	beq.w	8007a96 <__gnu_unwind_pr_common+0xce>
 8007c62:	4648      	mov	r0, r9
 8007c64:	4632      	mov	r2, r6
 8007c66:	210f      	movs	r1, #15
 8007c68:	f7ff fe66 	bl	8007938 <_Unwind_SetGR>
 8007c6c:	2007      	movs	r0, #7
 8007c6e:	e713      	b.n	8007a98 <__gnu_unwind_pr_common+0xd0>
 8007c70:	4608      	mov	r0, r1
 8007c72:	3001      	adds	r0, #1
 8007c74:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007c78:	f7ff fc4c 	bl	8007514 <selfrel_offset31>
 8007c7c:	210f      	movs	r1, #15
 8007c7e:	4602      	mov	r2, r0
 8007c80:	4648      	mov	r0, r9
 8007c82:	f7ff fe59 	bl	8007938 <_Unwind_SetGR>
 8007c86:	4648      	mov	r0, r9
 8007c88:	462a      	mov	r2, r5
 8007c8a:	4639      	mov	r1, r7
 8007c8c:	f7ff fe54 	bl	8007938 <_Unwind_SetGR>
 8007c90:	2007      	movs	r0, #7
 8007c92:	e701      	b.n	8007a98 <__gnu_unwind_pr_common+0xd0>
 8007c94:	08016449 	.word	0x08016449

08007c98 <__aeabi_unwind_cpp_pr0>:
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e695      	b.n	80079c8 <__gnu_unwind_pr_common>

08007c9c <__aeabi_unwind_cpp_pr1>:
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e693      	b.n	80079c8 <__gnu_unwind_pr_common>

08007ca0 <__aeabi_unwind_cpp_pr2>:
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	e691      	b.n	80079c8 <__gnu_unwind_pr_common>

08007ca4 <_Unwind_VRS_Pop>:
 8007ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	b0c5      	sub	sp, #276	; 0x114
 8007caa:	2904      	cmp	r1, #4
 8007cac:	d80d      	bhi.n	8007cca <_Unwind_VRS_Pop+0x26>
 8007cae:	e8df f001 	tbb	[pc, r1]
 8007cb2:	0355      	.short	0x0355
 8007cb4:	310c      	.short	0x310c
 8007cb6:	0f          	.byte	0x0f
 8007cb7:	00          	.byte	0x00
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8007cbe:	b295      	uxth	r5, r2
 8007cc0:	d164      	bne.n	8007d8c <_Unwind_VRS_Pop+0xe8>
 8007cc2:	1972      	adds	r2, r6, r5
 8007cc4:	2a10      	cmp	r2, #16
 8007cc6:	f240 809d 	bls.w	8007e04 <_Unwind_VRS_Pop+0x160>
 8007cca:	2002      	movs	r0, #2
 8007ccc:	b045      	add	sp, #276	; 0x114
 8007cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1fa      	bne.n	8007cca <_Unwind_VRS_Pop+0x26>
 8007cd4:	2a10      	cmp	r2, #16
 8007cd6:	d8f8      	bhi.n	8007cca <_Unwind_VRS_Pop+0x26>
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	06d8      	lsls	r0, r3, #27
 8007cdc:	f100 80c8 	bmi.w	8007e70 <_Unwind_VRS_Pop+0x1cc>
 8007ce0:	ae22      	add	r6, sp, #136	; 0x88
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	9201      	str	r2, [sp, #4]
 8007ce6:	2501      	movs	r5, #1
 8007ce8:	f000 f974 	bl	8007fd4 <__gnu_Unwind_Save_WMMXC>
 8007cec:	2300      	movs	r3, #0
 8007cee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007cf0:	9a01      	ldr	r2, [sp, #4]
 8007cf2:	fa05 f103 	lsl.w	r1, r5, r3
 8007cf6:	4211      	tst	r1, r2
 8007cf8:	d003      	beq.n	8007d02 <_Unwind_VRS_Pop+0x5e>
 8007cfa:	6801      	ldr	r1, [r0, #0]
 8007cfc:	3004      	adds	r0, #4
 8007cfe:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8007d02:	3301      	adds	r3, #1
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d1f4      	bne.n	8007cf2 <_Unwind_VRS_Pop+0x4e>
 8007d08:	63a0      	str	r0, [r4, #56]	; 0x38
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f000 f958 	bl	8007fc0 <__gnu_Unwind_Restore_WMMXC>
 8007d10:	2000      	movs	r0, #0
 8007d12:	e7db      	b.n	8007ccc <_Unwind_VRS_Pop+0x28>
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d1d8      	bne.n	8007cca <_Unwind_VRS_Pop+0x26>
 8007d18:	0c15      	lsrs	r5, r2, #16
 8007d1a:	b297      	uxth	r7, r2
 8007d1c:	19eb      	adds	r3, r5, r7
 8007d1e:	2b10      	cmp	r3, #16
 8007d20:	d8d3      	bhi.n	8007cca <_Unwind_VRS_Pop+0x26>
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	071e      	lsls	r6, r3, #28
 8007d26:	f100 80b7 	bmi.w	8007e98 <_Unwind_VRS_Pop+0x1f4>
 8007d2a:	ae22      	add	r6, sp, #136	; 0x88
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f000 f925 	bl	8007f7c <__gnu_Unwind_Save_WMMXD>
 8007d32:	00ed      	lsls	r5, r5, #3
 8007d34:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007d36:	b15f      	cbz	r7, 8007d50 <_Unwind_VRS_Pop+0xac>
 8007d38:	3d04      	subs	r5, #4
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	1971      	adds	r1, r6, r5
 8007d3e:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8007d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d46:	4283      	cmp	r3, r0
 8007d48:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d4c:	d1f9      	bne.n	8007d42 <_Unwind_VRS_Pop+0x9e>
 8007d4e:	4618      	mov	r0, r3
 8007d50:	63a0      	str	r0, [r4, #56]	; 0x38
 8007d52:	4630      	mov	r0, r6
 8007d54:	f000 f8f0 	bl	8007f38 <__gnu_Unwind_Restore_WMMXD>
 8007d58:	2000      	movs	r0, #0
 8007d5a:	e7b7      	b.n	8007ccc <_Unwind_VRS_Pop+0x28>
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1b4      	bne.n	8007cca <_Unwind_VRS_Pop+0x26>
 8007d60:	2701      	movs	r7, #1
 8007d62:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007d64:	b296      	uxth	r6, r2
 8007d66:	1d20      	adds	r0, r4, #4
 8007d68:	fa07 f103 	lsl.w	r1, r7, r3
 8007d6c:	4231      	tst	r1, r6
 8007d6e:	f103 0301 	add.w	r3, r3, #1
 8007d72:	d002      	beq.n	8007d7a <_Unwind_VRS_Pop+0xd6>
 8007d74:	6829      	ldr	r1, [r5, #0]
 8007d76:	3504      	adds	r5, #4
 8007d78:	6001      	str	r1, [r0, #0]
 8007d7a:	2b10      	cmp	r3, #16
 8007d7c:	f100 0004 	add.w	r0, r0, #4
 8007d80:	d1f2      	bne.n	8007d68 <_Unwind_VRS_Pop+0xc4>
 8007d82:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8007d86:	d13b      	bne.n	8007e00 <_Unwind_VRS_Pop+0x15c>
 8007d88:	63a5      	str	r5, [r4, #56]	; 0x38
 8007d8a:	e79f      	b.n	8007ccc <_Unwind_VRS_Pop+0x28>
 8007d8c:	2b05      	cmp	r3, #5
 8007d8e:	d19c      	bne.n	8007cca <_Unwind_VRS_Pop+0x26>
 8007d90:	1977      	adds	r7, r6, r5
 8007d92:	2f20      	cmp	r7, #32
 8007d94:	d899      	bhi.n	8007cca <_Unwind_VRS_Pop+0x26>
 8007d96:	2e0f      	cmp	r6, #15
 8007d98:	d966      	bls.n	8007e68 <_Unwind_VRS_Pop+0x1c4>
 8007d9a:	462f      	mov	r7, r5
 8007d9c:	2d00      	cmp	r5, #0
 8007d9e:	d13a      	bne.n	8007e16 <_Unwind_VRS_Pop+0x172>
 8007da0:	462a      	mov	r2, r5
 8007da2:	2700      	movs	r7, #0
 8007da4:	2a00      	cmp	r2, #0
 8007da6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007da8:	dd72      	ble.n	8007e90 <_Unwind_VRS_Pop+0x1ec>
 8007daa:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8007dae:	4601      	mov	r1, r0
 8007db0:	a844      	add	r0, sp, #272	; 0x110
 8007db2:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8007db6:	388c      	subs	r0, #140	; 0x8c
 8007db8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007dbc:	4291      	cmp	r1, r2
 8007dbe:	f840 5f04 	str.w	r5, [r0, #4]!
 8007dc2:	d1f9      	bne.n	8007db8 <_Unwind_VRS_Pop+0x114>
 8007dc4:	4608      	mov	r0, r1
 8007dc6:	b197      	cbz	r7, 8007dee <_Unwind_VRS_Pop+0x14a>
 8007dc8:	2e10      	cmp	r6, #16
 8007dca:	4632      	mov	r2, r6
 8007dcc:	bf38      	it	cc
 8007dce:	2210      	movcc	r2, #16
 8007dd0:	a944      	add	r1, sp, #272	; 0x110
 8007dd2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007dd6:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8007dda:	0079      	lsls	r1, r7, #1
 8007ddc:	3a04      	subs	r2, #4
 8007dde:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007de2:	f850 5b04 	ldr.w	r5, [r0], #4
 8007de6:	4288      	cmp	r0, r1
 8007de8:	f842 5f04 	str.w	r5, [r2, #4]!
 8007dec:	d1f9      	bne.n	8007de2 <_Unwind_VRS_Pop+0x13e>
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d048      	beq.n	8007e84 <_Unwind_VRS_Pop+0x1e0>
 8007df2:	2e0f      	cmp	r6, #15
 8007df4:	63a1      	str	r1, [r4, #56]	; 0x38
 8007df6:	d933      	bls.n	8007e60 <_Unwind_VRS_Pop+0x1bc>
 8007df8:	b117      	cbz	r7, 8007e00 <_Unwind_VRS_Pop+0x15c>
 8007dfa:	a802      	add	r0, sp, #8
 8007dfc:	f000 f894 	bl	8007f28 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8007e00:	2000      	movs	r0, #0
 8007e02:	e763      	b.n	8007ccc <_Unwind_VRS_Pop+0x28>
 8007e04:	2e0f      	cmp	r6, #15
 8007e06:	f63f af60 	bhi.w	8007cca <_Unwind_VRS_Pop+0x26>
 8007e0a:	2700      	movs	r7, #0
 8007e0c:	6822      	ldr	r2, [r4, #0]
 8007e0e:	07d1      	lsls	r1, r2, #31
 8007e10:	d417      	bmi.n	8007e42 <_Unwind_VRS_Pop+0x19e>
 8007e12:	2f00      	cmp	r7, #0
 8007e14:	d060      	beq.n	8007ed8 <_Unwind_VRS_Pop+0x234>
 8007e16:	6822      	ldr	r2, [r4, #0]
 8007e18:	0751      	lsls	r1, r2, #29
 8007e1a:	d445      	bmi.n	8007ea8 <_Unwind_VRS_Pop+0x204>
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d04d      	beq.n	8007ebc <_Unwind_VRS_Pop+0x218>
 8007e20:	2e0f      	cmp	r6, #15
 8007e22:	d806      	bhi.n	8007e32 <_Unwind_VRS_Pop+0x18e>
 8007e24:	a822      	add	r0, sp, #136	; 0x88
 8007e26:	9301      	str	r3, [sp, #4]
 8007e28:	f000 f87a 	bl	8007f20 <__gnu_Unwind_Save_VFP_D>
 8007e2c:	9b01      	ldr	r3, [sp, #4]
 8007e2e:	2f00      	cmp	r7, #0
 8007e30:	d0b6      	beq.n	8007da0 <_Unwind_VRS_Pop+0xfc>
 8007e32:	a802      	add	r0, sp, #8
 8007e34:	9301      	str	r3, [sp, #4]
 8007e36:	f000 f87b 	bl	8007f30 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007e3a:	9b01      	ldr	r3, [sp, #4]
 8007e3c:	f1c6 0210 	rsb	r2, r6, #16
 8007e40:	e7b0      	b.n	8007da4 <_Unwind_VRS_Pop+0x100>
 8007e42:	f022 0101 	bic.w	r1, r2, #1
 8007e46:	2b05      	cmp	r3, #5
 8007e48:	6021      	str	r1, [r4, #0]
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	d03b      	beq.n	8007ec8 <_Unwind_VRS_Pop+0x224>
 8007e50:	f022 0203 	bic.w	r2, r2, #3
 8007e54:	f840 2b48 	str.w	r2, [r0], #72
 8007e58:	f000 f85a 	bl	8007f10 <__gnu_Unwind_Save_VFP>
 8007e5c:	9b01      	ldr	r3, [sp, #4]
 8007e5e:	e7d8      	b.n	8007e12 <_Unwind_VRS_Pop+0x16e>
 8007e60:	a822      	add	r0, sp, #136	; 0x88
 8007e62:	f000 f859 	bl	8007f18 <__gnu_Unwind_Restore_VFP_D>
 8007e66:	e7c7      	b.n	8007df8 <_Unwind_VRS_Pop+0x154>
 8007e68:	2f10      	cmp	r7, #16
 8007e6a:	d9ce      	bls.n	8007e0a <_Unwind_VRS_Pop+0x166>
 8007e6c:	3f10      	subs	r7, #16
 8007e6e:	e7cd      	b.n	8007e0c <_Unwind_VRS_Pop+0x168>
 8007e70:	f023 0310 	bic.w	r3, r3, #16
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8007e7a:	9201      	str	r2, [sp, #4]
 8007e7c:	f000 f8aa 	bl	8007fd4 <__gnu_Unwind_Save_WMMXC>
 8007e80:	9a01      	ldr	r2, [sp, #4]
 8007e82:	e72d      	b.n	8007ce0 <_Unwind_VRS_Pop+0x3c>
 8007e84:	3104      	adds	r1, #4
 8007e86:	63a1      	str	r1, [r4, #56]	; 0x38
 8007e88:	a822      	add	r0, sp, #136	; 0x88
 8007e8a:	f000 f83d 	bl	8007f08 <__gnu_Unwind_Restore_VFP>
 8007e8e:	e7b7      	b.n	8007e00 <_Unwind_VRS_Pop+0x15c>
 8007e90:	2f00      	cmp	r7, #0
 8007e92:	d199      	bne.n	8007dc8 <_Unwind_VRS_Pop+0x124>
 8007e94:	4601      	mov	r1, r0
 8007e96:	e7aa      	b.n	8007dee <_Unwind_VRS_Pop+0x14a>
 8007e98:	f023 0308 	bic.w	r3, r3, #8
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8007ea2:	f000 f86b 	bl	8007f7c <__gnu_Unwind_Save_WMMXD>
 8007ea6:	e740      	b.n	8007d2a <_Unwind_VRS_Pop+0x86>
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f022 0204 	bic.w	r2, r2, #4
 8007eae:	f840 2bd0 	str.w	r2, [r0], #208
 8007eb2:	9301      	str	r3, [sp, #4]
 8007eb4:	f000 f83c 	bl	8007f30 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007eb8:	9b01      	ldr	r3, [sp, #4]
 8007eba:	e7af      	b.n	8007e1c <_Unwind_VRS_Pop+0x178>
 8007ebc:	a822      	add	r0, sp, #136	; 0x88
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	f000 f826 	bl	8007f10 <__gnu_Unwind_Save_VFP>
 8007ec4:	9b01      	ldr	r3, [sp, #4]
 8007ec6:	e7b9      	b.n	8007e3c <_Unwind_VRS_Pop+0x198>
 8007ec8:	f041 0102 	orr.w	r1, r1, #2
 8007ecc:	f840 1b48 	str.w	r1, [r0], #72
 8007ed0:	f000 f826 	bl	8007f20 <__gnu_Unwind_Save_VFP_D>
 8007ed4:	9b01      	ldr	r3, [sp, #4]
 8007ed6:	e79c      	b.n	8007e12 <_Unwind_VRS_Pop+0x16e>
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d003      	beq.n	8007ee4 <_Unwind_VRS_Pop+0x240>
 8007edc:	2e0f      	cmp	r6, #15
 8007ede:	f63f af5f 	bhi.w	8007da0 <_Unwind_VRS_Pop+0xfc>
 8007ee2:	e79f      	b.n	8007e24 <_Unwind_VRS_Pop+0x180>
 8007ee4:	a822      	add	r0, sp, #136	; 0x88
 8007ee6:	9301      	str	r3, [sp, #4]
 8007ee8:	f000 f812 	bl	8007f10 <__gnu_Unwind_Save_VFP>
 8007eec:	9b01      	ldr	r3, [sp, #4]
 8007eee:	e757      	b.n	8007da0 <_Unwind_VRS_Pop+0xfc>

08007ef0 <__restore_core_regs>:
 8007ef0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8007ef4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8007ef8:	469c      	mov	ip, r3
 8007efa:	46a6      	mov	lr, r4
 8007efc:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8007f00:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8007f04:	46e5      	mov	sp, ip
 8007f06:	bd00      	pop	{pc}

08007f08 <__gnu_Unwind_Restore_VFP>:
 8007f08:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop

08007f10 <__gnu_Unwind_Save_VFP>:
 8007f10:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop

08007f18 <__gnu_Unwind_Restore_VFP_D>:
 8007f18:	ec90 0b20 	vldmia	r0, {d0-d15}
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop

08007f20 <__gnu_Unwind_Save_VFP_D>:
 8007f20:	ec80 0b20 	vstmia	r0, {d0-d15}
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop

08007f28 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8007f28:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop

08007f30 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8007f30:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop

08007f38 <__gnu_Unwind_Restore_WMMXD>:
 8007f38:	ecf0 0102 	ldfe	f0, [r0], #8
 8007f3c:	ecf0 1102 	ldfe	f1, [r0], #8
 8007f40:	ecf0 2102 	ldfe	f2, [r0], #8
 8007f44:	ecf0 3102 	ldfe	f3, [r0], #8
 8007f48:	ecf0 4102 	ldfe	f4, [r0], #8
 8007f4c:	ecf0 5102 	ldfe	f5, [r0], #8
 8007f50:	ecf0 6102 	ldfe	f6, [r0], #8
 8007f54:	ecf0 7102 	ldfe	f7, [r0], #8
 8007f58:	ecf0 8102 	ldfp	f0, [r0], #8
 8007f5c:	ecf0 9102 	ldfp	f1, [r0], #8
 8007f60:	ecf0 a102 	ldfp	f2, [r0], #8
 8007f64:	ecf0 b102 	ldfp	f3, [r0], #8
 8007f68:	ecf0 c102 	ldfp	f4, [r0], #8
 8007f6c:	ecf0 d102 	ldfp	f5, [r0], #8
 8007f70:	ecf0 e102 	ldfp	f6, [r0], #8
 8007f74:	ecf0 f102 	ldfp	f7, [r0], #8
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop

08007f7c <__gnu_Unwind_Save_WMMXD>:
 8007f7c:	ece0 0102 	stfe	f0, [r0], #8
 8007f80:	ece0 1102 	stfe	f1, [r0], #8
 8007f84:	ece0 2102 	stfe	f2, [r0], #8
 8007f88:	ece0 3102 	stfe	f3, [r0], #8
 8007f8c:	ece0 4102 	stfe	f4, [r0], #8
 8007f90:	ece0 5102 	stfe	f5, [r0], #8
 8007f94:	ece0 6102 	stfe	f6, [r0], #8
 8007f98:	ece0 7102 	stfe	f7, [r0], #8
 8007f9c:	ece0 8102 	stfp	f0, [r0], #8
 8007fa0:	ece0 9102 	stfp	f1, [r0], #8
 8007fa4:	ece0 a102 	stfp	f2, [r0], #8
 8007fa8:	ece0 b102 	stfp	f3, [r0], #8
 8007fac:	ece0 c102 	stfp	f4, [r0], #8
 8007fb0:	ece0 d102 	stfp	f5, [r0], #8
 8007fb4:	ece0 e102 	stfp	f6, [r0], #8
 8007fb8:	ece0 f102 	stfp	f7, [r0], #8
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop

08007fc0 <__gnu_Unwind_Restore_WMMXC>:
 8007fc0:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8007fc4:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8007fc8:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8007fcc:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop

08007fd4 <__gnu_Unwind_Save_WMMXC>:
 8007fd4:	fca0 8101 	stc2	1, cr8, [r0], #4
 8007fd8:	fca0 9101 	stc2	1, cr9, [r0], #4
 8007fdc:	fca0 a101 	stc2	1, cr10, [r0], #4
 8007fe0:	fca0 b101 	stc2	1, cr11, [r0], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop

08007fe8 <_Unwind_RaiseException>:
 8007fe8:	46ec      	mov	ip, sp
 8007fea:	b500      	push	{lr}
 8007fec:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007ff0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007ff4:	f04f 0300 	mov.w	r3, #0
 8007ff8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007ffc:	a901      	add	r1, sp, #4
 8007ffe:	f7ff fbed 	bl	80077dc <__gnu_Unwind_RaiseException>
 8008002:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8008006:	b012      	add	sp, #72	; 0x48
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop

0800800c <_Unwind_Resume>:
 800800c:	46ec      	mov	ip, sp
 800800e:	b500      	push	{lr}
 8008010:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008014:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008018:	f04f 0300 	mov.w	r3, #0
 800801c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008020:	a901      	add	r1, sp, #4
 8008022:	f7ff fc15 	bl	8007850 <__gnu_Unwind_Resume>
 8008026:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800802a:	b012      	add	sp, #72	; 0x48
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop

08008030 <_Unwind_Resume_or_Rethrow>:
 8008030:	46ec      	mov	ip, sp
 8008032:	b500      	push	{lr}
 8008034:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008038:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800803c:	f04f 0300 	mov.w	r3, #0
 8008040:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008044:	a901      	add	r1, sp, #4
 8008046:	f7ff fc25 	bl	8007894 <__gnu_Unwind_Resume_or_Rethrow>
 800804a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800804e:	b012      	add	sp, #72	; 0x48
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop

08008054 <_Unwind_ForcedUnwind>:
 8008054:	46ec      	mov	ip, sp
 8008056:	b500      	push	{lr}
 8008058:	e92d 5000 	stmdb	sp!, {ip, lr}
 800805c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008060:	f04f 0300 	mov.w	r3, #0
 8008064:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008068:	ab01      	add	r3, sp, #4
 800806a:	f7ff fbe7 	bl	800783c <__gnu_Unwind_ForcedUnwind>
 800806e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8008072:	b012      	add	sp, #72	; 0x48
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop

08008078 <_Unwind_Backtrace>:
 8008078:	46ec      	mov	ip, sp
 800807a:	b500      	push	{lr}
 800807c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008080:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008084:	f04f 0300 	mov.w	r3, #0
 8008088:	e92d 000c 	stmdb	sp!, {r2, r3}
 800808c:	aa01      	add	r2, sp, #4
 800808e:	f7ff fc61 	bl	8007954 <__gnu_Unwind_Backtrace>
 8008092:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8008096:	b012      	add	sp, #72	; 0x48
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop

0800809c <next_unwind_byte>:
 800809c:	7a02      	ldrb	r2, [r0, #8]
 800809e:	b91a      	cbnz	r2, 80080a8 <next_unwind_byte+0xc>
 80080a0:	7a43      	ldrb	r3, [r0, #9]
 80080a2:	b943      	cbnz	r3, 80080b6 <next_unwind_byte+0x1a>
 80080a4:	20b0      	movs	r0, #176	; 0xb0
 80080a6:	4770      	bx	lr
 80080a8:	6803      	ldr	r3, [r0, #0]
 80080aa:	3a01      	subs	r2, #1
 80080ac:	7202      	strb	r2, [r0, #8]
 80080ae:	021a      	lsls	r2, r3, #8
 80080b0:	6002      	str	r2, [r0, #0]
 80080b2:	0e18      	lsrs	r0, r3, #24
 80080b4:	4770      	bx	lr
 80080b6:	2103      	movs	r1, #3
 80080b8:	6842      	ldr	r2, [r0, #4]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	b410      	push	{r4}
 80080be:	7243      	strb	r3, [r0, #9]
 80080c0:	6813      	ldr	r3, [r2, #0]
 80080c2:	1d14      	adds	r4, r2, #4
 80080c4:	7201      	strb	r1, [r0, #8]
 80080c6:	021a      	lsls	r2, r3, #8
 80080c8:	6044      	str	r4, [r0, #4]
 80080ca:	6002      	str	r2, [r0, #0]
 80080cc:	bc10      	pop	{r4}
 80080ce:	0e18      	lsrs	r0, r3, #24
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop

080080d4 <_Unwind_GetGR.constprop.0>:
 80080d4:	2300      	movs	r3, #0
 80080d6:	b500      	push	{lr}
 80080d8:	b085      	sub	sp, #20
 80080da:	aa03      	add	r2, sp, #12
 80080dc:	9200      	str	r2, [sp, #0]
 80080de:	4619      	mov	r1, r3
 80080e0:	220c      	movs	r2, #12
 80080e2:	f7ff fbe9 	bl	80078b8 <_Unwind_VRS_Get>
 80080e6:	9803      	ldr	r0, [sp, #12]
 80080e8:	b005      	add	sp, #20
 80080ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80080ee:	bf00      	nop

080080f0 <unwind_UCB_from_context>:
 80080f0:	e7f0      	b.n	80080d4 <_Unwind_GetGR.constprop.0>
 80080f2:	bf00      	nop

080080f4 <__gnu_unwind_execute>:
 80080f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080f8:	4606      	mov	r6, r0
 80080fa:	460f      	mov	r7, r1
 80080fc:	f04f 0800 	mov.w	r8, #0
 8008100:	b085      	sub	sp, #20
 8008102:	4638      	mov	r0, r7
 8008104:	f7ff ffca 	bl	800809c <next_unwind_byte>
 8008108:	28b0      	cmp	r0, #176	; 0xb0
 800810a:	4604      	mov	r4, r0
 800810c:	d023      	beq.n	8008156 <__gnu_unwind_execute+0x62>
 800810e:	0605      	lsls	r5, r0, #24
 8008110:	d427      	bmi.n	8008162 <__gnu_unwind_execute+0x6e>
 8008112:	2300      	movs	r3, #0
 8008114:	f10d 090c 	add.w	r9, sp, #12
 8008118:	4619      	mov	r1, r3
 800811a:	0085      	lsls	r5, r0, #2
 800811c:	220d      	movs	r2, #13
 800811e:	f8cd 9000 	str.w	r9, [sp]
 8008122:	4630      	mov	r0, r6
 8008124:	f7ff fbc8 	bl	80078b8 <_Unwind_VRS_Get>
 8008128:	b2ed      	uxtb	r5, r5
 800812a:	9b03      	ldr	r3, [sp, #12]
 800812c:	0660      	lsls	r0, r4, #25
 800812e:	f105 0504 	add.w	r5, r5, #4
 8008132:	bf4c      	ite	mi
 8008134:	1b5d      	submi	r5, r3, r5
 8008136:	18ed      	addpl	r5, r5, r3
 8008138:	2300      	movs	r3, #0
 800813a:	220d      	movs	r2, #13
 800813c:	4619      	mov	r1, r3
 800813e:	f8cd 9000 	str.w	r9, [sp]
 8008142:	4630      	mov	r0, r6
 8008144:	9503      	str	r5, [sp, #12]
 8008146:	f7ff fbdd 	bl	8007904 <_Unwind_VRS_Set>
 800814a:	4638      	mov	r0, r7
 800814c:	f7ff ffa6 	bl	800809c <next_unwind_byte>
 8008150:	28b0      	cmp	r0, #176	; 0xb0
 8008152:	4604      	mov	r4, r0
 8008154:	d1db      	bne.n	800810e <__gnu_unwind_execute+0x1a>
 8008156:	f1b8 0f00 	cmp.w	r8, #0
 800815a:	f000 8094 	beq.w	8008286 <__gnu_unwind_execute+0x192>
 800815e:	2000      	movs	r0, #0
 8008160:	e01c      	b.n	800819c <__gnu_unwind_execute+0xa8>
 8008162:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8008166:	2b80      	cmp	r3, #128	; 0x80
 8008168:	d05c      	beq.n	8008224 <__gnu_unwind_execute+0x130>
 800816a:	2b90      	cmp	r3, #144	; 0x90
 800816c:	d019      	beq.n	80081a2 <__gnu_unwind_execute+0xae>
 800816e:	2ba0      	cmp	r3, #160	; 0xa0
 8008170:	d02c      	beq.n	80081cc <__gnu_unwind_execute+0xd8>
 8008172:	2bb0      	cmp	r3, #176	; 0xb0
 8008174:	d03e      	beq.n	80081f4 <__gnu_unwind_execute+0x100>
 8008176:	2bc0      	cmp	r3, #192	; 0xc0
 8008178:	d06b      	beq.n	8008252 <__gnu_unwind_execute+0x15e>
 800817a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800817e:	2bd0      	cmp	r3, #208	; 0xd0
 8008180:	d10b      	bne.n	800819a <__gnu_unwind_execute+0xa6>
 8008182:	f000 0207 	and.w	r2, r0, #7
 8008186:	3201      	adds	r2, #1
 8008188:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800818c:	2305      	movs	r3, #5
 800818e:	2101      	movs	r1, #1
 8008190:	4630      	mov	r0, r6
 8008192:	f7ff fd87 	bl	8007ca4 <_Unwind_VRS_Pop>
 8008196:	2800      	cmp	r0, #0
 8008198:	d0b3      	beq.n	8008102 <__gnu_unwind_execute+0xe>
 800819a:	2009      	movs	r0, #9
 800819c:	b005      	add	sp, #20
 800819e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081a2:	f000 030d 	and.w	r3, r0, #13
 80081a6:	2b0d      	cmp	r3, #13
 80081a8:	d0f7      	beq.n	800819a <__gnu_unwind_execute+0xa6>
 80081aa:	2300      	movs	r3, #0
 80081ac:	ad03      	add	r5, sp, #12
 80081ae:	f000 020f 	and.w	r2, r0, #15
 80081b2:	4619      	mov	r1, r3
 80081b4:	9500      	str	r5, [sp, #0]
 80081b6:	4630      	mov	r0, r6
 80081b8:	f7ff fb7e 	bl	80078b8 <_Unwind_VRS_Get>
 80081bc:	2300      	movs	r3, #0
 80081be:	9500      	str	r5, [sp, #0]
 80081c0:	4619      	mov	r1, r3
 80081c2:	220d      	movs	r2, #13
 80081c4:	4630      	mov	r0, r6
 80081c6:	f7ff fb9d 	bl	8007904 <_Unwind_VRS_Set>
 80081ca:	e79a      	b.n	8008102 <__gnu_unwind_execute+0xe>
 80081cc:	43c3      	mvns	r3, r0
 80081ce:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80081d2:	f003 0307 	and.w	r3, r3, #7
 80081d6:	411a      	asrs	r2, r3
 80081d8:	2300      	movs	r3, #0
 80081da:	0701      	lsls	r1, r0, #28
 80081dc:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80081e0:	bf48      	it	mi
 80081e2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80081e6:	4619      	mov	r1, r3
 80081e8:	4630      	mov	r0, r6
 80081ea:	f7ff fd5b 	bl	8007ca4 <_Unwind_VRS_Pop>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d1d3      	bne.n	800819a <__gnu_unwind_execute+0xa6>
 80081f2:	e786      	b.n	8008102 <__gnu_unwind_execute+0xe>
 80081f4:	28b1      	cmp	r0, #177	; 0xb1
 80081f6:	d057      	beq.n	80082a8 <__gnu_unwind_execute+0x1b4>
 80081f8:	28b2      	cmp	r0, #178	; 0xb2
 80081fa:	d068      	beq.n	80082ce <__gnu_unwind_execute+0x1da>
 80081fc:	28b3      	cmp	r0, #179	; 0xb3
 80081fe:	f000 8095 	beq.w	800832c <__gnu_unwind_execute+0x238>
 8008202:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8008206:	2bb4      	cmp	r3, #180	; 0xb4
 8008208:	d0c7      	beq.n	800819a <__gnu_unwind_execute+0xa6>
 800820a:	2301      	movs	r3, #1
 800820c:	f000 0207 	and.w	r2, r0, #7
 8008210:	441a      	add	r2, r3
 8008212:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008216:	4619      	mov	r1, r3
 8008218:	4630      	mov	r0, r6
 800821a:	f7ff fd43 	bl	8007ca4 <_Unwind_VRS_Pop>
 800821e:	2800      	cmp	r0, #0
 8008220:	d1bb      	bne.n	800819a <__gnu_unwind_execute+0xa6>
 8008222:	e76e      	b.n	8008102 <__gnu_unwind_execute+0xe>
 8008224:	4638      	mov	r0, r7
 8008226:	f7ff ff39 	bl	800809c <next_unwind_byte>
 800822a:	0224      	lsls	r4, r4, #8
 800822c:	4304      	orrs	r4, r0
 800822e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008232:	d0b2      	beq.n	800819a <__gnu_unwind_execute+0xa6>
 8008234:	2300      	movs	r3, #0
 8008236:	0124      	lsls	r4, r4, #4
 8008238:	b2a2      	uxth	r2, r4
 800823a:	4619      	mov	r1, r3
 800823c:	4630      	mov	r0, r6
 800823e:	f7ff fd31 	bl	8007ca4 <_Unwind_VRS_Pop>
 8008242:	2800      	cmp	r0, #0
 8008244:	d1a9      	bne.n	800819a <__gnu_unwind_execute+0xa6>
 8008246:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800824a:	bf18      	it	ne
 800824c:	f04f 0801 	movne.w	r8, #1
 8008250:	e757      	b.n	8008102 <__gnu_unwind_execute+0xe>
 8008252:	28c6      	cmp	r0, #198	; 0xc6
 8008254:	d07d      	beq.n	8008352 <__gnu_unwind_execute+0x25e>
 8008256:	28c7      	cmp	r0, #199	; 0xc7
 8008258:	f000 8086 	beq.w	8008368 <__gnu_unwind_execute+0x274>
 800825c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8008260:	2bc0      	cmp	r3, #192	; 0xc0
 8008262:	f000 8094 	beq.w	800838e <__gnu_unwind_execute+0x29a>
 8008266:	28c8      	cmp	r0, #200	; 0xc8
 8008268:	f000 809f 	beq.w	80083aa <__gnu_unwind_execute+0x2b6>
 800826c:	28c9      	cmp	r0, #201	; 0xc9
 800826e:	d194      	bne.n	800819a <__gnu_unwind_execute+0xa6>
 8008270:	4638      	mov	r0, r7
 8008272:	f7ff ff13 	bl	800809c <next_unwind_byte>
 8008276:	0302      	lsls	r2, r0, #12
 8008278:	f000 000f 	and.w	r0, r0, #15
 800827c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8008280:	3001      	adds	r0, #1
 8008282:	4302      	orrs	r2, r0
 8008284:	e782      	b.n	800818c <__gnu_unwind_execute+0x98>
 8008286:	ac03      	add	r4, sp, #12
 8008288:	4643      	mov	r3, r8
 800828a:	220e      	movs	r2, #14
 800828c:	4641      	mov	r1, r8
 800828e:	9400      	str	r4, [sp, #0]
 8008290:	4630      	mov	r0, r6
 8008292:	f7ff fb11 	bl	80078b8 <_Unwind_VRS_Get>
 8008296:	9400      	str	r4, [sp, #0]
 8008298:	4630      	mov	r0, r6
 800829a:	4643      	mov	r3, r8
 800829c:	220f      	movs	r2, #15
 800829e:	4641      	mov	r1, r8
 80082a0:	f7ff fb30 	bl	8007904 <_Unwind_VRS_Set>
 80082a4:	4640      	mov	r0, r8
 80082a6:	e779      	b.n	800819c <__gnu_unwind_execute+0xa8>
 80082a8:	4638      	mov	r0, r7
 80082aa:	f7ff fef7 	bl	800809c <next_unwind_byte>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f43f af73 	beq.w	800819a <__gnu_unwind_execute+0xa6>
 80082b4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80082b8:	f47f af6f 	bne.w	800819a <__gnu_unwind_execute+0xa6>
 80082bc:	4602      	mov	r2, r0
 80082be:	4619      	mov	r1, r3
 80082c0:	4630      	mov	r0, r6
 80082c2:	f7ff fcef 	bl	8007ca4 <_Unwind_VRS_Pop>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	f47f af67 	bne.w	800819a <__gnu_unwind_execute+0xa6>
 80082cc:	e719      	b.n	8008102 <__gnu_unwind_execute+0xe>
 80082ce:	2300      	movs	r3, #0
 80082d0:	f10d 090c 	add.w	r9, sp, #12
 80082d4:	220d      	movs	r2, #13
 80082d6:	4619      	mov	r1, r3
 80082d8:	f8cd 9000 	str.w	r9, [sp]
 80082dc:	4630      	mov	r0, r6
 80082de:	f7ff faeb 	bl	80078b8 <_Unwind_VRS_Get>
 80082e2:	4638      	mov	r0, r7
 80082e4:	f7ff feda 	bl	800809c <next_unwind_byte>
 80082e8:	0602      	lsls	r2, r0, #24
 80082ea:	f04f 0402 	mov.w	r4, #2
 80082ee:	d50c      	bpl.n	800830a <__gnu_unwind_execute+0x216>
 80082f0:	9b03      	ldr	r3, [sp, #12]
 80082f2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80082f6:	40a0      	lsls	r0, r4
 80082f8:	4403      	add	r3, r0
 80082fa:	4638      	mov	r0, r7
 80082fc:	9303      	str	r3, [sp, #12]
 80082fe:	f7ff fecd 	bl	800809c <next_unwind_byte>
 8008302:	0603      	lsls	r3, r0, #24
 8008304:	f104 0407 	add.w	r4, r4, #7
 8008308:	d4f2      	bmi.n	80082f0 <__gnu_unwind_execute+0x1fc>
 800830a:	2300      	movs	r3, #0
 800830c:	9903      	ldr	r1, [sp, #12]
 800830e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8008312:	40a2      	lsls	r2, r4
 8008314:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8008318:	188c      	adds	r4, r1, r2
 800831a:	f8cd 9000 	str.w	r9, [sp]
 800831e:	4619      	mov	r1, r3
 8008320:	220d      	movs	r2, #13
 8008322:	4630      	mov	r0, r6
 8008324:	9403      	str	r4, [sp, #12]
 8008326:	f7ff faed 	bl	8007904 <_Unwind_VRS_Set>
 800832a:	e6ea      	b.n	8008102 <__gnu_unwind_execute+0xe>
 800832c:	4638      	mov	r0, r7
 800832e:	f7ff feb5 	bl	800809c <next_unwind_byte>
 8008332:	2301      	movs	r3, #1
 8008334:	0301      	lsls	r1, r0, #12
 8008336:	f000 000f 	and.w	r0, r0, #15
 800833a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800833e:	18c2      	adds	r2, r0, r3
 8008340:	430a      	orrs	r2, r1
 8008342:	4630      	mov	r0, r6
 8008344:	4619      	mov	r1, r3
 8008346:	f7ff fcad 	bl	8007ca4 <_Unwind_VRS_Pop>
 800834a:	2800      	cmp	r0, #0
 800834c:	f47f af25 	bne.w	800819a <__gnu_unwind_execute+0xa6>
 8008350:	e6d7      	b.n	8008102 <__gnu_unwind_execute+0xe>
 8008352:	4638      	mov	r0, r7
 8008354:	f7ff fea2 	bl	800809c <next_unwind_byte>
 8008358:	0301      	lsls	r1, r0, #12
 800835a:	f000 000f 	and.w	r0, r0, #15
 800835e:	2303      	movs	r3, #3
 8008360:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8008364:	1c42      	adds	r2, r0, #1
 8008366:	e7eb      	b.n	8008340 <__gnu_unwind_execute+0x24c>
 8008368:	4638      	mov	r0, r7
 800836a:	f7ff fe97 	bl	800809c <next_unwind_byte>
 800836e:	2800      	cmp	r0, #0
 8008370:	f43f af13 	beq.w	800819a <__gnu_unwind_execute+0xa6>
 8008374:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8008378:	f47f af0f 	bne.w	800819a <__gnu_unwind_execute+0xa6>
 800837c:	4602      	mov	r2, r0
 800837e:	2104      	movs	r1, #4
 8008380:	4630      	mov	r0, r6
 8008382:	f7ff fc8f 	bl	8007ca4 <_Unwind_VRS_Pop>
 8008386:	2800      	cmp	r0, #0
 8008388:	f47f af07 	bne.w	800819a <__gnu_unwind_execute+0xa6>
 800838c:	e6b9      	b.n	8008102 <__gnu_unwind_execute+0xe>
 800838e:	2303      	movs	r3, #3
 8008390:	f000 020f 	and.w	r2, r0, #15
 8008394:	3201      	adds	r2, #1
 8008396:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800839a:	4619      	mov	r1, r3
 800839c:	4630      	mov	r0, r6
 800839e:	f7ff fc81 	bl	8007ca4 <_Unwind_VRS_Pop>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	f47f aef9 	bne.w	800819a <__gnu_unwind_execute+0xa6>
 80083a8:	e6ab      	b.n	8008102 <__gnu_unwind_execute+0xe>
 80083aa:	4638      	mov	r0, r7
 80083ac:	f7ff fe76 	bl	800809c <next_unwind_byte>
 80083b0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80083b4:	f000 030f 	and.w	r3, r0, #15
 80083b8:	3210      	adds	r2, #16
 80083ba:	3301      	adds	r3, #1
 80083bc:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80083c0:	e6e4      	b.n	800818c <__gnu_unwind_execute+0x98>
 80083c2:	bf00      	nop

080083c4 <__gnu_unwind_frame>:
 80083c4:	b530      	push	{r4, r5, lr}
 80083c6:	2403      	movs	r4, #3
 80083c8:	460d      	mov	r5, r1
 80083ca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80083cc:	b085      	sub	sp, #20
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	f88d 400c 	strb.w	r4, [sp, #12]
 80083d4:	79dc      	ldrb	r4, [r3, #7]
 80083d6:	0212      	lsls	r2, r2, #8
 80083d8:	3308      	adds	r3, #8
 80083da:	a901      	add	r1, sp, #4
 80083dc:	4628      	mov	r0, r5
 80083de:	9201      	str	r2, [sp, #4]
 80083e0:	f88d 400d 	strb.w	r4, [sp, #13]
 80083e4:	9302      	str	r3, [sp, #8]
 80083e6:	f7ff fe85 	bl	80080f4 <__gnu_unwind_execute>
 80083ea:	b005      	add	sp, #20
 80083ec:	bd30      	pop	{r4, r5, pc}
 80083ee:	bf00      	nop

080083f0 <_Unwind_GetRegionStart>:
 80083f0:	b508      	push	{r3, lr}
 80083f2:	f7ff fe7d 	bl	80080f0 <unwind_UCB_from_context>
 80083f6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80083f8:	bd08      	pop	{r3, pc}
 80083fa:	bf00      	nop

080083fc <_Unwind_GetLanguageSpecificData>:
 80083fc:	b508      	push	{r3, lr}
 80083fe:	f7ff fe77 	bl	80080f0 <unwind_UCB_from_context>
 8008402:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008404:	79c3      	ldrb	r3, [r0, #7]
 8008406:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800840a:	3008      	adds	r0, #8
 800840c:	bd08      	pop	{r3, pc}
 800840e:	bf00      	nop

08008410 <_Unwind_GetTextRelBase>:
 8008410:	b508      	push	{r3, lr}
 8008412:	f00e f9b5 	bl	8016780 <abort>
 8008416:	bf00      	nop

08008418 <_Unwind_GetDataRelBase>:
 8008418:	b508      	push	{r3, lr}
 800841a:	f7ff fff9 	bl	8008410 <_Unwind_GetTextRelBase>
 800841e:	bf00      	nop

08008420 <__aeabi_idiv0>:
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop

08008424 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008424:	4a07      	ldr	r2, [pc, #28]	; (8008444 <HAL_Init+0x20>)
{
 8008426:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008428:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800842a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800842c:	f043 0310 	orr.w	r3, r3, #16
 8008430:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008432:	f000 f82d 	bl	8008490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008436:	2000      	movs	r0, #0
 8008438:	f002 f904 	bl	800a644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800843c:	f000 ffd8 	bl	80093f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8008440:	2000      	movs	r0, #0
 8008442:	bd08      	pop	{r3, pc}
 8008444:	40022000 	.word	0x40022000

08008448 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008448:	4a03      	ldr	r2, [pc, #12]	; (8008458 <HAL_IncTick+0x10>)
 800844a:	4b04      	ldr	r3, [pc, #16]	; (800845c <HAL_IncTick+0x14>)
 800844c:	6811      	ldr	r1, [r2, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	440b      	add	r3, r1
 8008452:	6013      	str	r3, [r2, #0]
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	200014c4 	.word	0x200014c4
 800845c:	20000004 	.word	0x20000004

08008460 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008460:	4b01      	ldr	r3, [pc, #4]	; (8008468 <HAL_GetTick+0x8>)
 8008462:	6818      	ldr	r0, [r3, #0]
}
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	200014c4 	.word	0x200014c4

0800846c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008470:	f7ff fff6 	bl	8008460 <HAL_GetTick>
 8008474:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008476:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8008478:	bf1e      	ittt	ne
 800847a:	4b04      	ldrne	r3, [pc, #16]	; (800848c <HAL_Delay+0x20>)
 800847c:	781b      	ldrbne	r3, [r3, #0]
 800847e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008480:	f7ff ffee 	bl	8008460 <HAL_GetTick>
 8008484:	1b40      	subs	r0, r0, r5
 8008486:	4284      	cmp	r4, r0
 8008488:	d8fa      	bhi.n	8008480 <HAL_Delay+0x14>
  {
  }
}
 800848a:	bd38      	pop	{r3, r4, r5, pc}
 800848c:	20000004 	.word	0x20000004

08008490 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008490:	4a07      	ldr	r2, [pc, #28]	; (80084b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008492:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008494:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008496:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800849a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800849e:	041b      	lsls	r3, r3, #16
 80084a0:	0c1b      	lsrs	r3, r3, #16
 80084a2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80084a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80084aa:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80084ac:	60d3      	str	r3, [r2, #12]
 80084ae:	4770      	bx	lr
 80084b0:	e000ed00 	.word	0xe000ed00

080084b4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80084b4:	4b17      	ldr	r3, [pc, #92]	; (8008514 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80084b6:	b530      	push	{r4, r5, lr}
 80084b8:	68dc      	ldr	r4, [r3, #12]
 80084ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80084be:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084c2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80084c4:	2b04      	cmp	r3, #4
 80084c6:	bf28      	it	cs
 80084c8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084ca:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084cc:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084d0:	bf98      	it	ls
 80084d2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084d4:	fa05 f303 	lsl.w	r3, r5, r3
 80084d8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084dc:	bf88      	it	hi
 80084de:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084e0:	4019      	ands	r1, r3
 80084e2:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80084e4:	fa05 f404 	lsl.w	r4, r5, r4
 80084e8:	3c01      	subs	r4, #1
 80084ea:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80084ec:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084ee:	ea42 0201 	orr.w	r2, r2, r1
 80084f2:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084f6:	bfa9      	itett	ge
 80084f8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084fc:	4b06      	ldrlt	r3, [pc, #24]	; (8008518 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084fe:	b2d2      	uxtbge	r2, r2
 8008500:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008504:	bfbb      	ittet	lt
 8008506:	f000 000f 	andlt.w	r0, r0, #15
 800850a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800850c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008510:	541a      	strblt	r2, [r3, r0]
 8008512:	bd30      	pop	{r4, r5, pc}
 8008514:	e000ed00 	.word	0xe000ed00
 8008518:	e000ed14 	.word	0xe000ed14

0800851c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800851c:	2800      	cmp	r0, #0
 800851e:	db08      	blt.n	8008532 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008520:	2301      	movs	r3, #1
 8008522:	0942      	lsrs	r2, r0, #5
 8008524:	f000 001f 	and.w	r0, r0, #31
 8008528:	fa03 f000 	lsl.w	r0, r3, r0
 800852c:	4b01      	ldr	r3, [pc, #4]	; (8008534 <HAL_NVIC_EnableIRQ+0x18>)
 800852e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008532:	4770      	bx	lr
 8008534:	e000e100 	.word	0xe000e100

08008538 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008538:	3801      	subs	r0, #1
 800853a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800853e:	d20a      	bcs.n	8008556 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008540:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008542:	4b06      	ldr	r3, [pc, #24]	; (800855c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008544:	4a06      	ldr	r2, [pc, #24]	; (8008560 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008546:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008548:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800854c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800854e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008550:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008556:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	e000e010 	.word	0xe000e010
 8008560:	e000ed00 	.word	0xe000ed00

08008564 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008564:	2800      	cmp	r0, #0
 8008566:	db09      	blt.n	800857c <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008568:	2201      	movs	r2, #1
 800856a:	0943      	lsrs	r3, r0, #5
 800856c:	f000 001f 	and.w	r0, r0, #31
 8008570:	fa02 f000 	lsl.w	r0, r2, r0
 8008574:	4a02      	ldr	r2, [pc, #8]	; (8008580 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 8008576:	3360      	adds	r3, #96	; 0x60
 8008578:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	e000e100 	.word	0xe000e100

08008584 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8008584:	4b04      	ldr	r3, [pc, #16]	; (8008598 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8008586:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	bf0c      	ite	eq
 800858c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8008590:	f022 0204 	bicne.w	r2, r2, #4
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	4770      	bx	lr
 8008598:	e000e010 	.word	0xe000e010

0800859c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800859c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800859e:	f00c fd13 	bl	8014fc8 <HAL_SYSTICK_Callback>
 80085a2:	bd08      	pop	{r3, pc}

080085a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80085a4:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d032      	beq.n	8008610 <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80085aa:	6801      	ldr	r1, [r0, #0]
 80085ac:	4b19      	ldr	r3, [pc, #100]	; (8008614 <HAL_DMA_Init+0x70>)
 80085ae:	2414      	movs	r4, #20
 80085b0:	4299      	cmp	r1, r3
 80085b2:	d825      	bhi.n	8008600 <HAL_DMA_Init+0x5c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80085b4:	4a18      	ldr	r2, [pc, #96]	; (8008618 <HAL_DMA_Init+0x74>)
    hdma->DmaBaseAddress = DMA1;
 80085b6:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80085ba:	440a      	add	r2, r1
 80085bc:	fbb2 f2f4 	udiv	r2, r2, r4
 80085c0:	0092      	lsls	r2, r2, #2
 80085c2:	6402      	str	r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80085c4:	6884      	ldr	r4, [r0, #8]
    hdma->DmaBaseAddress = DMA2;
 80085c6:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80085c8:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 80085ca:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80085cc:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085ce:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80085d0:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085d4:	4323      	orrs	r3, r4
 80085d6:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80085d8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085dc:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085de:	6944      	ldr	r4, [r0, #20]
 80085e0:	4323      	orrs	r3, r4
 80085e2:	6984      	ldr	r4, [r0, #24]
 80085e4:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80085e6:	69c4      	ldr	r4, [r0, #28]
 80085e8:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80085ea:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80085ec:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80085ee:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085f0:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80085f2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085f6:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80085f8:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 80085fc:	4618      	mov	r0, r3
 80085fe:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008600:	4b06      	ldr	r3, [pc, #24]	; (800861c <HAL_DMA_Init+0x78>)
 8008602:	440b      	add	r3, r1
 8008604:	fbb3 f3f4 	udiv	r3, r3, r4
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800860c:	4b04      	ldr	r3, [pc, #16]	; (8008620 <HAL_DMA_Init+0x7c>)
 800860e:	e7d9      	b.n	80085c4 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8008610:	2001      	movs	r0, #1
}
 8008612:	bd10      	pop	{r4, pc}
 8008614:	40020407 	.word	0x40020407
 8008618:	bffdfff8 	.word	0xbffdfff8
 800861c:	bffdfbf8 	.word	0xbffdfbf8
 8008620:	40020400 	.word	0x40020400

08008624 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008624:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008626:	f890 4020 	ldrb.w	r4, [r0, #32]
 800862a:	2c01      	cmp	r4, #1
 800862c:	d035      	beq.n	800869a <HAL_DMA_Start_IT+0x76>
 800862e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008630:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8008634:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8008638:	42a5      	cmp	r5, r4
 800863a:	f04f 0600 	mov.w	r6, #0
 800863e:	f04f 0402 	mov.w	r4, #2
 8008642:	d128      	bne.n	8008696 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008644:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008648:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800864a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800864c:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800864e:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8008650:	f026 0601 	bic.w	r6, r6, #1
 8008654:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008656:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8008658:	40bd      	lsls	r5, r7
 800865a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800865c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800865e:	6843      	ldr	r3, [r0, #4]
 8008660:	6805      	ldr	r5, [r0, #0]
 8008662:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8008664:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008666:	bf0b      	itete	eq
 8008668:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800866a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800866c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800866e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8008670:	b14b      	cbz	r3, 8008686 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008672:	6823      	ldr	r3, [r4, #0]
 8008674:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008678:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800867a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800867c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800867e:	f043 0301 	orr.w	r3, r3, #1
 8008682:	602b      	str	r3, [r5, #0]
 8008684:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	f023 0304 	bic.w	r3, r3, #4
 800868c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	f043 030a 	orr.w	r3, r3, #10
 8008694:	e7f0      	b.n	8008678 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8008696:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800869a:	2002      	movs	r0, #2
}
 800869c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080086a0 <HAL_DMA_IRQHandler>:
{
 80086a0:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80086a2:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80086a4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80086a6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80086a8:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80086aa:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80086ac:	4095      	lsls	r5, r2
 80086ae:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80086b0:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80086b2:	d055      	beq.n	8008760 <HAL_DMA_IRQHandler+0xc0>
 80086b4:	074d      	lsls	r5, r1, #29
 80086b6:	d553      	bpl.n	8008760 <HAL_DMA_IRQHandler+0xc0>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80086bc:	bf5e      	ittt	pl
 80086be:	681a      	ldrpl	r2, [r3, #0]
 80086c0:	f022 0204 	bicpl.w	r2, r2, #4
 80086c4:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80086c6:	4a60      	ldr	r2, [pc, #384]	; (8008848 <HAL_DMA_IRQHandler+0x1a8>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d91f      	bls.n	800870c <HAL_DMA_IRQHandler+0x6c>
 80086cc:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d014      	beq.n	80086fe <HAL_DMA_IRQHandler+0x5e>
 80086d4:	3214      	adds	r2, #20
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d013      	beq.n	8008702 <HAL_DMA_IRQHandler+0x62>
 80086da:	3214      	adds	r2, #20
 80086dc:	4293      	cmp	r3, r2
 80086de:	d012      	beq.n	8008706 <HAL_DMA_IRQHandler+0x66>
 80086e0:	3214      	adds	r2, #20
 80086e2:	4293      	cmp	r3, r2
 80086e4:	bf0c      	ite	eq
 80086e6:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 80086ea:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80086ee:	4a57      	ldr	r2, [pc, #348]	; (800884c <HAL_DMA_IRQHandler+0x1ac>)
 80086f0:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80086f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 80a5 	beq.w	8008844 <HAL_DMA_IRQHandler+0x1a4>
}
 80086fa:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80086fc:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80086fe:	2304      	movs	r3, #4
 8008700:	e7f5      	b.n	80086ee <HAL_DMA_IRQHandler+0x4e>
 8008702:	2340      	movs	r3, #64	; 0x40
 8008704:	e7f3      	b.n	80086ee <HAL_DMA_IRQHandler+0x4e>
 8008706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800870a:	e7f0      	b.n	80086ee <HAL_DMA_IRQHandler+0x4e>
 800870c:	4950      	ldr	r1, [pc, #320]	; (8008850 <HAL_DMA_IRQHandler+0x1b0>)
 800870e:	428b      	cmp	r3, r1
 8008710:	d016      	beq.n	8008740 <HAL_DMA_IRQHandler+0xa0>
 8008712:	3114      	adds	r1, #20
 8008714:	428b      	cmp	r3, r1
 8008716:	d015      	beq.n	8008744 <HAL_DMA_IRQHandler+0xa4>
 8008718:	3114      	adds	r1, #20
 800871a:	428b      	cmp	r3, r1
 800871c:	d014      	beq.n	8008748 <HAL_DMA_IRQHandler+0xa8>
 800871e:	3114      	adds	r1, #20
 8008720:	428b      	cmp	r3, r1
 8008722:	d014      	beq.n	800874e <HAL_DMA_IRQHandler+0xae>
 8008724:	3114      	adds	r1, #20
 8008726:	428b      	cmp	r3, r1
 8008728:	d014      	beq.n	8008754 <HAL_DMA_IRQHandler+0xb4>
 800872a:	3114      	adds	r1, #20
 800872c:	428b      	cmp	r3, r1
 800872e:	d014      	beq.n	800875a <HAL_DMA_IRQHandler+0xba>
 8008730:	4293      	cmp	r3, r2
 8008732:	bf14      	ite	ne
 8008734:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8008738:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 800873c:	4a45      	ldr	r2, [pc, #276]	; (8008854 <HAL_DMA_IRQHandler+0x1b4>)
 800873e:	e7d7      	b.n	80086f0 <HAL_DMA_IRQHandler+0x50>
 8008740:	2304      	movs	r3, #4
 8008742:	e7fb      	b.n	800873c <HAL_DMA_IRQHandler+0x9c>
 8008744:	2340      	movs	r3, #64	; 0x40
 8008746:	e7f9      	b.n	800873c <HAL_DMA_IRQHandler+0x9c>
 8008748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800874c:	e7f6      	b.n	800873c <HAL_DMA_IRQHandler+0x9c>
 800874e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008752:	e7f3      	b.n	800873c <HAL_DMA_IRQHandler+0x9c>
 8008754:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008758:	e7f0      	b.n	800873c <HAL_DMA_IRQHandler+0x9c>
 800875a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800875e:	e7ed      	b.n	800873c <HAL_DMA_IRQHandler+0x9c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008760:	2502      	movs	r5, #2
 8008762:	4095      	lsls	r5, r2
 8008764:	4225      	tst	r5, r4
 8008766:	d057      	beq.n	8008818 <HAL_DMA_IRQHandler+0x178>
 8008768:	078d      	lsls	r5, r1, #30
 800876a:	d555      	bpl.n	8008818 <HAL_DMA_IRQHandler+0x178>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	0694      	lsls	r4, r2, #26
 8008770:	d406      	bmi.n	8008780 <HAL_DMA_IRQHandler+0xe0>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	f022 020a 	bic.w	r2, r2, #10
 8008778:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800877a:	2201      	movs	r2, #1
 800877c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008780:	4a31      	ldr	r2, [pc, #196]	; (8008848 <HAL_DMA_IRQHandler+0x1a8>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d91e      	bls.n	80087c4 <HAL_DMA_IRQHandler+0x124>
 8008786:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800878a:	4293      	cmp	r3, r2
 800878c:	d013      	beq.n	80087b6 <HAL_DMA_IRQHandler+0x116>
 800878e:	3214      	adds	r2, #20
 8008790:	4293      	cmp	r3, r2
 8008792:	d012      	beq.n	80087ba <HAL_DMA_IRQHandler+0x11a>
 8008794:	3214      	adds	r2, #20
 8008796:	4293      	cmp	r3, r2
 8008798:	d011      	beq.n	80087be <HAL_DMA_IRQHandler+0x11e>
 800879a:	3214      	adds	r2, #20
 800879c:	4293      	cmp	r3, r2
 800879e:	bf0c      	ite	eq
 80087a0:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 80087a4:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 80087a8:	4a28      	ldr	r2, [pc, #160]	; (800884c <HAL_DMA_IRQHandler+0x1ac>)
 80087aa:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80087ac:	2300      	movs	r3, #0
 80087ae:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80087b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80087b4:	e79e      	b.n	80086f4 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80087b6:	2302      	movs	r3, #2
 80087b8:	e7f6      	b.n	80087a8 <HAL_DMA_IRQHandler+0x108>
 80087ba:	2320      	movs	r3, #32
 80087bc:	e7f4      	b.n	80087a8 <HAL_DMA_IRQHandler+0x108>
 80087be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087c2:	e7f1      	b.n	80087a8 <HAL_DMA_IRQHandler+0x108>
 80087c4:	4922      	ldr	r1, [pc, #136]	; (8008850 <HAL_DMA_IRQHandler+0x1b0>)
 80087c6:	428b      	cmp	r3, r1
 80087c8:	d016      	beq.n	80087f8 <HAL_DMA_IRQHandler+0x158>
 80087ca:	3114      	adds	r1, #20
 80087cc:	428b      	cmp	r3, r1
 80087ce:	d015      	beq.n	80087fc <HAL_DMA_IRQHandler+0x15c>
 80087d0:	3114      	adds	r1, #20
 80087d2:	428b      	cmp	r3, r1
 80087d4:	d014      	beq.n	8008800 <HAL_DMA_IRQHandler+0x160>
 80087d6:	3114      	adds	r1, #20
 80087d8:	428b      	cmp	r3, r1
 80087da:	d014      	beq.n	8008806 <HAL_DMA_IRQHandler+0x166>
 80087dc:	3114      	adds	r1, #20
 80087de:	428b      	cmp	r3, r1
 80087e0:	d014      	beq.n	800880c <HAL_DMA_IRQHandler+0x16c>
 80087e2:	3114      	adds	r1, #20
 80087e4:	428b      	cmp	r3, r1
 80087e6:	d014      	beq.n	8008812 <HAL_DMA_IRQHandler+0x172>
 80087e8:	4293      	cmp	r3, r2
 80087ea:	bf14      	ite	ne
 80087ec:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 80087f0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80087f4:	4a17      	ldr	r2, [pc, #92]	; (8008854 <HAL_DMA_IRQHandler+0x1b4>)
 80087f6:	e7d8      	b.n	80087aa <HAL_DMA_IRQHandler+0x10a>
 80087f8:	2302      	movs	r3, #2
 80087fa:	e7fb      	b.n	80087f4 <HAL_DMA_IRQHandler+0x154>
 80087fc:	2320      	movs	r3, #32
 80087fe:	e7f9      	b.n	80087f4 <HAL_DMA_IRQHandler+0x154>
 8008800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008804:	e7f6      	b.n	80087f4 <HAL_DMA_IRQHandler+0x154>
 8008806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800880a:	e7f3      	b.n	80087f4 <HAL_DMA_IRQHandler+0x154>
 800880c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008810:	e7f0      	b.n	80087f4 <HAL_DMA_IRQHandler+0x154>
 8008812:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008816:	e7ed      	b.n	80087f4 <HAL_DMA_IRQHandler+0x154>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008818:	2508      	movs	r5, #8
 800881a:	4095      	lsls	r5, r2
 800881c:	4225      	tst	r5, r4
 800881e:	d011      	beq.n	8008844 <HAL_DMA_IRQHandler+0x1a4>
 8008820:	0709      	lsls	r1, r1, #28
 8008822:	d50f      	bpl.n	8008844 <HAL_DMA_IRQHandler+0x1a4>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008824:	6819      	ldr	r1, [r3, #0]
 8008826:	f021 010e 	bic.w	r1, r1, #14
 800882a:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800882c:	2301      	movs	r3, #1
 800882e:	fa03 f202 	lsl.w	r2, r3, r2
 8008832:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008834:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8008836:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800883a:	2300      	movs	r3, #0
 800883c:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8008840:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008842:	e757      	b.n	80086f4 <HAL_DMA_IRQHandler+0x54>
}
 8008844:	bc70      	pop	{r4, r5, r6}
 8008846:	4770      	bx	lr
 8008848:	40020080 	.word	0x40020080
 800884c:	40020400 	.word	0x40020400
 8008850:	40020008 	.word	0x40020008
 8008854:	40020000 	.word	0x40020000

08008858 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800885c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800885e:	4626      	mov	r6, r4
 8008860:	4b66      	ldr	r3, [pc, #408]	; (80089fc <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008862:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8008a0c <HAL_GPIO_Init+0x1b4>
 8008866:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8008a10 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800886a:	680a      	ldr	r2, [r1, #0]
 800886c:	fa32 f506 	lsrs.w	r5, r2, r6
 8008870:	d102      	bne.n	8008878 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8008872:	b003      	add	sp, #12
 8008874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8008878:	f04f 0801 	mov.w	r8, #1
 800887c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008880:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8008884:	4590      	cmp	r8, r2
 8008886:	d17f      	bne.n	8008988 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8008888:	684d      	ldr	r5, [r1, #4]
 800888a:	2d12      	cmp	r5, #18
 800888c:	f000 80aa 	beq.w	80089e4 <HAL_GPIO_Init+0x18c>
 8008890:	f200 8083 	bhi.w	800899a <HAL_GPIO_Init+0x142>
 8008894:	2d02      	cmp	r5, #2
 8008896:	f000 80a2 	beq.w	80089de <HAL_GPIO_Init+0x186>
 800889a:	d877      	bhi.n	800898c <HAL_GPIO_Init+0x134>
 800889c:	2d00      	cmp	r5, #0
 800889e:	f000 8089 	beq.w	80089b4 <HAL_GPIO_Init+0x15c>
 80088a2:	2d01      	cmp	r5, #1
 80088a4:	f000 8099 	beq.w	80089da <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80088a8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80088ac:	2aff      	cmp	r2, #255	; 0xff
 80088ae:	bf93      	iteet	ls
 80088b0:	4682      	movls	sl, r0
 80088b2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80088b6:	3d08      	subhi	r5, #8
 80088b8:	f8d0 b000 	ldrls.w	fp, [r0]
 80088bc:	bf92      	itee	ls
 80088be:	00b5      	lslls	r5, r6, #2
 80088c0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80088c4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80088c6:	fa09 f805 	lsl.w	r8, r9, r5
 80088ca:	ea2b 0808 	bic.w	r8, fp, r8
 80088ce:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80088d2:	bf88      	it	hi
 80088d4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80088d8:	ea48 0505 	orr.w	r5, r8, r5
 80088dc:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80088e0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80088e4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80088e8:	d04e      	beq.n	8008988 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80088ea:	4d45      	ldr	r5, [pc, #276]	; (8008a00 <HAL_GPIO_Init+0x1a8>)
 80088ec:	4f44      	ldr	r7, [pc, #272]	; (8008a00 <HAL_GPIO_Init+0x1a8>)
 80088ee:	69ad      	ldr	r5, [r5, #24]
 80088f0:	f026 0803 	bic.w	r8, r6, #3
 80088f4:	f045 0501 	orr.w	r5, r5, #1
 80088f8:	61bd      	str	r5, [r7, #24]
 80088fa:	69bd      	ldr	r5, [r7, #24]
 80088fc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8008900:	f005 0501 	and.w	r5, r5, #1
 8008904:	9501      	str	r5, [sp, #4]
 8008906:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800890a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800890e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008910:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8008914:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008918:	fa09 f90b 	lsl.w	r9, r9, fp
 800891c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008920:	4d38      	ldr	r5, [pc, #224]	; (8008a04 <HAL_GPIO_Init+0x1ac>)
 8008922:	42a8      	cmp	r0, r5
 8008924:	d063      	beq.n	80089ee <HAL_GPIO_Init+0x196>
 8008926:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800892a:	42a8      	cmp	r0, r5
 800892c:	d061      	beq.n	80089f2 <HAL_GPIO_Init+0x19a>
 800892e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008932:	42a8      	cmp	r0, r5
 8008934:	d05f      	beq.n	80089f6 <HAL_GPIO_Init+0x19e>
 8008936:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800893a:	42a8      	cmp	r0, r5
 800893c:	bf0c      	ite	eq
 800893e:	2503      	moveq	r5, #3
 8008940:	2504      	movne	r5, #4
 8008942:	fa05 f50b 	lsl.w	r5, r5, fp
 8008946:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800894a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800894e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008950:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8008954:	bf14      	ite	ne
 8008956:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008958:	4395      	biceq	r5, r2
 800895a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800895c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800895e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8008962:	bf14      	ite	ne
 8008964:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008966:	4395      	biceq	r5, r2
 8008968:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800896a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800896c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8008970:	bf14      	ite	ne
 8008972:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008974:	4395      	biceq	r5, r2
 8008976:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8008978:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800897a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800897e:	bf14      	ite	ne
 8008980:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008982:	ea25 0202 	biceq.w	r2, r5, r2
 8008986:	60da      	str	r2, [r3, #12]
	position++;
 8008988:	3601      	adds	r6, #1
 800898a:	e76e      	b.n	800886a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800898c:	2d03      	cmp	r5, #3
 800898e:	d022      	beq.n	80089d6 <HAL_GPIO_Init+0x17e>
 8008990:	2d11      	cmp	r5, #17
 8008992:	d189      	bne.n	80088a8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008994:	68cc      	ldr	r4, [r1, #12]
 8008996:	3404      	adds	r4, #4
          break;
 8008998:	e786      	b.n	80088a8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800899a:	4f1b      	ldr	r7, [pc, #108]	; (8008a08 <HAL_GPIO_Init+0x1b0>)
 800899c:	42bd      	cmp	r5, r7
 800899e:	d009      	beq.n	80089b4 <HAL_GPIO_Init+0x15c>
 80089a0:	d812      	bhi.n	80089c8 <HAL_GPIO_Init+0x170>
 80089a2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008a14 <HAL_GPIO_Init+0x1bc>
 80089a6:	454d      	cmp	r5, r9
 80089a8:	d004      	beq.n	80089b4 <HAL_GPIO_Init+0x15c>
 80089aa:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80089ae:	454d      	cmp	r5, r9
 80089b0:	f47f af7a 	bne.w	80088a8 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80089b4:	688c      	ldr	r4, [r1, #8]
 80089b6:	b1c4      	cbz	r4, 80089ea <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80089b8:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80089ba:	bf0c      	ite	eq
 80089bc:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80089c0:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80089c4:	2408      	movs	r4, #8
 80089c6:	e76f      	b.n	80088a8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80089c8:	4575      	cmp	r5, lr
 80089ca:	d0f3      	beq.n	80089b4 <HAL_GPIO_Init+0x15c>
 80089cc:	4565      	cmp	r5, ip
 80089ce:	d0f1      	beq.n	80089b4 <HAL_GPIO_Init+0x15c>
 80089d0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8008a18 <HAL_GPIO_Init+0x1c0>
 80089d4:	e7eb      	b.n	80089ae <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80089d6:	2400      	movs	r4, #0
 80089d8:	e766      	b.n	80088a8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80089da:	68cc      	ldr	r4, [r1, #12]
          break;
 80089dc:	e764      	b.n	80088a8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80089de:	68cc      	ldr	r4, [r1, #12]
 80089e0:	3408      	adds	r4, #8
          break;
 80089e2:	e761      	b.n	80088a8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80089e4:	68cc      	ldr	r4, [r1, #12]
 80089e6:	340c      	adds	r4, #12
          break;
 80089e8:	e75e      	b.n	80088a8 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80089ea:	2404      	movs	r4, #4
 80089ec:	e75c      	b.n	80088a8 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80089ee:	2500      	movs	r5, #0
 80089f0:	e7a7      	b.n	8008942 <HAL_GPIO_Init+0xea>
 80089f2:	2501      	movs	r5, #1
 80089f4:	e7a5      	b.n	8008942 <HAL_GPIO_Init+0xea>
 80089f6:	2502      	movs	r5, #2
 80089f8:	e7a3      	b.n	8008942 <HAL_GPIO_Init+0xea>
 80089fa:	bf00      	nop
 80089fc:	40010400 	.word	0x40010400
 8008a00:	40021000 	.word	0x40021000
 8008a04:	40010800 	.word	0x40010800
 8008a08:	10210000 	.word	0x10210000
 8008a0c:	10310000 	.word	0x10310000
 8008a10:	10320000 	.word	0x10320000
 8008a14:	10110000 	.word	0x10110000
 8008a18:	10220000 	.word	0x10220000

08008a1c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008a1c:	6883      	ldr	r3, [r0, #8]
 8008a1e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008a20:	bf14      	ite	ne
 8008a22:	2001      	movne	r0, #1
 8008a24:	2000      	moveq	r0, #0
 8008a26:	4770      	bx	lr

08008a28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a28:	b10a      	cbz	r2, 8008a2e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008a2a:	6101      	str	r1, [r0, #16]
 8008a2c:	4770      	bx	lr
 8008a2e:	0409      	lsls	r1, r1, #16
 8008a30:	e7fb      	b.n	8008a2a <HAL_GPIO_WritePin+0x2>

08008a32 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008a32:	4770      	bx	lr

08008a34 <HAL_GPIO_EXTI_IRQHandler>:
{
 8008a34:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008a36:	4b04      	ldr	r3, [pc, #16]	; (8008a48 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8008a38:	6959      	ldr	r1, [r3, #20]
 8008a3a:	4201      	tst	r1, r0
 8008a3c:	d002      	beq.n	8008a44 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008a3e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008a40:	f7ff fff7 	bl	8008a32 <HAL_GPIO_EXTI_Callback>
 8008a44:	bd08      	pop	{r3, pc}
 8008a46:	bf00      	nop
 8008a48:	40010400 	.word	0x40010400

08008a4c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a4c:	6801      	ldr	r1, [r0, #0]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	694b      	ldr	r3, [r1, #20]
 8008a52:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8008a56:	d010      	beq.n	8008a7a <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a58:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8008a5c:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8008a5e:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8008a60:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008a62:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a66:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a6a:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a6c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a70:	f043 0304 	orr.w	r3, r3, #4
 8008a74:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8008a76:	2001      	movs	r0, #1
 8008a78:	4770      	bx	lr
  }
  return HAL_OK;
 8008a7a:	4618      	mov	r0, r3
}
 8008a7c:	4770      	bx	lr

08008a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8008a7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a82:	4604      	mov	r4, r0
 8008a84:	4617      	mov	r7, r2
 8008a86:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a88:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8008a8c:	b28e      	uxth	r6, r1
 8008a8e:	6825      	ldr	r5, [r4, #0]
 8008a90:	f1b8 0f01 	cmp.w	r8, #1
 8008a94:	bf0c      	ite	eq
 8008a96:	696b      	ldreq	r3, [r5, #20]
 8008a98:	69ab      	ldrne	r3, [r5, #24]
 8008a9a:	ea36 0303 	bics.w	r3, r6, r3
 8008a9e:	bf14      	ite	ne
 8008aa0:	2001      	movne	r0, #1
 8008aa2:	2000      	moveq	r0, #0
 8008aa4:	b908      	cbnz	r0, 8008aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8008aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008aaa:	696b      	ldr	r3, [r5, #20]
 8008aac:	055a      	lsls	r2, r3, #21
 8008aae:	d516      	bpl.n	8008ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ab0:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ab2:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ab4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ab8:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008aba:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8008abe:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ac4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ac8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008acc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008ace:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ad2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008ad4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8008ad8:	2001      	movs	r0, #1
 8008ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8008ade:	1c7b      	adds	r3, r7, #1
 8008ae0:	d0d5      	beq.n	8008a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ae2:	f7ff fcbd 	bl	8008460 <HAL_GetTick>
 8008ae6:	eba0 0009 	sub.w	r0, r0, r9
 8008aea:	4287      	cmp	r7, r0
 8008aec:	d301      	bcc.n	8008af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8008aee:	2f00      	cmp	r7, #0
 8008af0:	d1cd      	bne.n	8008a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008af2:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8008af4:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008af6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008af8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008afc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b00:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008b02:	f042 0220 	orr.w	r2, r2, #32
 8008b06:	e7e4      	b.n	8008ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08008b08 <I2C_WaitOnFlagUntilTimeout>:
{
 8008b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	4690      	mov	r8, r2
 8008b10:	461f      	mov	r7, r3
 8008b12:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b14:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8008b18:	b28d      	uxth	r5, r1
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	f1b9 0f01 	cmp.w	r9, #1
 8008b20:	bf0c      	ite	eq
 8008b22:	695b      	ldreq	r3, [r3, #20]
 8008b24:	699b      	ldrne	r3, [r3, #24]
 8008b26:	ea35 0303 	bics.w	r3, r5, r3
 8008b2a:	bf0c      	ite	eq
 8008b2c:	2301      	moveq	r3, #1
 8008b2e:	2300      	movne	r3, #0
 8008b30:	4543      	cmp	r3, r8
 8008b32:	d002      	beq.n	8008b3a <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8008b34:	2000      	movs	r0, #0
}
 8008b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8008b3a:	1c7b      	adds	r3, r7, #1
 8008b3c:	d0ed      	beq.n	8008b1a <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b3e:	f7ff fc8f 	bl	8008460 <HAL_GetTick>
 8008b42:	1b80      	subs	r0, r0, r6
 8008b44:	4287      	cmp	r7, r0
 8008b46:	d301      	bcc.n	8008b4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8008b48:	2f00      	cmp	r7, #0
 8008b4a:	d1e6      	bne.n	8008b1a <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b4c:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b4e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b50:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b52:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8008b5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b60:	f042 0220 	orr.w	r2, r2, #32
 8008b64:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8008b66:	2001      	movs	r0, #1
 8008b68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008b6c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	4604      	mov	r4, r0
 8008b70:	460d      	mov	r5, r1
 8008b72:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b74:	6823      	ldr	r3, [r4, #0]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	061b      	lsls	r3, r3, #24
 8008b7a:	d501      	bpl.n	8008b80 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b80:	4620      	mov	r0, r4
 8008b82:	f7ff ff63 	bl	8008a4c <I2C_IsAcknowledgeFailed>
 8008b86:	b9a8      	cbnz	r0, 8008bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8008b88:	1c6a      	adds	r2, r5, #1
 8008b8a:	d0f3      	beq.n	8008b74 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b8c:	f7ff fc68 	bl	8008460 <HAL_GetTick>
 8008b90:	1b80      	subs	r0, r0, r6
 8008b92:	4285      	cmp	r5, r0
 8008b94:	d301      	bcc.n	8008b9a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8008b96:	2d00      	cmp	r5, #0
 8008b98:	d1ec      	bne.n	8008b74 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b9a:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b9c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b9e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ba0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ba4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ba8:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8008baa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bae:	f042 0220 	orr.w	r2, r2, #32
 8008bb2:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008bb4:	2001      	movs	r0, #1
}
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}

08008bb8 <I2C_RequestMemoryWrite>:
{
 8008bb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008bbc:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bbe:	6802      	ldr	r2, [r0, #0]
{
 8008bc0:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bc2:	6813      	ldr	r3, [r2, #0]
{
 8008bc4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bca:	6013      	str	r3, [r2, #0]
{
 8008bcc:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008bce:	9600      	str	r6, [sp, #0]
 8008bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8008bd8:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008bda:	f7ff ff95 	bl	8008b08 <I2C_WaitOnFlagUntilTimeout>
 8008bde:	b118      	cbz	r0, 8008be8 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 8008be0:	2001      	movs	r0, #1
}
 8008be2:	b004      	add	sp, #16
 8008be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8008bee:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008bf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bf2:	4633      	mov	r3, r6
 8008bf4:	4916      	ldr	r1, [pc, #88]	; (8008c50 <I2C_RequestMemoryWrite+0x98>)
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f7ff ff41 	bl	8008a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d1ef      	bne.n	8008be0 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	9003      	str	r0, [sp, #12]
 8008c04:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c06:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c08:	9203      	str	r2, [sp, #12]
 8008c0a:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c0c:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c0e:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c10:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c12:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c14:	f7ff ffaa 	bl	8008b6c <I2C_WaitOnTXEFlagUntilTimeout>
 8008c18:	b140      	cbz	r0, 8008c2c <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c1c:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c1e:	bf01      	itttt	eq
 8008c20:	6822      	ldreq	r2, [r4, #0]
 8008c22:	6813      	ldreq	r3, [r2, #0]
 8008c24:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8008c28:	6013      	streq	r3, [r2, #0]
 8008c2a:	e7d9      	b.n	8008be0 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c2c:	f1b8 0f01 	cmp.w	r8, #1
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	d102      	bne.n	8008c3a <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c34:	b2ed      	uxtb	r5, r5
 8008c36:	611d      	str	r5, [r3, #16]
 8008c38:	e7d3      	b.n	8008be2 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008c3a:	0a2a      	lsrs	r2, r5, #8
 8008c3c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c40:	4632      	mov	r2, r6
 8008c42:	4620      	mov	r0, r4
 8008c44:	f7ff ff92 	bl	8008b6c <I2C_WaitOnTXEFlagUntilTimeout>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d1e6      	bne.n	8008c1a <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	e7f1      	b.n	8008c34 <I2C_RequestMemoryWrite+0x7c>
 8008c50:	00010002 	.word	0x00010002

08008c54 <I2C_RequestMemoryRead>:
{
 8008c54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008c58:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c5a:	6803      	ldr	r3, [r0, #0]
{
 8008c5c:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c5e:	681a      	ldr	r2, [r3, #0]
{
 8008c60:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c66:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c68:	681a      	ldr	r2, [r3, #0]
{
 8008c6a:	460f      	mov	r7, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c70:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c76:	9500      	str	r5, [sp, #0]
 8008c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c7a:	2200      	movs	r2, #0
{
 8008c7c:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c7e:	f7ff ff43 	bl	8008b08 <I2C_WaitOnFlagUntilTimeout>
 8008c82:	b118      	cbz	r0, 8008c8c <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 8008c84:	2001      	movs	r0, #1
}
 8008c86:	b004      	add	sp, #16
 8008c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	b2ff      	uxtb	r7, r7
 8008c90:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8008c94:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c96:	4929      	ldr	r1, [pc, #164]	; (8008d3c <I2C_RequestMemoryRead+0xe8>)
 8008c98:	462b      	mov	r3, r5
 8008c9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f7ff feee 	bl	8008a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	d1ee      	bne.n	8008c84 <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	9003      	str	r0, [sp, #12]
 8008caa:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cac:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cae:	9203      	str	r2, [sp, #12]
 8008cb0:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cb2:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cb4:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cb6:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cb8:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cba:	f7ff ff57 	bl	8008b6c <I2C_WaitOnTXEFlagUntilTimeout>
 8008cbe:	b140      	cbz	r0, 8008cd2 <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cc2:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cc4:	bf01      	itttt	eq
 8008cc6:	6822      	ldreq	r2, [r4, #0]
 8008cc8:	6813      	ldreq	r3, [r2, #0]
 8008cca:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8008cce:	6013      	streq	r3, [r2, #0]
 8008cd0:	e7d8      	b.n	8008c84 <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008cd2:	f1b8 0f01 	cmp.w	r8, #1
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	d125      	bne.n	8008d26 <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008cda:	b2f6      	uxtb	r6, r6
 8008cdc:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cde:	462a      	mov	r2, r5
 8008ce0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f7ff ff42 	bl	8008b6c <I2C_WaitOnTXEFlagUntilTimeout>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d1e8      	bne.n	8008cc0 <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cee:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008cf0:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cf2:	680b      	ldr	r3, [r1, #0]
 8008cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cf8:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008cfa:	9500      	str	r5, [sp, #0]
 8008cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d02:	f7ff ff01 	bl	8008b08 <I2C_WaitOnFlagUntilTimeout>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d1bc      	bne.n	8008c84 <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	f047 0701 	orr.w	r7, r7, #1
 8008d10:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d14:	462b      	mov	r3, r5
 8008d16:	4909      	ldr	r1, [pc, #36]	; (8008d3c <I2C_RequestMemoryRead+0xe8>)
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f7ff feb0 	bl	8008a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 8008d1e:	3000      	adds	r0, #0
 8008d20:	bf18      	it	ne
 8008d22:	2001      	movne	r0, #1
 8008d24:	e7af      	b.n	8008c86 <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008d26:	0a32      	lsrs	r2, r6, #8
 8008d28:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d2c:	462a      	mov	r2, r5
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f7ff ff1c 	bl	8008b6c <I2C_WaitOnTXEFlagUntilTimeout>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	d1c3      	bne.n	8008cc0 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d38:	6823      	ldr	r3, [r4, #0]
 8008d3a:	e7ce      	b.n	8008cda <I2C_RequestMemoryRead+0x86>
 8008d3c:	00010002 	.word	0x00010002

08008d40 <HAL_I2C_MspInit>:
 8008d40:	4770      	bx	lr
	...

08008d44 <HAL_I2C_Init>:
{
 8008d44:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8008d46:	4604      	mov	r4, r0
 8008d48:	b908      	cbnz	r0, 8008d4e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8008d4a:	2001      	movs	r0, #1
 8008d4c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d4e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008d52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008d56:	b91b      	cbnz	r3, 8008d60 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8008d58:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8008d5c:	f7ff fff0 	bl	8008d40 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d60:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8008d62:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8008d68:	6813      	ldr	r3, [r2, #0]
 8008d6a:	f023 0301 	bic.w	r3, r3, #1
 8008d6e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008d70:	f000 fe5c 	bl	8009a2c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008d74:	6865      	ldr	r5, [r4, #4]
 8008d76:	4b41      	ldr	r3, [pc, #260]	; (8008e7c <HAL_I2C_Init+0x138>)
 8008d78:	429d      	cmp	r5, r3
 8008d7a:	d84d      	bhi.n	8008e18 <HAL_I2C_Init+0xd4>
 8008d7c:	4b40      	ldr	r3, [pc, #256]	; (8008e80 <HAL_I2C_Init+0x13c>)
 8008d7e:	4298      	cmp	r0, r3
 8008d80:	d9e3      	bls.n	8008d4a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8008d82:	4940      	ldr	r1, [pc, #256]	; (8008e84 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008d84:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8008d86:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008d8a:	6853      	ldr	r3, [r2, #4]
 8008d8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008d90:	430b      	orrs	r3, r1
 8008d92:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008d94:	6a13      	ldr	r3, [r2, #32]
 8008d96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008d9a:	3101      	adds	r1, #1
 8008d9c:	4319      	orrs	r1, r3
 8008d9e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008da0:	69d1      	ldr	r1, [r2, #28]
 8008da2:	4b36      	ldr	r3, [pc, #216]	; (8008e7c <HAL_I2C_Init+0x138>)
 8008da4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8008da8:	429d      	cmp	r5, r3
 8008daa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008dae:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8008db2:	d848      	bhi.n	8008e46 <HAL_I2C_Init+0x102>
 8008db4:	006d      	lsls	r5, r5, #1
 8008db6:	fbb0 f0f5 	udiv	r0, r0, r5
 8008dba:	3001      	adds	r0, #1
 8008dbc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8008dc0:	2b04      	cmp	r3, #4
 8008dc2:	bf38      	it	cc
 8008dc4:	2304      	movcc	r3, #4
 8008dc6:	430b      	orrs	r3, r1
 8008dc8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008dca:	6811      	ldr	r1, [r2, #0]
 8008dcc:	6a20      	ldr	r0, [r4, #32]
 8008dce:	69e3      	ldr	r3, [r4, #28]
 8008dd0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8008dd4:	4303      	orrs	r3, r0
 8008dd6:	430b      	orrs	r3, r1
 8008dd8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008dda:	6891      	ldr	r1, [r2, #8]
 8008ddc:	68e0      	ldr	r0, [r4, #12]
 8008dde:	6923      	ldr	r3, [r4, #16]
 8008de0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8008de4:	4303      	orrs	r3, r0
 8008de6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008dea:	430b      	orrs	r3, r1
 8008dec:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008dee:	68d1      	ldr	r1, [r2, #12]
 8008df0:	69a0      	ldr	r0, [r4, #24]
 8008df2:	6963      	ldr	r3, [r4, #20]
 8008df4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008df8:	4303      	orrs	r3, r0
 8008dfa:	430b      	orrs	r3, r1
 8008dfc:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8008dfe:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e00:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8008e02:	f043 0301 	orr.w	r3, r3, #1
 8008e06:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8008e08:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e0a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008e0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e10:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e12:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8008e16:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008e18:	4b1b      	ldr	r3, [pc, #108]	; (8008e88 <HAL_I2C_Init+0x144>)
 8008e1a:	4298      	cmp	r0, r3
 8008e1c:	d995      	bls.n	8008d4a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8008e1e:	4e19      	ldr	r6, [pc, #100]	; (8008e84 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008e20:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8008e24:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008e28:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008e2a:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008e2c:	6853      	ldr	r3, [r2, #4]
 8008e2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e32:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008e34:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008e38:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008e3a:	6a13      	ldr	r3, [r2, #32]
 8008e3c:	fbb1 f1f6 	udiv	r1, r1, r6
 8008e40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e44:	e7a9      	b.n	8008d9a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008e46:	68a3      	ldr	r3, [r4, #8]
 8008e48:	b953      	cbnz	r3, 8008e60 <HAL_I2C_Init+0x11c>
 8008e4a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8008e4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8008e52:	1c43      	adds	r3, r0, #1
 8008e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e58:	b16b      	cbz	r3, 8008e76 <HAL_I2C_Init+0x132>
 8008e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e5e:	e7b2      	b.n	8008dc6 <HAL_I2C_Init+0x82>
 8008e60:	2319      	movs	r3, #25
 8008e62:	436b      	muls	r3, r5
 8008e64:	fbb0 f0f3 	udiv	r0, r0, r3
 8008e68:	1c43      	adds	r3, r0, #1
 8008e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e6e:	b113      	cbz	r3, 8008e76 <HAL_I2C_Init+0x132>
 8008e70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e74:	e7a7      	b.n	8008dc6 <HAL_I2C_Init+0x82>
 8008e76:	2301      	movs	r3, #1
 8008e78:	e7a5      	b.n	8008dc6 <HAL_I2C_Init+0x82>
 8008e7a:	bf00      	nop
 8008e7c:	000186a0 	.word	0x000186a0
 8008e80:	001e847f 	.word	0x001e847f
 8008e84:	000f4240 	.word	0x000f4240
 8008e88:	003d08ff 	.word	0x003d08ff

08008e8c <HAL_I2C_Mem_Write_DMA>:
{
 8008e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e90:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 8008e92:	2300      	movs	r3, #0
{
 8008e94:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8008e96:	9302      	str	r3, [sp, #8]
{
 8008e98:	460f      	mov	r7, r1
 8008e9a:	4690      	mov	r8, r2
 8008e9c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8008e9e:	f7ff fadf 	bl	8008460 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ea2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8008ea6:	4682      	mov	sl, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ea8:	2b20      	cmp	r3, #32
 8008eaa:	d003      	beq.n	8008eb4 <HAL_I2C_Mem_Write_DMA+0x28>
    return HAL_BUSY;
 8008eac:	2002      	movs	r0, #2
}
 8008eae:	b004      	add	sp, #16
 8008eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008eb4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8008eb8:	4b40      	ldr	r3, [pc, #256]	; (8008fbc <HAL_I2C_Mem_Write_DMA+0x130>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ec0:	2319      	movs	r3, #25
 8008ec2:	4353      	muls	r3, r2
 8008ec4:	9302      	str	r3, [sp, #8]
      count--;
 8008ec6:	9b02      	ldr	r3, [sp, #8]
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	9302      	str	r3, [sp, #8]
      if (count == 0U)
 8008ecc:	9b02      	ldr	r3, [sp, #8]
 8008ece:	b963      	cbnz	r3, 8008eea <HAL_I2C_Mem_Write_DMA+0x5e>
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ed0:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ed2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ed4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ed8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008edc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008ede:	f042 0220 	orr.w	r2, r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8008ee2:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8008ee4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8008ee8:	e05d      	b.n	8008fa6 <HAL_I2C_Mem_Write_DMA+0x11a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8008eea:	6822      	ldr	r2, [r4, #0]
 8008eec:	6993      	ldr	r3, [r2, #24]
 8008eee:	0799      	lsls	r1, r3, #30
 8008ef0:	d4e9      	bmi.n	8008ec6 <HAL_I2C_Mem_Write_DMA+0x3a>
    __HAL_LOCK(hi2c);
 8008ef2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d0d8      	beq.n	8008eac <HAL_I2C_Mem_Write_DMA+0x20>
 8008efa:	2301      	movs	r3, #1
 8008efc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f00:	6813      	ldr	r3, [r2, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f02:	2500      	movs	r5, #0
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f04:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8008f06:	bf58      	it	pl
 8008f08:	6813      	ldrpl	r3, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f0a:	492d      	ldr	r1, [pc, #180]	; (8008fc0 <HAL_I2C_Mem_Write_DMA+0x134>)
      __HAL_I2C_ENABLE(hi2c);
 8008f0c:	bf5c      	itt	pl
 8008f0e:	f043 0301 	orrpl.w	r3, r3, #1
 8008f12:	6013      	strpl	r3, [r2, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f14:	6813      	ldr	r3, [r2, #0]
 8008f16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f1a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008f1c:	2321      	movs	r3, #33	; 0x21
 8008f1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008f22:	2340      	movs	r3, #64	; 0x40
 8008f24:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->XferCount   = Size;
 8008f28:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f2c:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8008f2e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008f30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8008f32:	6266      	str	r6, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f38:	62e1      	str	r1, [r4, #44]	; 0x2c
    if (hi2c->XferSize > 0U)
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d035      	beq.n	8008faa <HAL_I2C_Mem_Write_DMA+0x11e>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8008f3e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008f40:	4920      	ldr	r1, [pc, #128]	; (8008fc4 <HAL_I2C_Mem_Write_DMA+0x138>)
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008f42:	62c5      	str	r5, [r0, #44]	; 0x2c
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8008f44:	6281      	str	r1, [r0, #40]	; 0x28
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008f46:	4920      	ldr	r1, [pc, #128]	; (8008fc8 <HAL_I2C_Mem_Write_DMA+0x13c>)
      hi2c->hdmatx->XferAbortCallback = NULL;
 8008f48:	6345      	str	r5, [r0, #52]	; 0x34
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008f4a:	6301      	str	r1, [r0, #48]	; 0x30
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8008f4c:	3210      	adds	r2, #16
 8008f4e:	4631      	mov	r1, r6
 8008f50:	f7ff fb68 	bl	8008624 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8008f54:	b9e0      	cbnz	r0, 8008f90 <HAL_I2C_Mem_Write_DMA+0x104>
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8008f56:	2323      	movs	r3, #35	; 0x23
 8008f58:	f8cd a004 	str.w	sl, [sp, #4]
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	4642      	mov	r2, r8
 8008f60:	464b      	mov	r3, r9
 8008f62:	4639      	mov	r1, r7
 8008f64:	4620      	mov	r0, r4
 8008f66:	f7ff fe27 	bl	8008bb8 <I2C_RequestMemoryWrite>
 8008f6a:	b9e0      	cbnz	r0, 8008fa6 <HAL_I2C_Mem_Write_DMA+0x11a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f6c:	6823      	ldr	r3, [r4, #0]
 8008f6e:	9003      	str	r0, [sp, #12]
 8008f70:	695a      	ldr	r2, [r3, #20]
 8008f72:	9203      	str	r2, [sp, #12]
 8008f74:	699a      	ldr	r2, [r3, #24]
        __HAL_UNLOCK(hi2c);
 8008f76:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f7a:	9203      	str	r2, [sp, #12]
 8008f7c:	9a03      	ldr	r2, [sp, #12]
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f84:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f8c:	605a      	str	r2, [r3, #4]
        return HAL_OK;
 8008f8e:	e78e      	b.n	8008eae <HAL_I2C_Mem_Write_DMA+0x22>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008f90:	2320      	movs	r3, #32
 8008f92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008f96:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008f9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008f9c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008fa0:	f043 0310 	orr.w	r3, r3, #16
 8008fa4:	6423      	str	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8008fa6:	2001      	movs	r0, #1
 8008fa8:	e781      	b.n	8008eae <HAL_I2C_Mem_Write_DMA+0x22>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008faa:	2220      	movs	r2, #32
 8008fac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008fb0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8008fb4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008fb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fba:	e792      	b.n	8008ee2 <HAL_I2C_Mem_Write_DMA+0x56>
 8008fbc:	20000020 	.word	0x20000020
 8008fc0:	ffff0000 	.word	0xffff0000
 8008fc4:	080092e9 	.word	0x080092e9
 8008fc8:	080092b7 	.word	0x080092b7

08008fcc <HAL_I2C_Mem_Read_DMA>:
{
 8008fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd0:	b086      	sub	sp, #24
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	4698      	mov	r8, r3
 8008fd6:	460e      	mov	r6, r1
 8008fd8:	4617      	mov	r7, r2
 8008fda:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8008fde:	f7ff fa3f 	bl	8008460 <HAL_GetTick>
  __IO uint32_t count = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fe6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8008fea:	4681      	mov	r9, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fec:	2b20      	cmp	r3, #32
 8008fee:	d003      	beq.n	8008ff8 <HAL_I2C_Mem_Read_DMA+0x2c>
    return HAL_BUSY;
 8008ff0:	2002      	movs	r0, #2
}
 8008ff2:	b006      	add	sp, #24
 8008ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008ff8:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8008ffc:	4b52      	ldr	r3, [pc, #328]	; (8009148 <HAL_I2C_Mem_Read_DMA+0x17c>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	fbb3 f2f2 	udiv	r2, r3, r2
 8009004:	2319      	movs	r3, #25
 8009006:	4353      	muls	r3, r2
 8009008:	9303      	str	r3, [sp, #12]
      count--;
 800900a:	9b03      	ldr	r3, [sp, #12]
 800900c:	3b01      	subs	r3, #1
 800900e:	9303      	str	r3, [sp, #12]
      if (count == 0U)
 8009010:	9b03      	ldr	r3, [sp, #12]
 8009012:	b96b      	cbnz	r3, 8009030 <HAL_I2C_Mem_Read_DMA+0x64>
        hi2c->State               = HAL_I2C_STATE_READY;
 8009014:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009016:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009018:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800901c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009020:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8009022:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009026:	f042 0220 	orr.w	r2, r2, #32
 800902a:	6422      	str	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 800902c:	2001      	movs	r0, #1
 800902e:	e7e0      	b.n	8008ff2 <HAL_I2C_Mem_Read_DMA+0x26>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8009030:	6821      	ldr	r1, [r4, #0]
 8009032:	698b      	ldr	r3, [r1, #24]
 8009034:	079a      	lsls	r2, r3, #30
 8009036:	d4e8      	bmi.n	800900a <HAL_I2C_Mem_Read_DMA+0x3e>
    __HAL_LOCK(hi2c);
 8009038:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800903c:	2b01      	cmp	r3, #1
 800903e:	d0d7      	beq.n	8008ff0 <HAL_I2C_Mem_Read_DMA+0x24>
 8009040:	2301      	movs	r3, #1
 8009042:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009046:	680b      	ldr	r3, [r1, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009048:	2500      	movs	r5, #0
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800904a:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800904c:	bf58      	it	pl
 800904e:	680b      	ldrpl	r3, [r1, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009050:	4a3e      	ldr	r2, [pc, #248]	; (800914c <HAL_I2C_Mem_Read_DMA+0x180>)
      __HAL_I2C_ENABLE(hi2c);
 8009052:	bf5c      	itt	pl
 8009054:	f043 0301 	orrpl.w	r3, r3, #1
 8009058:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800905a:	680b      	ldr	r3, [r1, #0]
 800905c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009060:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009062:	2322      	movs	r3, #34	; 0x22
 8009064:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009068:	2340      	movs	r3, #64	; 0x40
 800906a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->XferCount   = Size;
 800906e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009072:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8009074:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009076:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8009078:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800907c:	b29b      	uxth	r3, r3
 800907e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009080:	62e2      	str	r2, [r4, #44]	; 0x2c
    if (hi2c->XferSize > 0U)
 8009082:	2b00      	cmp	r3, #0
 8009084:	d043      	beq.n	800910e <HAL_I2C_Mem_Read_DMA+0x142>
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8009086:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009088:	4a31      	ldr	r2, [pc, #196]	; (8009150 <HAL_I2C_Mem_Read_DMA+0x184>)
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800908a:	62c5      	str	r5, [r0, #44]	; 0x2c
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800908c:	6282      	str	r2, [r0, #40]	; 0x28
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800908e:	4a31      	ldr	r2, [pc, #196]	; (8009154 <HAL_I2C_Mem_Read_DMA+0x188>)
      hi2c->hdmarx->XferAbortCallback = NULL;
 8009090:	6345      	str	r5, [r0, #52]	; 0x34
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8009092:	6302      	str	r2, [r0, #48]	; 0x30
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8009094:	3110      	adds	r1, #16
 8009096:	4652      	mov	r2, sl
 8009098:	f7ff fac4 	bl	8008624 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 800909c:	2800      	cmp	r0, #0
 800909e:	d12a      	bne.n	80090f6 <HAL_I2C_Mem_Read_DMA+0x12a>
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80090a0:	2323      	movs	r3, #35	; 0x23
 80090a2:	f8cd 9004 	str.w	r9, [sp, #4]
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	463a      	mov	r2, r7
 80090aa:	4643      	mov	r3, r8
 80090ac:	4631      	mov	r1, r6
 80090ae:	4620      	mov	r0, r4
 80090b0:	f7ff fdd0 	bl	8008c54 <I2C_RequestMemoryRead>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d1b9      	bne.n	800902c <HAL_I2C_Mem_Read_DMA+0x60>
        if (hi2c->XferSize == 1U)
 80090b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	6823      	ldr	r3, [r4, #0]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090be:	bf0b      	itete	eq
 80090c0:	681a      	ldreq	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80090c2:	685a      	ldrne	r2, [r3, #4]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090c4:	f422 6280 	biceq.w	r2, r2, #1024	; 0x400
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80090c8:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090cc:	bf0c      	ite	eq
 80090ce:	601a      	streq	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80090d0:	605a      	strne	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090d2:	2200      	movs	r2, #0
 80090d4:	9204      	str	r2, [sp, #16]
 80090d6:	6959      	ldr	r1, [r3, #20]
 80090d8:	9104      	str	r1, [sp, #16]
 80090da:	6999      	ldr	r1, [r3, #24]
        __HAL_UNLOCK(hi2c);
 80090dc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090e0:	9104      	str	r1, [sp, #16]
 80090e2:	9904      	ldr	r1, [sp, #16]
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090ea:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090f2:	605a      	str	r2, [r3, #4]
 80090f4:	e77d      	b.n	8008ff2 <HAL_I2C_Mem_Read_DMA+0x26>
        hi2c->State     = HAL_I2C_STATE_READY;
 80090f6:	2320      	movs	r3, #32
 80090f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80090fc:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009100:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8009102:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009106:	f043 0310 	orr.w	r3, r3, #16
 800910a:	6423      	str	r3, [r4, #64]	; 0x40
 800910c:	e78e      	b.n	800902c <HAL_I2C_Mem_Read_DMA+0x60>
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800910e:	2323      	movs	r3, #35	; 0x23
 8009110:	f8cd 9004 	str.w	r9, [sp, #4]
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	463a      	mov	r2, r7
 8009118:	4643      	mov	r3, r8
 800911a:	4631      	mov	r1, r6
 800911c:	4620      	mov	r0, r4
 800911e:	f7ff fd99 	bl	8008c54 <I2C_RequestMemoryRead>
 8009122:	2800      	cmp	r0, #0
 8009124:	d182      	bne.n	800902c <HAL_I2C_Mem_Read_DMA+0x60>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	9005      	str	r0, [sp, #20]
 800912a:	695a      	ldr	r2, [r3, #20]
 800912c:	9205      	str	r2, [sp, #20]
 800912e:	699a      	ldr	r2, [r3, #24]
 8009130:	9205      	str	r2, [sp, #20]
 8009132:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800913a:	601a      	str	r2, [r3, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 800913c:	2320      	movs	r3, #32
      __HAL_UNLOCK(hi2c);
 800913e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      hi2c->State = HAL_I2C_STATE_READY;
 8009142:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8009146:	e754      	b.n	8008ff2 <HAL_I2C_Mem_Read_DMA+0x26>
 8009148:	20000020 	.word	0x20000020
 800914c:	ffff0000 	.word	0xffff0000
 8009150:	080092e9 	.word	0x080092e9
 8009154:	080092b7 	.word	0x080092b7

08009158 <HAL_I2C_IsDeviceReady>:
{
 8009158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800915c:	4604      	mov	r4, r0
 800915e:	b085      	sub	sp, #20
 8009160:	4698      	mov	r8, r3
 8009162:	4689      	mov	r9, r1
 8009164:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8009166:	f7ff f97b 	bl	8008460 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800916a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 800916e:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009170:	2b20      	cmp	r3, #32
 8009172:	d003      	beq.n	800917c <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8009174:	2002      	movs	r0, #2
}
 8009176:	b005      	add	sp, #20
 8009178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800917c:	9000      	str	r0, [sp, #0]
 800917e:	2319      	movs	r3, #25
 8009180:	2201      	movs	r2, #1
 8009182:	4949      	ldr	r1, [pc, #292]	; (80092a8 <HAL_I2C_IsDeviceReady+0x150>)
 8009184:	4620      	mov	r0, r4
 8009186:	f7ff fcbf 	bl	8008b08 <I2C_WaitOnFlagUntilTimeout>
 800918a:	2800      	cmp	r0, #0
 800918c:	d1f2      	bne.n	8009174 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 800918e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009192:	2b01      	cmp	r3, #1
 8009194:	d0ee      	beq.n	8009174 <HAL_I2C_IsDeviceReady+0x1c>
 8009196:	2301      	movs	r3, #1
 8009198:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800919c:	6823      	ldr	r3, [r4, #0]
  uint32_t I2C_Trials = 1U;
 800919e:	2701      	movs	r7, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80091a0:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80091a2:	f8df b104 	ldr.w	fp, [pc, #260]	; 80092a8 <HAL_I2C_IsDeviceReady+0x150>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80091a6:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80091a8:	bf58      	it	pl
 80091aa:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091ac:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 80091b0:	bf5c      	itt	pl
 80091b2:	f042 0201 	orrpl.w	r2, r2, #1
 80091b6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091be:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80091c0:	2324      	movs	r3, #36	; 0x24
 80091c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091c6:	2300      	movs	r3, #0
 80091c8:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091ca:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80091ce:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091d0:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80091d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091d6:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80091d8:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091de:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80091e0:	9500      	str	r5, [sp, #0]
 80091e2:	4643      	mov	r3, r8
 80091e4:	2200      	movs	r2, #0
 80091e6:	f7ff fc8f 	bl	8008b08 <I2C_WaitOnFlagUntilTimeout>
 80091ea:	b108      	cbz	r0, 80091f0 <HAL_I2C_IsDeviceReady+0x98>
    return HAL_ERROR;
 80091ec:	2001      	movs	r0, #1
 80091ee:	e7c2      	b.n	8009176 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091f0:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80091f2:	26a0      	movs	r6, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091f4:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 80091f8:	f7ff f932 	bl	8008460 <HAL_GetTick>
 80091fc:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009202:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009204:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009208:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800920c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8009210:	29a0      	cmp	r1, #160	; 0xa0
 8009212:	d001      	beq.n	8009218 <HAL_I2C_IsDeviceReady+0xc0>
 8009214:	b902      	cbnz	r2, 8009218 <HAL_I2C_IsDeviceReady+0xc0>
 8009216:	b303      	cbz	r3, 800925a <HAL_I2C_IsDeviceReady+0x102>
      hi2c->State = HAL_I2C_STATE_READY;
 8009218:	2620      	movs	r6, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800921a:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 800921c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009220:	695a      	ldr	r2, [r3, #20]
 8009222:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800922c:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800922e:	d026      	beq.n	800927e <HAL_I2C_IsDeviceReady+0x126>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009230:	2200      	movs	r2, #0
 8009232:	9203      	str	r2, [sp, #12]
 8009234:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009236:	491c      	ldr	r1, [pc, #112]	; (80092a8 <HAL_I2C_IsDeviceReady+0x150>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009238:	9203      	str	r2, [sp, #12]
 800923a:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800923c:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800923e:	9303      	str	r3, [sp, #12]
 8009240:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009242:	9500      	str	r5, [sp, #0]
 8009244:	2319      	movs	r3, #25
 8009246:	4620      	mov	r0, r4
 8009248:	f7ff fc5e 	bl	8008b08 <I2C_WaitOnFlagUntilTimeout>
 800924c:	2800      	cmp	r0, #0
 800924e:	d1cd      	bne.n	80091ec <HAL_I2C_IsDeviceReady+0x94>
        hi2c->State = HAL_I2C_STATE_READY;
 8009250:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8009254:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8009258:	e78d      	b.n	8009176 <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800925a:	f7ff f901 	bl	8008460 <HAL_GetTick>
 800925e:	1b40      	subs	r0, r0, r5
 8009260:	4580      	cmp	r8, r0
 8009262:	d302      	bcc.n	800926a <HAL_I2C_IsDeviceReady+0x112>
 8009264:	f1b8 0f00 	cmp.w	r8, #0
 8009268:	d101      	bne.n	800926e <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800926a:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009272:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009274:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009278:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800927c:	e7c6      	b.n	800920c <HAL_I2C_IsDeviceReady+0xb4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800927e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009282:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009284:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009286:	4620      	mov	r0, r4
 8009288:	9500      	str	r5, [sp, #0]
 800928a:	2319      	movs	r3, #25
 800928c:	2201      	movs	r2, #1
 800928e:	f7ff fc3b 	bl	8008b08 <I2C_WaitOnFlagUntilTimeout>
 8009292:	2800      	cmp	r0, #0
 8009294:	d1aa      	bne.n	80091ec <HAL_I2C_IsDeviceReady+0x94>
      I2C_Trials++;
 8009296:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8009298:	4557      	cmp	r7, sl
 800929a:	d399      	bcc.n	80091d0 <HAL_I2C_IsDeviceReady+0x78>
    hi2c->State = HAL_I2C_STATE_READY;
 800929c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80092a0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80092a4:	e7a2      	b.n	80091ec <HAL_I2C_IsDeviceReady+0x94>
 80092a6:	bf00      	nop
 80092a8:	00100002 	.word	0x00100002

080092ac <HAL_I2C_MasterRxCpltCallback>:
 80092ac:	4770      	bx	lr

080092ae <HAL_I2C_SlaveTxCpltCallback>:
 80092ae:	4770      	bx	lr

080092b0 <HAL_I2C_SlaveRxCpltCallback>:
 80092b0:	4770      	bx	lr

080092b2 <HAL_I2C_MemRxCpltCallback>:
 80092b2:	4770      	bx	lr

080092b4 <HAL_I2C_ErrorCallback>:
 80092b4:	4770      	bx	lr

080092b6 <I2C_DMAError>:
{
 80092b6:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferCpltCallback = NULL;
 80092b8:	2300      	movs	r3, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80092ba:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hi2c->hdmatx->XferCpltCallback = NULL;
 80092bc:	6b42      	ldr	r2, [r0, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092be:	6801      	ldr	r1, [r0, #0]
  hi2c->hdmatx->XferCpltCallback = NULL;
 80092c0:	6293      	str	r3, [r2, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 80092c2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80092c4:	6293      	str	r3, [r2, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092c6:	680a      	ldr	r2, [r1, #0]
 80092c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092cc:	600a      	str	r2, [r1, #0]
  hi2c->State           = HAL_I2C_STATE_READY;
 80092ce:	2220      	movs	r2, #32
  hi2c->XferCount       = 0U;
 80092d0:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 80092d2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 80092d6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 80092da:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80092dc:	f043 0310 	orr.w	r3, r3, #16
 80092e0:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_I2C_ErrorCallback(hi2c);
 80092e2:	f7ff ffe7 	bl	80092b4 <HAL_I2C_ErrorCallback>
 80092e6:	bd08      	pop	{r3, pc}

080092e8 <I2C_DMAXferCplt>:
{
 80092e8:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80092ea:	6a44      	ldr	r4, [r0, #36]	; 0x24
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80092ec:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80092ee:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80092f2:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80092f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80092f8:	685d      	ldr	r5, [r3, #4]
  hi2c->hdmatx->XferCpltCallback = NULL;
 80092fa:	6b66      	ldr	r6, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80092fc:	f425 7540 	bic.w	r5, r5, #768	; 0x300
 8009300:	605d      	str	r5, [r3, #4]
  hi2c->hdmatx->XferCpltCallback = NULL;
 8009302:	2500      	movs	r5, #0
 8009304:	62b5      	str	r5, [r6, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8009306:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009308:	b2d2      	uxtb	r2, r2
  hi2c->hdmarx->XferCpltCallback = NULL;
 800930a:	62b5      	str	r5, [r6, #40]	; 0x28
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800930c:	f002 0521 	and.w	r5, r2, #33	; 0x21
 8009310:	2d21      	cmp	r5, #33	; 0x21
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009312:	b2c0      	uxtb	r0, r0
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8009314:	d005      	beq.n	8009322 <I2C_DMAXferCplt+0x3a>
 8009316:	f002 0522 	and.w	r5, r2, #34	; 0x22
 800931a:	2d22      	cmp	r5, #34	; 0x22
 800931c:	d123      	bne.n	8009366 <I2C_DMAXferCplt+0x7e>
 800931e:	2820      	cmp	r0, #32
 8009320:	d121      	bne.n	8009366 <I2C_DMAXferCplt+0x7e>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009322:	6859      	ldr	r1, [r3, #4]
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009324:	2a29      	cmp	r2, #41	; 0x29
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009326:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800932a:	6059      	str	r1, [r3, #4]
    hi2c->XferCount = 0U;
 800932c:	f04f 0300 	mov.w	r3, #0
 8009330:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009332:	d10d      	bne.n	8009350 <I2C_DMAXferCplt+0x68>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009334:	2321      	movs	r3, #33	; 0x21
 8009336:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009338:	2328      	movs	r3, #40	; 0x28
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800933a:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800933c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009340:	f7ff ffb5 	bl	80092ae <HAL_I2C_SlaveTxCpltCallback>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009344:	6822      	ldr	r2, [r4, #0]
 8009346:	6853      	ldr	r3, [r2, #4]
 8009348:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800934c:	6053      	str	r3, [r2, #4]
 800934e:	bd70      	pop	{r4, r5, r6, pc}
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009350:	2a2a      	cmp	r2, #42	; 0x2a
 8009352:	d1f7      	bne.n	8009344 <I2C_DMAXferCplt+0x5c>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009354:	2322      	movs	r3, #34	; 0x22
 8009356:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009358:	2328      	movs	r3, #40	; 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800935a:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800935c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009360:	f7ff ffa6 	bl	80092b0 <HAL_I2C_SlaveRxCpltCallback>
 8009364:	e7ee      	b.n	8009344 <I2C_DMAXferCplt+0x5c>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8009366:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800936a:	2a00      	cmp	r2, #0
 800936c:	d03c      	beq.n	80093e8 <I2C_DMAXferCplt+0x100>
    if (hi2c->XferCount == (uint16_t)1)
 800936e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009370:	b292      	uxth	r2, r2
 8009372:	2a01      	cmp	r2, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009374:	bf02      	ittt	eq
 8009376:	681a      	ldreq	r2, [r3, #0]
 8009378:	f422 6280 	biceq.w	r2, r2, #1024	; 0x400
 800937c:	601a      	streq	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800937e:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8009380:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009384:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009388:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800938a:	d006      	beq.n	800939a <I2C_DMAXferCplt+0xb2>
 800938c:	2908      	cmp	r1, #8
 800938e:	d004      	beq.n	800939a <I2C_DMAXferCplt+0xb2>
 8009390:	f1b1 4f2a 	cmp.w	r1, #2852126720	; 0xaa000000
 8009394:	d001      	beq.n	800939a <I2C_DMAXferCplt+0xb2>
 8009396:	2920      	cmp	r1, #32
 8009398:	d103      	bne.n	80093a2 <I2C_DMAXferCplt+0xba>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093a0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80093a2:	685a      	ldr	r2, [r3, #4]
 80093a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80093a8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80093aa:	685a      	ldr	r2, [r3, #4]
 80093ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093b0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80093b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093b8:	b11b      	cbz	r3, 80093c2 <I2C_DMAXferCplt+0xda>
      HAL_I2C_ErrorCallback(hi2c);
 80093ba:	4620      	mov	r0, r4
 80093bc:	f7ff ff7a 	bl	80092b4 <HAL_I2C_ErrorCallback>
 80093c0:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_READY;
 80093c2:	2220      	movs	r2, #32
 80093c4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80093c8:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80093d0:	2a40      	cmp	r2, #64	; 0x40
 80093d2:	d104      	bne.n	80093de <I2C_DMAXferCplt+0xf6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80093d4:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80093d6:	4620      	mov	r0, r4
 80093d8:	f7ff ff6b 	bl	80092b2 <HAL_I2C_MemRxCpltCallback>
 80093dc:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80093de:	2312      	movs	r3, #18
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80093e0:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80093e2:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80093e4:	f7ff ff62 	bl	80092ac <HAL_I2C_MasterRxCpltCallback>
 80093e8:	bd70      	pop	{r4, r5, r6, pc}

080093ea <HAL_I2C_GetState>:
  return hi2c->State;
 80093ea:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80093ee:	4770      	bx	lr

080093f0 <HAL_MspInit>:
 80093f0:	4770      	bx	lr
	...

080093f4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80093f4:	2201      	movs	r2, #1
 80093f6:	4b01      	ldr	r3, [pc, #4]	; (80093fc <HAL_PWR_EnableBkUpAccess+0x8>)
 80093f8:	601a      	str	r2, [r3, #0]
 80093fa:	4770      	bx	lr
 80093fc:	420e0020 	.word	0x420e0020

08009400 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8009400:	4770      	bx	lr
	...

08009404 <HAL_PWR_PVD_IRQHandler>:
{
 8009404:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8009406:	4c05      	ldr	r4, [pc, #20]	; (800941c <HAL_PWR_PVD_IRQHandler+0x18>)
 8009408:	6963      	ldr	r3, [r4, #20]
 800940a:	03db      	lsls	r3, r3, #15
 800940c:	d504      	bpl.n	8009418 <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 800940e:	f7ff fff7 	bl	8009400 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8009412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009416:	6163      	str	r3, [r4, #20]
 8009418:	bd10      	pop	{r4, pc}
 800941a:	bf00      	nop
 800941c:	40010400 	.word	0x40010400

08009420 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009420:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009424:	4604      	mov	r4, r0
 8009426:	b918      	cbnz	r0, 8009430 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8009428:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 800942a:	b002      	add	sp, #8
 800942c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009430:	6803      	ldr	r3, [r0, #0]
 8009432:	07db      	lsls	r3, r3, #31
 8009434:	d414      	bmi.n	8009460 <HAL_RCC_OscConfig+0x40>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	079f      	lsls	r7, r3, #30
 800943a:	d45f      	bmi.n	80094fc <HAL_RCC_OscConfig+0xdc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800943c:	6823      	ldr	r3, [r4, #0]
 800943e:	0719      	lsls	r1, r3, #28
 8009440:	f100 8096 	bmi.w	8009570 <HAL_RCC_OscConfig+0x150>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009444:	6823      	ldr	r3, [r4, #0]
 8009446:	075a      	lsls	r2, r3, #29
 8009448:	f100 80c0 	bmi.w	80095cc <HAL_RCC_OscConfig+0x1ac>
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800944c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800944e:	2a00      	cmp	r2, #0
 8009450:	f040 812e 	bne.w	80096b0 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009454:	6a22      	ldr	r2, [r4, #32]
 8009456:	2a00      	cmp	r2, #0
 8009458:	f040 8181 	bne.w	800975e <HAL_RCC_OscConfig+0x33e>
  return HAL_OK;
 800945c:	2000      	movs	r0, #0
 800945e:	e7e4      	b.n	800942a <HAL_RCC_OscConfig+0xa>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009460:	4d8e      	ldr	r5, [pc, #568]	; (800969c <HAL_RCC_OscConfig+0x27c>)
 8009462:	686b      	ldr	r3, [r5, #4]
 8009464:	f003 030c 	and.w	r3, r3, #12
 8009468:	2b04      	cmp	r3, #4
 800946a:	d007      	beq.n	800947c <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800946c:	686b      	ldr	r3, [r5, #4]
 800946e:	f003 030c 	and.w	r3, r3, #12
 8009472:	2b08      	cmp	r3, #8
 8009474:	d109      	bne.n	800948a <HAL_RCC_OscConfig+0x6a>
 8009476:	686b      	ldr	r3, [r5, #4]
 8009478:	03de      	lsls	r6, r3, #15
 800947a:	d506      	bpl.n	800948a <HAL_RCC_OscConfig+0x6a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	039d      	lsls	r5, r3, #14
 8009480:	d5d9      	bpl.n	8009436 <HAL_RCC_OscConfig+0x16>
 8009482:	68a3      	ldr	r3, [r4, #8]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1d6      	bne.n	8009436 <HAL_RCC_OscConfig+0x16>
 8009488:	e7ce      	b.n	8009428 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800948a:	68a3      	ldr	r3, [r4, #8]
 800948c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009490:	d110      	bne.n	80094b4 <HAL_RCC_OscConfig+0x94>
 8009492:	682b      	ldr	r3, [r5, #0]
 8009494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009498:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800949a:	f7fe ffe1 	bl	8008460 <HAL_GetTick>
 800949e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	0398      	lsls	r0, r3, #14
 80094a4:	d4c7      	bmi.n	8009436 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094a6:	f7fe ffdb 	bl	8008460 <HAL_GetTick>
 80094aa:	1b80      	subs	r0, r0, r6
 80094ac:	2864      	cmp	r0, #100	; 0x64
 80094ae:	d9f7      	bls.n	80094a0 <HAL_RCC_OscConfig+0x80>
            return HAL_TIMEOUT;
 80094b0:	2003      	movs	r0, #3
 80094b2:	e7ba      	b.n	800942a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094b4:	b99b      	cbnz	r3, 80094de <HAL_RCC_OscConfig+0xbe>
 80094b6:	682b      	ldr	r3, [r5, #0]
 80094b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094bc:	602b      	str	r3, [r5, #0]
 80094be:	682b      	ldr	r3, [r5, #0]
 80094c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80094c6:	f7fe ffcb 	bl	8008460 <HAL_GetTick>
 80094ca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	0399      	lsls	r1, r3, #14
 80094d0:	d5b1      	bpl.n	8009436 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094d2:	f7fe ffc5 	bl	8008460 <HAL_GetTick>
 80094d6:	1b80      	subs	r0, r0, r6
 80094d8:	2864      	cmp	r0, #100	; 0x64
 80094da:	d9f7      	bls.n	80094cc <HAL_RCC_OscConfig+0xac>
 80094dc:	e7e8      	b.n	80094b0 <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094e2:	682b      	ldr	r3, [r5, #0]
 80094e4:	d103      	bne.n	80094ee <HAL_RCC_OscConfig+0xce>
 80094e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80094ea:	602b      	str	r3, [r5, #0]
 80094ec:	e7d1      	b.n	8009492 <HAL_RCC_OscConfig+0x72>
 80094ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094f2:	602b      	str	r3, [r5, #0]
 80094f4:	682b      	ldr	r3, [r5, #0]
 80094f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094fa:	e7cd      	b.n	8009498 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80094fc:	4d67      	ldr	r5, [pc, #412]	; (800969c <HAL_RCC_OscConfig+0x27c>)
 80094fe:	686b      	ldr	r3, [r5, #4]
 8009500:	f013 0f0c 	tst.w	r3, #12
 8009504:	d007      	beq.n	8009516 <HAL_RCC_OscConfig+0xf6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009506:	686b      	ldr	r3, [r5, #4]
 8009508:	f003 030c 	and.w	r3, r3, #12
 800950c:	2b08      	cmp	r3, #8
 800950e:	d110      	bne.n	8009532 <HAL_RCC_OscConfig+0x112>
 8009510:	686b      	ldr	r3, [r5, #4]
 8009512:	03da      	lsls	r2, r3, #15
 8009514:	d40d      	bmi.n	8009532 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009516:	682b      	ldr	r3, [r5, #0]
 8009518:	079b      	lsls	r3, r3, #30
 800951a:	d502      	bpl.n	8009522 <HAL_RCC_OscConfig+0x102>
 800951c:	6963      	ldr	r3, [r4, #20]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d182      	bne.n	8009428 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009522:	682b      	ldr	r3, [r5, #0]
 8009524:	69a2      	ldr	r2, [r4, #24]
 8009526:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800952a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800952e:	602b      	str	r3, [r5, #0]
 8009530:	e784      	b.n	800943c <HAL_RCC_OscConfig+0x1c>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009532:	6962      	ldr	r2, [r4, #20]
 8009534:	4b5a      	ldr	r3, [pc, #360]	; (80096a0 <HAL_RCC_OscConfig+0x280>)
 8009536:	b16a      	cbz	r2, 8009554 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_HSI_ENABLE();
 8009538:	2201      	movs	r2, #1
 800953a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800953c:	f7fe ff90 	bl	8008460 <HAL_GetTick>
 8009540:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009542:	682b      	ldr	r3, [r5, #0]
 8009544:	079f      	lsls	r7, r3, #30
 8009546:	d4ec      	bmi.n	8009522 <HAL_RCC_OscConfig+0x102>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009548:	f7fe ff8a 	bl	8008460 <HAL_GetTick>
 800954c:	1b80      	subs	r0, r0, r6
 800954e:	2802      	cmp	r0, #2
 8009550:	d9f7      	bls.n	8009542 <HAL_RCC_OscConfig+0x122>
 8009552:	e7ad      	b.n	80094b0 <HAL_RCC_OscConfig+0x90>
        __HAL_RCC_HSI_DISABLE();
 8009554:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009556:	f7fe ff83 	bl	8008460 <HAL_GetTick>
 800955a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	0798      	lsls	r0, r3, #30
 8009560:	f57f af6c 	bpl.w	800943c <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009564:	f7fe ff7c 	bl	8008460 <HAL_GetTick>
 8009568:	1b80      	subs	r0, r0, r6
 800956a:	2802      	cmp	r0, #2
 800956c:	d9f6      	bls.n	800955c <HAL_RCC_OscConfig+0x13c>
 800956e:	e79f      	b.n	80094b0 <HAL_RCC_OscConfig+0x90>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009570:	69e2      	ldr	r2, [r4, #28]
 8009572:	4d4a      	ldr	r5, [pc, #296]	; (800969c <HAL_RCC_OscConfig+0x27c>)
 8009574:	4b4b      	ldr	r3, [pc, #300]	; (80096a4 <HAL_RCC_OscConfig+0x284>)
 8009576:	b1da      	cbz	r2, 80095b0 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 8009578:	2201      	movs	r2, #1
 800957a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800957c:	f7fe ff70 	bl	8008460 <HAL_GetTick>
 8009580:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009582:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009584:	079b      	lsls	r3, r3, #30
 8009586:	d50d      	bpl.n	80095a4 <HAL_RCC_OscConfig+0x184>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009588:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800958c:	4b46      	ldr	r3, [pc, #280]	; (80096a8 <HAL_RCC_OscConfig+0x288>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	fbb3 f3f2 	udiv	r3, r3, r2
 8009594:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8009596:	bf00      	nop
  }
  while (Delay --);
 8009598:	9b01      	ldr	r3, [sp, #4]
 800959a:	1e5a      	subs	r2, r3, #1
 800959c:	9201      	str	r2, [sp, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d1f9      	bne.n	8009596 <HAL_RCC_OscConfig+0x176>
 80095a2:	e74f      	b.n	8009444 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095a4:	f7fe ff5c 	bl	8008460 <HAL_GetTick>
 80095a8:	1b80      	subs	r0, r0, r6
 80095aa:	2802      	cmp	r0, #2
 80095ac:	d9e9      	bls.n	8009582 <HAL_RCC_OscConfig+0x162>
 80095ae:	e77f      	b.n	80094b0 <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_LSI_DISABLE();
 80095b0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80095b2:	f7fe ff55 	bl	8008460 <HAL_GetTick>
 80095b6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80095ba:	079f      	lsls	r7, r3, #30
 80095bc:	f57f af42 	bpl.w	8009444 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095c0:	f7fe ff4e 	bl	8008460 <HAL_GetTick>
 80095c4:	1b80      	subs	r0, r0, r6
 80095c6:	2802      	cmp	r0, #2
 80095c8:	d9f6      	bls.n	80095b8 <HAL_RCC_OscConfig+0x198>
 80095ca:	e771      	b.n	80094b0 <HAL_RCC_OscConfig+0x90>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095cc:	4d33      	ldr	r5, [pc, #204]	; (800969c <HAL_RCC_OscConfig+0x27c>)
 80095ce:	69eb      	ldr	r3, [r5, #28]
 80095d0:	00de      	lsls	r6, r3, #3
 80095d2:	d424      	bmi.n	800961e <HAL_RCC_OscConfig+0x1fe>
      pwrclkchanged = SET;
 80095d4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80095d6:	69eb      	ldr	r3, [r5, #28]
 80095d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095dc:	61eb      	str	r3, [r5, #28]
 80095de:	69eb      	ldr	r3, [r5, #28]
 80095e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095e8:	4e30      	ldr	r6, [pc, #192]	; (80096ac <HAL_RCC_OscConfig+0x28c>)
 80095ea:	6833      	ldr	r3, [r6, #0]
 80095ec:	05d8      	lsls	r0, r3, #23
 80095ee:	d518      	bpl.n	8009622 <HAL_RCC_OscConfig+0x202>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095f0:	6923      	ldr	r3, [r4, #16]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d126      	bne.n	8009644 <HAL_RCC_OscConfig+0x224>
 80095f6:	6a2b      	ldr	r3, [r5, #32]
 80095f8:	f043 0301 	orr.w	r3, r3, #1
 80095fc:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80095fe:	f7fe ff2f 	bl	8008460 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009602:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009606:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009608:	6a2b      	ldr	r3, [r5, #32]
 800960a:	079a      	lsls	r2, r3, #30
 800960c:	d53f      	bpl.n	800968e <HAL_RCC_OscConfig+0x26e>
    if (pwrclkchanged == SET)
 800960e:	2f00      	cmp	r7, #0
 8009610:	f43f af1c 	beq.w	800944c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009614:	69eb      	ldr	r3, [r5, #28]
 8009616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800961a:	61eb      	str	r3, [r5, #28]
 800961c:	e716      	b.n	800944c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 800961e:	2700      	movs	r7, #0
 8009620:	e7e2      	b.n	80095e8 <HAL_RCC_OscConfig+0x1c8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009622:	6833      	ldr	r3, [r6, #0]
 8009624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009628:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800962a:	f7fe ff19 	bl	8008460 <HAL_GetTick>
 800962e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009630:	6833      	ldr	r3, [r6, #0]
 8009632:	05d9      	lsls	r1, r3, #23
 8009634:	d4dc      	bmi.n	80095f0 <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009636:	f7fe ff13 	bl	8008460 <HAL_GetTick>
 800963a:	eba0 0008 	sub.w	r0, r0, r8
 800963e:	2864      	cmp	r0, #100	; 0x64
 8009640:	d9f6      	bls.n	8009630 <HAL_RCC_OscConfig+0x210>
 8009642:	e735      	b.n	80094b0 <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009644:	b9ab      	cbnz	r3, 8009672 <HAL_RCC_OscConfig+0x252>
 8009646:	6a2b      	ldr	r3, [r5, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009648:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800964c:	f023 0301 	bic.w	r3, r3, #1
 8009650:	622b      	str	r3, [r5, #32]
 8009652:	6a2b      	ldr	r3, [r5, #32]
 8009654:	f023 0304 	bic.w	r3, r3, #4
 8009658:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800965a:	f7fe ff01 	bl	8008460 <HAL_GetTick>
 800965e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009660:	6a2b      	ldr	r3, [r5, #32]
 8009662:	079b      	lsls	r3, r3, #30
 8009664:	d5d3      	bpl.n	800960e <HAL_RCC_OscConfig+0x1ee>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009666:	f7fe fefb 	bl	8008460 <HAL_GetTick>
 800966a:	1b80      	subs	r0, r0, r6
 800966c:	4540      	cmp	r0, r8
 800966e:	d9f7      	bls.n	8009660 <HAL_RCC_OscConfig+0x240>
 8009670:	e71e      	b.n	80094b0 <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009672:	2b05      	cmp	r3, #5
 8009674:	6a2b      	ldr	r3, [r5, #32]
 8009676:	d103      	bne.n	8009680 <HAL_RCC_OscConfig+0x260>
 8009678:	f043 0304 	orr.w	r3, r3, #4
 800967c:	622b      	str	r3, [r5, #32]
 800967e:	e7ba      	b.n	80095f6 <HAL_RCC_OscConfig+0x1d6>
 8009680:	f023 0301 	bic.w	r3, r3, #1
 8009684:	622b      	str	r3, [r5, #32]
 8009686:	6a2b      	ldr	r3, [r5, #32]
 8009688:	f023 0304 	bic.w	r3, r3, #4
 800968c:	e7b6      	b.n	80095fc <HAL_RCC_OscConfig+0x1dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800968e:	f7fe fee7 	bl	8008460 <HAL_GetTick>
 8009692:	eba0 0008 	sub.w	r0, r0, r8
 8009696:	42b0      	cmp	r0, r6
 8009698:	d9b6      	bls.n	8009608 <HAL_RCC_OscConfig+0x1e8>
 800969a:	e709      	b.n	80094b0 <HAL_RCC_OscConfig+0x90>
 800969c:	40021000 	.word	0x40021000
 80096a0:	42420000 	.word	0x42420000
 80096a4:	42420480 	.word	0x42420480
 80096a8:	20000020 	.word	0x20000020
 80096ac:	40007000 	.word	0x40007000
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80096b0:	4d58      	ldr	r5, [pc, #352]	; (8009814 <HAL_RCC_OscConfig+0x3f4>)
 80096b2:	686b      	ldr	r3, [r5, #4]
 80096b4:	03d8      	lsls	r0, r3, #15
 80096b6:	d508      	bpl.n	80096ca <HAL_RCC_OscConfig+0x2aa>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80096b8:	686b      	ldr	r3, [r5, #4]
 80096ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80096be:	2b08      	cmp	r3, #8
 80096c0:	d103      	bne.n	80096ca <HAL_RCC_OscConfig+0x2aa>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80096c2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80096c4:	03d9      	lsls	r1, r3, #15
 80096c6:	f53f aeaf 	bmi.w	8009428 <HAL_RCC_OscConfig+0x8>
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80096ca:	2a02      	cmp	r2, #2
 80096cc:	d133      	bne.n	8009736 <HAL_RCC_OscConfig+0x316>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80096ce:	682b      	ldr	r3, [r5, #0]
 80096d0:	00da      	lsls	r2, r3, #3
 80096d2:	d506      	bpl.n	80096e2 <HAL_RCC_OscConfig+0x2c2>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80096d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80096d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80096d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80096dc:	4293      	cmp	r3, r2
 80096de:	f47f aea3 	bne.w	8009428 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL2_DISABLE();
 80096e2:	2300      	movs	r3, #0
 80096e4:	4e4c      	ldr	r6, [pc, #304]	; (8009818 <HAL_RCC_OscConfig+0x3f8>)
 80096e6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80096e8:	f7fe feba 	bl	8008460 <HAL_GetTick>
 80096ec:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80096ee:	682b      	ldr	r3, [r5, #0]
 80096f0:	011b      	lsls	r3, r3, #4
 80096f2:	d41a      	bmi.n	800972a <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80096f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80096f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80096f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096fc:	4313      	orrs	r3, r2
 80096fe:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8009700:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009702:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009704:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009708:	4313      	orrs	r3, r2
 800970a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_ENABLE();
 800970c:	2301      	movs	r3, #1
 800970e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8009710:	f7fe fea6 	bl	8008460 <HAL_GetTick>
 8009714:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8009716:	682b      	ldr	r3, [r5, #0]
 8009718:	011f      	lsls	r7, r3, #4
 800971a:	f53f ae9b 	bmi.w	8009454 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800971e:	f7fe fe9f 	bl	8008460 <HAL_GetTick>
 8009722:	1b80      	subs	r0, r0, r6
 8009724:	2864      	cmp	r0, #100	; 0x64
 8009726:	d9f6      	bls.n	8009716 <HAL_RCC_OscConfig+0x2f6>
 8009728:	e6c2      	b.n	80094b0 <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800972a:	f7fe fe99 	bl	8008460 <HAL_GetTick>
 800972e:	1bc0      	subs	r0, r0, r7
 8009730:	2864      	cmp	r0, #100	; 0x64
 8009732:	d9dc      	bls.n	80096ee <HAL_RCC_OscConfig+0x2ce>
 8009734:	e6bc      	b.n	80094b0 <HAL_RCC_OscConfig+0x90>
        __HAL_RCC_PLL2_DISABLE();
 8009736:	2200      	movs	r2, #0
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8009738:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800973a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800973e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_DISABLE();
 8009740:	4b35      	ldr	r3, [pc, #212]	; (8009818 <HAL_RCC_OscConfig+0x3f8>)
 8009742:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009744:	f7fe fe8c 	bl	8008460 <HAL_GetTick>
 8009748:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800974a:	682b      	ldr	r3, [r5, #0]
 800974c:	0118      	lsls	r0, r3, #4
 800974e:	f57f ae81 	bpl.w	8009454 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009752:	f7fe fe85 	bl	8008460 <HAL_GetTick>
 8009756:	1b80      	subs	r0, r0, r6
 8009758:	2864      	cmp	r0, #100	; 0x64
 800975a:	d9f6      	bls.n	800974a <HAL_RCC_OscConfig+0x32a>
 800975c:	e6a8      	b.n	80094b0 <HAL_RCC_OscConfig+0x90>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800975e:	4b2d      	ldr	r3, [pc, #180]	; (8009814 <HAL_RCC_OscConfig+0x3f4>)
 8009760:	6859      	ldr	r1, [r3, #4]
 8009762:	461d      	mov	r5, r3
 8009764:	f001 010c 	and.w	r1, r1, #12
 8009768:	2908      	cmp	r1, #8
 800976a:	d041      	beq.n	80097f0 <HAL_RCC_OscConfig+0x3d0>
 800976c:	2300      	movs	r3, #0
 800976e:	4e2b      	ldr	r6, [pc, #172]	; (800981c <HAL_RCC_OscConfig+0x3fc>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009770:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8009772:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009774:	d12f      	bne.n	80097d6 <HAL_RCC_OscConfig+0x3b6>
        tickstart = HAL_GetTick();
 8009776:	f7fe fe73 	bl	8008460 <HAL_GetTick>
 800977a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800977c:	682b      	ldr	r3, [r5, #0]
 800977e:	0199      	lsls	r1, r3, #6
 8009780:	d423      	bmi.n	80097ca <HAL_RCC_OscConfig+0x3aa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009788:	d109      	bne.n	800979e <HAL_RCC_OscConfig+0x37e>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800978a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800978c:	6861      	ldr	r1, [r4, #4]
 800978e:	430a      	orrs	r2, r1
 8009790:	62ea      	str	r2, [r5, #44]	; 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009792:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8009794:	68e1      	ldr	r1, [r4, #12]
 8009796:	f022 020f 	bic.w	r2, r2, #15
 800979a:	430a      	orrs	r2, r1
 800979c:	62ea      	str	r2, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800979e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80097a0:	686a      	ldr	r2, [r5, #4]
 80097a2:	430b      	orrs	r3, r1
 80097a4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80097a8:	4313      	orrs	r3, r2
 80097aa:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80097ac:	2301      	movs	r3, #1
 80097ae:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80097b0:	f7fe fe56 	bl	8008460 <HAL_GetTick>
 80097b4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80097b6:	682b      	ldr	r3, [r5, #0]
 80097b8:	019a      	lsls	r2, r3, #6
 80097ba:	f53f ae4f 	bmi.w	800945c <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097be:	f7fe fe4f 	bl	8008460 <HAL_GetTick>
 80097c2:	1b00      	subs	r0, r0, r4
 80097c4:	2802      	cmp	r0, #2
 80097c6:	d9f6      	bls.n	80097b6 <HAL_RCC_OscConfig+0x396>
 80097c8:	e672      	b.n	80094b0 <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097ca:	f7fe fe49 	bl	8008460 <HAL_GetTick>
 80097ce:	1bc0      	subs	r0, r0, r7
 80097d0:	2802      	cmp	r0, #2
 80097d2:	d9d3      	bls.n	800977c <HAL_RCC_OscConfig+0x35c>
 80097d4:	e66c      	b.n	80094b0 <HAL_RCC_OscConfig+0x90>
        tickstart = HAL_GetTick();
 80097d6:	f7fe fe43 	bl	8008460 <HAL_GetTick>
 80097da:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	019b      	lsls	r3, r3, #6
 80097e0:	f57f ae3c 	bpl.w	800945c <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097e4:	f7fe fe3c 	bl	8008460 <HAL_GetTick>
 80097e8:	1b00      	subs	r0, r0, r4
 80097ea:	2802      	cmp	r0, #2
 80097ec:	d9f6      	bls.n	80097dc <HAL_RCC_OscConfig+0x3bc>
 80097ee:	e65f      	b.n	80094b0 <HAL_RCC_OscConfig+0x90>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80097f0:	2a01      	cmp	r2, #1
 80097f2:	f43f ae19 	beq.w	8009428 <HAL_RCC_OscConfig+0x8>
        pll_config = RCC->CFGR;
 80097f6:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097fa:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80097fe:	429a      	cmp	r2, r3
 8009800:	f47f ae12 	bne.w	8009428 <HAL_RCC_OscConfig+0x8>
 8009804:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009806:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 800980a:	1ac0      	subs	r0, r0, r3
 800980c:	bf18      	it	ne
 800980e:	2001      	movne	r0, #1
 8009810:	e60b      	b.n	800942a <HAL_RCC_OscConfig+0xa>
 8009812:	bf00      	nop
 8009814:	40021000 	.word	0x40021000
 8009818:	42420068 	.word	0x42420068
 800981c:	42420060 	.word	0x42420060

08009820 <HAL_RCC_GetSysClockFreq>:
{
 8009820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009822:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8009824:	466a      	mov	r2, sp
 8009826:	4b2a      	ldr	r3, [pc, #168]	; (80098d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009828:	f103 0508 	add.w	r5, r3, #8
 800982c:	4614      	mov	r4, r2
 800982e:	6818      	ldr	r0, [r3, #0]
 8009830:	6859      	ldr	r1, [r3, #4]
 8009832:	3308      	adds	r3, #8
 8009834:	c403      	stmia	r4!, {r0, r1}
 8009836:	42ab      	cmp	r3, r5
 8009838:	4622      	mov	r2, r4
 800983a:	d1f7      	bne.n	800982c <HAL_RCC_GetSysClockFreq+0xc>
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	889b      	ldrh	r3, [r3, #4]
 8009840:	6020      	str	r0, [r4, #0]
 8009842:	80a3      	strh	r3, [r4, #4]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8009844:	4b23      	ldr	r3, [pc, #140]	; (80098d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009846:	ac04      	add	r4, sp, #16
 8009848:	f103 0510 	add.w	r5, r3, #16
 800984c:	4622      	mov	r2, r4
 800984e:	6818      	ldr	r0, [r3, #0]
 8009850:	6859      	ldr	r1, [r3, #4]
 8009852:	3308      	adds	r3, #8
 8009854:	c203      	stmia	r2!, {r0, r1}
 8009856:	42ab      	cmp	r3, r5
 8009858:	4614      	mov	r4, r2
 800985a:	d1f7      	bne.n	800984c <HAL_RCC_GetSysClockFreq+0x2c>
  tmpreg = RCC->CFGR;
 800985c:	491e      	ldr	r1, [pc, #120]	; (80098d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800985e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8009860:	f003 020c 	and.w	r2, r3, #12
 8009864:	2a08      	cmp	r2, #8
 8009866:	d131      	bne.n	80098cc <HAL_RCC_GetSysClockFreq+0xac>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009868:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800986c:	a808      	add	r0, sp, #32
 800986e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009870:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009872:	f812 6c20 	ldrb.w	r6, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009876:	d526      	bpl.n	80098c6 <HAL_RCC_GetSysClockFreq+0xa6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8009878:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800987a:	f003 030f 	and.w	r3, r3, #15
 800987e:	4403      	add	r3, r0
 8009880:	f813 2c10 	ldrb.w	r2, [r3, #-16]
        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8009884:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8009886:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800988a:	4b14      	ldr	r3, [pc, #80]	; (80098dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800988c:	d016      	beq.n	80098bc <HAL_RCC_GetSysClockFreq+0x9c>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800988e:	6acf      	ldr	r7, [r1, #44]	; 0x2c
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8009890:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8009892:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8009896:	3402      	adds	r4, #2
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8009898:	fba4 4506 	umull	r4, r5, r4, r6
 800989c:	fba4 0103 	umull	r0, r1, r4, r3
 80098a0:	fb03 1105 	mla	r1, r3, r5, r1
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80098a4:	f3c7 1303 	ubfx	r3, r7, #4, #4
 80098a8:	3301      	adds	r3, #1
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80098aa:	fba3 2302 	umull	r2, r3, r3, r2
 80098ae:	f7fd fcab 	bl	8007208 <__aeabi_uldivmod>
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80098b2:	2e0d      	cmp	r6, #13
 80098b4:	d100      	bne.n	80098b8 <HAL_RCC_GetSysClockFreq+0x98>
          pllclk = pllclk / 2;
 80098b6:	0840      	lsrs	r0, r0, #1
}
 80098b8:	b009      	add	sp, #36	; 0x24
 80098ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80098bc:	fb03 f006 	mul.w	r0, r3, r6
 80098c0:	fbb0 f0f2 	udiv	r0, r0, r2
 80098c4:	e7f5      	b.n	80098b2 <HAL_RCC_GetSysClockFreq+0x92>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80098c6:	4806      	ldr	r0, [pc, #24]	; (80098e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80098c8:	4370      	muls	r0, r6
 80098ca:	e7f5      	b.n	80098b8 <HAL_RCC_GetSysClockFreq+0x98>
      sysclockfreq = HSE_VALUE;
 80098cc:	4803      	ldr	r0, [pc, #12]	; (80098dc <HAL_RCC_GetSysClockFreq+0xbc>)
  return sysclockfreq;
 80098ce:	e7f3      	b.n	80098b8 <HAL_RCC_GetSysClockFreq+0x98>
 80098d0:	0801c238 	.word	0x0801c238
 80098d4:	0801c246 	.word	0x0801c246
 80098d8:	40021000 	.word	0x40021000
 80098dc:	007a1200 	.word	0x007a1200
 80098e0:	003d0900 	.word	0x003d0900

080098e4 <HAL_RCC_ClockConfig>:
{
 80098e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80098ea:	4604      	mov	r4, r0
 80098ec:	b910      	cbnz	r0, 80098f4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80098ee:	2001      	movs	r0, #1
 80098f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80098f4:	4a45      	ldr	r2, [pc, #276]	; (8009a0c <HAL_RCC_ClockConfig+0x128>)
 80098f6:	6813      	ldr	r3, [r2, #0]
 80098f8:	f003 0307 	and.w	r3, r3, #7
 80098fc:	428b      	cmp	r3, r1
 80098fe:	d329      	bcc.n	8009954 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009900:	6821      	ldr	r1, [r4, #0]
 8009902:	078e      	lsls	r6, r1, #30
 8009904:	d431      	bmi.n	800996a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009906:	07ca      	lsls	r2, r1, #31
 8009908:	d444      	bmi.n	8009994 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800990a:	4a40      	ldr	r2, [pc, #256]	; (8009a0c <HAL_RCC_ClockConfig+0x128>)
 800990c:	6813      	ldr	r3, [r2, #0]
 800990e:	f003 0307 	and.w	r3, r3, #7
 8009912:	429d      	cmp	r5, r3
 8009914:	d367      	bcc.n	80099e6 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009916:	6822      	ldr	r2, [r4, #0]
 8009918:	4d3d      	ldr	r5, [pc, #244]	; (8009a10 <HAL_RCC_ClockConfig+0x12c>)
 800991a:	f012 0f04 	tst.w	r2, #4
 800991e:	d16e      	bne.n	80099fe <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009920:	0713      	lsls	r3, r2, #28
 8009922:	d506      	bpl.n	8009932 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009924:	686b      	ldr	r3, [r5, #4]
 8009926:	6922      	ldr	r2, [r4, #16]
 8009928:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800992c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009930:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009932:	f7ff ff75 	bl	8009820 <HAL_RCC_GetSysClockFreq>
 8009936:	686b      	ldr	r3, [r5, #4]
 8009938:	4a36      	ldr	r2, [pc, #216]	; (8009a14 <HAL_RCC_ClockConfig+0x130>)
 800993a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800993e:	5cd3      	ldrb	r3, [r2, r3]
 8009940:	40d8      	lsrs	r0, r3
 8009942:	4b35      	ldr	r3, [pc, #212]	; (8009a18 <HAL_RCC_ClockConfig+0x134>)
 8009944:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8009946:	4b35      	ldr	r3, [pc, #212]	; (8009a1c <HAL_RCC_ClockConfig+0x138>)
 8009948:	6818      	ldr	r0, [r3, #0]
 800994a:	f000 fe7b 	bl	800a644 <HAL_InitTick>
  return HAL_OK;
 800994e:	2000      	movs	r0, #0
 8009950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009954:	6813      	ldr	r3, [r2, #0]
 8009956:	f023 0307 	bic.w	r3, r3, #7
 800995a:	430b      	orrs	r3, r1
 800995c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800995e:	6813      	ldr	r3, [r2, #0]
 8009960:	f003 0307 	and.w	r3, r3, #7
 8009964:	4299      	cmp	r1, r3
 8009966:	d1c2      	bne.n	80098ee <HAL_RCC_ClockConfig+0xa>
 8009968:	e7ca      	b.n	8009900 <HAL_RCC_ClockConfig+0x1c>
 800996a:	4b29      	ldr	r3, [pc, #164]	; (8009a10 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800996c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009970:	bf1e      	ittt	ne
 8009972:	685a      	ldrne	r2, [r3, #4]
 8009974:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8009978:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800997a:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800997c:	bf42      	ittt	mi
 800997e:	685a      	ldrmi	r2, [r3, #4]
 8009980:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8009984:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009986:	685a      	ldr	r2, [r3, #4]
 8009988:	68a0      	ldr	r0, [r4, #8]
 800998a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800998e:	4302      	orrs	r2, r0
 8009990:	605a      	str	r2, [r3, #4]
 8009992:	e7b8      	b.n	8009906 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009994:	6862      	ldr	r2, [r4, #4]
 8009996:	4e1e      	ldr	r6, [pc, #120]	; (8009a10 <HAL_RCC_ClockConfig+0x12c>)
 8009998:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800999a:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800999c:	d11b      	bne.n	80099d6 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800999e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099a2:	d0a4      	beq.n	80098ee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80099a4:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099a6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80099aa:	f023 0303 	bic.w	r3, r3, #3
 80099ae:	4313      	orrs	r3, r2
 80099b0:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80099b2:	f7fe fd55 	bl	8008460 <HAL_GetTick>
 80099b6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099b8:	6873      	ldr	r3, [r6, #4]
 80099ba:	6862      	ldr	r2, [r4, #4]
 80099bc:	f003 030c 	and.w	r3, r3, #12
 80099c0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80099c4:	d0a1      	beq.n	800990a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099c6:	f7fe fd4b 	bl	8008460 <HAL_GetTick>
 80099ca:	1bc0      	subs	r0, r0, r7
 80099cc:	4540      	cmp	r0, r8
 80099ce:	d9f3      	bls.n	80099b8 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80099d0:	2003      	movs	r0, #3
}
 80099d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80099d6:	2a02      	cmp	r2, #2
 80099d8:	d102      	bne.n	80099e0 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099da:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80099de:	e7e0      	b.n	80099a2 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099e0:	f013 0f02 	tst.w	r3, #2
 80099e4:	e7dd      	b.n	80099a2 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099e6:	6813      	ldr	r3, [r2, #0]
 80099e8:	f023 0307 	bic.w	r3, r3, #7
 80099ec:	432b      	orrs	r3, r5
 80099ee:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099f0:	6813      	ldr	r3, [r2, #0]
 80099f2:	f003 0307 	and.w	r3, r3, #7
 80099f6:	429d      	cmp	r5, r3
 80099f8:	f47f af79 	bne.w	80098ee <HAL_RCC_ClockConfig+0xa>
 80099fc:	e78b      	b.n	8009916 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80099fe:	686b      	ldr	r3, [r5, #4]
 8009a00:	68e1      	ldr	r1, [r4, #12]
 8009a02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009a06:	430b      	orrs	r3, r1
 8009a08:	606b      	str	r3, [r5, #4]
 8009a0a:	e789      	b.n	8009920 <HAL_RCC_ClockConfig+0x3c>
 8009a0c:	40022000 	.word	0x40022000
 8009a10:	40021000 	.word	0x40021000
 8009a14:	08022764 	.word	0x08022764
 8009a18:	20000020 	.word	0x20000020
 8009a1c:	20000008 	.word	0x20000008

08009a20 <HAL_RCC_GetHCLKFreq>:
}
 8009a20:	4b01      	ldr	r3, [pc, #4]	; (8009a28 <HAL_RCC_GetHCLKFreq+0x8>)
 8009a22:	6818      	ldr	r0, [r3, #0]
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	20000020 	.word	0x20000020

08009a2c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009a2c:	4b04      	ldr	r3, [pc, #16]	; (8009a40 <HAL_RCC_GetPCLK1Freq+0x14>)
 8009a2e:	4a05      	ldr	r2, [pc, #20]	; (8009a44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009a36:	5cd3      	ldrb	r3, [r2, r3]
 8009a38:	4a03      	ldr	r2, [pc, #12]	; (8009a48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009a3a:	6810      	ldr	r0, [r2, #0]
}
 8009a3c:	40d8      	lsrs	r0, r3
 8009a3e:	4770      	bx	lr
 8009a40:	40021000 	.word	0x40021000
 8009a44:	08022774 	.word	0x08022774
 8009a48:	20000020 	.word	0x20000020

08009a4c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009a4c:	4b04      	ldr	r3, [pc, #16]	; (8009a60 <HAL_RCC_GetPCLK2Freq+0x14>)
 8009a4e:	4a05      	ldr	r2, [pc, #20]	; (8009a64 <HAL_RCC_GetPCLK2Freq+0x18>)
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009a56:	5cd3      	ldrb	r3, [r2, r3]
 8009a58:	4a03      	ldr	r2, [pc, #12]	; (8009a68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009a5a:	6810      	ldr	r0, [r2, #0]
}
 8009a5c:	40d8      	lsrs	r0, r3
 8009a5e:	4770      	bx	lr
 8009a60:	40021000 	.word	0x40021000
 8009a64:	08022774 	.word	0x08022774
 8009a68:	20000020 	.word	0x20000020

08009a6c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009a6c:	6803      	ldr	r3, [r0, #0]
{
 8009a6e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009a72:	f013 0f01 	tst.w	r3, #1
{
 8009a76:	4605      	mov	r5, r0
 8009a78:	4c57      	ldr	r4, [pc, #348]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009a7a:	d01f      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x50>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a7c:	69e3      	ldr	r3, [r4, #28]
 8009a7e:	00da      	lsls	r2, r3, #3
 8009a80:	d447      	bmi.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8009a82:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a84:	69e3      	ldr	r3, [r4, #28]
 8009a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a8a:	61e3      	str	r3, [r4, #28]
 8009a8c:	69e3      	ldr	r3, [r4, #28]
 8009a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a92:	9301      	str	r3, [sp, #4]
 8009a94:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a96:	4e51      	ldr	r6, [pc, #324]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009a98:	6833      	ldr	r3, [r6, #0]
 8009a9a:	05db      	lsls	r3, r3, #23
 8009a9c:	d53b      	bpl.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009a9e:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009aa0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8009aa4:	d14b      	bne.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009aa6:	6a23      	ldr	r3, [r4, #32]
 8009aa8:	686a      	ldr	r2, [r5, #4]
 8009aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009ab2:	b11f      	cbz	r7, 8009abc <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ab4:	69e3      	ldr	r3, [r4, #28]
 8009ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009aba:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009abc:	682a      	ldr	r2, [r5, #0]
 8009abe:	0793      	lsls	r3, r2, #30
 8009ac0:	d505      	bpl.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ac2:	6863      	ldr	r3, [r4, #4]
 8009ac4:	68a9      	ldr	r1, [r5, #8]
 8009ac6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009aca:	430b      	orrs	r3, r1
 8009acc:	6063      	str	r3, [r4, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8009ace:	0757      	lsls	r7, r2, #29
 8009ad0:	d505      	bpl.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8009ad2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009ad4:	68e9      	ldr	r1, [r5, #12]
 8009ad6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009ada:	430b      	orrs	r3, r1
 8009adc:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8009ade:	0716      	lsls	r6, r2, #28
 8009ae0:	d505      	bpl.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8009ae2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009ae4:	692a      	ldr	r2, [r5, #16]
 8009ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009aea:	4313      	orrs	r3, r2
 8009aec:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8009aee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009af0:	0398      	lsls	r0, r3, #14
 8009af2:	d466      	bmi.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8009af4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009af6:	0359      	lsls	r1, r3, #13
 8009af8:	d463      	bmi.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x156>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009afa:	6828      	ldr	r0, [r5, #0]
 8009afc:	f010 0010 	ands.w	r0, r0, #16
 8009b00:	d01a      	beq.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b02:	6863      	ldr	r3, [r4, #4]
 8009b04:	69ea      	ldr	r2, [r5, #28]
 8009b06:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	6063      	str	r3, [r4, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8009b0e:	2000      	movs	r0, #0
 8009b10:	e012      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    FlagStatus       pwrclkchanged = RESET;
 8009b12:	2700      	movs	r7, #0
 8009b14:	e7bf      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009b16:	6833      	ldr	r3, [r6, #0]
 8009b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b1c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8009b1e:	f7fe fc9f 	bl	8008460 <HAL_GetTick>
 8009b22:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b24:	6833      	ldr	r3, [r6, #0]
 8009b26:	05d8      	lsls	r0, r3, #23
 8009b28:	d4b9      	bmi.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x32>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b2a:	f7fe fc99 	bl	8008460 <HAL_GetTick>
 8009b2e:	eba0 0008 	sub.w	r0, r0, r8
 8009b32:	2864      	cmp	r0, #100	; 0x64
 8009b34:	d9f6      	bls.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 8009b36:	2003      	movs	r0, #3
}
 8009b38:	b002      	add	sp, #8
 8009b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009b3e:	686a      	ldr	r2, [r5, #4]
 8009b40:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d0ae      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8009b48:	2001      	movs	r0, #1
 8009b4a:	4a25      	ldr	r2, [pc, #148]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b4c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8009b4e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009b50:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009b56:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8009b58:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009b5a:	07d9      	lsls	r1, r3, #31
 8009b5c:	d5a3      	bpl.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8009b5e:	f7fe fc7f 	bl	8008460 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b62:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8009b66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b68:	6a23      	ldr	r3, [r4, #32]
 8009b6a:	079a      	lsls	r2, r3, #30
 8009b6c:	d49b      	bmi.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b6e:	f7fe fc77 	bl	8008460 <HAL_GetTick>
 8009b72:	1b80      	subs	r0, r0, r6
 8009b74:	4540      	cmp	r0, r8
 8009b76:	d9f7      	bls.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8009b78:	e7dd      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0xca>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	69a9      	ldr	r1, [r5, #24]
 8009b7e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8009b82:	d004      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x122>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8009b84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009b86:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8009b8a:	428a      	cmp	r2, r1
 8009b8c:	d122      	bne.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8009b8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b94:	430b      	orrs	r3, r1
 8009b96:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8009b98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b9a:	696a      	ldr	r2, [r5, #20]
 8009b9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ba0:	4313      	orrs	r3, r2
      __HAL_RCC_PLLI2S_ENABLE();
 8009ba2:	2201      	movs	r2, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8009ba4:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_ENABLE();
 8009ba6:	4b0f      	ldr	r3, [pc, #60]	; (8009be4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8009ba8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8009baa:	f7fe fc59 	bl	8008460 <HAL_GetTick>
 8009bae:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	009a      	lsls	r2, r3, #2
 8009bb4:	d4a1      	bmi.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009bb6:	f7fe fc53 	bl	8008460 <HAL_GetTick>
 8009bba:	1b80      	subs	r0, r0, r6
 8009bbc:	2864      	cmp	r0, #100	; 0x64
 8009bbe:	d9f7      	bls.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8009bc0:	e7b9      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0xca>
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8009bc2:	6823      	ldr	r3, [r4, #0]
 8009bc4:	00db      	lsls	r3, r3, #3
 8009bc6:	d5d8      	bpl.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8009bc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009bca:	696a      	ldr	r2, [r5, #20]
 8009bcc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d092      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x8e>
        return HAL_ERROR;
 8009bd4:	2001      	movs	r0, #1
 8009bd6:	e7af      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8009bd8:	40021000 	.word	0x40021000
 8009bdc:	40007000 	.word	0x40007000
 8009be0:	42420440 	.word	0x42420440
 8009be4:	42420070 	.word	0x42420070

08009be8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009be8:	b570      	push	{r4, r5, r6, lr}
 8009bea:	b088      	sub	sp, #32
 8009bec:	4604      	mov	r4, r0
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8009bee:	466a      	mov	r2, sp
 8009bf0:	4b56      	ldr	r3, [pc, #344]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8009bf2:	f103 0608 	add.w	r6, r3, #8
 8009bf6:	4615      	mov	r5, r2
 8009bf8:	6818      	ldr	r0, [r3, #0]
 8009bfa:	6859      	ldr	r1, [r3, #4]
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	c503      	stmia	r5!, {r0, r1}
 8009c00:	42b3      	cmp	r3, r6
 8009c02:	462a      	mov	r2, r5
 8009c04:	d1f7      	bne.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	889b      	ldrh	r3, [r3, #4]
 8009c0a:	6028      	str	r0, [r5, #0]
 8009c0c:	80ab      	strh	r3, [r5, #4]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8009c0e:	4b50      	ldr	r3, [pc, #320]	; (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8009c10:	ad04      	add	r5, sp, #16
 8009c12:	f103 0610 	add.w	r6, r3, #16
 8009c16:	462a      	mov	r2, r5
 8009c18:	6818      	ldr	r0, [r3, #0]
 8009c1a:	6859      	ldr	r1, [r3, #4]
 8009c1c:	3308      	adds	r3, #8
 8009c1e:	c203      	stmia	r2!, {r0, r1}
 8009c20:	42b3      	cmp	r3, r6
 8009c22:	4615      	mov	r5, r2
 8009c24:	d1f7      	bne.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8009c26:	1e60      	subs	r0, r4, #1
 8009c28:	280f      	cmp	r0, #15
 8009c2a:	f200 808c 	bhi.w	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009c2e:	e8df f000 	tbb	[pc, r0]
 8009c32:	7e60      	.short	0x7e60
 8009c34:	8a8a3e8a 	.word	0x8a8a3e8a
 8009c38:	8a8a488a 	.word	0x8a8a488a
 8009c3c:	8a8a8a8a 	.word	0x8a8a8a8a
 8009c40:	088a      	.short	0x088a
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8009c42:	4b44      	ldr	r3, [pc, #272]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8009c44:	6859      	ldr	r1, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8009c46:	6818      	ldr	r0, [r3, #0]
 8009c48:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8009c4c:	d04f      	beq.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x106>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009c4e:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8009c52:	a808      	add	r0, sp, #32
 8009c54:	4402      	add	r2, r0
 8009c56:	f812 4c20 	ldrb.w	r4, [r2, #-32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009c5a:	03ca      	lsls	r2, r1, #15
 8009c5c:	d524      	bpl.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8009c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c60:	f002 020f 	and.w	r2, r2, #15
 8009c64:	4402      	add	r2, r0
 8009c66:	f812 5c10 	ldrb.w	r5, [r2, #-16]
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8009c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c6c:	483a      	ldr	r0, [pc, #232]	; (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8009c6e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8009c72:	d00a      	beq.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8009c74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8009c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8009c78:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8009c7c:	3101      	adds	r1, #1
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8009c7e:	fbb0 f0f1 	udiv	r0, r0, r1
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8009c82:	f3c2 2203 	ubfx	r2, r2, #8, #4
 8009c86:	3202      	adds	r2, #2
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8009c88:	4350      	muls	r0, r2
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8009c8a:	fbb0 f0f5 	udiv	r0, r0, r5
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8009c8e:	2c0d      	cmp	r4, #13
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8009c90:	fb04 f000 	mul.w	r0, r4, r0
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8009c94:	d100      	bne.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
          {
            pllclk = pllclk / 2;
 8009c96:	0840      	lsrs	r0, r0, #1
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	025b      	lsls	r3, r3, #9
 8009c9c:	d427      	bmi.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x106>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	0040      	lsls	r0, r0, #1
      }
      break;
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8009ca2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8009ca6:	e022      	b.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x106>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009ca8:	482c      	ldr	r0, [pc, #176]	; (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8009caa:	4360      	muls	r0, r4
 8009cac:	e7f4      	b.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8009cae:	4a29      	ldr	r2, [pc, #164]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8009cb0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009cb2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009cb6:	d109      	bne.n	8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
    {
      break;
    }
  }
  return (frequency);
}
 8009cb8:	b008      	add	sp, #32
 8009cba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        frequency = HAL_RCC_GetSysClockFreq();
 8009cbe:	f7ff bdaf 	b.w	8009820 <HAL_RCC_GetSysClockFreq>
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8009cc2:	4a24      	ldr	r2, [pc, #144]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8009cc4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009cc6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8009cca:	e7f4      	b.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8009ccc:	6810      	ldr	r0, [r2, #0]
 8009cce:	f010 5080 	ands.w	r0, r0, #268435456	; 0x10000000
 8009cd2:	d00c      	beq.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x106>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8009cd4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8009cd6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8009cd8:	f3c3 1303 	ubfx	r3, r3, #4, #4
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8009cdc:	4a1e      	ldr	r2, [pc, #120]	; (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8009cde:	3301      	adds	r3, #1
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8009ce0:	fbb2 f3f3 	udiv	r3, r2, r3
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8009ce4:	f3c0 3003 	ubfx	r0, r0, #12, #4
 8009ce8:	3002      	adds	r0, #2
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8009cea:	0040      	lsls	r0, r0, #1
 8009cec:	4358      	muls	r0, r3
}
 8009cee:	b008      	add	sp, #32
 8009cf0:	bd70      	pop	{r4, r5, r6, pc}
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8009cf2:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8009cf6:	4a17      	ldr	r2, [pc, #92]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8009cf8:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8009cfa:	4019      	ands	r1, r3
 8009cfc:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8009d00:	d01e      	beq.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8009d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d0a:	d107      	bne.n	8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
        frequency = LSI_VALUE;
 8009d0c:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8009d10:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8009d12:	f013 0f02 	tst.w	r3, #2
        frequency = HSE_VALUE / 128U;
 8009d16:	bf08      	it	eq
 8009d18:	2000      	moveq	r0, #0
 8009d1a:	e7e8      	b.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x106>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8009d1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d20:	d111      	bne.n	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009d22:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8009d24:	f24f 4024 	movw	r0, #62500	; 0xf424
 8009d28:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009d2c:	e7f3      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8009d2e:	f7ff fe8d 	bl	8009a4c <HAL_RCC_GetPCLK2Freq>
 8009d32:	4b08      	ldr	r3, [pc, #32]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	005b      	lsls	r3, r3, #1
 8009d3e:	e7b0      	b.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
        frequency = LSE_VALUE;
 8009d40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009d44:	e7d3      	b.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x106>
  uint32_t temp_reg = 0U, frequency = 0U;
 8009d46:	2000      	movs	r0, #0
 8009d48:	e7d1      	b.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x106>
 8009d4a:	bf00      	nop
 8009d4c:	0801c256 	.word	0x0801c256
 8009d50:	0801c264 	.word	0x0801c264
 8009d54:	40021000 	.word	0x40021000
 8009d58:	007a1200 	.word	0x007a1200
 8009d5c:	003d0900 	.word	0x003d0900

08009d60 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 8009d64:	f7fe fb7c 	bl	8008460 <HAL_GetTick>
 8009d68:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	685a      	ldr	r2, [r3, #4]
 8009d6e:	0692      	lsls	r2, r2, #26
 8009d70:	d505      	bpl.n	8009d7e <RTC_EnterInitMode+0x1e>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d72:	685a      	ldr	r2, [r3, #4]


  return HAL_OK;
 8009d74:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d76:	f042 0210 	orr.w	r2, r2, #16
 8009d7a:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 8009d7c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009d7e:	f7fe fb6f 	bl	8008460 <HAL_GetTick>
 8009d82:	1b40      	subs	r0, r0, r5
 8009d84:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009d88:	d9ef      	bls.n	8009d6a <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8009d8a:	2003      	movs	r0, #3
}
 8009d8c:	bd38      	pop	{r3, r4, r5, pc}

08009d8e <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d8e:	6802      	ldr	r2, [r0, #0]
{
 8009d90:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d92:	6853      	ldr	r3, [r2, #4]
{
 8009d94:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d96:	f023 0310 	bic.w	r3, r3, #16
 8009d9a:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 8009d9c:	f7fe fb60 	bl	8008460 <HAL_GetTick>
 8009da0:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	069b      	lsls	r3, r3, #26
 8009da8:	d501      	bpl.n	8009dae <RTC_ExitInitMode+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8009daa:	2000      	movs	r0, #0
 8009dac:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009dae:	f7fe fb57 	bl	8008460 <HAL_GetTick>
 8009db2:	1b40      	subs	r0, r0, r5
 8009db4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009db8:	d9f3      	bls.n	8009da2 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8009dba:	2003      	movs	r0, #3
}
 8009dbc:	bd38      	pop	{r3, r4, r5, pc}

08009dbe <HAL_RTC_MspInit>:
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_RTC_AlarmIRQHandler>:
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8009dc0:	6803      	ldr	r3, [r0, #0]
{
 8009dc2:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8009dc4:	681a      	ldr	r2, [r3, #0]
{
 8009dc6:	4604      	mov	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8009dc8:	0792      	lsls	r2, r2, #30
 8009dca:	d508      	bpl.n	8009dde <HAL_RTC_AlarmIRQHandler+0x1e>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	079b      	lsls	r3, r3, #30
 8009dd0:	d505      	bpl.n	8009dde <HAL_RTC_AlarmIRQHandler+0x1e>
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009dd2:	f000 fcb7 	bl	800a744 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009dd6:	f06f 0202 	mvn.w	r2, #2
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	605a      	str	r2, [r3, #4]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009dde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009de2:	4b02      	ldr	r3, [pc, #8]	; (8009dec <HAL_RTC_AlarmIRQHandler+0x2c>)
 8009de4:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 8009de6:	2301      	movs	r3, #1
 8009de8:	7463      	strb	r3, [r4, #17]
 8009dea:	bd10      	pop	{r4, pc}
 8009dec:	40010400 	.word	0x40010400

08009df0 <HAL_RTC_WaitForSynchro>:
{
 8009df0:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8009df2:	4604      	mov	r4, r0
 8009df4:	b1a8      	cbz	r0, 8009e22 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8009df6:	6802      	ldr	r2, [r0, #0]
 8009df8:	6853      	ldr	r3, [r2, #4]
 8009dfa:	f023 0308 	bic.w	r3, r3, #8
 8009dfe:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8009e00:	f7fe fb2e 	bl	8008460 <HAL_GetTick>
 8009e04:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	071b      	lsls	r3, r3, #28
 8009e0c:	d501      	bpl.n	8009e12 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8009e0e:	2000      	movs	r0, #0
 8009e10:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009e12:	f7fe fb25 	bl	8008460 <HAL_GetTick>
 8009e16:	1b40      	subs	r0, r0, r5
 8009e18:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009e1c:	d9f3      	bls.n	8009e06 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8009e1e:	2003      	movs	r0, #3
}
 8009e20:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009e22:	2001      	movs	r0, #1
 8009e24:	bd38      	pop	{r3, r4, r5, pc}
	...

08009e28 <HAL_RTC_Init>:
{
 8009e28:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	b170      	cbz	r0, 8009e4c <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009e2e:	7c43      	ldrb	r3, [r0, #17]
 8009e30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009e34:	b913      	cbnz	r3, 8009e3c <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8009e36:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8009e38:	f7ff ffc1 	bl	8009dbe <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e3c:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009e3e:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e40:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009e42:	f7ff ffd5 	bl	8009df0 <HAL_RTC_WaitForSynchro>
 8009e46:	b118      	cbz	r0, 8009e50 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009e48:	2304      	movs	r3, #4
 8009e4a:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8009e4c:	2001      	movs	r0, #1
}
 8009e4e:	bd10      	pop	{r4, pc}
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009e50:	4620      	mov	r0, r4
 8009e52:	f7ff ff85 	bl	8009d60 <RTC_EnterInitMode>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d1f6      	bne.n	8009e48 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8009e5a:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8009e5c:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8009e5e:	6853      	ldr	r3, [r2, #4]
 8009e60:	f023 0307 	bic.w	r3, r3, #7
 8009e64:	6053      	str	r3, [r2, #4]
 8009e66:	4a17      	ldr	r2, [pc, #92]	; (8009ec4 <HAL_RTC_Init+0x9c>)
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8009e68:	b118      	cbz	r0, 8009e72 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8009e6a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009e6c:	f021 0101 	bic.w	r1, r1, #1
 8009e70:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8009e72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009e74:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8009e78:	4303      	orrs	r3, r0
 8009e7a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8009e7c:	6860      	ldr	r0, [r4, #4]
 8009e7e:	1c43      	adds	r3, r0, #1
 8009e80:	d105      	bne.n	8009e8e <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8009e82:	2001      	movs	r0, #1
 8009e84:	f7ff feb0 	bl	8009be8 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d0dd      	beq.n	8009e48 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8009e8c:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8009e8e:	6822      	ldr	r2, [r4, #0]
 8009e90:	6893      	ldr	r3, [r2, #8]
 8009e92:	f023 030f 	bic.w	r3, r3, #15
 8009e96:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8009e9a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8009e9c:	68d3      	ldr	r3, [r2, #12]
 8009e9e:	b280      	uxth	r0, r0
 8009ea0:	0c1b      	lsrs	r3, r3, #16
 8009ea2:	041b      	lsls	r3, r3, #16
 8009ea4:	4318      	orrs	r0, r3
 8009ea6:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f7ff ff70 	bl	8009d8e <RTC_ExitInitMode>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	b110      	cbz	r0, 8009eb8 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009eb2:	2204      	movs	r2, #4
 8009eb4:	7462      	strb	r2, [r4, #17]
 8009eb6:	e7c9      	b.n	8009e4c <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 8009eb8:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8009eba:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8009ebc:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8009ebe:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8009ec0:	bd10      	pop	{r4, pc}
 8009ec2:	bf00      	nop
 8009ec4:	40006c00 	.word	0x40006c00

08009ec8 <SPI_WaitFlagStateUntilTimeout.constprop.8>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8009ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eca:	4604      	mov	r4, r0
 8009ecc:	460e      	mov	r6, r1
 8009ece:	4615      	mov	r5, r2
 8009ed0:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ed2:	6821      	ldr	r1, [r4, #0]
 8009ed4:	688a      	ldr	r2, [r1, #8]
 8009ed6:	ea36 0302 	bics.w	r3, r6, r2
 8009eda:	d001      	beq.n	8009ee0 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8009edc:	2000      	movs	r0, #0
}
 8009ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8009ee0:	1c6b      	adds	r3, r5, #1
 8009ee2:	d0f7      	beq.n	8009ed4 <SPI_WaitFlagStateUntilTimeout.constprop.8+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009ee4:	f7fe fabc 	bl	8008460 <HAL_GetTick>
 8009ee8:	1bc0      	subs	r0, r0, r7
 8009eea:	4285      	cmp	r5, r0
 8009eec:	d8f1      	bhi.n	8009ed2 <SPI_WaitFlagStateUntilTimeout.constprop.8+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009eee:	6823      	ldr	r3, [r4, #0]
 8009ef0:	685a      	ldr	r2, [r3, #4]
 8009ef2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ef6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ef8:	6862      	ldr	r2, [r4, #4]
 8009efa:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8009efe:	d10a      	bne.n	8009f16 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4e>
 8009f00:	68a2      	ldr	r2, [r4, #8]
 8009f02:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009f06:	d002      	beq.n	8009f0e <SPI_WaitFlagStateUntilTimeout.constprop.8+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f08:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009f0c:	d103      	bne.n	8009f16 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f14:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f16:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009f18:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009f1c:	d107      	bne.n	8009f2e <SPI_WaitFlagStateUntilTimeout.constprop.8+0x66>
          SPI_RESET_CRC(hspi);
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f24:	601a      	str	r2, [r3, #0]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f2c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8009f34:	2300      	movs	r3, #0
 8009f36:	2003      	movs	r0, #3
 8009f38:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8009f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f3e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009f3e:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f40:	4613      	mov	r3, r2
 8009f42:	460a      	mov	r2, r1
 8009f44:	2180      	movs	r1, #128	; 0x80
{
 8009f46:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f48:	f7ff ffbe 	bl	8009ec8 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8009f4c:	b120      	cbz	r0, 8009f58 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8009f4e:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009f52:	f043 0320 	orr.w	r3, r3, #32
 8009f56:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8009f58:	bd10      	pop	{r4, pc}

08009f5a <HAL_SPI_MspInit>:
 8009f5a:	4770      	bx	lr

08009f5c <HAL_SPI_Init>:
{
 8009f5c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8009f5e:	4604      	mov	r4, r0
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d034      	beq.n	8009fce <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f64:	2300      	movs	r3, #0
 8009f66:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f68:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8009f6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009f70:	b91b      	cbnz	r3, 8009f7a <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8009f72:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8009f76:	f7ff fff0 	bl	8009f5a <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009f7a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8009f7c:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8009f7e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8009f82:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009f84:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8009f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f8a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009f8c:	6863      	ldr	r3, [r4, #4]
 8009f8e:	69a1      	ldr	r1, [r4, #24]
 8009f90:	4303      	orrs	r3, r0
 8009f92:	68e0      	ldr	r0, [r4, #12]
 8009f94:	4303      	orrs	r3, r0
 8009f96:	6920      	ldr	r0, [r4, #16]
 8009f98:	4303      	orrs	r3, r0
 8009f9a:	6960      	ldr	r0, [r4, #20]
 8009f9c:	4303      	orrs	r3, r0
 8009f9e:	69e0      	ldr	r0, [r4, #28]
 8009fa0:	4303      	orrs	r3, r0
 8009fa2:	6a20      	ldr	r0, [r4, #32]
 8009fa4:	4303      	orrs	r3, r0
 8009fa6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009fa8:	4303      	orrs	r3, r0
 8009faa:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009fae:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009fb0:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009fb2:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009fb6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009fb8:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009fba:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fbc:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009fbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fc2:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8009fc4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fc6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009fc8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8009fcc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009fce:	2001      	movs	r0, #1
}
 8009fd0:	bd10      	pop	{r4, pc}

08009fd2 <HAL_SPI_MspDeInit>:
 8009fd2:	4770      	bx	lr

08009fd4 <HAL_SPI_DeInit>:
{
 8009fd4:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	b180      	cbz	r0, 8009ffc <HAL_SPI_DeInit+0x28>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009fda:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8009fdc:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8009fde:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8009fe2:	6813      	ldr	r3, [r2, #0]
 8009fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fe8:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8009fea:	f7ff fff2 	bl	8009fd2 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fee:	2000      	movs	r0, #0
 8009ff0:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8009ff2:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 8009ff6:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  return HAL_OK;
 8009ffa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009ffc:	2001      	movs	r0, #1
}
 8009ffe:	bd10      	pop	{r4, pc}

0800a000 <HAL_SPI_Transmit>:
{
 800a000:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a004:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800a006:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800a00a:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800a00c:	2b01      	cmp	r3, #1
{
 800a00e:	460d      	mov	r5, r1
 800a010:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800a012:	f000 809c 	beq.w	800a14e <HAL_SPI_Transmit+0x14e>
 800a016:	2301      	movs	r3, #1
 800a018:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800a01c:	f7fe fa20 	bl	8008460 <HAL_GetTick>
 800a020:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800a022:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800a026:	b2c0      	uxtb	r0, r0
 800a028:	2801      	cmp	r0, #1
 800a02a:	f040 808e 	bne.w	800a14a <HAL_SPI_Transmit+0x14a>
  if ((pData == NULL) || (Size == 0U))
 800a02e:	2d00      	cmp	r5, #0
 800a030:	d05e      	beq.n	800a0f0 <HAL_SPI_Transmit+0xf0>
 800a032:	f1b8 0f00 	cmp.w	r8, #0
 800a036:	d05b      	beq.n	800a0f0 <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a038:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a03a:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a03c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a040:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a042:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a044:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a046:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 800a04a:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a04c:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a04e:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a050:	6420      	str	r0, [r4, #64]	; 0x40
 800a052:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 800a058:	bf08      	it	eq
 800a05a:	6803      	ldreq	r3, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a05c:	6325      	str	r5, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 800a05e:	bf08      	it	eq
 800a060:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->TxXferSize  = Size;
 800a064:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 800a068:	bf08      	it	eq
 800a06a:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a06c:	6803      	ldr	r3, [r0, #0]
 800a06e:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800a070:	bf5e      	ittt	pl
 800a072:	6803      	ldrpl	r3, [r0, #0]
 800a074:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800a078:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a07a:	68e3      	ldr	r3, [r4, #12]
 800a07c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a080:	6863      	ldr	r3, [r4, #4]
 800a082:	d13e      	bne.n	800a102 <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a084:	b113      	cbz	r3, 800a08c <HAL_SPI_Transmit+0x8c>
 800a086:	f1b8 0f01 	cmp.w	r8, #1
 800a08a:	d107      	bne.n	800a09c <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a08c:	f835 3b02 	ldrh.w	r3, [r5], #2
 800a090:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a092:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800a094:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a096:	3b01      	subs	r3, #1
 800a098:	b29b      	uxth	r3, r3
 800a09a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800a09c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	b9a3      	cbnz	r3, 800a0cc <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a0a2:	463a      	mov	r2, r7
 800a0a4:	4631      	mov	r1, r6
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f7ff ff49 	bl	8009f3e <SPI_EndRxTxTransaction>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d149      	bne.n	800a144 <HAL_SPI_Transmit+0x144>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a0b0:	68a3      	ldr	r3, [r4, #8]
 800a0b2:	b933      	cbnz	r3, 800a0c2 <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a0b4:	9301      	str	r3, [sp, #4]
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	68da      	ldr	r2, [r3, #12]
 800a0ba:	9201      	str	r2, [sp, #4]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	9301      	str	r3, [sp, #4]
 800a0c0:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800a0c4:	3000      	adds	r0, #0
 800a0c6:	bf18      	it	ne
 800a0c8:	2001      	movne	r0, #1
 800a0ca:	e011      	b.n	800a0f0 <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a0cc:	6822      	ldr	r2, [r4, #0]
 800a0ce:	6893      	ldr	r3, [r2, #8]
 800a0d0:	0798      	lsls	r0, r3, #30
 800a0d2:	d505      	bpl.n	800a0e0 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a0d6:	f833 1b02 	ldrh.w	r1, [r3], #2
 800a0da:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0dc:	6323      	str	r3, [r4, #48]	; 0x30
 800a0de:	e7d9      	b.n	800a094 <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0e0:	f7fe f9be 	bl	8008460 <HAL_GetTick>
 800a0e4:	1bc0      	subs	r0, r0, r7
 800a0e6:	42b0      	cmp	r0, r6
 800a0e8:	d3d8      	bcc.n	800a09c <HAL_SPI_Transmit+0x9c>
 800a0ea:	1c71      	adds	r1, r6, #1
 800a0ec:	d0d6      	beq.n	800a09c <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 800a0ee:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800a0fc:	b002      	add	sp, #8
 800a0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a102:	b113      	cbz	r3, 800a10a <HAL_SPI_Transmit+0x10a>
 800a104:	f1b8 0f01 	cmp.w	r8, #1
 800a108:	d108      	bne.n	800a11c <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a10a:	782b      	ldrb	r3, [r5, #0]
 800a10c:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a10e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a110:	3301      	adds	r3, #1
 800a112:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800a114:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a116:	3b01      	subs	r3, #1
 800a118:	b29b      	uxth	r3, r3
 800a11a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800a11c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a11e:	b29b      	uxth	r3, r3
 800a120:	2b00      	cmp	r3, #0
 800a122:	d0be      	beq.n	800a0a2 <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a124:	6823      	ldr	r3, [r4, #0]
 800a126:	689a      	ldr	r2, [r3, #8]
 800a128:	0792      	lsls	r2, r2, #30
 800a12a:	d503      	bpl.n	800a134 <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a12c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a12e:	7812      	ldrb	r2, [r2, #0]
 800a130:	731a      	strb	r2, [r3, #12]
 800a132:	e7ec      	b.n	800a10e <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a134:	f7fe f994 	bl	8008460 <HAL_GetTick>
 800a138:	1bc0      	subs	r0, r0, r7
 800a13a:	4286      	cmp	r6, r0
 800a13c:	d8ee      	bhi.n	800a11c <HAL_SPI_Transmit+0x11c>
 800a13e:	1c73      	adds	r3, r6, #1
 800a140:	d0ec      	beq.n	800a11c <HAL_SPI_Transmit+0x11c>
 800a142:	e7d4      	b.n	800a0ee <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a144:	2320      	movs	r3, #32
 800a146:	6563      	str	r3, [r4, #84]	; 0x54
 800a148:	e7b2      	b.n	800a0b0 <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 800a14a:	2002      	movs	r0, #2
 800a14c:	e7d0      	b.n	800a0f0 <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 800a14e:	2002      	movs	r0, #2
 800a150:	e7d4      	b.n	800a0fc <HAL_SPI_Transmit+0xfc>

0800a152 <HAL_SPI_TransmitReceive>:
{
 800a152:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a156:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800a158:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800a15c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800a15e:	2b01      	cmp	r3, #1
{
 800a160:	460d      	mov	r5, r1
 800a162:	4691      	mov	r9, r2
 800a164:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800a166:	f000 80e2 	beq.w	800a32e <HAL_SPI_TransmitReceive+0x1dc>
 800a16a:	2301      	movs	r3, #1
 800a16c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800a170:	f7fe f976 	bl	8008460 <HAL_GetTick>
  tmp_state           = hspi->State;
 800a174:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 800a178:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 800a17a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a17c:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 800a17e:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a180:	d00a      	beq.n	800a198 <HAL_SPI_TransmitReceive+0x46>
 800a182:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800a186:	f040 80d0 	bne.w	800a32a <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a18a:	68a0      	ldr	r0, [r4, #8]
 800a18c:	2800      	cmp	r0, #0
 800a18e:	f040 80cc 	bne.w	800a32a <HAL_SPI_TransmitReceive+0x1d8>
 800a192:	2b04      	cmp	r3, #4
 800a194:	f040 80c9 	bne.w	800a32a <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a198:	2d00      	cmp	r5, #0
 800a19a:	f000 80c4 	beq.w	800a326 <HAL_SPI_TransmitReceive+0x1d4>
 800a19e:	f1b9 0f00 	cmp.w	r9, #0
 800a1a2:	f000 80c0 	beq.w	800a326 <HAL_SPI_TransmitReceive+0x1d4>
 800a1a6:	2e00      	cmp	r6, #0
 800a1a8:	f000 80bd 	beq.w	800a326 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a1ac:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a1b0:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a1b4:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a1b6:	bf1c      	itt	ne
 800a1b8:	2305      	movne	r3, #5
 800a1ba:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 800a1c2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a1c4:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1c6:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800a1c8:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800a1ca:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1cc:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 800a1ce:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1d0:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800a1d2:	bf58      	it	pl
 800a1d4:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a1d6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 800a1d8:	bf58      	it	pl
 800a1da:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800a1de:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800a1e0:	bf58      	it	pl
 800a1e2:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a1e4:	68e2      	ldr	r2, [r4, #12]
 800a1e6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a1ea:	d158      	bne.n	800a29e <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1ec:	b109      	cbz	r1, 800a1f2 <HAL_SPI_TransmitReceive+0xa0>
 800a1ee:	2e01      	cmp	r6, #1
 800a1f0:	d107      	bne.n	800a202 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1f2:	f835 2b02 	ldrh.w	r2, [r5], #2
 800a1f6:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800a1f8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1fa:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800a202:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a204:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a206:	b29b      	uxth	r3, r3
 800a208:	b9ab      	cbnz	r3, 800a236 <HAL_SPI_TransmitReceive+0xe4>
 800a20a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	b993      	cbnz	r3, 800a236 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a210:	4642      	mov	r2, r8
 800a212:	4639      	mov	r1, r7
 800a214:	4620      	mov	r0, r4
 800a216:	f7ff fe92 	bl	8009f3e <SPI_EndRxTxTransaction>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	f040 8081 	bne.w	800a322 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a220:	68a3      	ldr	r3, [r4, #8]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d132      	bne.n	800a28c <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	9001      	str	r0, [sp, #4]
 800a22a:	68da      	ldr	r2, [r3, #12]
 800a22c:	9201      	str	r2, [sp, #4]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	9301      	str	r3, [sp, #4]
 800a232:	9b01      	ldr	r3, [sp, #4]
 800a234:	e02a      	b.n	800a28c <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a236:	6822      	ldr	r2, [r4, #0]
 800a238:	6893      	ldr	r3, [r2, #8]
 800a23a:	0799      	lsls	r1, r3, #30
 800a23c:	d50d      	bpl.n	800a25a <HAL_SPI_TransmitReceive+0x108>
 800a23e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a240:	b29b      	uxth	r3, r3
 800a242:	b153      	cbz	r3, 800a25a <HAL_SPI_TransmitReceive+0x108>
 800a244:	b14d      	cbz	r5, 800a25a <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 800a246:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a248:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a24a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800a24e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a250:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800a252:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a254:	3b01      	subs	r3, #1
 800a256:	b29b      	uxth	r3, r3
 800a258:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a25a:	6893      	ldr	r3, [r2, #8]
 800a25c:	07db      	lsls	r3, r3, #31
 800a25e:	d50c      	bpl.n	800a27a <HAL_SPI_TransmitReceive+0x128>
 800a260:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a262:	b29b      	uxth	r3, r3
 800a264:	b14b      	cbz	r3, 800a27a <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 800a266:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a268:	68d2      	ldr	r2, [r2, #12]
 800a26a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a26c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a270:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800a272:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a274:	3b01      	subs	r3, #1
 800a276:	b29b      	uxth	r3, r3
 800a278:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a27a:	f7fe f8f1 	bl	8008460 <HAL_GetTick>
 800a27e:	eba0 0008 	sub.w	r0, r0, r8
 800a282:	4287      	cmp	r7, r0
 800a284:	d8be      	bhi.n	800a204 <HAL_SPI_TransmitReceive+0xb2>
 800a286:	1c7e      	adds	r6, r7, #1
 800a288:	d0bc      	beq.n	800a204 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 800a28a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800a28c:	2301      	movs	r3, #1
 800a28e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a292:	2300      	movs	r3, #0
 800a294:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800a298:	b003      	add	sp, #12
 800a29a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a29e:	b109      	cbz	r1, 800a2a4 <HAL_SPI_TransmitReceive+0x152>
 800a2a0:	2e01      	cmp	r6, #1
 800a2a2:	d108      	bne.n	800a2b6 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a2a4:	782a      	ldrb	r2, [r5, #0]
 800a2a6:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800a2ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800a2b6:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	b91b      	cbnz	r3, 800a2c6 <HAL_SPI_TransmitReceive+0x174>
 800a2be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d0a4      	beq.n	800a210 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2c6:	6822      	ldr	r2, [r4, #0]
 800a2c8:	6893      	ldr	r3, [r2, #8]
 800a2ca:	0798      	lsls	r0, r3, #30
 800a2cc:	d50e      	bpl.n	800a2ec <HAL_SPI_TransmitReceive+0x19a>
 800a2ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	b15b      	cbz	r3, 800a2ec <HAL_SPI_TransmitReceive+0x19a>
 800a2d4:	b155      	cbz	r5, 800a2ec <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 800a2d6:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a2d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800a2de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800a2e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2ec:	6822      	ldr	r2, [r4, #0]
 800a2ee:	6893      	ldr	r3, [r2, #8]
 800a2f0:	07d9      	lsls	r1, r3, #31
 800a2f2:	d50d      	bpl.n	800a310 <HAL_SPI_TransmitReceive+0x1be>
 800a2f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	b153      	cbz	r3, 800a310 <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 800a2fa:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a2fc:	68d2      	ldr	r2, [r2, #12]
 800a2fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a300:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a302:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a304:	3301      	adds	r3, #1
 800a306:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800a308:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a30a:	3b01      	subs	r3, #1
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a310:	f7fe f8a6 	bl	8008460 <HAL_GetTick>
 800a314:	eba0 0008 	sub.w	r0, r0, r8
 800a318:	4287      	cmp	r7, r0
 800a31a:	d8cd      	bhi.n	800a2b8 <HAL_SPI_TransmitReceive+0x166>
 800a31c:	1c7b      	adds	r3, r7, #1
 800a31e:	d0cb      	beq.n	800a2b8 <HAL_SPI_TransmitReceive+0x166>
 800a320:	e7b3      	b.n	800a28a <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a322:	2320      	movs	r3, #32
 800a324:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a326:	2001      	movs	r0, #1
 800a328:	e7b0      	b.n	800a28c <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 800a32a:	2002      	movs	r0, #2
 800a32c:	e7ae      	b.n	800a28c <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 800a32e:	2002      	movs	r0, #2
 800a330:	e7b2      	b.n	800a298 <HAL_SPI_TransmitReceive+0x146>
	...

0800a334 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a334:	6a03      	ldr	r3, [r0, #32]
{
 800a336:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a338:	f023 0301 	bic.w	r3, r3, #1
 800a33c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a33e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a340:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a342:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a344:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a346:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800a34a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a34c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800a34e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800a352:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a354:	4d0a      	ldr	r5, [pc, #40]	; (800a380 <TIM_OC1_SetConfig+0x4c>)
 800a356:	42a8      	cmp	r0, r5
 800a358:	d10b      	bne.n	800a372 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a35a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800a35c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800a360:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a362:	698e      	ldr	r6, [r1, #24]
 800a364:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a366:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800a36a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800a36c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800a370:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a372:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a374:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a376:	684a      	ldr	r2, [r1, #4]
 800a378:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a37a:	6203      	str	r3, [r0, #32]
 800a37c:	bd70      	pop	{r4, r5, r6, pc}
 800a37e:	bf00      	nop
 800a380:	40012c00 	.word	0x40012c00

0800a384 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a384:	6a03      	ldr	r3, [r0, #32]
{
 800a386:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a38c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a38e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a390:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a392:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a394:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a396:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800a39a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a39c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800a39e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a3a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a3a6:	4d0b      	ldr	r5, [pc, #44]	; (800a3d4 <TIM_OC3_SetConfig+0x50>)
 800a3a8:	42a8      	cmp	r0, r5
 800a3aa:	d10d      	bne.n	800a3c8 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a3ac:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800a3ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a3b2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3b6:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a3b8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a3ba:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3be:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800a3c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3c4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3c8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3ca:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a3cc:	684a      	ldr	r2, [r1, #4]
 800a3ce:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3d0:	6203      	str	r3, [r0, #32]
 800a3d2:	bd70      	pop	{r4, r5, r6, pc}
 800a3d4:	40012c00 	.word	0x40012c00

0800a3d8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3d8:	6a03      	ldr	r3, [r0, #32]
{
 800a3da:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3e2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3e6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3e8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3ea:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3ee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3f2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800a3f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3f8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3fc:	4d06      	ldr	r5, [pc, #24]	; (800a418 <TIM_OC4_SetConfig+0x40>)
 800a3fe:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a400:	bf02      	ittt	eq
 800a402:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a404:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a408:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a40c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a40e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a410:	684a      	ldr	r2, [r1, #4]
 800a412:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a414:	6203      	str	r3, [r0, #32]
 800a416:	bd30      	pop	{r4, r5, pc}
 800a418:	40012c00 	.word	0x40012c00

0800a41c <HAL_TIM_PWM_MspInit>:
 800a41c:	4770      	bx	lr
	...

0800a420 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a420:	4a1e      	ldr	r2, [pc, #120]	; (800a49c <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 800a422:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a424:	4290      	cmp	r0, r2
 800a426:	d00e      	beq.n	800a446 <TIM_Base_SetConfig+0x26>
 800a428:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a42c:	d00b      	beq.n	800a446 <TIM_Base_SetConfig+0x26>
 800a42e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a432:	4290      	cmp	r0, r2
 800a434:	d007      	beq.n	800a446 <TIM_Base_SetConfig+0x26>
 800a436:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a43a:	4290      	cmp	r0, r2
 800a43c:	d003      	beq.n	800a446 <TIM_Base_SetConfig+0x26>
 800a43e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a442:	4290      	cmp	r0, r2
 800a444:	d119      	bne.n	800a47a <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 800a446:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a44c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a44e:	4a13      	ldr	r2, [pc, #76]	; (800a49c <TIM_Base_SetConfig+0x7c>)
 800a450:	4290      	cmp	r0, r2
 800a452:	d00e      	beq.n	800a472 <TIM_Base_SetConfig+0x52>
 800a454:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a458:	d00b      	beq.n	800a472 <TIM_Base_SetConfig+0x52>
 800a45a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a45e:	4290      	cmp	r0, r2
 800a460:	d007      	beq.n	800a472 <TIM_Base_SetConfig+0x52>
 800a462:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a466:	4290      	cmp	r0, r2
 800a468:	d003      	beq.n	800a472 <TIM_Base_SetConfig+0x52>
 800a46a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a46e:	4290      	cmp	r0, r2
 800a470:	d103      	bne.n	800a47a <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a472:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a478:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a47a:	694a      	ldr	r2, [r1, #20]
 800a47c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a480:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800a482:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a484:	688b      	ldr	r3, [r1, #8]
 800a486:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a488:	680b      	ldr	r3, [r1, #0]
 800a48a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a48c:	4b03      	ldr	r3, [pc, #12]	; (800a49c <TIM_Base_SetConfig+0x7c>)
 800a48e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800a490:	bf04      	itt	eq
 800a492:	690b      	ldreq	r3, [r1, #16]
 800a494:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800a496:	2301      	movs	r3, #1
 800a498:	6143      	str	r3, [r0, #20]
 800a49a:	4770      	bx	lr
 800a49c:	40012c00 	.word	0x40012c00

0800a4a0 <HAL_TIM_PWM_Init>:
{
 800a4a0:	b510      	push	{r4, lr}
  if (htim == NULL)
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	b1a0      	cbz	r0, 800a4d0 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800a4a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a4aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a4ae:	b91b      	cbnz	r3, 800a4b8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800a4b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800a4b4:	f7ff ffb2 	bl	800a41c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800a4b8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4ba:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a4bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4c0:	1d21      	adds	r1, r4, #4
 800a4c2:	f7ff ffad 	bl	800a420 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800a4c6:	2301      	movs	r3, #1
  return HAL_OK;
 800a4c8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a4ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800a4ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a4d0:	2001      	movs	r0, #1
}
 800a4d2:	bd10      	pop	{r4, pc}

0800a4d4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4d4:	6a03      	ldr	r3, [r0, #32]
{
 800a4d6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4d8:	f023 0310 	bic.w	r3, r3, #16
 800a4dc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800a4de:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800a4e0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800a4e2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4e4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a4e6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a4ee:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800a4f0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a4f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a4f8:	4d0b      	ldr	r5, [pc, #44]	; (800a528 <TIM_OC2_SetConfig+0x54>)
 800a4fa:	42a8      	cmp	r0, r5
 800a4fc:	d10d      	bne.n	800a51a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a4fe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800a500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a504:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a508:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a50a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a50c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a510:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800a512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a516:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800a51a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a51c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800a51e:	684a      	ldr	r2, [r1, #4]
 800a520:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800a522:	6203      	str	r3, [r0, #32]
 800a524:	bd70      	pop	{r4, r5, r6, pc}
 800a526:	bf00      	nop
 800a528:	40012c00 	.word	0x40012c00

0800a52c <HAL_TIM_PWM_ConfigChannel>:
{
 800a52c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800a52e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800a532:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800a534:	2b01      	cmp	r3, #1
 800a536:	f04f 0002 	mov.w	r0, #2
 800a53a:	d025      	beq.n	800a588 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800a53c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800a53e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800a542:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800a546:	2a0c      	cmp	r2, #12
 800a548:	d818      	bhi.n	800a57c <HAL_TIM_PWM_ConfigChannel+0x50>
 800a54a:	e8df f002 	tbb	[pc, r2]
 800a54e:	1707      	.short	0x1707
 800a550:	171e1717 	.word	0x171e1717
 800a554:	172f1717 	.word	0x172f1717
 800a558:	1717      	.short	0x1717
 800a55a:	40          	.byte	0x40
 800a55b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a55c:	6820      	ldr	r0, [r4, #0]
 800a55e:	f7ff fee9 	bl	800a334 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a562:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a564:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a566:	699a      	ldr	r2, [r3, #24]
 800a568:	f042 0208 	orr.w	r2, r2, #8
 800a56c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a56e:	699a      	ldr	r2, [r3, #24]
 800a570:	f022 0204 	bic.w	r2, r2, #4
 800a574:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a576:	699a      	ldr	r2, [r3, #24]
 800a578:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a57a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800a57c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800a57e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a580:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a584:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800a588:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a58a:	6820      	ldr	r0, [r4, #0]
 800a58c:	f7ff ffa2 	bl	800a4d4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a590:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a592:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a594:	699a      	ldr	r2, [r3, #24]
 800a596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a59a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a59c:	699a      	ldr	r2, [r3, #24]
 800a59e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5a4:	699a      	ldr	r2, [r3, #24]
 800a5a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a5aa:	e7e6      	b.n	800a57a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5ac:	6820      	ldr	r0, [r4, #0]
 800a5ae:	f7ff fee9 	bl	800a384 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5b2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a5b4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5b6:	69da      	ldr	r2, [r3, #28]
 800a5b8:	f042 0208 	orr.w	r2, r2, #8
 800a5bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a5be:	69da      	ldr	r2, [r3, #28]
 800a5c0:	f022 0204 	bic.w	r2, r2, #4
 800a5c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a5c6:	69da      	ldr	r2, [r3, #28]
 800a5c8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a5ca:	61da      	str	r2, [r3, #28]
      break;
 800a5cc:	e7d6      	b.n	800a57c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a5ce:	6820      	ldr	r0, [r4, #0]
 800a5d0:	f7ff ff02 	bl	800a3d8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a5d4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a5d6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a5d8:	69da      	ldr	r2, [r3, #28]
 800a5da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a5e0:	69da      	ldr	r2, [r3, #28]
 800a5e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a5e8:	69da      	ldr	r2, [r3, #28]
 800a5ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a5ee:	e7ec      	b.n	800a5ca <HAL_TIM_PWM_ConfigChannel+0x9e>

0800a5f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a5f0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5f2:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5f4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5f6:	f001 011f 	and.w	r1, r1, #31
 800a5fa:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800a5fc:	ea23 0304 	bic.w	r3, r3, r4
 800a600:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a602:	6a03      	ldr	r3, [r0, #32]
 800a604:	408a      	lsls	r2, r1
 800a606:	431a      	orrs	r2, r3
 800a608:	6202      	str	r2, [r0, #32]
 800a60a:	bd10      	pop	{r4, pc}

0800a60c <HAL_TIM_PWM_Start>:
{
 800a60c:	b510      	push	{r4, lr}
 800a60e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a610:	2201      	movs	r2, #1
 800a612:	6800      	ldr	r0, [r0, #0]
 800a614:	f7ff ffec 	bl	800a5f0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	4a09      	ldr	r2, [pc, #36]	; (800a640 <HAL_TIM_PWM_Start+0x34>)
}
 800a61c:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a61e:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800a620:	bf02      	ittt	eq
 800a622:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800a624:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 800a628:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a62a:	689a      	ldr	r2, [r3, #8]
 800a62c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a630:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 800a632:	bf1e      	ittt	ne
 800a634:	681a      	ldrne	r2, [r3, #0]
 800a636:	f042 0201 	orrne.w	r2, r2, #1
 800a63a:	601a      	strne	r2, [r3, #0]
}
 800a63c:	bd10      	pop	{r4, pc}
 800a63e:	bf00      	nop
 800a640:	40012c00 	.word	0x40012c00

0800a644 <HAL_InitTick>:
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  __IO uint32_t counter = 0U;
 800a644:	2300      	movs	r3, #0
{
 800a646:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a648:	b099      	sub	sp, #100	; 0x64
  __IO uint32_t counter = 0U;
 800a64a:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
#elif defined (RTC_CLOCK_SOURCE_HSE)
  /* Configue HSE as RTC clock soucre */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800a64c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a64e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a652:	2701      	movs	r7, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a654:	930c      	str	r3, [sp, #48]	; 0x30
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 800a656:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 800a65a:	4606      	mov	r6, r0
#else
#error Please select the RTC Clock source
#endif /* RTC_CLOCK_SOURCE_LSE */

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK)
 800a65c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a65e:	970a      	str	r7, [sp, #40]	; 0x28
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 800a660:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK)
 800a662:	f7fe fedd 	bl	8009420 <HAL_RCC_OscConfig>
 800a666:	b118      	cbz	r0, 800a670 <HAL_InitTick+0x2c>
      HAL_NVIC_SetPriority(RTC_Alarm_IRQn, TickPriority, 0U);
      HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
      return HAL_OK;
    }
  }
  return HAL_ERROR;
 800a668:	2401      	movs	r4, #1
}
 800a66a:	4620      	mov	r0, r4
 800a66c:	b019      	add	sp, #100	; 0x64
 800a66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a670:	a818      	add	r0, sp, #96	; 0x60
 800a672:	f840 7d58 	str.w	r7, [r0, #-88]!
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) == HAL_OK)
 800a676:	f7ff f9f9 	bl	8009a6c <HAL_RCCEx_PeriphCLKConfig>
 800a67a:	4604      	mov	r4, r0
 800a67c:	2800      	cmp	r0, #0
 800a67e:	d1f3      	bne.n	800a668 <HAL_InitTick+0x24>
      __HAL_RCC_RTC_ENABLE();
 800a680:	4b2b      	ldr	r3, [pc, #172]	; (800a730 <HAL_InitTick+0xec>)
      hRTC_Handle.Instance = RTC;
 800a682:	4d2c      	ldr	r5, [pc, #176]	; (800a734 <HAL_InitTick+0xf0>)
      __HAL_RCC_RTC_ENABLE();
 800a684:	601f      	str	r7, [r3, #0]
      hRTC_Handle.Instance = RTC;
 800a686:	4b2c      	ldr	r3, [pc, #176]	; (800a738 <HAL_InitTick+0xf4>)
      hRTC_Handle.Init.AsynchPrediv = (HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC) / 10000) - 1;
 800a688:	4638      	mov	r0, r7
      hRTC_Handle.Instance = RTC;
 800a68a:	602b      	str	r3, [r5, #0]
      hRTC_Handle.Init.AsynchPrediv = (HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC) / 10000) - 1;
 800a68c:	f7ff faac 	bl	8009be8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a690:	f242 7310 	movw	r3, #10000	; 0x2710
 800a694:	fbb0 f0f3 	udiv	r0, r0, r3
 800a698:	3801      	subs	r0, #1
 800a69a:	6068      	str	r0, [r5, #4]
      HAL_RTC_Init(&hRTC_Handle);
 800a69c:	4628      	mov	r0, r5
      hRTC_Handle.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800a69e:	60ac      	str	r4, [r5, #8]
      HAL_RTC_Init(&hRTC_Handle);
 800a6a0:	f7ff fbc2 	bl	8009e28 <HAL_RTC_Init>
      __HAL_RTC_WRITEPROTECTION_DISABLE(&hRTC_Handle);
 800a6a4:	682b      	ldr	r3, [r5, #0]
 800a6a6:	685a      	ldr	r2, [r3, #4]
 800a6a8:	f042 0210 	orr.w	r2, r2, #16
 800a6ac:	605a      	str	r2, [r3, #4]
      __HAL_RTC_ALARM_CLEAR_FLAG(&hRTC_Handle, RTC_FLAG_ALRAF);
 800a6ae:	f06f 0202 	mvn.w	r2, #2
 800a6b2:	605a      	str	r2, [r3, #4]
        if (counter++ == SystemCoreClock / 48U) /* Timeout = ~ 1s */
 800a6b4:	4a21      	ldr	r2, [pc, #132]	; (800a73c <HAL_InitTick+0xf8>)
      counter = 0U;
 800a6b6:	9401      	str	r4, [sp, #4]
        if (counter++ == SystemCoreClock / 48U) /* Timeout = ~ 1s */
 800a6b8:	6811      	ldr	r1, [r2, #0]
 800a6ba:	2230      	movs	r2, #48	; 0x30
 800a6bc:	fbb1 f1f2 	udiv	r1, r1, r2
      while (__HAL_RTC_ALARM_GET_FLAG(&hRTC_Handle, RTC_FLAG_ALRAF) != RESET)
 800a6c0:	685a      	ldr	r2, [r3, #4]
 800a6c2:	f012 0202 	ands.w	r2, r2, #2
 800a6c6:	d126      	bne.n	800a716 <HAL_InitTick+0xd2>
      hRTC_Handle.Instance->ALRL = 0x09U;
 800a6c8:	2009      	movs	r0, #9
      hRTC_Handle.Instance->ALRH = 0x00U;
 800a6ca:	621a      	str	r2, [r3, #32]
      hRTC_Handle.Instance->ALRL = 0x09U;
 800a6cc:	6258      	str	r0, [r3, #36]	; 0x24
      __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a6ce:	481c      	ldr	r0, [pc, #112]	; (800a740 <HAL_InitTick+0xfc>)
 800a6d0:	6805      	ldr	r5, [r0, #0]
 800a6d2:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 800a6d6:	6005      	str	r5, [r0, #0]
      __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800a6d8:	6885      	ldr	r5, [r0, #8]
 800a6da:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 800a6de:	6085      	str	r5, [r0, #8]
      CLEAR_BIT(hRTC_Handle.Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800a6e0:	6858      	ldr	r0, [r3, #4]
 800a6e2:	f020 0005 	bic.w	r0, r0, #5
 800a6e6:	6058      	str	r0, [r3, #4]
      hRTC_Handle.Instance->CNTH = 0x00U;
 800a6e8:	619a      	str	r2, [r3, #24]
      hRTC_Handle.Instance->CNTL = 0x00U;
 800a6ea:	61da      	str	r2, [r3, #28]
      __HAL_RTC_ALARM_ENABLE_IT(&hRTC_Handle, RTC_IT_ALRA);
 800a6ec:	6818      	ldr	r0, [r3, #0]
 800a6ee:	f040 0002 	orr.w	r0, r0, #2
 800a6f2:	6018      	str	r0, [r3, #0]
      __HAL_RTC_WRITEPROTECTION_ENABLE(&hRTC_Handle);
 800a6f4:	6858      	ldr	r0, [r3, #4]
 800a6f6:	f020 0010 	bic.w	r0, r0, #16
 800a6fa:	6058      	str	r0, [r3, #4]
      counter = 0U;
 800a6fc:	9201      	str	r2, [sp, #4]
      while ((hRTC_Handle.Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a6fe:	685a      	ldr	r2, [r3, #4]
 800a700:	0692      	lsls	r2, r2, #26
 800a702:	d50e      	bpl.n	800a722 <HAL_InitTick+0xde>
      HAL_NVIC_SetPriority(RTC_Alarm_IRQn, TickPriority, 0U);
 800a704:	2200      	movs	r2, #0
 800a706:	4631      	mov	r1, r6
 800a708:	2029      	movs	r0, #41	; 0x29
 800a70a:	f7fd fed3 	bl	80084b4 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800a70e:	2029      	movs	r0, #41	; 0x29
 800a710:	f7fd ff04 	bl	800851c <HAL_NVIC_EnableIRQ>
      return HAL_OK;
 800a714:	e7a9      	b.n	800a66a <HAL_InitTick+0x26>
        if (counter++ == SystemCoreClock / 48U) /* Timeout = ~ 1s */
 800a716:	9a01      	ldr	r2, [sp, #4]
 800a718:	1c50      	adds	r0, r2, #1
 800a71a:	428a      	cmp	r2, r1
 800a71c:	9001      	str	r0, [sp, #4]
 800a71e:	d1cf      	bne.n	800a6c0 <HAL_InitTick+0x7c>
 800a720:	e7a2      	b.n	800a668 <HAL_InitTick+0x24>
        if (counter++ == SystemCoreClock / 48U) /* Timeout = ~ 1s */
 800a722:	9a01      	ldr	r2, [sp, #4]
 800a724:	1c50      	adds	r0, r2, #1
 800a726:	4291      	cmp	r1, r2
 800a728:	9001      	str	r0, [sp, #4]
 800a72a:	d1e8      	bne.n	800a6fe <HAL_InitTick+0xba>
 800a72c:	e79c      	b.n	800a668 <HAL_InitTick+0x24>
 800a72e:	bf00      	nop
 800a730:	4242043c 	.word	0x4242043c
 800a734:	200014c8 	.word	0x200014c8
 800a738:	40002800 	.word	0x40002800
 800a73c:	20000020 	.word	0x20000020
 800a740:	40010400 	.word	0x40010400

0800a744 <HAL_RTC_AlarmAEventCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a744:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t counter = 0U;
 800a746:	2400      	movs	r4, #0
{
 800a748:	4605      	mov	r5, r0
  __IO uint32_t counter = 0U;
 800a74a:	9401      	str	r4, [sp, #4]

  HAL_IncTick();
 800a74c:	f7fd fe7c 	bl	8008448 <HAL_IncTick>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
  {
    if (counter++ == SystemCoreClock / 48U) /* Timeout = ~ 1s */
 800a750:	2130      	movs	r1, #48	; 0x30
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a752:	682b      	ldr	r3, [r5, #0]
 800a754:	685a      	ldr	r2, [r3, #4]
 800a756:	f042 0210 	orr.w	r2, r2, #16
 800a75a:	605a      	str	r2, [r3, #4]
  WRITE_REG(hrtc->Instance->CNTH, 0x00U);
 800a75c:	619c      	str	r4, [r3, #24]
  WRITE_REG(hrtc->Instance->CNTL, 0x00U);
 800a75e:	61dc      	str	r4, [r3, #28]
  CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	f022 0205 	bic.w	r2, r2, #5
 800a766:	605a      	str	r2, [r3, #4]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a768:	685a      	ldr	r2, [r3, #4]
 800a76a:	f022 0210 	bic.w	r2, r2, #16
 800a76e:	605a      	str	r2, [r3, #4]
    if (counter++ == SystemCoreClock / 48U) /* Timeout = ~ 1s */
 800a770:	4a06      	ldr	r2, [pc, #24]	; (800a78c <HAL_RTC_AlarmAEventCallback+0x48>)
 800a772:	6812      	ldr	r2, [r2, #0]
 800a774:	fbb2 f2f1 	udiv	r2, r2, r1
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a778:	6859      	ldr	r1, [r3, #4]
 800a77a:	0689      	lsls	r1, r1, #26
 800a77c:	d404      	bmi.n	800a788 <HAL_RTC_AlarmAEventCallback+0x44>
    if (counter++ == SystemCoreClock / 48U) /* Timeout = ~ 1s */
 800a77e:	9901      	ldr	r1, [sp, #4]
 800a780:	1c48      	adds	r0, r1, #1
 800a782:	4291      	cmp	r1, r2
 800a784:	9001      	str	r0, [sp, #4]
 800a786:	d1f7      	bne.n	800a778 <HAL_RTC_AlarmAEventCallback+0x34>
    {
      break;
    }
  }
}
 800a788:	b003      	add	sp, #12
 800a78a:	bd30      	pop	{r4, r5, pc}
 800a78c:	20000020 	.word	0x20000020

0800a790 <RTC_Alarm_IRQHandler>:
  * @brief  This function handles RTC ALARM interrupt request.
  * @retval None
  */
void RTC_Alarm_IRQHandler(void)
{
  HAL_RTC_AlarmIRQHandler(&hRTC_Handle);
 800a790:	4801      	ldr	r0, [pc, #4]	; (800a798 <RTC_Alarm_IRQHandler+0x8>)
 800a792:	f7ff bb15 	b.w	8009dc0 <HAL_RTC_AlarmIRQHandler>
 800a796:	bf00      	nop
 800a798:	200014c8 	.word	0x200014c8

0800a79c <_ZN9AMenuListC1EmPKNS_9SMenuItemEh>:
 *      Author: krzysiek
 */

#include "AMenuList.h"

AMenuList::AMenuList(uint32_t title, const SMenuItem *menuItems, uint8_t menuItemsCount) :
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
 800a7a8:	70fb      	strb	r3, [r7, #3]
        m_title(title), m_menuItemsCount(menuItemsCount)
 800a7aa:	4a1d      	ldr	r2, [pc, #116]	; (800a820 <_ZN9AMenuListC1EmPKNS_9SMenuItemEh+0x84>)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	601a      	str	r2, [r3, #0]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	605a      	str	r2, [r3, #4]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	78fa      	ldrb	r2, [r7, #3]
 800a7ba:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
{
    if (m_menuItemsCount > sizeof(m_menuItems) / sizeof(m_menuItems[0]))
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 800a7c4:	2b20      	cmp	r3, #32
 800a7c6:	d903      	bls.n	800a7d0 <_ZN9AMenuListC1EmPKNS_9SMenuItemEh+0x34>
    {
        m_menuItemsCount = sizeof(m_menuItems) / sizeof(m_menuItems[0]);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2220      	movs	r2, #32
 800a7cc:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
    }
    if (menuItems != NULL)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00f      	beq.n	800a7f6 <_ZN9AMenuListC1EmPKNS_9SMenuItemEh+0x5a>
    {
        memcpy(m_menuItems, menuItems, m_menuItemsCount * sizeof(SMenuItem));
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f103 0008 	add.w	r0, r3, #8
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	005b      	lsls	r3, r3, #1
 800a7e8:	4413      	add	r3, r2
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	6879      	ldr	r1, [r7, #4]
 800a7f0:	f00c fd5f 	bl	80172b2 <memcpy>
 800a7f4:	e00e      	b.n	800a814 <_ZN9AMenuListC1EmPKNS_9SMenuItemEh+0x78>
    }
    else
    {
        memset(m_menuItems, 0, m_menuItemsCount * sizeof(SMenuItem));
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f103 0008 	add.w	r0, r3, #8
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 800a802:	461a      	mov	r2, r3
 800a804:	4613      	mov	r3, r2
 800a806:	005b      	lsls	r3, r3, #1
 800a808:	4413      	add	r3, r2
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	461a      	mov	r2, r3
 800a80e:	2100      	movs	r1, #0
 800a810:	f00c fd74 	bl	80172fc <memset>
    }
}
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	0801ca58 	.word	0x0801ca58

0800a824 <_ZN9AMenuList8getTitleEv>:

uint32_t AMenuList::getTitle()
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
    return m_title;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
}
 800a830:	4618      	mov	r0, r3
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	bc80      	pop	{r7}
 800a838:	4770      	bx	lr

0800a83a <_ZN9AMenuList11getMenuItemEa>:

AMenuList::SMenuItem *AMenuList::getMenuItem(int8_t index)
{
 800a83a:	b480      	push	{r7}
 800a83c:	b083      	sub	sp, #12
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	460b      	mov	r3, r1
 800a844:	70fb      	strb	r3, [r7, #3]
    return &m_menuItems[index];
 800a846:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800a84a:	4613      	mov	r3, r2
 800a84c:	005b      	lsls	r3, r3, #1
 800a84e:	4413      	add	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	3308      	adds	r3, #8
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	4413      	add	r3, r2
}
 800a858:	4618      	mov	r0, r3
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bc80      	pop	{r7}
 800a860:	4770      	bx	lr

0800a862 <_ZN9AMenuList17getMenuItemsCountEv>:

uint8_t AMenuList::getMenuItemsCount()
{
 800a862:	b480      	push	{r7}
 800a864:	b083      	sub	sp, #12
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
    return m_menuItemsCount;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
}
 800a870:	4618      	mov	r0, r3
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	bc80      	pop	{r7}
 800a878:	4770      	bx	lr

0800a87a <_ZN9AMenuList10updateItemEPNS_9SMenuItemE>:
    }
    return -1;
}

void AMenuList::updateItem(SMenuItem *menuItem)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b083      	sub	sp, #12
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	6039      	str	r1, [r7, #0]
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	bc80      	pop	{r7}
 800a88c:	4770      	bx	lr

0800a88e <_ZN11AMenuScreenC1EP9AMenuLista>:
 *      Author: krzysiek
 */

#include "AMenuScreen.h"

AMenuScreen::AMenuScreen(AMenuList *menuList, int8_t pageSize) :
 800a88e:	b480      	push	{r7}
 800a890:	b085      	sub	sp, #20
 800a892:	af00      	add	r7, sp, #0
 800a894:	60f8      	str	r0, [r7, #12]
 800a896:	60b9      	str	r1, [r7, #8]
 800a898:	4613      	mov	r3, r2
 800a89a:	71fb      	strb	r3, [r7, #7]
        m_menuList(menuList), m_pageSize(pageSize), m_offset(0)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	601a      	str	r2, [r3, #0]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	79fa      	ldrb	r2, [r7, #7]
 800a8a6:	711a      	strb	r2, [r3, #4]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	715a      	strb	r2, [r3, #5]
{
}
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bc80      	pop	{r7}
 800a8b8:	4770      	bx	lr

0800a8ba <_ZN11AMenuScreen10selectItemEPN9AMenuList9SMenuItemE>:

void AMenuScreen::selectItem(AMenuList::SMenuItem *menuItem)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b082      	sub	sp, #8
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
 800a8c2:	6039      	str	r1, [r7, #0]
    m_menuList->onItemSelected(menuItem);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	6812      	ldr	r2, [r2, #0]
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	4798      	blx	r3
}
 800a8d8:	bf00      	nop
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <_ZN11AMenuScreen8getTitleEv>:

uint32_t AMenuScreen::getTitle()
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
    return m_menuList->getTitle();
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7ff ff99 	bl	800a824 <_ZN9AMenuList8getTitleEv>
 800a8f2:	4603      	mov	r3, r0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <_ZN11AMenuScreen9setOffsetEa>:

void AMenuScreen::setOffset(int8_t offset)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	460b      	mov	r3, r1
 800a906:	70fb      	strb	r3, [r7, #3]
    m_offset = offset;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	78fa      	ldrb	r2, [r7, #3]
 800a90c:	715a      	strb	r2, [r3, #5]
}
 800a90e:	bf00      	nop
 800a910:	370c      	adds	r7, #12
 800a912:	46bd      	mov	sp, r7
 800a914:	bc80      	pop	{r7}
 800a916:	4770      	bx	lr

0800a918 <_ZN11AMenuScreen9getOffsetEv>:

int8_t AMenuScreen::getOffset()
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
    return m_offset;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f993 3005 	ldrsb.w	r3, [r3, #5]
}
 800a926:	4618      	mov	r0, r3
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bc80      	pop	{r7}
 800a92e:	4770      	bx	lr

0800a930 <_ZN11AMenuScreen13getItemsCountEv>:

int8_t AMenuScreen::getItemsCount()
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
    uint8_t count = 0;
 800a938:	2300      	movs	r3, #0
 800a93a:	73fb      	strb	r3, [r7, #15]
    for (int32_t i = 0; i < m_menuList->getMenuItemsCount(); i++)
 800a93c:	2300      	movs	r3, #0
 800a93e:	60bb      	str	r3, [r7, #8]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4618      	mov	r0, r3
 800a946:	f7ff ff8c 	bl	800a862 <_ZN9AMenuList17getMenuItemsCountEv>
 800a94a:	4603      	mov	r3, r0
 800a94c:	461a      	mov	r2, r3
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	429a      	cmp	r2, r3
 800a952:	bfcc      	ite	gt
 800a954:	2301      	movgt	r3, #1
 800a956:	2300      	movle	r3, #0
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d016      	beq.n	800a98c <_ZN11AMenuScreen13getItemsCountEv+0x5c>
    {
        if (getItemAtIndex(i)->hidden == false)
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	b25b      	sxtb	r3, r3
 800a962:	4619      	mov	r1, r3
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 f86c 	bl	800aa42 <_ZN11AMenuScreen14getItemAtIndexEa>
 800a96a:	4603      	mov	r3, r0
 800a96c:	7a1b      	ldrb	r3, [r3, #8]
 800a96e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a972:	b2db      	uxtb	r3, r3
 800a974:	f083 0301 	eor.w	r3, r3, #1
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <_ZN11AMenuScreen13getItemsCountEv+0x54>
        {
            count++;
 800a97e:	7bfb      	ldrb	r3, [r7, #15]
 800a980:	3301      	adds	r3, #1
 800a982:	73fb      	strb	r3, [r7, #15]
    for (int32_t i = 0; i < m_menuList->getMenuItemsCount(); i++)
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	3301      	adds	r3, #1
 800a988:	60bb      	str	r3, [r7, #8]
 800a98a:	e7d9      	b.n	800a940 <_ZN11AMenuScreen13getItemsCountEv+0x10>
        }
    }
    return count;
 800a98c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a990:	4618      	mov	r0, r3
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <_ZN11AMenuScreen13getPagesCountEv>:

int8_t AMenuScreen::getPagesCount()
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
    return (getItemsCount() + (m_pageSize - 1)) / m_pageSize;
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7ff ffc5 	bl	800a930 <_ZN11AMenuScreen13getItemsCountEv>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	4413      	add	r3, r2
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a9ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9be:	b25b      	sxtb	r3, r3
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3708      	adds	r7, #8
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <_ZN11AMenuScreen13getSlotsCountEv>:

int8_t AMenuScreen::getSlotsCount()
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
    int8_t count = getItemsCount() - m_offset;
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7ff ffad 	bl	800a930 <_ZN11AMenuScreen13getItemsCountEv>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	73fb      	strb	r3, [r7, #15]
    return count < m_pageSize ? count : m_pageSize;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a9ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	db03      	blt.n	800a9fe <_ZN11AMenuScreen13getSlotsCountEv+0x36>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a9fc:	e001      	b.n	800aa02 <_ZN11AMenuScreen13getSlotsCountEv+0x3a>
 800a9fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <_ZN11AMenuScreen13getItemAtSlotEa>:

AMenuList::SMenuItem *AMenuScreen::getItemAtSlot(int8_t slot)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b082      	sub	sp, #8
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	460b      	mov	r3, r1
 800aa14:	70fb      	strb	r3, [r7, #3]
    return getItemAtIndex(getItemIndex(m_offset + slot));
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800aa1c:	b2da      	uxtb	r2, r3
 800aa1e:	78fb      	ldrb	r3, [r7, #3]
 800aa20:	4413      	add	r3, r2
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	b25b      	sxtb	r3, r3
 800aa26:	4619      	mov	r1, r3
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f827 	bl	800aa7c <_ZN11AMenuScreen12getItemIndexEa>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	4619      	mov	r1, r3
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 f805 	bl	800aa42 <_ZN11AMenuScreen14getItemAtIndexEa>
 800aa38:	4603      	mov	r3, r0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <_ZN11AMenuScreen14getItemAtIndexEa>:

AMenuList::SMenuItem *AMenuScreen::getItemAtIndex(int8_t index)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b084      	sub	sp, #16
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	70fb      	strb	r3, [r7, #3]
    AMenuList::SMenuItem *menuItem = m_menuList->getMenuItem(index);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800aa56:	4611      	mov	r1, r2
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7ff feee 	bl	800a83a <_ZN9AMenuList11getMenuItemEa>
 800aa5e:	60f8      	str	r0, [r7, #12]
    m_menuList->updateItem(menuItem);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	6812      	ldr	r2, [r2, #0]
 800aa6c:	68f9      	ldr	r1, [r7, #12]
 800aa6e:	4610      	mov	r0, r2
 800aa70:	4798      	blx	r3
    return menuItem;
 800aa72:	68fb      	ldr	r3, [r7, #12]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <_ZN11AMenuScreen12getItemIndexEa>:

int8_t AMenuScreen::getItemIndex(int8_t position)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	70fb      	strb	r3, [r7, #3]
    uint8_t index = position;
 800aa88:	78fb      	ldrb	r3, [r7, #3]
 800aa8a:	73fb      	strb	r3, [r7, #15]
    for (int8_t i = 0; i <= position; i++)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	73bb      	strb	r3, [r7, #14]
 800aa90:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800aa94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	dc1c      	bgt.n	800aad6 <_ZN11AMenuScreen12getItemIndexEa+0x5a>
    {
        if (getItemAtIndex(i)->hidden)
 800aa9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7ff ffcd 	bl	800aa42 <_ZN11AMenuScreen14getItemAtIndexEa>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	7a1b      	ldrb	r3, [r3, #8]
 800aaac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d008      	beq.n	800aac8 <_ZN11AMenuScreen12getItemIndexEa+0x4c>
        {
            index++;
 800aab6:	7bfb      	ldrb	r3, [r7, #15]
 800aab8:	3301      	adds	r3, #1
 800aaba:	73fb      	strb	r3, [r7, #15]
            position++;
 800aabc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	3301      	adds	r3, #1
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	70fb      	strb	r3, [r7, #3]
    for (int8_t i = 0; i <= position; i++)
 800aac8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	3301      	adds	r3, #1
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	73bb      	strb	r3, [r7, #14]
 800aad4:	e7dc      	b.n	800aa90 <_ZN11AMenuScreen12getItemIndexEa+0x14>
        }
    }
    return index;
 800aad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <_ZN7AScreen6finishEv>:

#include "AScreen.h"
#include "CContext.h"

void AScreen::finish()
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b082      	sub	sp, #8
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
    CContext::finishScreen(this);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 fddc 	bl	800b6a8 <_ZN8CContext12finishScreenEP7AScreen>
}
 800aaf0:	bf00      	nop
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <_ZN7AScreen6resumeEv>:

void AScreen::resume()
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
    CContext::redraw();
 800ab00:	f000 fe10 	bl	800b724 <_ZN8CContext6redrawEv>
}
 800ab04:	bf00      	nop
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <_ZN7AScreen7onStartEv>:

void AScreen::onStart()
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bc80      	pop	{r7}
 800ab1c:	4770      	bx	lr

0800ab1e <_ZN7AScreen8onResumeEv>:

void AScreen::onResume()
{
 800ab1e:	b480      	push	{r7}
 800ab20:	b083      	sub	sp, #12
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
}
 800ab26:	bf00      	nop
 800ab28:	370c      	adds	r7, #12
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bc80      	pop	{r7}
 800ab2e:	4770      	bx	lr

0800ab30 <_ZN7AScreen7onPauseEv>:

void AScreen::onPause()
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
}
 800ab38:	bf00      	nop
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bc80      	pop	{r7}
 800ab40:	4770      	bx	lr

0800ab42 <_ZN7AScreen6onStopEv>:

void AScreen::onStop()
{
 800ab42:	b480      	push	{r7}
 800ab44:	b083      	sub	sp, #12
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
}
 800ab4a:	bf00      	nop
 800ab4c:	370c      	adds	r7, #12
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bc80      	pop	{r7}
 800ab52:	4770      	bx	lr

0800ab54 <_ZN10CEEPROMMgr14getEEPROMStartEv>:

private:
	static uint32_t allocateVar(uint16_t size);
	static bool getShouldInitialize();
	static void setupError(bool operationFault, TEEPROMError possibleError);
	static inline uint32_t getEEPROMStart() {return CEEPROMVarConf::EEPROM_MANAGED_BLOCK_START;}
 800ab54:	b480      	push	{r7}
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	2300      	movs	r3, #0
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bc80      	pop	{r7}
 800ab60:	4770      	bx	lr
	...

0800ab64 <_ZN10CEEPROMMgr15getEEPROMDriverEv>:
	static inline uint32_t getEEPROMEnd() {return CEEPROMVarConf::EEPROM_MANAGED_BLOCK_END;}
	static inline Ceeprom* getEEPROMDriver() {return eepDrvRef;}
 800ab64:	b480      	push	{r7}
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	4b02      	ldr	r3, [pc, #8]	; (800ab74 <_ZN10CEEPROMMgr15getEEPROMDriverEv+0x10>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bc80      	pop	{r7}
 800ab72:	4770      	bx	lr
 800ab74:	2000081c 	.word	0x2000081c

0800ab78 <_ZN19IInterruptUpdatableD1Ev>:
 */
class IInterruptUpdatable
{
    public:

        virtual ~IInterruptUpdatable() {};
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	4a04      	ldr	r2, [pc, #16]	; (800ab94 <_ZN19IInterruptUpdatableD1Ev+0x1c>)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	601a      	str	r2, [r3, #0]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bc80      	pop	{r7}
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	0801ca98 	.word	0x0801ca98

0800ab98 <_ZN19IInterruptUpdatableD0Ev>:
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7ff ffe9 	bl	800ab78 <_ZN19IInterruptUpdatableD1Ev>
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f00a fd18 	bl	80155dc <_ZdlPv>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4618      	mov	r0, r3
 800abb0:	3708      	adds	r7, #8
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
	...

0800abb8 <_ZN19IInterruptUpdatableC1Ev>:
class IInterruptUpdatable
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	4a04      	ldr	r2, [pc, #16]	; (800abd4 <_ZN19IInterruptUpdatableC1Ev+0x1c>)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	601a      	str	r2, [r3, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4618      	mov	r0, r3
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	bc80      	pop	{r7}
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	0801ca98 	.word	0x0801ca98

0800abd8 <_ZN16CBacklightDriverC1Ev>:
 *      Author: krzysiek
 */

#include "CBacklightDriver.h"

CBacklightDriver::CBacklightDriver()
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7ff ffe8 	bl	800abb8 <_ZN19IInterruptUpdatableC1Ev>
 800abe8:	4a10      	ldr	r2, [pc, #64]	; (800ac2c <_ZN16CBacklightDriverC1Ev+0x54>)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	3304      	adds	r3, #4
 800abf2:	4618      	mov	r0, r3
 800abf4:	f002 ff9a 	bl	800db2c <_ZN14CPwmControllerC1Ev>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	3364      	adds	r3, #100	; 0x64
 800abfc:	4618      	mov	r0, r3
 800abfe:	f000 fa23 	bl	800b048 <_ZN10CEEPROMVarIaEC1Ev>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	3368      	adds	r3, #104	; 0x68
 800ac06:	4618      	mov	r0, r3
 800ac08:	f000 fa1e 	bl	800b048 <_ZN10CEEPROMVarIaEC1Ev>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	336c      	adds	r3, #108	; 0x6c
 800ac10:	4618      	mov	r0, r3
 800ac12:	f000 fa29 	bl	800b068 <_ZN10CEEPROMVarIsEC1Ev>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	3370      	adds	r3, #112	; 0x70
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 fa34 	bl	800b088 <_ZN10CEEPROMVarIbEC1Ev>
{
}
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4618      	mov	r0, r3
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	0801ca84 	.word	0x0801ca84

0800ac30 <_ZN16CBacklightDriver4initEPN14CPwmController11TInitStructEmaa>:

void CBacklightDriver::init(CPwmController::TInitStruct *initStruct, uint32_t systemClockFrequency, int8_t minPWM,
        int8_t maxPWM)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b086      	sub	sp, #24
 800ac34:	af02      	add	r7, sp, #8
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
 800ac3c:	70fb      	strb	r3, [r7, #3]
    m_minPWM = minPWM;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	78fa      	ldrb	r2, [r7, #3]
 800ac42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    m_maxPWM = maxPWM;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	7e3a      	ldrb	r2, [r7, #24]
 800ac4a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75

    m_pwmController.init( //
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	1d18      	adds	r0, r3, #4
            initStruct,
            1000,
            systemClockFrequency,
            1000);
 800ac52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ac5e:	68b9      	ldr	r1, [r7, #8]
 800ac60:	f002 ff81 	bl	800db66 <_ZN14CPwmController4initEPNS_11TInitStructEtmt>

    m_dimBrightness.initVar(DEFAULT_DIM_BRIGHTNESS);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	3364      	adds	r3, #100	; 0x64
 800ac68:	211e      	movs	r1, #30
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 fa1c 	bl	800b0a8 <_ZN10CEEPROMVarIaE7initVarEa>
    m_normalBrightness.initVar(DEFAULT_NORMAL_BRIGHTNESS);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	3368      	adds	r3, #104	; 0x68
 800ac74:	2155      	movs	r1, #85	; 0x55
 800ac76:	4618      	mov	r0, r3
 800ac78:	f000 fa16 	bl	800b0a8 <_ZN10CEEPROMVarIaE7initVarEa>
    m_fadeTime.initVar(DEFAULT_FADE_TIME);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	336c      	adds	r3, #108	; 0x6c
 800ac80:	2178      	movs	r1, #120	; 0x78
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 fa4a 	bl	800b11c <_ZN10CEEPROMVarIsE7initVarEs>
    m_lightSensor.initVar(DEFAULT_LIGHT_SENSOR);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	3370      	adds	r3, #112	; 0x70
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f000 fa7e 	bl	800b190 <_ZN10CEEPROMVarIbE7initVarEb>

    m_currentBrightness = 0;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
    startAutomaticMode();
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f000 f804 	bl	800acaa <_ZN16CBacklightDriver18startAutomaticModeEv>
}
 800aca2:	bf00      	nop
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <_ZN16CBacklightDriver18startAutomaticModeEv>:

void CBacklightDriver::startAutomaticMode()
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b082      	sub	sp, #8
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
    m_mode = MODE_AUTO;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
    m_targetBrightness = getMax();
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 f90e 	bl	800aedc <_ZN16CBacklightDriver6getMaxEv>
 800acc0:	4603      	mov	r3, r0
 800acc2:	461a      	mov	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    resetCounterFadeTime();
 800acca:	2100      	movs	r1, #0
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f993 	bl	800aff8 <_ZN16CBacklightDriver20resetCounterFadeTimeEb>
}
 800acd2:	bf00      	nop
 800acd4:	3708      	adds	r7, #8
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <_ZN16CBacklightDriver6updateEbba>:
    m_mode = MODE_FIXED;
    m_targetBrightness = percent * 10;
}

void CBacklightDriver::update(bool interact, bool energySaving, int8_t lightSensorPercent)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b082      	sub	sp, #8
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
 800ace2:	4608      	mov	r0, r1
 800ace4:	4611      	mov	r1, r2
 800ace6:	461a      	mov	r2, r3
 800ace8:	4603      	mov	r3, r0
 800acea:	70fb      	strb	r3, [r7, #3]
 800acec:	460b      	mov	r3, r1
 800acee:	70bb      	strb	r3, [r7, #2]
 800acf0:	4613      	mov	r3, r2
 800acf2:	707b      	strb	r3, [r7, #1]
    if ((interact && m_mode == MODE_AUTO) || (energySaving != m_energySaving))
 800acf4:	78fb      	ldrb	r3, [r7, #3]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d004      	beq.n	800ad04 <_ZN16CBacklightDriver6updateEbba+0x2a>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f993 3076 	ldrsb.w	r3, [r3, #118]	; 0x76
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d005      	beq.n	800ad10 <_ZN16CBacklightDriver6updateEbba+0x36>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad0a:	78ba      	ldrb	r2, [r7, #2]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d010      	beq.n	800ad32 <_ZN16CBacklightDriver6updateEbba+0x58>
    {
        m_energySaving = energySaving;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	78ba      	ldrb	r2, [r7, #2]
 800ad14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        m_targetBrightness = getMax();
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f8df 	bl	800aedc <_ZN16CBacklightDriver6getMaxEv>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	461a      	mov	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
        resetCounterFadeTime(energySaving);
 800ad28:	78bb      	ldrb	r3, [r7, #2]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 f963 	bl	800aff8 <_ZN16CBacklightDriver20resetCounterFadeTimeEb>
    }

    m_lightSensorPercent = lightSensorPercent;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	787a      	ldrb	r2, [r7, #1]
 800ad36:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
}
 800ad3a:	bf00      	nop
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
	...

0800ad44 <_ZN16CBacklightDriver19updateFromInterruptEt>:

void CBacklightDriver::updateFromInterrupt(uint16_t updateFrequency)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b086      	sub	sp, #24
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	807b      	strh	r3, [r7, #2]
    int32_t intervalMS = 1000 / updateFrequency;
 800ad50:	887b      	ldrh	r3, [r7, #2]
 800ad52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ad56:	fb92 f3f3 	sdiv	r3, r2, r3
 800ad5a:	617b      	str	r3, [r7, #20]
    int16_t targetBrightness = getTargetBrightness(m_energySaving);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad62:	4619      	mov	r1, r3
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 f8e3 	bl	800af30 <_ZN16CBacklightDriver19getTargetBrightnessEb>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	827b      	strh	r3, [r7, #18]

    if (intervalMS < 1)
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	dc01      	bgt.n	800ad78 <_ZN16CBacklightDriver19updateFromInterruptEt+0x34>
    {
        intervalMS = 1;
 800ad74:	2301      	movs	r3, #1
 800ad76:	617b      	str	r3, [r7, #20]
    }

    if (m_counterFadeTime > 0)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	dd05      	ble.n	800ad8c <_ZN16CBacklightDriver19updateFromInterruptEt+0x48>
    {
        m_counterFadeTime -= intervalMS;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	1ad2      	subs	r2, r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    if (m_mode == MODE_AUTO)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f993 3076 	ldrsb.w	r3, [r3, #118]	; 0x76
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10b      	bne.n	800adae <_ZN16CBacklightDriver19updateFromInterruptEt+0x6a>
    {
        if (m_counterFadeTime <= 0)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	dc07      	bgt.n	800adae <_ZN16CBacklightDriver19updateFromInterruptEt+0x6a>
        {
            m_targetBrightness = getMin();
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 f8b1 	bl	800af06 <_ZN16CBacklightDriver6getMinEv>
 800ada4:	4603      	mov	r3, r0
 800ada6:	461a      	mov	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
        }
    }

    if (m_currentBrightness > targetBrightness)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 800adb4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800adb8:	429a      	cmp	r2, r3
 800adba:	da18      	bge.n	800adee <_ZN16CBacklightDriver19updateFromInterruptEt+0xaa>
    {
        m_currentBrightness -= intervalMS * STEP_MULTIPLIER;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 800adc2:	b29a      	uxth	r2, r3
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	005b      	lsls	r3, r3, #1
 800adca:	b29b      	uxth	r3, r3
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	b29b      	uxth	r3, r3
 800add0:	b21a      	sxth	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
        if (m_currentBrightness < targetBrightness)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 800adde:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	dd03      	ble.n	800adee <_ZN16CBacklightDriver19updateFromInterruptEt+0xaa>
        {
            m_currentBrightness = targetBrightness;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	8a7a      	ldrh	r2, [r7, #18]
 800adea:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
        }
    }

    if (m_currentBrightness < targetBrightness)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 800adf4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	dd18      	ble.n	800ae2e <_ZN16CBacklightDriver19updateFromInterruptEt+0xea>
    {
        m_currentBrightness += intervalMS * STEP_MULTIPLIER;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	005b      	lsls	r3, r3, #1
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	4413      	add	r3, r2
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	b21a      	sxth	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
        if (m_currentBrightness > targetBrightness)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 800ae1e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	da03      	bge.n	800ae2e <_ZN16CBacklightDriver19updateFromInterruptEt+0xea>
        {
            m_currentBrightness = targetBrightness;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	8a7a      	ldrh	r2, [r7, #18]
 800ae2a:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
        }
    }

    if (m_currentBrightness <= 0)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	dc06      	bgt.n	800ae46 <_ZN16CBacklightDriver19updateFromInterruptEt+0x102>
    {
        m_pwmController.setPulseWidth(0);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	3304      	adds	r3, #4
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f002 ff41 	bl	800dcc6 <_ZN14CPwmController13setPulseWidthEt>
        //ograniczanie zakresu sterowania (od m_minPWM do m_maxBrightness)
        brightness = (m_minPWM * 10) + (brightness * (m_maxPWM - m_minPWM)) / 100;

        m_pwmController.setPulseWidth(brightness);
    }
}
 800ae44:	e033      	b.n	800aeae <_ZN16CBacklightDriver19updateFromInterruptEt+0x16a>
        int32_t brightness = m_currentBrightness;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 800ae4c:	60fb      	str	r3, [r7, #12]
        brightness = ((brightness + FACTOR_LINEAR) * brightness) / (1000 + FACTOR_LINEAR);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	33fa      	adds	r3, #250	; 0xfa
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	fb02 f303 	mul.w	r3, r2, r3
 800ae58:	4a17      	ldr	r2, [pc, #92]	; (800aeb8 <_ZN16CBacklightDriver19updateFromInterruptEt+0x174>)
 800ae5a:	fb82 1203 	smull	r1, r2, r2, r3
 800ae5e:	1252      	asrs	r2, r2, #9
 800ae60:	17db      	asrs	r3, r3, #31
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	60fb      	str	r3, [r7, #12]
        brightness = (m_minPWM * 10) + (brightness * (m_maxPWM - m_minPWM)) / 100;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	4613      	mov	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4413      	add	r3, r2
 800ae74:	005b      	lsls	r3, r3, #1
 800ae76:	4619      	mov	r1, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f993 3075 	ldrsb.w	r3, [r3, #117]	; 0x75
 800ae7e:	461a      	mov	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800ae86:	1ad3      	subs	r3, r2, r3
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	fb02 f303 	mul.w	r3, r2, r3
 800ae8e:	4a0b      	ldr	r2, [pc, #44]	; (800aebc <_ZN16CBacklightDriver19updateFromInterruptEt+0x178>)
 800ae90:	fb82 0203 	smull	r0, r2, r2, r3
 800ae94:	1152      	asrs	r2, r2, #5
 800ae96:	17db      	asrs	r3, r3, #31
 800ae98:	1ad3      	subs	r3, r2, r3
 800ae9a:	440b      	add	r3, r1
 800ae9c:	60fb      	str	r3, [r7, #12]
        m_pwmController.setPulseWidth(brightness);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	3304      	adds	r3, #4
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	b292      	uxth	r2, r2
 800aea6:	4611      	mov	r1, r2
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f002 ff0c 	bl	800dcc6 <_ZN14CPwmController13setPulseWidthEt>
}
 800aeae:	bf00      	nop
 800aeb0:	3718      	adds	r7, #24
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	68db8bad 	.word	0x68db8bad
 800aebc:	51eb851f 	.word	0x51eb851f

0800aec0 <_ZN16CBacklightDriver11getFadeTimeEv>:
    m_fadeTime = seconds;
    resetCounterFadeTime();
}

int16_t CBacklightDriver::getFadeTime()
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
    return m_fadeTime;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	336c      	adds	r3, #108	; 0x6c
 800aecc:	4618      	mov	r0, r3
 800aece:	f000 f9a5 	bl	800b21c <_ZN10CEEPROMVarIsEcvsEv>
 800aed2:	4603      	mov	r3, r0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <_ZN16CBacklightDriver6getMaxEv>:
{
    return m_lightSensor;
}

int16_t CBacklightDriver::getMax()
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
    return m_normalBrightness * 10;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	3368      	adds	r3, #104	; 0x68
 800aee8:	4618      	mov	r0, r3
 800aeea:	f000 f98b 	bl	800b204 <_ZN10CEEPROMVarIaEcvaEv>
 800aeee:	4603      	mov	r3, r0
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	461a      	mov	r2, r3
 800aef4:	0092      	lsls	r2, r2, #2
 800aef6:	4413      	add	r3, r2
 800aef8:	005b      	lsls	r3, r3, #1
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	b21b      	sxth	r3, r3
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <_ZN16CBacklightDriver6getMinEv>:

int16_t CBacklightDriver::getMin()
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b082      	sub	sp, #8
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
    return m_dimBrightness * 10;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	3364      	adds	r3, #100	; 0x64
 800af12:	4618      	mov	r0, r3
 800af14:	f000 f976 	bl	800b204 <_ZN10CEEPROMVarIaEcvaEv>
 800af18:	4603      	mov	r3, r0
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	461a      	mov	r2, r3
 800af1e:	0092      	lsls	r2, r2, #2
 800af20:	4413      	add	r3, r2
 800af22:	005b      	lsls	r3, r3, #1
 800af24:	b29b      	uxth	r3, r3
 800af26:	b21b      	sxth	r3, r3
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <_ZN16CBacklightDriver19getTargetBrightnessEb>:

int16_t CBacklightDriver::getTargetBrightness(bool energySaving)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	460b      	mov	r3, r1
 800af3a:	70fb      	strb	r3, [r7, #3]
    int32_t targetBrightness = m_targetBrightness;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 800af42:	60fb      	str	r3, [r7, #12]

    if (energySaving)
 800af44:	78fb      	ldrb	r3, [r7, #3]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00c      	beq.n	800af64 <_ZN16CBacklightDriver19getTargetBrightnessEb+0x34>
    {
        targetBrightness = (targetBrightness * (100 - FACTOR_ENERGY_SAVING)) / 100;
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	4613      	mov	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4413      	add	r3, r2
 800af52:	011a      	lsls	r2, r3, #4
 800af54:	1ad3      	subs	r3, r2, r3
 800af56:	4a26      	ldr	r2, [pc, #152]	; (800aff0 <_ZN16CBacklightDriver19getTargetBrightnessEb+0xc0>)
 800af58:	fb82 1203 	smull	r1, r2, r2, r3
 800af5c:	1152      	asrs	r2, r2, #5
 800af5e:	17db      	asrs	r3, r3, #31
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	60fb      	str	r3, [r7, #12]
    }

    if (m_lightSensor)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	3370      	adds	r3, #112	; 0x70
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 f963 	bl	800b234 <_ZN10CEEPROMVarIbEcvbEv>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d036      	beq.n	800afe2 <_ZN16CBacklightDriver19getTargetBrightnessEb+0xb2>
    {
        int16_t factor;
        if (m_lightSensorPercent > LIGHT_SENSOR_THRESHOLD_MAX)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 800af7a:	2b5a      	cmp	r3, #90	; 0x5a
 800af7c:	dd02      	ble.n	800af84 <_ZN16CBacklightDriver19getTargetBrightnessEb+0x54>
        {
            factor = LIGHT_SENSOR_BRIGHTNESS_MAX;
 800af7e:	2364      	movs	r3, #100	; 0x64
 800af80:	817b      	strh	r3, [r7, #10]
 800af82:	e022      	b.n	800afca <_ZN16CBacklightDriver19getTargetBrightnessEb+0x9a>
        }
        else
        {
            if (m_lightSensorPercent < LIGHT_SENSOR_THRESHOLD_MIN)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 800af8a:	2b09      	cmp	r3, #9
 800af8c:	dc02      	bgt.n	800af94 <_ZN16CBacklightDriver19getTargetBrightnessEb+0x64>
            {
                factor = LIGHT_SENSOR_BRIGHTNESS_MIN;
 800af8e:	2314      	movs	r3, #20
 800af90:	817b      	strh	r3, [r7, #10]
 800af92:	e01a      	b.n	800afca <_ZN16CBacklightDriver19getTargetBrightnessEb+0x9a>
            }
            else
            {
                factor = (m_lightSensorPercent - LIGHT_SENSOR_THRESHOLD_MIN);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	3b0a      	subs	r3, #10
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	817b      	strh	r3, [r7, #10]
                factor *= (LIGHT_SENSOR_BRIGHTNESS_MAX - LIGHT_SENSOR_BRIGHTNESS_MIN);
 800afa2:	897b      	ldrh	r3, [r7, #10]
 800afa4:	461a      	mov	r2, r3
 800afa6:	0092      	lsls	r2, r2, #2
 800afa8:	4413      	add	r3, r2
 800afaa:	011b      	lsls	r3, r3, #4
 800afac:	b29b      	uxth	r3, r3
 800afae:	817b      	strh	r3, [r7, #10]
                factor /= (LIGHT_SENSOR_THRESHOLD_MAX - LIGHT_SENSOR_THRESHOLD_MIN);
 800afb0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800afb4:	4a0f      	ldr	r2, [pc, #60]	; (800aff4 <_ZN16CBacklightDriver19getTargetBrightnessEb+0xc4>)
 800afb6:	fb82 1203 	smull	r1, r2, r2, r3
 800afba:	1152      	asrs	r2, r2, #5
 800afbc:	17db      	asrs	r3, r3, #31
 800afbe:	1ad3      	subs	r3, r2, r3
 800afc0:	817b      	strh	r3, [r7, #10]
                factor += LIGHT_SENSOR_BRIGHTNESS_MIN;
 800afc2:	897b      	ldrh	r3, [r7, #10]
 800afc4:	3314      	adds	r3, #20
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	817b      	strh	r3, [r7, #10]
            }
        }
        targetBrightness = (targetBrightness * factor) / 100;
 800afca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	fb02 f303 	mul.w	r3, r2, r3
 800afd4:	4a06      	ldr	r2, [pc, #24]	; (800aff0 <_ZN16CBacklightDriver19getTargetBrightnessEb+0xc0>)
 800afd6:	fb82 1203 	smull	r1, r2, r2, r3
 800afda:	1152      	asrs	r2, r2, #5
 800afdc:	17db      	asrs	r3, r3, #31
 800afde:	1ad3      	subs	r3, r2, r3
 800afe0:	60fb      	str	r3, [r7, #12]
    }

    return targetBrightness;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	b21b      	sxth	r3, r3
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	51eb851f 	.word	0x51eb851f
 800aff4:	66666667 	.word	0x66666667

0800aff8 <_ZN16CBacklightDriver20resetCounterFadeTimeEb>:

void CBacklightDriver::resetCounterFadeTime(bool energySaving)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	460b      	mov	r3, r1
 800b002:	70fb      	strb	r3, [r7, #3]
    if (energySaving && getFadeTime() > MAX_FADE_TIME_ENERGY_SAVING)
 800b004:	78fb      	ldrb	r3, [r7, #3]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d007      	beq.n	800b01a <_ZN16CBacklightDriver20resetCounterFadeTimeEb+0x22>
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f7ff ff58 	bl	800aec0 <_ZN16CBacklightDriver11getFadeTimeEv>
 800b010:	4603      	mov	r3, r0
 800b012:	2b0f      	cmp	r3, #15
 800b014:	dd01      	ble.n	800b01a <_ZN16CBacklightDriver20resetCounterFadeTimeEb+0x22>
 800b016:	2301      	movs	r3, #1
 800b018:	e000      	b.n	800b01c <_ZN16CBacklightDriver20resetCounterFadeTimeEb+0x24>
 800b01a:	2300      	movs	r3, #0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d004      	beq.n	800b02a <_ZN16CBacklightDriver20resetCounterFadeTimeEb+0x32>
    {
        m_counterFadeTime = MAX_FADE_TIME_ENERGY_SAVING * 1000;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f643 2298 	movw	r2, #15000	; 0x3a98
 800b026:	67da      	str	r2, [r3, #124]	; 0x7c
    }
    else
    {
        m_counterFadeTime = getFadeTime() * 1000;
    }
}
 800b028:	e00a      	b.n	800b040 <_ZN16CBacklightDriver20resetCounterFadeTimeEb+0x48>
        m_counterFadeTime = getFadeTime() * 1000;
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7ff ff48 	bl	800aec0 <_ZN16CBacklightDriver11getFadeTimeEv>
 800b030:	4603      	mov	r3, r0
 800b032:	461a      	mov	r2, r3
 800b034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b038:	fb03 f202 	mul.w	r2, r3, r2
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800b040:	bf00      	nop
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <_ZN10CEEPROMVarIaEC1Ev>:
	 * @brief Domyślny konstruktor klasy, wywoływany niejawnie.
	 *
	 * Głównym zadaniem konstruktora jest przypisanie adresu w eepromie, pod którym będzie zapisana zmienna.
	 * Statyczność obiektu gwarantuje przypisywanie zmiennym tych samych adresów przy każdym uruchomieniu.
	 */
	CEEPROMVar()
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
	{
		addressOffset = CEEPROMMgr::allocateVar(sizeof(T));
 800b050:	2001      	movs	r0, #1
 800b052:	f001 f859 	bl	800c108 <_ZN10CEEPROMMgr11allocateVarEt>
 800b056:	4603      	mov	r3, r0
 800b058:	b29a      	uxth	r2, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	801a      	strh	r2, [r3, #0]
#ifdef EEPROMVAR_DEFAULT_PTR
		initialPtr = 0;
#endif
	}
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4618      	mov	r0, r3
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <_ZN10CEEPROMVarIsEC1Ev>:
	CEEPROMVar()
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
		addressOffset = CEEPROMMgr::allocateVar(sizeof(T));
 800b070:	2002      	movs	r0, #2
 800b072:	f001 f849 	bl	800c108 <_ZN10CEEPROMMgr11allocateVarEt>
 800b076:	4603      	mov	r3, r0
 800b078:	b29a      	uxth	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	801a      	strh	r2, [r3, #0]
	}
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4618      	mov	r0, r3
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <_ZN10CEEPROMVarIbEC1Ev>:
	CEEPROMVar()
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
		addressOffset = CEEPROMMgr::allocateVar(sizeof(T));
 800b090:	2001      	movs	r0, #1
 800b092:	f001 f839 	bl	800c108 <_ZN10CEEPROMMgr11allocateVarEt>
 800b096:	4603      	mov	r3, r0
 800b098:	b29a      	uxth	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	801a      	strh	r2, [r3, #0]
	}
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3708      	adds	r7, #8
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <_ZN10CEEPROMVarIaE7initVarEa>:
	 * cache.
	 *
	 * @param initial - wartość domyślna, które będzie wpisana do eepromu przy pierwszym uruchomieniu,
	 * lub na rządanie po wywołaniu metody CEEPROMMgr::init() z parametrem forceDefaults = true.
	 */
    void initVar(T initial)
 800b0a8:	b5b0      	push	{r4, r5, r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	70fb      	strb	r3, [r7, #3]
    {
        if (CEEPROMMgr::getShouldInitialize())
 800b0b4:	f001 f84a 	bl	800c14c <_ZN10CEEPROMMgr19getShouldInitializeEv>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d003      	beq.n	800b0c6 <_ZN10CEEPROMVarIaE7initVarEa+0x1e>
        {
            cache = initial;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	78fa      	ldrb	r2, [r7, #3]
 800b0c2:	709a      	strb	r2, [r3, #2]
            if (CEEPROMMgr::eeError)
            {
                cache = initial;
            }
        }
    }
 800b0c4:	e023      	b.n	800b10e <_ZN10CEEPROMVarIaE7initVarEa+0x66>
            bool error = CEEPROMMgr::getEEPROMDriver()->readBlock((void*) (CEEPROMMgr::getEEPROMStart() + addressOffset), &cache, sizeof(T));
 800b0c6:	f7ff fd4d 	bl	800ab64 <_ZN10CEEPROMMgr15getEEPROMDriverEv>
 800b0ca:	4605      	mov	r5, r0
 800b0cc:	682b      	ldr	r3, [r5, #0]
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	681c      	ldr	r4, [r3, #0]
 800b0d2:	f7ff fd3f 	bl	800ab54 <_ZN10CEEPROMMgr14getEEPROMStartEv>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	881b      	ldrh	r3, [r3, #0]
 800b0dc:	4413      	add	r3, r2
 800b0de:	4619      	mov	r1, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	1c9a      	adds	r2, r3, #2
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	47a0      	blx	r4
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	bf14      	ite	ne
 800b0f0:	2301      	movne	r3, #1
 800b0f2:	2300      	moveq	r3, #0
 800b0f4:	73fb      	strb	r3, [r7, #15]
            CEEPROMMgr::setupError(error, CEEPROMMgr::TEE_READ_ERROR);
 800b0f6:	7bfb      	ldrb	r3, [r7, #15]
 800b0f8:	2101      	movs	r1, #1
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f001 f850 	bl	800c1a0 <_ZN10CEEPROMMgr10setupErrorEbNS_12TEEPROMErrorE>
            if (CEEPROMMgr::eeError)
 800b100:	4b05      	ldr	r3, [pc, #20]	; (800b118 <_ZN10CEEPROMVarIaE7initVarEa+0x70>)
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d002      	beq.n	800b10e <_ZN10CEEPROMVarIaE7initVarEa+0x66>
                cache = initial;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	78fa      	ldrb	r2, [r7, #3]
 800b10c:	709a      	strb	r2, [r3, #2]
    }
 800b10e:	bf00      	nop
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bdb0      	pop	{r4, r5, r7, pc}
 800b116:	bf00      	nop
 800b118:	20000820 	.word	0x20000820

0800b11c <_ZN10CEEPROMVarIsE7initVarEs>:
    void initVar(T initial)
 800b11c:	b5b0      	push	{r4, r5, r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	460b      	mov	r3, r1
 800b126:	807b      	strh	r3, [r7, #2]
        if (CEEPROMMgr::getShouldInitialize())
 800b128:	f001 f810 	bl	800c14c <_ZN10CEEPROMMgr19getShouldInitializeEv>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d003      	beq.n	800b13a <_ZN10CEEPROMVarIsE7initVarEs+0x1e>
            cache = initial;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	887a      	ldrh	r2, [r7, #2]
 800b136:	805a      	strh	r2, [r3, #2]
    }
 800b138:	e023      	b.n	800b182 <_ZN10CEEPROMVarIsE7initVarEs+0x66>
            bool error = CEEPROMMgr::getEEPROMDriver()->readBlock((void*) (CEEPROMMgr::getEEPROMStart() + addressOffset), &cache, sizeof(T));
 800b13a:	f7ff fd13 	bl	800ab64 <_ZN10CEEPROMMgr15getEEPROMDriverEv>
 800b13e:	4605      	mov	r5, r0
 800b140:	682b      	ldr	r3, [r5, #0]
 800b142:	3304      	adds	r3, #4
 800b144:	681c      	ldr	r4, [r3, #0]
 800b146:	f7ff fd05 	bl	800ab54 <_ZN10CEEPROMMgr14getEEPROMStartEv>
 800b14a:	4602      	mov	r2, r0
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	881b      	ldrh	r3, [r3, #0]
 800b150:	4413      	add	r3, r2
 800b152:	4619      	mov	r1, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	1c9a      	adds	r2, r3, #2
 800b158:	2302      	movs	r3, #2
 800b15a:	4628      	mov	r0, r5
 800b15c:	47a0      	blx	r4
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	bf14      	ite	ne
 800b164:	2301      	movne	r3, #1
 800b166:	2300      	moveq	r3, #0
 800b168:	73fb      	strb	r3, [r7, #15]
            CEEPROMMgr::setupError(error, CEEPROMMgr::TEE_READ_ERROR);
 800b16a:	7bfb      	ldrb	r3, [r7, #15]
 800b16c:	2101      	movs	r1, #1
 800b16e:	4618      	mov	r0, r3
 800b170:	f001 f816 	bl	800c1a0 <_ZN10CEEPROMMgr10setupErrorEbNS_12TEEPROMErrorE>
            if (CEEPROMMgr::eeError)
 800b174:	4b05      	ldr	r3, [pc, #20]	; (800b18c <_ZN10CEEPROMVarIsE7initVarEs+0x70>)
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d002      	beq.n	800b182 <_ZN10CEEPROMVarIsE7initVarEs+0x66>
                cache = initial;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	887a      	ldrh	r2, [r7, #2]
 800b180:	805a      	strh	r2, [r3, #2]
    }
 800b182:	bf00      	nop
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bdb0      	pop	{r4, r5, r7, pc}
 800b18a:	bf00      	nop
 800b18c:	20000820 	.word	0x20000820

0800b190 <_ZN10CEEPROMVarIbE7initVarEb>:
    void initVar(T initial)
 800b190:	b5b0      	push	{r4, r5, r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	460b      	mov	r3, r1
 800b19a:	70fb      	strb	r3, [r7, #3]
        if (CEEPROMMgr::getShouldInitialize())
 800b19c:	f000 ffd6 	bl	800c14c <_ZN10CEEPROMMgr19getShouldInitializeEv>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d003      	beq.n	800b1ae <_ZN10CEEPROMVarIbE7initVarEb+0x1e>
            cache = initial;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	78fa      	ldrb	r2, [r7, #3]
 800b1aa:	709a      	strb	r2, [r3, #2]
    }
 800b1ac:	e023      	b.n	800b1f6 <_ZN10CEEPROMVarIbE7initVarEb+0x66>
            bool error = CEEPROMMgr::getEEPROMDriver()->readBlock((void*) (CEEPROMMgr::getEEPROMStart() + addressOffset), &cache, sizeof(T));
 800b1ae:	f7ff fcd9 	bl	800ab64 <_ZN10CEEPROMMgr15getEEPROMDriverEv>
 800b1b2:	4605      	mov	r5, r0
 800b1b4:	682b      	ldr	r3, [r5, #0]
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	681c      	ldr	r4, [r3, #0]
 800b1ba:	f7ff fccb 	bl	800ab54 <_ZN10CEEPROMMgr14getEEPROMStartEv>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	881b      	ldrh	r3, [r3, #0]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	1c9a      	adds	r2, r3, #2
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	47a0      	blx	r4
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	bf14      	ite	ne
 800b1d8:	2301      	movne	r3, #1
 800b1da:	2300      	moveq	r3, #0
 800b1dc:	73fb      	strb	r3, [r7, #15]
            CEEPROMMgr::setupError(error, CEEPROMMgr::TEE_READ_ERROR);
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
 800b1e0:	2101      	movs	r1, #1
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f000 ffdc 	bl	800c1a0 <_ZN10CEEPROMMgr10setupErrorEbNS_12TEEPROMErrorE>
            if (CEEPROMMgr::eeError)
 800b1e8:	4b05      	ldr	r3, [pc, #20]	; (800b200 <_ZN10CEEPROMVarIbE7initVarEb+0x70>)
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <_ZN10CEEPROMVarIbE7initVarEb+0x66>
                cache = initial;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	78fa      	ldrb	r2, [r7, #3]
 800b1f4:	709a      	strb	r2, [r3, #2]
    }
 800b1f6:	bf00      	nop
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bdb0      	pop	{r4, r5, r7, pc}
 800b1fe:	bf00      	nop
 800b200:	20000820 	.word	0x20000820

0800b204 <_ZN10CEEPROMVarIaEcvaEv>:
	}

	/**
	 * @brief Przeładowany operator rzutowania.
	 */
	operator T()
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
	{
		return getValue();
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 f81d 	bl	800b24c <_ZN10CEEPROMVarIaE8getValueEv>
 800b212:	4603      	mov	r3, r0
	}
 800b214:	4618      	mov	r0, r3
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <_ZN10CEEPROMVarIsEcvsEv>:
	operator T()
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
		return getValue();
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f81d 	bl	800b264 <_ZN10CEEPROMVarIsE8getValueEv>
 800b22a:	4603      	mov	r3, r0
	}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <_ZN10CEEPROMVarIbEcvbEv>:
	operator T()
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
		return getValue();
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f81d 	bl	800b27c <_ZN10CEEPROMVarIbE8getValueEv>
 800b242:	4603      	mov	r3, r0
	}
 800b244:	4618      	mov	r0, r3
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <_ZN10CEEPROMVarIaE8getValueEv>:
	T getValue()
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
		return cache;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f993 3002 	ldrsb.w	r3, [r3, #2]
	}
 800b25a:	4618      	mov	r0, r3
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	bc80      	pop	{r7}
 800b262:	4770      	bx	lr

0800b264 <_ZN10CEEPROMVarIsE8getValueEv>:
	T getValue()
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
		return cache;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	}
 800b272:	4618      	mov	r0, r3
 800b274:	370c      	adds	r7, #12
 800b276:	46bd      	mov	sp, r7
 800b278:	bc80      	pop	{r7}
 800b27a:	4770      	bx	lr

0800b27c <_ZN10CEEPROMVarIbE8getValueEv>:
	T getValue()
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
		return cache;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	789b      	ldrb	r3, [r3, #2]
	}
 800b288:	4618      	mov	r0, r3
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bc80      	pop	{r7}
 800b290:	4770      	bx	lr
	...

0800b294 <_ZN16CBacklightDriverD1Ev>:
#include <stdint.h>

/**
 * Klasa sterująca podświetleniem wyświetlacza.
 */
class CBacklightDriver: public IInterruptUpdatable
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	4a05      	ldr	r2, [pc, #20]	; (800b2b4 <_ZN16CBacklightDriverD1Ev+0x20>)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	601a      	str	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7ff fc67 	bl	800ab78 <_ZN19IInterruptUpdatableD1Ev>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	0801ca84 	.word	0x0801ca84

0800b2b8 <_ZN16CBacklightDriverD0Ev>:
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f7ff ffe7 	bl	800b294 <_ZN16CBacklightDriverD1Ev>
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f00a f988 	bl	80155dc <_ZdlPv>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <_ZN14CBootSignatureC1Em>:
const uint32_t CBootSignature::UNIQUE_ID_OFFSET = 0x1FF80050;
#else
#error Brak definicji procesora!
#endif

CBootSignature::CBootSignature(uint32_t appOffset)
 800b2d6:	b480      	push	{r7}
 800b2d8:	b083      	sub	sp, #12
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	6039      	str	r1, [r7, #0]
{
    m_appOffset = appOffset;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	601a      	str	r2, [r3, #0]
}
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bc80      	pop	{r7}
 800b2f0:	4770      	bx	lr
	...

0800b2f4 <_ZN8CContext12addUpdatableEP10IUpdatableb>:
#ifdef LOOPCOUNT
volatile uint32_t CContext::licz = 0;
#endif

void CContext::addUpdatable(IUpdatable *updatable, bool forceAlways)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	70fb      	strb	r3, [r7, #3]
    removeUpdatable(updatable, forceAlways);
 800b300:	78fb      	ldrb	r3, [r7, #3]
 800b302:	4619      	mov	r1, r3
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 f841 	bl	800b38c <_ZN8CContext15removeUpdatableEP10IUpdatableb>

    IUpdatable** updatables;
    int8_t maxUpdatables;

    if(forceAlways)
 800b30a:	78fb      	ldrb	r3, [r7, #3]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d004      	beq.n	800b31a <_ZN8CContext12addUpdatableEP10IUpdatableb+0x26>
    {
    	updatables = CContext::m_alwaysUpdatables;
 800b310:	4b1c      	ldr	r3, [pc, #112]	; (800b384 <_ZN8CContext12addUpdatableEP10IUpdatableb+0x90>)
 800b312:	60fb      	str	r3, [r7, #12]
    	maxUpdatables = CContext::MAX_ALWAYS_UPDATABLES;
 800b314:	2301      	movs	r3, #1
 800b316:	72fb      	strb	r3, [r7, #11]
 800b318:	e003      	b.n	800b322 <_ZN8CContext12addUpdatableEP10IUpdatableb+0x2e>
    }
    else
    {
    	updatables = CContext::m_updatables;
 800b31a:	4b1b      	ldr	r3, [pc, #108]	; (800b388 <_ZN8CContext12addUpdatableEP10IUpdatableb+0x94>)
 800b31c:	60fb      	str	r3, [r7, #12]
    	maxUpdatables = CContext::MAX_UPDATABLES;
 800b31e:	2310      	movs	r3, #16
 800b320:	72fb      	strb	r3, [r7, #11]
    }

	if (updatables[maxUpdatables - 1] == NULL)
 800b322:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b326:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b32a:	3b01      	subs	r3, #1
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	4413      	add	r3, r2
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d120      	bne.n	800b37a <_ZN8CContext12addUpdatableEP10IUpdatableb+0x86>
	{
		for (int8_t i = maxUpdatables - 1; i > 0; i--)
 800b338:	7afb      	ldrb	r3, [r7, #11]
 800b33a:	3b01      	subs	r3, #1
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	72bb      	strb	r3, [r7, #10]
 800b340:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800b344:	2b00      	cmp	r3, #0
 800b346:	dd15      	ble.n	800b374 <_ZN8CContext12addUpdatableEP10IUpdatableb+0x80>
		{
			updatables[i] = updatables[i - 1];
 800b348:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	441a      	add	r2, r3
 800b352:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800b356:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b35a:	3b01      	subs	r3, #1
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	68f9      	ldr	r1, [r7, #12]
 800b360:	440b      	add	r3, r1
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	6013      	str	r3, [r2, #0]
		for (int8_t i = maxUpdatables - 1; i > 0; i--)
 800b366:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	3b01      	subs	r3, #1
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	72bb      	strb	r3, [r7, #10]
 800b372:	e7e5      	b.n	800b340 <_ZN8CContext12addUpdatableEP10IUpdatableb+0x4c>
		}
		updatables[0] = updatable;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	601a      	str	r2, [r3, #0]
	}
}
 800b37a:	bf00      	nop
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	20000744 	.word	0x20000744
 800b388:	20000704 	.word	0x20000704

0800b38c <_ZN8CContext15removeUpdatableEP10IUpdatableb>:

void CContext::removeUpdatable(IUpdatable *updatable, bool fromAlways)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	460b      	mov	r3, r1
 800b396:	70fb      	strb	r3, [r7, #3]

    IUpdatable** updatables;
    int8_t maxUpdatables;

    if(fromAlways)
 800b398:	78fb      	ldrb	r3, [r7, #3]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d004      	beq.n	800b3a8 <_ZN8CContext15removeUpdatableEP10IUpdatableb+0x1c>
    {
    	updatables = CContext::m_alwaysUpdatables;
 800b39e:	4b26      	ldr	r3, [pc, #152]	; (800b438 <_ZN8CContext15removeUpdatableEP10IUpdatableb+0xac>)
 800b3a0:	60fb      	str	r3, [r7, #12]
    	maxUpdatables = CContext::MAX_ALWAYS_UPDATABLES;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	72fb      	strb	r3, [r7, #11]
 800b3a6:	e003      	b.n	800b3b0 <_ZN8CContext15removeUpdatableEP10IUpdatableb+0x24>
    }
    else
    {
    	updatables = CContext::m_updatables;
 800b3a8:	4b24      	ldr	r3, [pc, #144]	; (800b43c <_ZN8CContext15removeUpdatableEP10IUpdatableb+0xb0>)
 800b3aa:	60fb      	str	r3, [r7, #12]
    	maxUpdatables = CContext::MAX_UPDATABLES;
 800b3ac:	2310      	movs	r3, #16
 800b3ae:	72fb      	strb	r3, [r7, #11]
    }

	for (int8_t i = 0; i < maxUpdatables; i++)
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	72bb      	strb	r3, [r7, #10]
 800b3b4:	f997 200a 	ldrsb.w	r2, [r7, #10]
 800b3b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	da36      	bge.n	800b42e <_ZN8CContext15removeUpdatableEP10IUpdatableb+0xa2>
	{
		if (updatables[i] == updatable)
 800b3c0:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	68fa      	ldr	r2, [r7, #12]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d126      	bne.n	800b420 <_ZN8CContext15removeUpdatableEP10IUpdatableb+0x94>
		{
			for (int8_t j = i; j < maxUpdatables - 1; j++)
 800b3d2:	7abb      	ldrb	r3, [r7, #10]
 800b3d4:	727b      	strb	r3, [r7, #9]
 800b3d6:	f997 2009 	ldrsb.w	r2, [r7, #9]
 800b3da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	da13      	bge.n	800b40c <_ZN8CContext15removeUpdatableEP10IUpdatableb+0x80>
			{
				updatables[j] = updatables[j + 1];
 800b3e4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	68fa      	ldr	r2, [r7, #12]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	f997 2009 	ldrsb.w	r2, [r7, #9]
 800b3f2:	3201      	adds	r2, #1
 800b3f4:	0092      	lsls	r2, r2, #2
 800b3f6:	68f9      	ldr	r1, [r7, #12]
 800b3f8:	440a      	add	r2, r1
 800b3fa:	6812      	ldr	r2, [r2, #0]
 800b3fc:	601a      	str	r2, [r3, #0]
			for (int8_t j = i; j < maxUpdatables - 1; j++)
 800b3fe:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800b402:	b2db      	uxtb	r3, r3
 800b404:	3301      	adds	r3, #1
 800b406:	b2db      	uxtb	r3, r3
 800b408:	727b      	strb	r3, [r7, #9]
 800b40a:	e7e4      	b.n	800b3d6 <_ZN8CContext15removeUpdatableEP10IUpdatableb+0x4a>
			}
			updatables[maxUpdatables - 1] = NULL;
 800b40c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b410:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b414:	3b01      	subs	r3, #1
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	4413      	add	r3, r2
 800b41c:	2200      	movs	r2, #0
 800b41e:	601a      	str	r2, [r3, #0]
	for (int8_t i = 0; i < maxUpdatables; i++)
 800b420:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800b424:	b2db      	uxtb	r3, r3
 800b426:	3301      	adds	r3, #1
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	72bb      	strb	r3, [r7, #10]
 800b42c:	e7c2      	b.n	800b3b4 <_ZN8CContext15removeUpdatableEP10IUpdatableb+0x28>
		}
	}
}
 800b42e:	bf00      	nop
 800b430:	3714      	adds	r7, #20
 800b432:	46bd      	mov	sp, r7
 800b434:	bc80      	pop	{r7}
 800b436:	4770      	bx	lr
 800b438:	20000744 	.word	0x20000744
 800b43c:	20000704 	.word	0x20000704

0800b440 <_ZN8CContext11setKeyboardEP9CKeyboard>:

void CContext::setKeyboard(CKeyboard *keyboard)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
    m_keyboard = keyboard;
 800b448:	4a03      	ldr	r2, [pc, #12]	; (800b458 <_ZN8CContext11setKeyboardEP9CKeyboard+0x18>)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6013      	str	r3, [r2, #0]
}
 800b44e:	bf00      	nop
 800b450:	370c      	adds	r7, #12
 800b452:	46bd      	mov	sp, r7
 800b454:	bc80      	pop	{r7}
 800b456:	4770      	bx	lr
 800b458:	20000748 	.word	0x20000748

0800b45c <_ZN8CContext10showScreenEP7AScreen>:

void CContext::showScreen(AScreen *screen)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08a      	sub	sp, #40	; 0x28
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
    if (m_screenItemsCount == MAX_SCREENS)
 800b464:	4b88      	ldr	r3, [pc, #544]	; (800b688 <_ZN8CContext10showScreenEP7AScreen+0x22c>)
 800b466:	f993 3000 	ldrsb.w	r3, [r3]
 800b46a:	2b10      	cmp	r3, #16
 800b46c:	f000 8107 	beq.w	800b67e <_ZN8CContext10showScreenEP7AScreen+0x222>
    {
        return;
    }

    if (m_screenItemsCount > 0)
 800b470:	4b85      	ldr	r3, [pc, #532]	; (800b688 <_ZN8CContext10showScreenEP7AScreen+0x22c>)
 800b472:	f993 3000 	ldrsb.w	r3, [r3]
 800b476:	2b00      	cmp	r3, #0
 800b478:	dd13      	ble.n	800b4a2 <_ZN8CContext10showScreenEP7AScreen+0x46>
    {
        SScreenItem *screenPrev = &m_screenItems[m_screenItemsCount - 1];
 800b47a:	4b83      	ldr	r3, [pc, #524]	; (800b688 <_ZN8CContext10showScreenEP7AScreen+0x22c>)
 800b47c:	f993 3000 	ldrsb.w	r3, [r3]
 800b480:	3b01      	subs	r3, #1
 800b482:	00db      	lsls	r3, r3, #3
 800b484:	4a81      	ldr	r2, [pc, #516]	; (800b68c <_ZN8CContext10showScreenEP7AScreen+0x230>)
 800b486:	4413      	add	r3, r2
 800b488:	61fb      	str	r3, [r7, #28]
        screenPrev->screen->onPause();
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	330c      	adds	r3, #12
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	69fa      	ldr	r2, [r7, #28]
 800b496:	6812      	ldr	r2, [r2, #0]
 800b498:	4610      	mov	r0, r2
 800b49a:	4798      	blx	r3
        screenPrev->state = 1;
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	711a      	strb	r2, [r3, #4]
    }

    SScreenItem *screenItem = &m_screenItems[m_screenItemsCount];
 800b4a2:	4b79      	ldr	r3, [pc, #484]	; (800b688 <_ZN8CContext10showScreenEP7AScreen+0x22c>)
 800b4a4:	f993 3000 	ldrsb.w	r3, [r3]
 800b4a8:	00db      	lsls	r3, r3, #3
 800b4aa:	4a78      	ldr	r2, [pc, #480]	; (800b68c <_ZN8CContext10showScreenEP7AScreen+0x230>)
 800b4ac:	4413      	add	r3, r2
 800b4ae:	61bb      	str	r3, [r7, #24]
    m_screenItemsCount++;
 800b4b0:	4b75      	ldr	r3, [pc, #468]	; (800b688 <_ZN8CContext10showScreenEP7AScreen+0x22c>)
 800b4b2:	f993 3000 	ldrsb.w	r3, [r3]
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	b25a      	sxtb	r2, r3
 800b4be:	4b72      	ldr	r3, [pc, #456]	; (800b688 <_ZN8CContext10showScreenEP7AScreen+0x22c>)
 800b4c0:	701a      	strb	r2, [r3, #0]

    screenItem->screen = screen;
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	601a      	str	r2, [r3, #0]
    screenItem->state = 0;
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	711a      	strb	r2, [r3, #4]
    screenItem->finish = false;
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	715a      	strb	r2, [r3, #5]

    while (true)
    {
        for (int16_t i = 0; i < MAX_ALWAYS_UPDATABLES; i++)
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b4d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	dc14      	bgt.n	800b50a <_ZN8CContext10showScreenEP7AScreen+0xae>
        {
            IUpdatable *updatable = m_alwaysUpdatables[i];
 800b4e0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b4e4:	4a6a      	ldr	r2, [pc, #424]	; (800b690 <_ZN8CContext10showScreenEP7AScreen+0x234>)
 800b4e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4ea:	617b      	str	r3, [r7, #20]
            if (updatable != NULL)
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d004      	beq.n	800b4fc <_ZN8CContext10showScreenEP7AScreen+0xa0>
            {
                updatable->update();
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	6978      	ldr	r0, [r7, #20]
 800b4fa:	4798      	blx	r3
        for (int16_t i = 0; i < MAX_ALWAYS_UPDATABLES; i++)
 800b4fc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b500:	b29b      	uxth	r3, r3
 800b502:	3301      	adds	r3, #1
 800b504:	b29b      	uxth	r3, r3
 800b506:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b508:	e7e6      	b.n	800b4d8 <_ZN8CContext10showScreenEP7AScreen+0x7c>
            }
        }
        switch (screenItem->state)
 800b50a:	69bb      	ldr	r3, [r7, #24]
 800b50c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b510:	2b04      	cmp	r3, #4
 800b512:	d875      	bhi.n	800b600 <_ZN8CContext10showScreenEP7AScreen+0x1a4>
 800b514:	a201      	add	r2, pc, #4	; (adr r2, 800b51c <_ZN8CContext10showScreenEP7AScreen+0xc0>)
 800b516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b51a:	bf00      	nop
 800b51c:	0800b531 	.word	0x0800b531
 800b520:	0800b54b 	.word	0x0800b54b
 800b524:	0800b565 	.word	0x0800b565
 800b528:	0800b5d7 	.word	0x0800b5d7
 800b52c:	0800b5eb 	.word	0x0800b5eb
        {
            case 0:
                screen->onStart();
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	3304      	adds	r3, #4
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	4798      	blx	r3
                screenItem->state = 1;
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	2201      	movs	r2, #1
 800b540:	711a      	strb	r2, [r3, #4]
                m_reinit = false;
 800b542:	4b54      	ldr	r3, [pc, #336]	; (800b694 <_ZN8CContext10showScreenEP7AScreen+0x238>)
 800b544:	2200      	movs	r2, #0
 800b546:	701a      	strb	r2, [r3, #0]
            break;
 800b548:	e05a      	b.n	800b600 <_ZN8CContext10showScreenEP7AScreen+0x1a4>

            case 1:
#ifdef LOOPCOUNT
    	licz++;
#endif
                screen->onResume();
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	3308      	adds	r3, #8
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	4798      	blx	r3
                m_redraw = false;
 800b556:	4b50      	ldr	r3, [pc, #320]	; (800b698 <_ZN8CContext10showScreenEP7AScreen+0x23c>)
 800b558:	2200      	movs	r2, #0
 800b55a:	701a      	strb	r2, [r3, #0]
                screenItem->state = 2;
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	2202      	movs	r2, #2
 800b560:	711a      	strb	r2, [r3, #4]
            break;
 800b562:	e04d      	b.n	800b600 <_ZN8CContext10showScreenEP7AScreen+0x1a4>

            case 2:
                screen->update();
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	4610      	mov	r0, r2
 800b56e:	4798      	blx	r3
                for (int16_t i = 0; i < MAX_UPDATABLES; i++)
 800b570:	2300      	movs	r3, #0
 800b572:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b574:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b578:	2b0f      	cmp	r3, #15
 800b57a:	dc14      	bgt.n	800b5a6 <_ZN8CContext10showScreenEP7AScreen+0x14a>
                {
                    IUpdatable *updatable = m_updatables[i];
 800b57c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b580:	4a46      	ldr	r2, [pc, #280]	; (800b69c <_ZN8CContext10showScreenEP7AScreen+0x240>)
 800b582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b586:	613b      	str	r3, [r7, #16]
                    if (updatable != NULL)
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d004      	beq.n	800b598 <_ZN8CContext10showScreenEP7AScreen+0x13c>
                    {
                        updatable->update();
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6938      	ldr	r0, [r7, #16]
 800b596:	4798      	blx	r3
                for (int16_t i = 0; i < MAX_UPDATABLES; i++)
 800b598:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	3301      	adds	r3, #1
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b5a4:	e7e6      	b.n	800b574 <_ZN8CContext10showScreenEP7AScreen+0x118>
                    }
                }
                if (m_redraw)
 800b5a6:	4b3c      	ldr	r3, [pc, #240]	; (800b698 <_ZN8CContext10showScreenEP7AScreen+0x23c>)
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d003      	beq.n	800b5b6 <_ZN8CContext10showScreenEP7AScreen+0x15a>
                {
                    screenItem->state = 1;
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	711a      	strb	r2, [r3, #4]
                    break;
 800b5b4:	e024      	b.n	800b600 <_ZN8CContext10showScreenEP7AScreen+0x1a4>
                }
                if(m_reinit)
 800b5b6:	4b37      	ldr	r3, [pc, #220]	; (800b694 <_ZN8CContext10showScreenEP7AScreen+0x238>)
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d003      	beq.n	800b5c6 <_ZN8CContext10showScreenEP7AScreen+0x16a>
                {
                	screenItem->state = 0;
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	711a      	strb	r2, [r3, #4]
                	break;
 800b5c4:	e01c      	b.n	800b600 <_ZN8CContext10showScreenEP7AScreen+0x1a4>
                }
                if (screenItem->finish)
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	795b      	ldrb	r3, [r3, #5]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d017      	beq.n	800b5fe <_ZN8CContext10showScreenEP7AScreen+0x1a2>
                {
                    screenItem->state = 3;
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	2203      	movs	r2, #3
 800b5d2:	711a      	strb	r2, [r3, #4]
                    break;
 800b5d4:	e014      	b.n	800b600 <_ZN8CContext10showScreenEP7AScreen+0x1a4>
                }
            break;

            case 3:
                screen->onPause();
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	330c      	adds	r3, #12
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	4798      	blx	r3
                screenItem->state = 4;
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	2204      	movs	r2, #4
 800b5e6:	711a      	strb	r2, [r3, #4]
            break;
 800b5e8:	e00a      	b.n	800b600 <_ZN8CContext10showScreenEP7AScreen+0x1a4>

            case 4:
                screen->onStop();
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	3310      	adds	r3, #16
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	4798      	blx	r3
                screenItem->state = 5;
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	2205      	movs	r2, #5
 800b5fa:	711a      	strb	r2, [r3, #4]
            break;
 800b5fc:	e000      	b.n	800b600 <_ZN8CContext10showScreenEP7AScreen+0x1a4>
            break;
 800b5fe:	bf00      	nop
        }

        if (screenItem->state >= 5)
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b606:	2b04      	cmp	r3, #4
 800b608:	dc2b      	bgt.n	800b662 <_ZN8CContext10showScreenEP7AScreen+0x206>
        {
            break;
        }

        if (m_keyboard != NULL)
 800b60a:	4b25      	ldr	r3, [pc, #148]	; (800b6a0 <_ZN8CContext10showScreenEP7AScreen+0x244>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f43f af60 	beq.w	800b4d4 <_ZN8CContext10showScreenEP7AScreen+0x78>
        {
            m_keyboard->update();
 800b614:	4b22      	ldr	r3, [pc, #136]	; (800b6a0 <_ZN8CContext10showScreenEP7AScreen+0x244>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4618      	mov	r0, r3
 800b61a:	f002 f8af 	bl	800d77c <_ZN9CKeyboard6updateEv>

            for (int16_t i = 0; i < MAX_KEY_LISTENERS; i++)
 800b61e:	2300      	movs	r3, #0
 800b620:	847b      	strh	r3, [r7, #34]	; 0x22
 800b622:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b626:	2b0f      	cmp	r3, #15
 800b628:	dc15      	bgt.n	800b656 <_ZN8CContext10showScreenEP7AScreen+0x1fa>
            {
                IOnKeyListener *onKeyListener = m_onKeyListeners[i];
 800b62a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b62e:	4a1d      	ldr	r2, [pc, #116]	; (800b6a4 <_ZN8CContext10showScreenEP7AScreen+0x248>)
 800b630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b634:	60fb      	str	r3, [r7, #12]
                if (onKeyListener != NULL)
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d005      	beq.n	800b648 <_ZN8CContext10showScreenEP7AScreen+0x1ec>
                {
                    m_keyboard->callKeyEvents(onKeyListener);
 800b63c:	4b18      	ldr	r3, [pc, #96]	; (800b6a0 <_ZN8CContext10showScreenEP7AScreen+0x244>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	68f9      	ldr	r1, [r7, #12]
 800b642:	4618      	mov	r0, r3
 800b644:	f002 f989 	bl	800d95a <_ZN9CKeyboard13callKeyEventsEP14IOnKeyListener>
            for (int16_t i = 0; i < MAX_KEY_LISTENERS; i++)
 800b648:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	3301      	adds	r3, #1
 800b650:	b29b      	uxth	r3, r3
 800b652:	847b      	strh	r3, [r7, #34]	; 0x22
 800b654:	e7e5      	b.n	800b622 <_ZN8CContext10showScreenEP7AScreen+0x1c6>
                }
            }
            m_keyboard->clearKeyEvents();
 800b656:	4b12      	ldr	r3, [pc, #72]	; (800b6a0 <_ZN8CContext10showScreenEP7AScreen+0x244>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f002 f9c9 	bl	800d9f2 <_ZN9CKeyboard14clearKeyEventsEv>
        }
    }
 800b660:	e738      	b.n	800b4d4 <_ZN8CContext10showScreenEP7AScreen+0x78>
            break;
 800b662:	bf00      	nop

    m_screenItemsCount--;
 800b664:	4b08      	ldr	r3, [pc, #32]	; (800b688 <_ZN8CContext10showScreenEP7AScreen+0x22c>)
 800b666:	f993 3000 	ldrsb.w	r3, [r3]
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	3b01      	subs	r3, #1
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	b25a      	sxtb	r2, r3
 800b672:	4b05      	ldr	r3, [pc, #20]	; (800b688 <_ZN8CContext10showScreenEP7AScreen+0x22c>)
 800b674:	701a      	strb	r2, [r3, #0]
    screenItem->screen = NULL;
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	2200      	movs	r2, #0
 800b67a:	601a      	str	r2, [r3, #0]
 800b67c:	e000      	b.n	800b680 <_ZN8CContext10showScreenEP7AScreen+0x224>
        return;
 800b67e:	bf00      	nop
}
 800b680:	3728      	adds	r7, #40	; 0x28
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	200007d0 	.word	0x200007d0
 800b68c:	20000750 	.word	0x20000750
 800b690:	20000744 	.word	0x20000744
 800b694:	2000074d 	.word	0x2000074d
 800b698:	2000074c 	.word	0x2000074c
 800b69c:	20000704 	.word	0x20000704
 800b6a0:	20000748 	.word	0x20000748
 800b6a4:	200007d4 	.word	0x200007d4

0800b6a8 <_ZN8CContext12finishScreenEP7AScreen>:

void CContext::finishScreen(AScreen *screen)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
    if (m_screenItemsCount > 0)
 800b6b0:	4b1a      	ldr	r3, [pc, #104]	; (800b71c <_ZN8CContext12finishScreenEP7AScreen+0x74>)
 800b6b2:	f993 3000 	ldrsb.w	r3, [r3]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	dd2b      	ble.n	800b712 <_ZN8CContext12finishScreenEP7AScreen+0x6a>
    {
        if (screen == NULL)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d109      	bne.n	800b6d4 <_ZN8CContext12finishScreenEP7AScreen+0x2c>
        {
            m_screenItems[m_screenItemsCount - 1].finish = true;
 800b6c0:	4b16      	ldr	r3, [pc, #88]	; (800b71c <_ZN8CContext12finishScreenEP7AScreen+0x74>)
 800b6c2:	f993 3000 	ldrsb.w	r3, [r3]
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	4a15      	ldr	r2, [pc, #84]	; (800b720 <_ZN8CContext12finishScreenEP7AScreen+0x78>)
 800b6ca:	00db      	lsls	r3, r3, #3
 800b6cc:	4413      	add	r3, r2
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	715a      	strb	r2, [r3, #5]
                }
            }
        }

    }
}
 800b6d2:	e01e      	b.n	800b712 <_ZN8CContext12finishScreenEP7AScreen+0x6a>
            for (int8_t i = 0; i < m_screenItemsCount; i++)
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	73fb      	strb	r3, [r7, #15]
 800b6d8:	4b10      	ldr	r3, [pc, #64]	; (800b71c <_ZN8CContext12finishScreenEP7AScreen+0x74>)
 800b6da:	f993 3000 	ldrsb.w	r3, [r3]
 800b6de:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	da15      	bge.n	800b712 <_ZN8CContext12finishScreenEP7AScreen+0x6a>
                if (m_screenItems[i].screen == screen)
 800b6e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6ea:	4a0d      	ldr	r2, [pc, #52]	; (800b720 <_ZN8CContext12finishScreenEP7AScreen+0x78>)
 800b6ec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d106      	bne.n	800b704 <_ZN8CContext12finishScreenEP7AScreen+0x5c>
                    m_screenItems[i].finish = true;
 800b6f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6fa:	4a09      	ldr	r2, [pc, #36]	; (800b720 <_ZN8CContext12finishScreenEP7AScreen+0x78>)
 800b6fc:	00db      	lsls	r3, r3, #3
 800b6fe:	4413      	add	r3, r2
 800b700:	2201      	movs	r2, #1
 800b702:	715a      	strb	r2, [r3, #5]
            for (int8_t i = 0; i < m_screenItemsCount; i++)
 800b704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b708:	b2db      	uxtb	r3, r3
 800b70a:	3301      	adds	r3, #1
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	73fb      	strb	r3, [r7, #15]
 800b710:	e7e2      	b.n	800b6d8 <_ZN8CContext12finishScreenEP7AScreen+0x30>
}
 800b712:	bf00      	nop
 800b714:	3714      	adds	r7, #20
 800b716:	46bd      	mov	sp, r7
 800b718:	bc80      	pop	{r7}
 800b71a:	4770      	bx	lr
 800b71c:	200007d0 	.word	0x200007d0
 800b720:	20000750 	.word	0x20000750

0800b724 <_ZN8CContext6redrawEv>:
{
	m_reinit = true;
}

void CContext::redraw()
{
 800b724:	b480      	push	{r7}
 800b726:	af00      	add	r7, sp, #0
    m_redraw = true;
 800b728:	4b03      	ldr	r3, [pc, #12]	; (800b738 <_ZN8CContext6redrawEv+0x14>)
 800b72a:	2201      	movs	r2, #1
 800b72c:	701a      	strb	r2, [r3, #0]
}
 800b72e:	bf00      	nop
 800b730:	46bd      	mov	sp, r7
 800b732:	bc80      	pop	{r7}
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	2000074c 	.word	0x2000074c

0800b73c <_ZN8CContext21registerOnKeyListenerEP14IOnKeyListener>:

void CContext::registerOnKeyListener(IOnKeyListener* onKeyListener)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
    unregisterOnKeyListener(onKeyListener);
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 f825 	bl	800b794 <_ZN8CContext23unregisterOnKeyListenerEP14IOnKeyListener>
    if (m_onKeyListeners[MAX_KEY_LISTENERS - 1] == NULL)
 800b74a:	4b11      	ldr	r3, [pc, #68]	; (800b790 <_ZN8CContext21registerOnKeyListenerEP14IOnKeyListener+0x54>)
 800b74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d11a      	bne.n	800b788 <_ZN8CContext21registerOnKeyListenerEP14IOnKeyListener+0x4c>
    {
        for (int8_t i = MAX_KEY_LISTENERS - 1; i > 0; i--)
 800b752:	230f      	movs	r3, #15
 800b754:	73fb      	strb	r3, [r7, #15]
 800b756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	dd11      	ble.n	800b782 <_ZN8CContext21registerOnKeyListenerEP14IOnKeyListener+0x46>
        {
            m_onKeyListeners[i] = m_onKeyListeners[i - 1];
 800b75e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b762:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800b766:	3a01      	subs	r2, #1
 800b768:	4909      	ldr	r1, [pc, #36]	; (800b790 <_ZN8CContext21registerOnKeyListenerEP14IOnKeyListener+0x54>)
 800b76a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b76e:	4908      	ldr	r1, [pc, #32]	; (800b790 <_ZN8CContext21registerOnKeyListenerEP14IOnKeyListener+0x54>)
 800b770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int8_t i = MAX_KEY_LISTENERS - 1; i > 0; i--)
 800b774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	3b01      	subs	r3, #1
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	73fb      	strb	r3, [r7, #15]
 800b780:	e7e9      	b.n	800b756 <_ZN8CContext21registerOnKeyListenerEP14IOnKeyListener+0x1a>
        }
        m_onKeyListeners[0] = onKeyListener;
 800b782:	4a03      	ldr	r2, [pc, #12]	; (800b790 <_ZN8CContext21registerOnKeyListenerEP14IOnKeyListener+0x54>)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6013      	str	r3, [r2, #0]
    }
}
 800b788:	bf00      	nop
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	200007d4 	.word	0x200007d4

0800b794 <_ZN8CContext23unregisterOnKeyListenerEP14IOnKeyListener>:

void CContext::unregisterOnKeyListener(IOnKeyListener* onKeyListener)
{
 800b794:	b480      	push	{r7}
 800b796:	b085      	sub	sp, #20
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
    for (int8_t i = 0; i < MAX_KEY_LISTENERS; i++)
 800b79c:	2300      	movs	r3, #0
 800b79e:	73fb      	strb	r3, [r7, #15]
 800b7a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7a4:	2b0f      	cmp	r3, #15
 800b7a6:	dc29      	bgt.n	800b7fc <_ZN8CContext23unregisterOnKeyListenerEP14IOnKeyListener+0x68>
    {
        if (m_onKeyListeners[i] == onKeyListener)
 800b7a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7ac:	4a16      	ldr	r2, [pc, #88]	; (800b808 <_ZN8CContext23unregisterOnKeyListenerEP14IOnKeyListener+0x74>)
 800b7ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d11a      	bne.n	800b7ee <_ZN8CContext23unregisterOnKeyListenerEP14IOnKeyListener+0x5a>
        {
            for (int8_t j = i; j < MAX_KEY_LISTENERS - 1; j++)
 800b7b8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ba:	73bb      	strb	r3, [r7, #14]
 800b7bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7c0:	2b0e      	cmp	r3, #14
 800b7c2:	dc11      	bgt.n	800b7e8 <_ZN8CContext23unregisterOnKeyListenerEP14IOnKeyListener+0x54>
            {
                m_onKeyListeners[j] = m_onKeyListeners[j + 1];
 800b7c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7c8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800b7cc:	3201      	adds	r2, #1
 800b7ce:	490e      	ldr	r1, [pc, #56]	; (800b808 <_ZN8CContext23unregisterOnKeyListenerEP14IOnKeyListener+0x74>)
 800b7d0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b7d4:	490c      	ldr	r1, [pc, #48]	; (800b808 <_ZN8CContext23unregisterOnKeyListenerEP14IOnKeyListener+0x74>)
 800b7d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int8_t j = i; j < MAX_KEY_LISTENERS - 1; j++)
 800b7da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	73bb      	strb	r3, [r7, #14]
 800b7e6:	e7e9      	b.n	800b7bc <_ZN8CContext23unregisterOnKeyListenerEP14IOnKeyListener+0x28>
            }
            m_onKeyListeners[MAX_KEY_LISTENERS - 1] = NULL;
 800b7e8:	4b07      	ldr	r3, [pc, #28]	; (800b808 <_ZN8CContext23unregisterOnKeyListenerEP14IOnKeyListener+0x74>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	63da      	str	r2, [r3, #60]	; 0x3c
    for (int8_t i = 0; i < MAX_KEY_LISTENERS; i++)
 800b7ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	73fb      	strb	r3, [r7, #15]
 800b7fa:	e7d1      	b.n	800b7a0 <_ZN8CContext23unregisterOnKeyListenerEP14IOnKeyListener+0xc>
        }
    }
}
 800b7fc:	bf00      	nop
 800b7fe:	3714      	adds	r7, #20
 800b800:	46bd      	mov	sp, r7
 800b802:	bc80      	pop	{r7}
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	200007d4 	.word	0x200007d4

0800b80c <_ZN20CDamperBoolInterface4initEP14IBoolInterface>:
 */

#include "CDamperBoolInterface.h"

void CDamperBoolInterface::init(IBoolInterface* boolInterface)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
    m_boolInterface = boolInterface;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	683a      	ldr	r2, [r7, #0]
 800b81a:	605a      	str	r2, [r3, #4]
    m_timer.setCounterType(CTimer::COUNTER_CSEK);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	3308      	adds	r3, #8
 800b820:	2101      	movs	r1, #1
 800b822:	4618      	mov	r0, r3
 800b824:	f004 fdea 	bl	80103fc <_ZN6CTimer14setCounterTypeENS_4UnitE>
}
 800b828:	bf00      	nop
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <_ZN20CDamperBoolInterface4isOnEv>:

bool CDamperBoolInterface::isOn()
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
    if (m_timer.isZero())
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	3308      	adds	r3, #8
 800b83c:	4618      	mov	r0, r3
 800b83e:	f004 fe69 	bl	8010514 <_ZN6CTimer6isZeroEv>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d017      	beq.n	800b878 <_ZN20CDamperBoolInterface4isOnEv+0x48>
    {
        bool state = m_boolInterface->isOn();
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	6852      	ldr	r2, [r2, #4]
 800b854:	4610      	mov	r0, r2
 800b856:	4798      	blx	r3
 800b858:	4603      	mov	r3, r0
 800b85a:	73fb      	strb	r3, [r7, #15]
        if (m_state != state)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	7d1b      	ldrb	r3, [r3, #20]
 800b860:	7bfa      	ldrb	r2, [r7, #15]
 800b862:	429a      	cmp	r2, r3
 800b864:	d008      	beq.n	800b878 <_ZN20CDamperBoolInterface4isOnEv+0x48>
        {
            m_state = state;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	7bfa      	ldrb	r2, [r7, #15]
 800b86a:	751a      	strb	r2, [r3, #20]
            m_timer.start(MILLISECONDS / 10);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	3308      	adds	r3, #8
 800b870:	2102      	movs	r1, #2
 800b872:	4618      	mov	r0, r3
 800b874:	f004 fdd1 	bl	801041a <_ZN6CTimer5startEm>
        }
    }
    return m_state;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	7d1b      	ldrb	r3, [r3, #20]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <_ZN9CDeviceIDC1Em>:
 *      Author: krzysiek
 */

#include "CDeviceID.h"

CDeviceID::CDeviceID(uint32_t appOffset) :
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
        m_bootSignature(appOffset)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6839      	ldr	r1, [r7, #0]
 800b892:	4618      	mov	r0, r3
 800b894:	f7ff fd1f 	bl	800b2d6 <_ZN14CBootSignatureC1Em>
{
    m_appOffset = appOffset;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	683a      	ldr	r2, [r7, #0]
 800b89c:	60da      	str	r2, [r3, #12]
}
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <_ZN14IBoolInterfaceC1Ev>:
 */

#ifndef IBOOLINTERFACE
#define IBOOLINTERFACE

class IBoolInterface
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	4a04      	ldr	r2, [pc, #16]	; (800b8c4 <_ZN14IBoolInterfaceC1Ev+0x1c>)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	601a      	str	r2, [r3, #0]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bc80      	pop	{r7}
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	0801cac4 	.word	0x0801cac4

0800b8c8 <_ZN13CDigitalInputC1Ev>:
 *      Author: marmur
 */

#include "CDigitalInput.h"

CDigitalInput::CDigitalInput() :
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
        m_GPIOx(NULL), m_GPIO_Pin(0)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7ff ffe8 	bl	800b8a8 <_ZN14IBoolInterfaceC1Ev>
 800b8d8:	4a06      	ldr	r2, [pc, #24]	; (800b8f4 <_ZN13CDigitalInputC1Ev+0x2c>)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	601a      	str	r2, [r3, #0]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	605a      	str	r2, [r3, #4]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	811a      	strh	r2, [r3, #8]
{
}
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3708      	adds	r7, #8
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	0801cab8 	.word	0x0801cab8

0800b8f8 <_ZN13CDigitalInput4initEP12GPIO_TypeDeftab>:

void CDigitalInput::init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int8_t pushPull, bool invert)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b088      	sub	sp, #32
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	4611      	mov	r1, r2
 800b904:	461a      	mov	r2, r3
 800b906:	460b      	mov	r3, r1
 800b908:	80fb      	strh	r3, [r7, #6]
 800b90a:	4613      	mov	r3, r2
 800b90c:	717b      	strb	r3, [r7, #5]
    m_GPIOx = GPIOx;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	68ba      	ldr	r2, [r7, #8]
 800b912:	605a      	str	r2, [r3, #4]
    m_GPIO_Pin = GPIO_Pin;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	88fa      	ldrh	r2, [r7, #6]
 800b918:	811a      	strh	r2, [r3, #8]
    m_invert = invert;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b920:	729a      	strb	r2, [r3, #10]

    GPIO_InitTypeDef GPIO_InitStruct;

    GPIO_InitStruct.Pin = m_GPIO_Pin;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	891b      	ldrh	r3, [r3, #8]
 800b926:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b928:	2303      	movs	r3, #3
 800b92a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b92c:	2300      	movs	r3, #0
 800b92e:	617b      	str	r3, [r7, #20]

    if (pushPull < 0)
 800b930:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800b934:	2b00      	cmp	r3, #0
 800b936:	da01      	bge.n	800b93c <_ZN13CDigitalInput4initEP12GPIO_TypeDeftab+0x44>
        GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b938:	2302      	movs	r3, #2
 800b93a:	61bb      	str	r3, [r7, #24]
    if (pushPull == 0)
 800b93c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d101      	bne.n	800b948 <_ZN13CDigitalInput4initEP12GPIO_TypeDeftab+0x50>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b944:	2300      	movs	r3, #0
 800b946:	61bb      	str	r3, [r7, #24]
    if (pushPull > 0)
 800b948:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	dd01      	ble.n	800b954 <_ZN13CDigitalInput4initEP12GPIO_TypeDeftab+0x5c>
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b950:	2301      	movs	r3, #1
 800b952:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(m_GPIOx, &GPIO_InitStruct);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	f107 0210 	add.w	r2, r7, #16
 800b95c:	4611      	mov	r1, r2
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fc ff7a 	bl	8008858 <HAL_GPIO_Init>
}
 800b964:	bf00      	nop
 800b966:	3720      	adds	r7, #32
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <_ZN13CDigitalInput4isOnEv>:

bool CDigitalInput::isOn()
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
    return (HAL_GPIO_ReadPin(m_GPIOx, m_GPIO_Pin) == GPIO_PIN_SET) != m_invert;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	685a      	ldr	r2, [r3, #4]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	891b      	ldrh	r3, [r3, #8]
 800b97c:	4619      	mov	r1, r3
 800b97e:	4610      	mov	r0, r2
 800b980:	f7fd f84c 	bl	8008a1c <HAL_GPIO_ReadPin>
 800b984:	4603      	mov	r3, r0
 800b986:	2b01      	cmp	r3, #1
 800b988:	bf0c      	ite	eq
 800b98a:	2301      	moveq	r3, #1
 800b98c:	2300      	movne	r3, #0
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	461a      	mov	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	7a9b      	ldrb	r3, [r3, #10]
 800b996:	429a      	cmp	r2, r3
 800b998:	bf14      	ite	ne
 800b99a:	2301      	movne	r3, #1
 800b99c:	2300      	moveq	r3, #0
 800b99e:	b2db      	uxtb	r3, r3
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <_ZN25ITwoLogicalStatesHardware6turnOnEv>:
 */
class ITwoLogicalStatesHardware : public IBoolInterface
{
    public:
    
        void turnOn()
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
        {
            setState(true);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2101      	movs	r1, #1
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	4798      	blx	r3
        }
 800b9be:	bf00      	nop
 800b9c0:	3708      	adds	r7, #8
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <_ZN25ITwoLogicalStatesHardware7turnOffEv>:
    
        void turnOff()
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b082      	sub	sp, #8
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
        {
            setState(false);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	4798      	blx	r3
        }
 800b9dc:	bf00      	nop
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <_ZN7IBuzzerC1Ev>:
#ifndef IBUZZER_H_
#define IBUZZER_H_

#include <stdint.h>

class IBuzzer
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	4a04      	ldr	r2, [pc, #16]	; (800ba00 <_ZN7IBuzzerC1Ev+0x1c>)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	601a      	str	r2, [r3, #0]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bc80      	pop	{r7}
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	0801cafc 	.word	0x0801cafc

0800ba04 <_ZN18CDriverBuzzerAsyncC1Ev>:

#include "CDriverBuzzerAsync.h"

#include <string.h>

CDriverBuzzerAsync::CDriverBuzzerAsync() :
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
        m_output(NULL), m_interval(0)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7ff ffe8 	bl	800b9e4 <_ZN7IBuzzerC1Ev>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	3304      	adds	r3, #4
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7ff f8cd 	bl	800abb8 <_ZN19IInterruptUpdatableC1Ev>
 800ba1e:	4a0c      	ldr	r2, [pc, #48]	; (800ba50 <_ZN18CDriverBuzzerAsyncC1Ev+0x4c>)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	601a      	str	r2, [r3, #0]
 800ba24:	4a0b      	ldr	r2, [pc, #44]	; (800ba54 <_ZN18CDriverBuzzerAsyncC1Ev+0x50>)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	605a      	str	r2, [r3, #4]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	609a      	str	r2, [r3, #8]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	819a      	strh	r2, [r3, #12]
{
    memset(m_intervalQueue, 0, sizeof(m_intervalQueue));
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	3310      	adds	r3, #16
 800ba3a:	2208      	movs	r2, #8
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f00b fc5c 	bl	80172fc <memset>
}
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4618      	mov	r0, r3
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	0801cad0 	.word	0x0801cad0
 800ba54:	0801cae8 	.word	0x0801cae8

0800ba58 <_ZN18CDriverBuzzerAsync4initEP25ITwoLogicalStatesHardware>:

void CDriverBuzzerAsync::init(ITwoLogicalStatesHardware* output)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
    m_output = output;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	683a      	ldr	r2, [r7, #0]
 800ba66:	609a      	str	r2, [r3, #8]
}
 800ba68:	bf00      	nop
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bc80      	pop	{r7}
 800ba70:	4770      	bx	lr

0800ba72 <_ZN18CDriverBuzzerAsync4beepEt>:

void CDriverBuzzerAsync::beep(uint16_t milliseconds)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b082      	sub	sp, #8
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	807b      	strh	r3, [r7, #2]
    addInterval(milliseconds);
 800ba7e:	887b      	ldrh	r3, [r7, #2]
 800ba80:	4619      	mov	r1, r3
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f85c 	bl	800bb40 <_ZN18CDriverBuzzerAsync11addIntervalEt>
}
 800ba88:	bf00      	nop
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <_ZN18CDriverBuzzerAsync19updateFromInterruptEt>:

void CDriverBuzzerAsync::updateFromInterrupt(uint16_t updateFrequency)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	807b      	strh	r3, [r7, #2]
    if (m_output == NULL)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d043      	beq.n	800bb2c <_ZN18CDriverBuzzerAsync19updateFromInterruptEt+0x9c>
        return;

    int32_t interval = m_interval;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	899b      	ldrh	r3, [r3, #12]
 800baa8:	60fb      	str	r3, [r7, #12]

    if (interval != 0)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d026      	beq.n	800bafe <_ZN18CDriverBuzzerAsync19updateFromInterruptEt+0x6e>
    {
        interval -= 1000 / updateFrequency;
 800bab0:	887b      	ldrh	r3, [r7, #2]
 800bab2:	4a20      	ldr	r2, [pc, #128]	; (800bb34 <_ZN18CDriverBuzzerAsync19updateFromInterruptEt+0xa4>)
 800bab4:	fb92 f3f3 	sdiv	r3, r2, r3
 800bab8:	68fa      	ldr	r2, [r7, #12]
 800baba:	4413      	add	r3, r2
 800babc:	60fb      	str	r3, [r7, #12]

        if (interval <= 0)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	dc17      	bgt.n	800baf4 <_ZN18CDriverBuzzerAsync19updateFromInterruptEt+0x64>
        {
            if (m_output->isOn())
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	6892      	ldr	r2, [r2, #8]
 800bad0:	4610      	mov	r0, r2
 800bad2:	4798      	blx	r3
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00a      	beq.n	800baf0 <_ZN18CDriverBuzzerAsync19updateFromInterruptEt+0x60>
            {
                interval = m_intervalCopy / 2;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	89db      	ldrh	r3, [r3, #14]
 800bade:	085b      	lsrs	r3, r3, #1
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	60fb      	str	r3, [r7, #12]
                m_output->turnOff();
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	4618      	mov	r0, r3
 800baea:	f7ff ff6c 	bl	800b9c6 <_ZN25ITwoLogicalStatesHardware7turnOffEv>
 800baee:	e001      	b.n	800baf4 <_ZN18CDriverBuzzerAsync19updateFromInterruptEt+0x64>
            }
            else
            {
                interval = 0;
 800baf0:	2300      	movs	r3, #0
 800baf2:	60fb      	str	r3, [r7, #12]
            }
        }

        m_interval = interval;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	819a      	strh	r2, [r3, #12]
 800bafc:	e017      	b.n	800bb2e <_ZN18CDriverBuzzerAsync19updateFromInterruptEt+0x9e>
    }
    else
    {
        interval = m_intervalQueue[0];
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	8a1b      	ldrh	r3, [r3, #16]
 800bb02:	60fb      	str	r3, [r7, #12]
        if (interval != 0)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d011      	beq.n	800bb2e <_ZN18CDriverBuzzerAsync19updateFromInterruptEt+0x9e>
        {
            moveIntervals();
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f839 	bl	800bb82 <_ZN18CDriverBuzzerAsync13moveIntervalsEv>

            m_interval = interval;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	b29a      	uxth	r2, r3
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	819a      	strh	r2, [r3, #12]
            m_intervalCopy = interval;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	81da      	strh	r2, [r3, #14]
            m_output->turnOn();
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7ff ff3f 	bl	800b9a8 <_ZN25ITwoLogicalStatesHardware6turnOnEv>
 800bb2a:	e000      	b.n	800bb2e <_ZN18CDriverBuzzerAsync19updateFromInterruptEt+0x9e>
        return;
 800bb2c:	bf00      	nop
        }
    }
}
 800bb2e:	3710      	adds	r7, #16
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	fffffc18 	.word	0xfffffc18

0800bb38 <_ZThn4_N18CDriverBuzzerAsync19updateFromInterruptEt>:

public:
    CDriverBuzzerAsync();
    void init(ITwoLogicalStatesHardware *output);
    void beep(uint16_t milliseconds);
    void updateFromInterrupt(uint16_t updateFrequency);
 800bb38:	f1a0 0004 	sub.w	r0, r0, #4
 800bb3c:	f7ff bfa8 	b.w	800ba90 <_ZN18CDriverBuzzerAsync19updateFromInterruptEt>

0800bb40 <_ZN18CDriverBuzzerAsync11addIntervalEt>:

void CDriverBuzzerAsync::addInterval(uint16_t interval)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	460b      	mov	r3, r1
 800bb4a:	807b      	strh	r3, [r7, #2]
    for (uint8_t i = 0; i < QUEUE_SIZE; i++)
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	73fb      	strb	r3, [r7, #15]
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
 800bb52:	2b03      	cmp	r3, #3
 800bb54:	dc11      	bgt.n	800bb7a <_ZN18CDriverBuzzerAsync11addIntervalEt+0x3a>
    {
        if (m_intervalQueue[i] == 0)
 800bb56:	7bfa      	ldrb	r2, [r7, #15]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	3208      	adds	r2, #8
 800bb5c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d106      	bne.n	800bb72 <_ZN18CDriverBuzzerAsync11addIntervalEt+0x32>
        {
            m_intervalQueue[i] = interval;
 800bb64:	7bfa      	ldrb	r2, [r7, #15]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	3208      	adds	r2, #8
 800bb6a:	8879      	ldrh	r1, [r7, #2]
 800bb6c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            return;
 800bb70:	e003      	b.n	800bb7a <_ZN18CDriverBuzzerAsync11addIntervalEt+0x3a>
    for (uint8_t i = 0; i < QUEUE_SIZE; i++)
 800bb72:	7bfb      	ldrb	r3, [r7, #15]
 800bb74:	3301      	adds	r3, #1
 800bb76:	73fb      	strb	r3, [r7, #15]
 800bb78:	e7ea      	b.n	800bb50 <_ZN18CDriverBuzzerAsync11addIntervalEt+0x10>
        }
    }
}
 800bb7a:	3714      	adds	r7, #20
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bc80      	pop	{r7}
 800bb80:	4770      	bx	lr

0800bb82 <_ZN18CDriverBuzzerAsync13moveIntervalsEv>:

void CDriverBuzzerAsync::moveIntervals()
{
 800bb82:	b480      	push	{r7}
 800bb84:	b085      	sub	sp, #20
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 1; i < QUEUE_SIZE; i++)
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	73fb      	strb	r3, [r7, #15]
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
 800bb90:	2b03      	cmp	r3, #3
 800bb92:	dc0e      	bgt.n	800bbb2 <_ZN18CDriverBuzzerAsync13moveIntervalsEv+0x30>
        m_intervalQueue[i - 1] = m_intervalQueue[i];
 800bb94:	7bfb      	ldrb	r3, [r7, #15]
 800bb96:	1e5a      	subs	r2, r3, #1
 800bb98:	7bf9      	ldrb	r1, [r7, #15]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	3108      	adds	r1, #8
 800bb9e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	3208      	adds	r2, #8
 800bba6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (uint8_t i = 1; i < QUEUE_SIZE; i++)
 800bbaa:	7bfb      	ldrb	r3, [r7, #15]
 800bbac:	3301      	adds	r3, #1
 800bbae:	73fb      	strb	r3, [r7, #15]
 800bbb0:	e7ed      	b.n	800bb8e <_ZN18CDriverBuzzerAsync13moveIntervalsEv+0xc>
    m_intervalQueue[QUEUE_SIZE - 1] = 0;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	82da      	strh	r2, [r3, #22]
}
 800bbb8:	bf00      	nop
 800bbba:	3714      	adds	r7, #20
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bc80      	pop	{r7}
 800bbc0:	4770      	bx	lr
	...

0800bbc4 <_ZN18CDriverBuzzerAsyncD1Ev>:
class CDriverBuzzerAsync: public IBuzzer, public IInterruptUpdatable
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	4a07      	ldr	r2, [pc, #28]	; (800bbec <_ZN18CDriverBuzzerAsyncD1Ev+0x28>)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	601a      	str	r2, [r3, #0]
 800bbd2:	4a07      	ldr	r2, [pc, #28]	; (800bbf0 <_ZN18CDriverBuzzerAsyncD1Ev+0x2c>)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	605a      	str	r2, [r3, #4]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	3304      	adds	r3, #4
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7fe ffcb 	bl	800ab78 <_ZN19IInterruptUpdatableD1Ev>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	0801cad0 	.word	0x0801cad0
 800bbf0:	0801cae8 	.word	0x0801cae8

0800bbf4 <_ZThn4_N18CDriverBuzzerAsyncD1Ev>:
 800bbf4:	f1a0 0004 	sub.w	r0, r0, #4
 800bbf8:	e7e4      	b.n	800bbc4 <_ZN18CDriverBuzzerAsyncD1Ev>
 800bbfa:	bf00      	nop

0800bbfc <_ZN18CDriverBuzzerAsyncD0Ev>:
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7ff ffdd 	bl	800bbc4 <_ZN18CDriverBuzzerAsyncD1Ev>
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f009 fce6 	bl	80155dc <_ZdlPv>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4618      	mov	r0, r3
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <_ZThn4_N18CDriverBuzzerAsyncD0Ev>:
 800bc1a:	f1a0 0004 	sub.w	r0, r0, #4
 800bc1e:	e7ed      	b.n	800bbfc <_ZN18CDriverBuzzerAsyncD0Ev>

0800bc20 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt>:
#include "driverI2C.h"

//------------------------------------------------------------------------------------------------------------------------
void CDriverI2C::init(TI2CInitParams * paramI2c, uint16_t pageSize)
//------------------------------------------------------------------------------------------------------------------------
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b08c      	sub	sp, #48	; 0x30
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	80fb      	strh	r3, [r7, #6]
#ifdef DEF_HAL_F1
	__HAL_RCC_DMA1_CLK_ENABLE();
 800bc2e:	4a89      	ldr	r2, [pc, #548]	; (800be54 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x234>)
 800bc30:	4b88      	ldr	r3, [pc, #544]	; (800be54 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x234>)
 800bc32:	695b      	ldr	r3, [r3, #20]
 800bc34:	f043 0301 	orr.w	r3, r3, #1
 800bc38:	6153      	str	r3, [r2, #20]
 800bc3a:	4b86      	ldr	r3, [pc, #536]	; (800be54 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x234>)
 800bc3c:	695b      	ldr	r3, [r3, #20]
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	61bb      	str	r3, [r7, #24]
 800bc44:	69bb      	ldr	r3, [r7, #24]

	HAL_NVIC_SetPriority(paramI2c->DMATxIRQ, 0, 0);
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	2100      	movs	r1, #0
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7fc fc2f 	bl	80084b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(paramI2c->DMATxIRQ);
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fc fc5d 	bl	800851c <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(paramI2c->DMARxIRQ, 0, 0);
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 800bc68:	2200      	movs	r2, #0
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7fc fc21 	bl	80084b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(paramI2c->DMARxIRQ);
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7fc fc4f 	bl	800851c <HAL_NVIC_EnableIRQ>

    if (paramI2c->I2Cx == I2C1)
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a75      	ldr	r2, [pc, #468]	; (800be58 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x238>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d124      	bne.n	800bcd2 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0xb2>
    {
        __I2C1_CLK_ENABLE();
 800bc88:	4a72      	ldr	r2, [pc, #456]	; (800be54 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x234>)
 800bc8a:	4b72      	ldr	r3, [pc, #456]	; (800be54 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x234>)
 800bc8c:	69db      	ldr	r3, [r3, #28]
 800bc8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc92:	61d3      	str	r3, [r2, #28]
 800bc94:	4b6f      	ldr	r3, [pc, #444]	; (800be54 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x234>)
 800bc96:	69db      	ldr	r3, [r3, #28]
 800bc98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc9c:	617b      	str	r3, [r7, #20]
 800bc9e:	697b      	ldr	r3, [r7, #20]

        if (paramI2c->SCKPort == GPIOB && paramI2c->SCKPin == GPIO_PIN_8)
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	69db      	ldr	r3, [r3, #28]
 800bca4:	4a6d      	ldr	r2, [pc, #436]	; (800be5c <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x23c>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d124      	bne.n	800bcf4 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0xd4>
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	699b      	ldr	r3, [r3, #24]
 800bcae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcb2:	d11f      	bne.n	800bcf4 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0xd4>
        {
            __HAL_AFIO_REMAP_I2C1_ENABLE();
 800bcb4:	4b6a      	ldr	r3, [pc, #424]	; (800be60 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x240>)
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcbc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800bcc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc4:	f043 0302 	orr.w	r3, r3, #2
 800bcc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcca:	4a65      	ldr	r2, [pc, #404]	; (800be60 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x240>)
 800bccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcce:	6053      	str	r3, [r2, #4]
 800bcd0:	e010      	b.n	800bcf4 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0xd4>
        }
    }
    else if (paramI2c->I2Cx == I2C2)
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a63      	ldr	r2, [pc, #396]	; (800be64 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x244>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d10b      	bne.n	800bcf4 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0xd4>
    {
        __I2C2_CLK_ENABLE();
 800bcdc:	4a5d      	ldr	r2, [pc, #372]	; (800be54 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x234>)
 800bcde:	4b5d      	ldr	r3, [pc, #372]	; (800be54 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x234>)
 800bce0:	69db      	ldr	r3, [r3, #28]
 800bce2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bce6:	61d3      	str	r3, [r2, #28]
 800bce8:	4b5a      	ldr	r3, [pc, #360]	; (800be54 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x234>)
 800bcea:	69db      	ldr	r3, [r3, #28]
 800bcec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bcf0:	613b      	str	r3, [r7, #16]
 800bcf2:	693b      	ldr	r3, [r7, #16]
    }
#endif

    __I2C1_FORCE_RESET();
 800bcf4:	4a57      	ldr	r2, [pc, #348]	; (800be54 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x234>)
 800bcf6:	4b57      	ldr	r3, [pc, #348]	; (800be54 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x234>)
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bcfe:	6113      	str	r3, [r2, #16]
    __I2C1_RELEASE_RESET();
 800bd00:	4a54      	ldr	r2, [pc, #336]	; (800be54 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x234>)
 800bd02:	4b54      	ldr	r3, [pc, #336]	; (800be54 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt+0x234>)
 800bd04:	691b      	ldr	r3, [r3, #16]
 800bd06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bd0a:	6113      	str	r3, [r2, #16]

    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bd0c:	2312      	movs	r3, #18
 800bd0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bd10:	2301      	movs	r3, #1
 800bd12:	627b      	str	r3, [r7, #36]	; 0x24

#ifdef DEF_HAL_F4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
#else
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800bd14:	2302      	movs	r3, #2
 800bd16:	62bb      	str	r3, [r7, #40]	; 0x28

#if defined DEF_HAL_F2 || defined DEF_HAL_F4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1; // dla GPIO_AF4_I2C2 i GPIO_AF4_I2C3 jest ta sama wartość
#endif

    GPIO_InitStruct.Pin = paramI2c->SDAPin;
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	691b      	ldr	r3, [r3, #16]
 800bd1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(paramI2c->SDAPort, &GPIO_InitStruct);
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	695b      	ldr	r3, [r3, #20]
 800bd22:	f107 021c 	add.w	r2, r7, #28
 800bd26:	4611      	mov	r1, r2
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fc fd95 	bl	8008858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin =  paramI2c->SCKPin;
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	699b      	ldr	r3, [r3, #24]
 800bd32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(paramI2c->SCKPort, &GPIO_InitStruct);
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	69db      	ldr	r3, [r3, #28]
 800bd38:	f107 021c 	add.w	r2, r7, #28
 800bd3c:	4611      	mov	r1, r2
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fc fd8a 	bl	8008858 <HAL_GPIO_Init>
    {
        __I2C3_CLK_ENABLE();
    }
#endif

    hi2c.Instance = paramI2c->I2Cx;
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	601a      	str	r2, [r3, #0]
    hi2c.Init.ClockSpeed = paramI2c->ClockSpeed;
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	685a      	ldr	r2, [r3, #4]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	605a      	str	r2, [r3, #4]
    hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2200      	movs	r2, #0
 800bd58:	609a      	str	r2, [r3, #8]
    hi2c.Init.OwnAddress1 = 0;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	60da      	str	r2, [r3, #12]
    hi2c.Init.AddressingMode = paramI2c->AddressingMode;
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	68da      	ldr	r2, [r3, #12]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	611a      	str	r2, [r3, #16]
    hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	615a      	str	r2, [r3, #20]
    hi2c.Init.OwnAddress2 = 0;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2200      	movs	r2, #0
 800bd72:	619a      	str	r2, [r3, #24]
    hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2200      	movs	r2, #0
 800bd78:	61da      	str	r2, [r3, #28]
    hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	621a      	str	r2, [r3, #32]
    HAL_I2C_Init(&hi2c);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7fc ffde 	bl	8008d44 <HAL_I2C_Init>

    setAddrLen(1);
 800bd88:	2101      	movs	r1, #1
 800bd8a:	68f8      	ldr	r0, [r7, #12]
 800bd8c:	f000 f86c 	bl	800be68 <_ZN10CDriverI2C10setAddrLenEh>
    m_pageSize = pageSize;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	88fa      	ldrh	r2, [r7, #6]
 800bd94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    m_HALtimeout = 3;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2203      	movs	r2, #3
 800bd9c:	659a      	str	r2, [r3, #88]	; 0x58

#ifdef DEF_HAL_F1
    m_dma_RX.Instance = paramI2c->DMARx;
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	6a1a      	ldr	r2, [r3, #32]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	65da      	str	r2, [r3, #92]	; 0x5c
    m_dma_RX.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	661a      	str	r2, [r3, #96]	; 0x60
    m_dma_RX.Init.PeriphInc = DMA_PINC_DISABLE;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	665a      	str	r2, [r3, #100]	; 0x64
    m_dma_RX.Init.MemInc = DMA_MINC_ENABLE;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2280      	movs	r2, #128	; 0x80
 800bdb6:	669a      	str	r2, [r3, #104]	; 0x68
    m_dma_RX.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	66da      	str	r2, [r3, #108]	; 0x6c
    m_dma_RX.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	671a      	str	r2, [r3, #112]	; 0x70
    m_dma_RX.Init.Mode = DMA_NORMAL;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	675a      	str	r2, [r3, #116]	; 0x74
    m_dma_RX.Init.Priority = DMA_PRIORITY_LOW;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	679a      	str	r2, [r3, #120]	; 0x78
    HAL_DMA_Init(&m_dma_RX);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	335c      	adds	r3, #92	; 0x5c
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fc fbe5 	bl	80085a4 <HAL_DMA_Init>

    __HAL_LINKDMA(&hi2c, hdmarx, m_dma_RX);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	639a      	str	r2, [r3, #56]	; 0x38
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    m_dma_TX.Instance = paramI2c->DMATx;
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    m_dma_TX.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2210      	movs	r2, #16
 800bdfa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    m_dma_TX.Init.PeriphInc = DMA_PINC_DISABLE;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2200      	movs	r2, #0
 800be02:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    m_dma_TX.Init.MemInc = DMA_MINC_ENABLE;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2280      	movs	r2, #128	; 0x80
 800be0a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    m_dma_TX.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2200      	movs	r2, #0
 800be12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    m_dma_TX.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    m_dma_TX.Init.Mode = DMA_NORMAL;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2200      	movs	r2, #0
 800be22:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    m_dma_TX.Init.Priority = DMA_PRIORITY_LOW;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2200      	movs	r2, #0
 800be2a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    HAL_DMA_Init(&m_dma_TX);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	33a0      	adds	r3, #160	; 0xa0
 800be32:	4618      	mov	r0, r3
 800be34:	f7fc fbb6 	bl	80085a4 <HAL_DMA_Init>

    __HAL_LINKDMA(&hi2c, hdmatx, m_dma_TX);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	635a      	str	r2, [r3, #52]	; 0x34
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
#endif
}
 800be4a:	bf00      	nop
 800be4c:	3730      	adds	r7, #48	; 0x30
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	40021000 	.word	0x40021000
 800be58:	40005400 	.word	0x40005400
 800be5c:	40010c00 	.word	0x40010c00
 800be60:	40010000 	.word	0x40010000
 800be64:	40005800 	.word	0x40005800

0800be68 <_ZN10CDriverI2C10setAddrLenEh>:

//------------------------------------------------------------------------------------------------------------------------
void CDriverI2C::setAddrLen(uint8_t addrLen)
//------------------------------------------------------------------------------------------------------------------------
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	460b      	mov	r3, r1
 800be72:	70fb      	strb	r3, [r7, #3]
	if(addrLen == 1)
 800be74:	78fb      	ldrb	r3, [r7, #3]
 800be76:	2b01      	cmp	r3, #1
 800be78:	d104      	bne.n	800be84 <_ZN10CDriverI2C10setAddrLenEh+0x1c>
	{
		m_internalAdressLenght = I2C_MEMADD_SIZE_8BIT;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2201      	movs	r2, #1
 800be7e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	}
	else
	{
		m_internalAdressLenght = I2C_MEMADD_SIZE_16BIT;
	}
}
 800be82:	e003      	b.n	800be8c <_ZN10CDriverI2C10setAddrLenEh+0x24>
		m_internalAdressLenght = I2C_MEMADD_SIZE_16BIT;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2210      	movs	r2, #16
 800be88:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
}
 800be8c:	bf00      	nop
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	bc80      	pop	{r7}
 800be94:	4770      	bx	lr

0800be96 <_ZN10CDriverI2C9writeByteEhth>:
}

//------------------------------------------------------------------------------------------------------------------------
uint32_t CDriverI2C::writeByte(uint8_t slaveAddressWrite, uint16_t address, uint8_t data)
//------------------------------------------------------------------------------------------------------------------------
{
 800be96:	b590      	push	{r4, r7, lr}
 800be98:	b087      	sub	sp, #28
 800be9a:	af02      	add	r7, sp, #8
 800be9c:	6078      	str	r0, [r7, #4]
 800be9e:	4608      	mov	r0, r1
 800bea0:	4611      	mov	r1, r2
 800bea2:	461a      	mov	r2, r3
 800bea4:	4603      	mov	r3, r0
 800bea6:	70fb      	strb	r3, [r7, #3]
 800bea8:	460b      	mov	r3, r1
 800beaa:	803b      	strh	r3, [r7, #0]
 800beac:	4613      	mov	r3, r2
 800beae:	70bb      	strb	r3, [r7, #2]
#ifdef DEF_HAL_F1
    HAL_StatusTypeDef status = HAL_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write_DMA(&hi2c , (uint16_t)slaveAddressWrite, address, m_internalAdressLenght, &data, 1);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	78fb      	ldrb	r3, [r7, #3]
 800beb8:	b299      	uxth	r1, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800bec0:	b29c      	uxth	r4, r3
 800bec2:	883a      	ldrh	r2, [r7, #0]
 800bec4:	2301      	movs	r3, #1
 800bec6:	9301      	str	r3, [sp, #4]
 800bec8:	1cbb      	adds	r3, r7, #2
 800beca:	9300      	str	r3, [sp, #0]
 800becc:	4623      	mov	r3, r4
 800bece:	f7fc ffdd 	bl	8008e8c <HAL_I2C_Mem_Write_DMA>
 800bed2:	4603      	mov	r3, r0
 800bed4:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 800bed6:	7bfb      	ldrb	r3, [r7, #15]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d001      	beq.n	800bee0 <_ZN10CDriverI2C9writeByteEhth+0x4a>
    {
        return status;
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
 800bede:	e015      	b.n	800bf0c <_ZN10CDriverI2C9writeByteEhth+0x76>
    }

	while (HAL_I2C_GetState(&hi2c) != HAL_I2C_STATE_READY);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fd fa81 	bl	80093ea <HAL_I2C_GetState>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b20      	cmp	r3, #32
 800beec:	bf14      	ite	ne
 800beee:	2301      	movne	r3, #1
 800bef0:	2300      	moveq	r3, #0
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d000      	beq.n	800befa <_ZN10CDriverI2C9writeByteEhth+0x64>
 800bef8:	e7f2      	b.n	800bee0 <_ZN10CDriverI2C9writeByteEhth+0x4a>

    return HAL_I2C_IsDeviceReady(&hi2c, slaveAddressWrite, 150, m_HALtimeout);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	78fb      	ldrb	r3, [r7, #3]
 800befe:	b299      	uxth	r1, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf04:	2296      	movs	r2, #150	; 0x96
 800bf06:	f7fd f927 	bl	8009158 <HAL_I2C_IsDeviceReady>
 800bf0a:	4603      	mov	r3, r0
		return status;
	}

	return HAL_I2C_IsDeviceReady(&hi2c, slaveAddressWrite, 150, m_HALtimeout);
#endif
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3714      	adds	r7, #20
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd90      	pop	{r4, r7, pc}

0800bf14 <_ZN10CDriverI2C8readByteEhtPh>:

//------------------------------------------------------------------------------------------------------------------------
uint32_t CDriverI2C::readByte(uint8_t slaveAddressRead, uint16_t address, uint8_t* data)
//------------------------------------------------------------------------------------------------------------------------
{
 800bf14:	b590      	push	{r4, r7, lr}
 800bf16:	b089      	sub	sp, #36	; 0x24
 800bf18:	af02      	add	r7, sp, #8
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	607b      	str	r3, [r7, #4]
 800bf1e:	460b      	mov	r3, r1
 800bf20:	72fb      	strb	r3, [r7, #11]
 800bf22:	4613      	mov	r3, r2
 800bf24:	813b      	strh	r3, [r7, #8]
#ifdef DEF_HAL_F1
    HAL_StatusTypeDef status = HAL_OK;
 800bf26:	2300      	movs	r3, #0
 800bf28:	75fb      	strb	r3, [r7, #23]
	status = HAL_I2C_Mem_Read_DMA(&hi2c, slaveAddressRead, address, m_internalAdressLenght, data, 1);
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	7afb      	ldrb	r3, [r7, #11]
 800bf2e:	b299      	uxth	r1, r3
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800bf36:	b29c      	uxth	r4, r3
 800bf38:	893a      	ldrh	r2, [r7, #8]
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	9301      	str	r3, [sp, #4]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	4623      	mov	r3, r4
 800bf44:	f7fd f842 	bl	8008fcc <HAL_I2C_Mem_Read_DMA>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 800bf4c:	7dfb      	ldrb	r3, [r7, #23]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d001      	beq.n	800bf56 <_ZN10CDriverI2C8readByteEhtPh+0x42>
    {
        return status;
 800bf52:	7dfb      	ldrb	r3, [r7, #23]
 800bf54:	e015      	b.n	800bf82 <_ZN10CDriverI2C8readByteEhtPh+0x6e>
    }

	while (HAL_I2C_GetState(&hi2c) != HAL_I2C_STATE_READY);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7fd fa46 	bl	80093ea <HAL_I2C_GetState>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b20      	cmp	r3, #32
 800bf62:	bf14      	ite	ne
 800bf64:	2301      	movne	r3, #1
 800bf66:	2300      	moveq	r3, #0
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d000      	beq.n	800bf70 <_ZN10CDriverI2C8readByteEhtPh+0x5c>
 800bf6e:	e7f2      	b.n	800bf56 <_ZN10CDriverI2C8readByteEhtPh+0x42>

	return HAL_I2C_IsDeviceReady(&hi2c, slaveAddressRead, 150, m_HALtimeout);
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	7afb      	ldrb	r3, [r7, #11]
 800bf74:	b299      	uxth	r1, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf7a:	2296      	movs	r2, #150	; 0x96
 800bf7c:	f7fd f8ec 	bl	8009158 <HAL_I2C_IsDeviceReady>
 800bf80:	4603      	mov	r3, r0
#else
	return HAL_I2C_Mem_Read(&hi2c, slaveAddressRead, address, m_internalAdressLenght, data, 1, m_HALtimeout);
#endif
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	371c      	adds	r7, #28
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd90      	pop	{r4, r7, pc}

0800bf8a <_ZN10CDriverI2C10writeBlockEhtPvt>:

//------------------------------------------------------------------------------------------------------------------------
uint32_t CDriverI2C::writeBlock(uint8_t slaveAddressWrite, uint16_t address, void* dataBuffer, uint16_t dataLength)
//------------------------------------------------------------------------------------------------------------------------
{
 800bf8a:	b590      	push	{r4, r7, lr}
 800bf8c:	b089      	sub	sp, #36	; 0x24
 800bf8e:	af02      	add	r7, sp, #8
 800bf90:	60f8      	str	r0, [r7, #12]
 800bf92:	607b      	str	r3, [r7, #4]
 800bf94:	460b      	mov	r3, r1
 800bf96:	72fb      	strb	r3, [r7, #11]
 800bf98:	4613      	mov	r3, r2
 800bf9a:	813b      	strh	r3, [r7, #8]
    HAL_StatusTypeDef status = HAL_OK;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	75fb      	strb	r3, [r7, #23]

    while (dataLength)
 800bfa0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d056      	beq.n	800c054 <_ZN10CDriverI2C10writeBlockEhtPvt+0xca>
    {
        uint16_t size = (m_pageSize * ((address / m_pageSize) + 1)) - address;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 800bfb2:	8939      	ldrh	r1, [r7, #8]
 800bfb4:	fbb1 f2f2 	udiv	r2, r1, r2
 800bfb8:	b292      	uxth	r2, r2
 800bfba:	3201      	adds	r2, #1
 800bfbc:	b292      	uxth	r2, r2
 800bfbe:	fb02 f303 	mul.w	r3, r2, r3
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	893b      	ldrh	r3, [r7, #8]
 800bfc6:	1ad3      	subs	r3, r2, r3
 800bfc8:	82bb      	strh	r3, [r7, #20]

        if (size > dataLength)
 800bfca:	8aba      	ldrh	r2, [r7, #20]
 800bfcc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	dd01      	ble.n	800bfd6 <_ZN10CDriverI2C10writeBlockEhtPvt+0x4c>
        {
            size = dataLength;
 800bfd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bfd4:	82bb      	strh	r3, [r7, #20]
        }

#ifdef DEF_HAL_F1
        status = HAL_I2C_Mem_Write_DMA(&hi2c , (uint16_t)slaveAddressWrite, address, m_internalAdressLenght, (uint8_t*) dataBuffer, size);
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	7afb      	ldrb	r3, [r7, #11]
 800bfda:	b299      	uxth	r1, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800bfe2:	b29c      	uxth	r4, r3
 800bfe4:	893a      	ldrh	r2, [r7, #8]
 800bfe6:	8abb      	ldrh	r3, [r7, #20]
 800bfe8:	9301      	str	r3, [sp, #4]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	9300      	str	r3, [sp, #0]
 800bfee:	4623      	mov	r3, r4
 800bff0:	f7fc ff4c 	bl	8008e8c <HAL_I2C_Mem_Write_DMA>
 800bff4:	4603      	mov	r3, r0
 800bff6:	75fb      	strb	r3, [r7, #23]
        if (status != HAL_OK)
 800bff8:	7dfb      	ldrb	r3, [r7, #23]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d001      	beq.n	800c002 <_ZN10CDriverI2C10writeBlockEhtPvt+0x78>
        {
            return status;
 800bffe:	7dfb      	ldrb	r3, [r7, #23]
 800c000:	e029      	b.n	800c056 <_ZN10CDriverI2C10writeBlockEhtPvt+0xcc>
        }

    	while (HAL_I2C_GetState(&hi2c) != HAL_I2C_STATE_READY);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	4618      	mov	r0, r3
 800c006:	f7fd f9f0 	bl	80093ea <HAL_I2C_GetState>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b20      	cmp	r3, #32
 800c00e:	bf14      	ite	ne
 800c010:	2301      	movne	r3, #1
 800c012:	2300      	moveq	r3, #0
 800c014:	b2db      	uxtb	r3, r3
 800c016:	2b00      	cmp	r3, #0
 800c018:	d000      	beq.n	800c01c <_ZN10CDriverI2C10writeBlockEhtPvt+0x92>
 800c01a:	e7f2      	b.n	800c002 <_ZN10CDriverI2C10writeBlockEhtPvt+0x78>
        {
            return status;
        }
#endif

        status = HAL_I2C_IsDeviceReady(&hi2c, slaveAddressWrite, 150, m_HALtimeout);
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	7afb      	ldrb	r3, [r7, #11]
 800c020:	b299      	uxth	r1, r3
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c026:	2296      	movs	r2, #150	; 0x96
 800c028:	f7fd f896 	bl	8009158 <HAL_I2C_IsDeviceReady>
 800c02c:	4603      	mov	r3, r0
 800c02e:	75fb      	strb	r3, [r7, #23]
        if (status != HAL_OK)
 800c030:	7dfb      	ldrb	r3, [r7, #23]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d001      	beq.n	800c03a <_ZN10CDriverI2C10writeBlockEhtPvt+0xb0>
        {
            return status;
 800c036:	7dfb      	ldrb	r3, [r7, #23]
 800c038:	e00d      	b.n	800c056 <_ZN10CDriverI2C10writeBlockEhtPvt+0xcc>
        }

        address += size;
 800c03a:	893a      	ldrh	r2, [r7, #8]
 800c03c:	8abb      	ldrh	r3, [r7, #20]
 800c03e:	4413      	add	r3, r2
 800c040:	813b      	strh	r3, [r7, #8]
        dataBuffer = (void*)((uint32_t)dataBuffer + size);
 800c042:	8aba      	ldrh	r2, [r7, #20]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4413      	add	r3, r2
 800c048:	607b      	str	r3, [r7, #4]
        dataLength -= size;
 800c04a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800c04c:	8abb      	ldrh	r3, [r7, #20]
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	853b      	strh	r3, [r7, #40]	; 0x28
    while (dataLength)
 800c052:	e7a5      	b.n	800bfa0 <_ZN10CDriverI2C10writeBlockEhtPvt+0x16>
    }

    return status;
 800c054:	7dfb      	ldrb	r3, [r7, #23]
}
 800c056:	4618      	mov	r0, r3
 800c058:	371c      	adds	r7, #28
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd90      	pop	{r4, r7, pc}

0800c05e <_ZN10CDriverI2C9readBlockEhtPvt>:

//------------------------------------------------------------------------------------------------------------------------
uint32_t CDriverI2C::readBlock(uint8_t slaveAddressRead, uint16_t address, void* dataBuffer, uint16_t dataLength)
//------------------------------------------------------------------------------------------------------------------------
{
 800c05e:	b590      	push	{r4, r7, lr}
 800c060:	b089      	sub	sp, #36	; 0x24
 800c062:	af02      	add	r7, sp, #8
 800c064:	60f8      	str	r0, [r7, #12]
 800c066:	607b      	str	r3, [r7, #4]
 800c068:	460b      	mov	r3, r1
 800c06a:	72fb      	strb	r3, [r7, #11]
 800c06c:	4613      	mov	r3, r2
 800c06e:	813b      	strh	r3, [r7, #8]
#ifdef DEF_HAL_F1
    HAL_StatusTypeDef status = HAL_OK;
 800c070:	2300      	movs	r3, #0
 800c072:	75fb      	strb	r3, [r7, #23]
	status = HAL_I2C_Mem_Read_DMA(&hi2c, slaveAddressRead, address, m_internalAdressLenght, (uint8_t*) dataBuffer, dataLength);
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	7afb      	ldrb	r3, [r7, #11]
 800c078:	b299      	uxth	r1, r3
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800c080:	b29c      	uxth	r4, r3
 800c082:	893a      	ldrh	r2, [r7, #8]
 800c084:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c086:	9301      	str	r3, [sp, #4]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	9300      	str	r3, [sp, #0]
 800c08c:	4623      	mov	r3, r4
 800c08e:	f7fc ff9d 	bl	8008fcc <HAL_I2C_Mem_Read_DMA>
 800c092:	4603      	mov	r3, r0
 800c094:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 800c096:	7dfb      	ldrb	r3, [r7, #23]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d001      	beq.n	800c0a0 <_ZN10CDriverI2C9readBlockEhtPvt+0x42>
    {
        return status;
 800c09c:	7dfb      	ldrb	r3, [r7, #23]
 800c09e:	e015      	b.n	800c0cc <_ZN10CDriverI2C9readBlockEhtPvt+0x6e>
    }

	while (HAL_I2C_GetState(&hi2c) != HAL_I2C_STATE_READY);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7fd f9a1 	bl	80093ea <HAL_I2C_GetState>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b20      	cmp	r3, #32
 800c0ac:	bf14      	ite	ne
 800c0ae:	2301      	movne	r3, #1
 800c0b0:	2300      	moveq	r3, #0
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d000      	beq.n	800c0ba <_ZN10CDriverI2C9readBlockEhtPvt+0x5c>
 800c0b8:	e7f2      	b.n	800c0a0 <_ZN10CDriverI2C9readBlockEhtPvt+0x42>

	return HAL_I2C_IsDeviceReady(&hi2c, slaveAddressRead, 150, m_HALtimeout);
 800c0ba:	68f8      	ldr	r0, [r7, #12]
 800c0bc:	7afb      	ldrb	r3, [r7, #11]
 800c0be:	b299      	uxth	r1, r3
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0c4:	2296      	movs	r2, #150	; 0x96
 800c0c6:	f7fd f847 	bl	8009158 <HAL_I2C_IsDeviceReady>
 800c0ca:	4603      	mov	r3, r0
#else
	return HAL_I2C_Mem_Read(&hi2c, slaveAddressRead, address, m_internalAdressLenght, (uint8_t*) dataBuffer, dataLength, 3);
#endif
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	371c      	adds	r7, #28
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd90      	pop	{r4, r7, pc}

0800c0d4 <_ZN10CDriverI2C15DMARxIrqHandlerEv>:
	return status;
}

#ifdef DEF_HAL_F1
void CDriverI2C::DMARxIrqHandler()
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
	HAL_DMA_IRQHandler(&m_dma_RX);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	335c      	adds	r3, #92	; 0x5c
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7fc fadd 	bl	80086a0 <HAL_DMA_IRQHandler>
}
 800c0e6:	bf00      	nop
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <_ZN10CDriverI2C15DMATxIrqHandlerEv>:

void CDriverI2C::DMATxIrqHandler()
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b082      	sub	sp, #8
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
	HAL_DMA_IRQHandler(&m_dma_TX);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	33a0      	adds	r3, #160	; 0xa0
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fc fad0 	bl	80086a0 <HAL_DMA_IRQHandler>
}
 800c100:	bf00      	nop
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <_ZN10CEEPROMMgr11allocateVarEt>:
Ceeprom* CEEPROMMgr::eepDrvRef;
CEEPROMMgr::TEEPROMError CEEPROMMgr::eeError;
CEEPROMMgr::TEEPROMErrorCallback CEEPROMMgr::errorCallback;

uint32_t CEEPROMMgr::allocateVar(uint16_t size)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	4603      	mov	r3, r0
 800c110:	80fb      	strh	r3, [r7, #6]
	uint32_t address ;
	if((EEPROM_MANAGED_BLOCK_START + alloctedData + size) <= EEPROM_MANAGED_BLOCK_END)
 800c112:	88fa      	ldrh	r2, [r7, #6]
 800c114:	4b0c      	ldr	r3, [pc, #48]	; (800c148 <_ZN10CEEPROMMgr11allocateVarEt+0x40>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4413      	add	r3, r2
 800c11a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c11e:	d209      	bcs.n	800c134 <_ZN10CEEPROMMgr11allocateVarEt+0x2c>
	{
		address = alloctedData;
 800c120:	4b09      	ldr	r3, [pc, #36]	; (800c148 <_ZN10CEEPROMMgr11allocateVarEt+0x40>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	60fb      	str	r3, [r7, #12]
		alloctedData += size;
 800c126:	88fa      	ldrh	r2, [r7, #6]
 800c128:	4b07      	ldr	r3, [pc, #28]	; (800c148 <_ZN10CEEPROMMgr11allocateVarEt+0x40>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4413      	add	r3, r2
 800c12e:	4a06      	ldr	r2, [pc, #24]	; (800c148 <_ZN10CEEPROMMgr11allocateVarEt+0x40>)
 800c130:	6013      	str	r3, [r2, #0]
 800c132:	e004      	b.n	800c13e <_ZN10CEEPROMMgr11allocateVarEt+0x36>
	}else
	{
		address = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	60fb      	str	r3, [r7, #12]
		throwException(EC_EEPROMVAR_END_OF_BLOCK);
 800c138:	2001      	movs	r0, #1
 800c13a:	f3af 8000 	nop.w
	}

	return address;
 800c13e:	68fb      	ldr	r3, [r7, #12]
}
 800c140:	4618      	mov	r0, r3
 800c142:	3710      	adds	r7, #16
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	20000818 	.word	0x20000818

0800c14c <_ZN10CEEPROMMgr19getShouldInitializeEv>:
	return alloctedData;
}


bool CEEPROMMgr::getShouldInitialize()
{
 800c14c:	b480      	push	{r7}
 800c14e:	af00      	add	r7, sp, #0
	return shouldInitialize;
 800c150:	4b02      	ldr	r3, [pc, #8]	; (800c15c <_ZN10CEEPROMMgr19getShouldInitializeEv+0x10>)
 800c152:	781b      	ldrb	r3, [r3, #0]
}
 800c154:	4618      	mov	r0, r3
 800c156:	46bd      	mov	sp, r7
 800c158:	bc80      	pop	{r7}
 800c15a:	4770      	bx	lr
 800c15c:	20000814 	.word	0x20000814

0800c160 <_ZN10CEEPROMMgr4initEP7Ceepromb>:

void CEEPROMMgr::init(Ceeprom* eepromDrv, bool forceDefaults)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	460b      	mov	r3, r1
 800c16a:	70fb      	strb	r3, [r7, #3]
	eepDrvRef = eepromDrv;
 800c16c:	4a0a      	ldr	r2, [pc, #40]	; (800c198 <_ZN10CEEPROMMgr4initEP7Ceepromb+0x38>)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6013      	str	r3, [r2, #0]

	if(CFlashSignature::isFristRun())
 800c172:	f000 f839 	bl	800c1e8 <_ZN15CFlashSignature10isFristRunEv>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d002      	beq.n	800c182 <_ZN10CEEPROMMgr4initEP7Ceepromb+0x22>
	{
		shouldInitialize = true;
 800c17c:	4b07      	ldr	r3, [pc, #28]	; (800c19c <_ZN10CEEPROMMgr4initEP7Ceepromb+0x3c>)
 800c17e:	2201      	movs	r2, #1
 800c180:	701a      	strb	r2, [r3, #0]
	}

	if(forceDefaults)
 800c182:	78fb      	ldrb	r3, [r7, #3]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d002      	beq.n	800c18e <_ZN10CEEPROMMgr4initEP7Ceepromb+0x2e>
	{
		shouldInitialize = true;
 800c188:	4b04      	ldr	r3, [pc, #16]	; (800c19c <_ZN10CEEPROMMgr4initEP7Ceepromb+0x3c>)
 800c18a:	2201      	movs	r2, #1
 800c18c:	701a      	strb	r2, [r3, #0]
	}
}
 800c18e:	bf00      	nop
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	2000081c 	.word	0x2000081c
 800c19c:	20000814 	.word	0x20000814

0800c1a0 <_ZN10CEEPROMMgr10setupErrorEbNS_12TEEPROMErrorE>:
{
    return (bool)eeError;
}

void CEEPROMMgr::setupError(bool operationFault, TEEPROMError possibleError)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	460a      	mov	r2, r1
 800c1aa:	71fb      	strb	r3, [r7, #7]
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	71bb      	strb	r3, [r7, #6]
    if(operationFault)
 800c1b0:	79fb      	ldrb	r3, [r7, #7]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d00c      	beq.n	800c1d0 <_ZN10CEEPROMMgr10setupErrorEbNS_12TEEPROMErrorE+0x30>
    {
        eeError = possibleError;
 800c1b6:	4a0a      	ldr	r2, [pc, #40]	; (800c1e0 <_ZN10CEEPROMMgr10setupErrorEbNS_12TEEPROMErrorE+0x40>)
 800c1b8:	79bb      	ldrb	r3, [r7, #6]
 800c1ba:	7013      	strb	r3, [r2, #0]
        if(errorCallback)
 800c1bc:	4b09      	ldr	r3, [pc, #36]	; (800c1e4 <_ZN10CEEPROMMgr10setupErrorEbNS_12TEEPROMErrorE+0x44>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d008      	beq.n	800c1d6 <_ZN10CEEPROMMgr10setupErrorEbNS_12TEEPROMErrorE+0x36>
        {
            errorCallback(possibleError);
 800c1c4:	4b07      	ldr	r3, [pc, #28]	; (800c1e4 <_ZN10CEEPROMMgr10setupErrorEbNS_12TEEPROMErrorE+0x44>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	79ba      	ldrb	r2, [r7, #6]
 800c1ca:	4610      	mov	r0, r2
 800c1cc:	4798      	blx	r3
        }
    }else
    {
        eeError = TEE_NO_ERROR;
    }
}
 800c1ce:	e002      	b.n	800c1d6 <_ZN10CEEPROMMgr10setupErrorEbNS_12TEEPROMErrorE+0x36>
        eeError = TEE_NO_ERROR;
 800c1d0:	4b03      	ldr	r3, [pc, #12]	; (800c1e0 <_ZN10CEEPROMMgr10setupErrorEbNS_12TEEPROMErrorE+0x40>)
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	701a      	strb	r2, [r3, #0]
}
 800c1d6:	bf00      	nop
 800c1d8:	3708      	adds	r7, #8
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	20000820 	.word	0x20000820
 800c1e4:	20000824 	.word	0x20000824

0800c1e8 <_ZN15CFlashSignature10isFristRunEv>:
#endif

const volatile uint16_t CFlashSignature::SIGNATURE = 0xFFFF;

bool CFlashSignature::isFristRun()
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	af00      	add	r7, sp, #0
    return SIGNATURE;
 800c1ec:	4b05      	ldr	r3, [pc, #20]	; (800c204 <_ZN15CFlashSignature10isFristRunEv+0x1c>)
 800c1ee:	881b      	ldrh	r3, [r3, #0]
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	bf14      	ite	ne
 800c1f6:	2301      	movne	r3, #1
 800c1f8:	2300      	moveq	r3, #0
 800c1fa:	b2db      	uxtb	r3, r3
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bc80      	pop	{r7}
 800c202:	4770      	bx	lr
 800c204:	08000228 	.word	0x08000228

0800c208 <_ZN14IOnKeyListenerC1Ev>:
#include <stdint.h>

/**
 * Interfejs dla klas reagujących na zdarzenia związane z przyciskami sprzętowymi.
 */
class IOnKeyListener
 800c208:	b480      	push	{r7}
 800c20a:	b083      	sub	sp, #12
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	4a04      	ldr	r2, [pc, #16]	; (800c224 <_ZN14IOnKeyListenerC1Ev+0x1c>)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	601a      	str	r2, [r3, #0]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4618      	mov	r0, r3
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bc80      	pop	{r7}
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop
 800c224:	0801cb30 	.word	0x0801cb30

0800c228 <_ZN10IUpdatableC1Ev>:
#define IUPDATABLE_H_

/**
 * Interfejs dla klas z metodą update.
 */
class IUpdatable
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	4a04      	ldr	r2, [pc, #16]	; (800c244 <_ZN10IUpdatableC1Ev+0x1c>)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	601a      	str	r2, [r3, #0]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	4618      	mov	r0, r3
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bc80      	pop	{r7}
 800c240:	4770      	bx	lr
 800c242:	bf00      	nop
 800c244:	0801cb24 	.word	0x0801cb24

0800c248 <_ZN20CDamperBoolInterfaceC1Ev>:
#include "timer.h"

/**
 * Klasa tłumiąca drgania styków.
 */
class CDamperBoolInterface: public IBoolInterface
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4618      	mov	r0, r3
 800c254:	f7ff fb28 	bl	800b8a8 <_ZN14IBoolInterfaceC1Ev>
 800c258:	4a06      	ldr	r2, [pc, #24]	; (800c274 <_ZN20CDamperBoolInterfaceC1Ev+0x2c>)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	3308      	adds	r3, #8
 800c262:	2103      	movs	r1, #3
 800c264:	4618      	mov	r0, r3
 800c266:	f004 f8a9 	bl	80103bc <_ZN6CTimerC1ENS_4UnitE>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4618      	mov	r0, r3
 800c26e:	3708      	adds	r7, #8
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	0801caac 	.word	0x0801caac

0800c278 <_ZN4CGUIC1Ev>:

#include "CScreenLogo.h"
#include "CScreenDevice.h"


CGUI::CGUI() : m_softwareVersion(1,0,5)
 800c278:	b5b0      	push	{r4, r5, r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4618      	mov	r0, r3
 800c284:	f7ff ffc0 	bl	800c208 <_ZN14IOnKeyListenerC1Ev>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	3304      	adds	r3, #4
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7ff ffcb 	bl	800c228 <_ZN10IUpdatableC1Ev>
 800c292:	4a22      	ldr	r2, [pc, #136]	; (800c31c <_ZN4CGUIC1Ev+0xa4>)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	601a      	str	r2, [r3, #0]
 800c298:	4a21      	ldr	r2, [pc, #132]	; (800c320 <_ZN4CGUIC1Ev+0xa8>)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	605a      	str	r2, [r3, #4]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	3308      	adds	r3, #8
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f001 fa0f 	bl	800d6c6 <_ZN9CKeyboardC1Ev>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	3374      	adds	r3, #116	; 0x74
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7ff fb0b 	bl	800b8c8 <_ZN13CDigitalInputC1Ev>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	3380      	adds	r3, #128	; 0x80
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7ff fb06 	bl	800b8c8 <_ZN13CDigitalInputC1Ev>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	338c      	adds	r3, #140	; 0x8c
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7ff fb01 	bl	800b8c8 <_ZN13CDigitalInputC1Ev>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	3398      	adds	r3, #152	; 0x98
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7ff fafc 	bl	800b8c8 <_ZN13CDigitalInputC1Ev>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	33a4      	adds	r3, #164	; 0xa4
 800c2d4:	2403      	movs	r4, #3
 800c2d6:	461d      	mov	r5, r3
 800c2d8:	2c00      	cmp	r4, #0
 800c2da:	db05      	blt.n	800c2e8 <_ZN4CGUIC1Ev+0x70>
 800c2dc:	4628      	mov	r0, r5
 800c2de:	f7ff ffb3 	bl	800c248 <_ZN20CDamperBoolInterfaceC1Ev>
 800c2e2:	3518      	adds	r5, #24
 800c2e4:	3c01      	subs	r4, #1
 800c2e6:	e7f7      	b.n	800c2d8 <_ZN4CGUIC1Ev+0x60>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fe feaa 	bl	800b048 <_ZN10CEEPROMVarIaEC1Ev>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f000 f9af 	bl	800c65e <_ZN10CEEPROMVarIhEC1Ev>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f503 708e 	add.w	r0, r3, #284	; 0x11c
 800c306:	2305      	movs	r3, #5
 800c308:	2200      	movs	r2, #0
 800c30a:	2101      	movs	r1, #1
 800c30c:	f005 f910 	bl	8011530 <_ZN8SVersionC1Ettt>
{
}
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4618      	mov	r0, r3
 800c314:	3708      	adds	r7, #8
 800c316:	46bd      	mov	sp, r7
 800c318:	bdb0      	pop	{r4, r5, r7, pc}
 800c31a:	bf00      	nop
 800c31c:	0801cb08 	.word	0x0801cb08
 800c320:	0801cb18 	.word	0x0801cb18

0800c324 <_ZN4CGUI11getInstanceEv>:

CGUI& CGUI::getInstance()
{
 800c324:	b580      	push	{r7, lr}
 800c326:	af00      	add	r7, sp, #0
	static CGUI instance;
 800c328:	4b07      	ldr	r3, [pc, #28]	; (800c348 <_ZN4CGUI11getInstanceEv+0x24>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f003 0301 	and.w	r3, r3, #1
 800c330:	2b00      	cmp	r3, #0
 800c332:	d105      	bne.n	800c340 <_ZN4CGUI11getInstanceEv+0x1c>
 800c334:	4805      	ldr	r0, [pc, #20]	; (800c34c <_ZN4CGUI11getInstanceEv+0x28>)
 800c336:	f7ff ff9f 	bl	800c278 <_ZN4CGUIC1Ev>
 800c33a:	4b03      	ldr	r3, [pc, #12]	; (800c348 <_ZN4CGUI11getInstanceEv+0x24>)
 800c33c:	2201      	movs	r2, #1
 800c33e:	601a      	str	r2, [r3, #0]
    return instance;
 800c340:	4b02      	ldr	r3, [pc, #8]	; (800c34c <_ZN4CGUI11getInstanceEv+0x28>)
}
 800c342:	4618      	mov	r0, r3
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	20000950 	.word	0x20000950
 800c34c:	20000828 	.word	0x20000828

0800c350 <_ZN4CGUI4initEP15IDelayFunctionsP9CDeviceIDP9IDateTimeP16CBacklightDriverP7IBuzzer>:
}


void CGUI::init(IDelayFunctions* delayFunctions, CDeviceID *deviceID, IDateTime *dateTime,
        CBacklightDriver *backlightDriver, IBuzzer *buzzer)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af02      	add	r7, sp, #8
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
 800c35c:	603b      	str	r3, [r7, #0]
    m_deviceID = deviceID;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    m_dateTime = dateTime;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	683a      	ldr	r2, [r7, #0]
 800c36a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    m_backlightDriver = backlightDriver;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	69ba      	ldr	r2, [r7, #24]
 800c372:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    m_buzzer = buzzer;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	69fa      	ldr	r2, [r7, #28]
 800c37a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

    m_contrast.initVar(36);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800c384:	2124      	movs	r1, #36	; 0x24
 800c386:	4618      	mov	r0, r3
 800c388:	f000 f97a 	bl	800c680 <_ZN10CEEPROMVarIhE7initVarEh>

    CST7565Driver::init(delayFunctions, true);
 800c38c:	2101      	movs	r1, #1
 800c38e:	68b8      	ldr	r0, [r7, #8]
 800c390:	f002 fa08 	bl	800e7a4 <_ZN13CST7565Driver4initEP15IDelayFunctionsb>
    CST7565Driver::clear();
 800c394:	f002 fc62 	bl	800ec5c <_ZN13CST7565Driver5clearEv>
    CST7565Driver::ustawKontrast(m_contrast);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f000 f9a8 	bl	800c6f4 <_ZN10CEEPROMVarIhEcvhEv>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f002 faa8 	bl	800e8fc <_ZN13CST7565Driver13ustawKontrastEh>

    CFont::init();
 800c3ac:	f004 fff0 	bl	8011390 <_ZN5CFont4initEv>

    m_keyUp.init(GPIOC, GPIO_PIN_5, 1, true);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f103 0074 	add.w	r0, r3, #116	; 0x74
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	9300      	str	r3, [sp, #0]
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	2220      	movs	r2, #32
 800c3be:	4948      	ldr	r1, [pc, #288]	; (800c4e0 <_ZN4CGUI4initEP15IDelayFunctionsP9CDeviceIDP9IDateTimeP16CBacklightDriverP7IBuzzer+0x190>)
 800c3c0:	f7ff fa9a 	bl	800b8f8 <_ZN13CDigitalInput4initEP12GPIO_TypeDeftab>
    m_keyDown.init(GPIOB, GPIO_PIN_1, 1, true);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	2202      	movs	r2, #2
 800c3d2:	4944      	ldr	r1, [pc, #272]	; (800c4e4 <_ZN4CGUI4initEP15IDelayFunctionsP9CDeviceIDP9IDateTimeP16CBacklightDriverP7IBuzzer+0x194>)
 800c3d4:	f7ff fa90 	bl	800b8f8 <_ZN13CDigitalInput4initEP12GPIO_TypeDeftab>
    m_keyMenu.init(GPIOA, GPIO_PIN_7, 1, true);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 800c3de:	2301      	movs	r3, #1
 800c3e0:	9300      	str	r3, [sp, #0]
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	2280      	movs	r2, #128	; 0x80
 800c3e6:	4940      	ldr	r1, [pc, #256]	; (800c4e8 <_ZN4CGUI4initEP15IDelayFunctionsP9CDeviceIDP9IDateTimeP16CBacklightDriverP7IBuzzer+0x198>)
 800c3e8:	f7ff fa86 	bl	800b8f8 <_ZN13CDigitalInput4initEP12GPIO_TypeDeftab>
    m_keyExit.init(GPIOB, GPIO_PIN_2, 1, true);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	9300      	str	r3, [sp, #0]
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	2204      	movs	r2, #4
 800c3fa:	493a      	ldr	r1, [pc, #232]	; (800c4e4 <_ZN4CGUI4initEP15IDelayFunctionsP9CDeviceIDP9IDateTimeP16CBacklightDriverP7IBuzzer+0x194>)
 800c3fc:	f7ff fa7c 	bl	800b8f8 <_ZN13CDigitalInput4initEP12GPIO_TypeDeftab>

    m_damperBoolInterface[0].init(&m_keyUp);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	3374      	adds	r3, #116	; 0x74
 800c40a:	4619      	mov	r1, r3
 800c40c:	4610      	mov	r0, r2
 800c40e:	f7ff f9fd 	bl	800b80c <_ZN20CDamperBoolInterface4initEP14IBoolInterface>
    m_damperBoolInterface[1].init(&m_keyDown);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	3380      	adds	r3, #128	; 0x80
 800c41c:	4619      	mov	r1, r3
 800c41e:	4610      	mov	r0, r2
 800c420:	f7ff f9f4 	bl	800b80c <_ZN20CDamperBoolInterface4initEP14IBoolInterface>
    m_damperBoolInterface[2].init(&m_keyMenu);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	338c      	adds	r3, #140	; 0x8c
 800c42e:	4619      	mov	r1, r3
 800c430:	4610      	mov	r0, r2
 800c432:	f7ff f9eb 	bl	800b80c <_ZN20CDamperBoolInterface4initEP14IBoolInterface>
    m_damperBoolInterface[3].init(&m_keyExit);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	3398      	adds	r3, #152	; 0x98
 800c440:	4619      	mov	r1, r3
 800c442:	4610      	mov	r0, r2
 800c444:	f7ff f9e2 	bl	800b80c <_ZN20CDamperBoolInterface4initEP14IBoolInterface>

    m_keyboard.addKey(IOnKeyListener::KEY_CODE_UP, &m_damperBoolInterface[0]);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f103 0008 	add.w	r0, r3, #8
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	33a4      	adds	r3, #164	; 0xa4
 800c452:	461a      	mov	r2, r3
 800c454:	2103      	movs	r1, #3
 800c456:	f001 f957 	bl	800d708 <_ZN9CKeyboard6addKeyEaP14IBoolInterface>
    m_keyboard.addKey(IOnKeyListener::KEY_CODE_DOWN, &m_damperBoolInterface[1]);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f103 0008 	add.w	r0, r3, #8
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	33bc      	adds	r3, #188	; 0xbc
 800c464:	461a      	mov	r2, r3
 800c466:	2104      	movs	r1, #4
 800c468:	f001 f94e 	bl	800d708 <_ZN9CKeyboard6addKeyEaP14IBoolInterface>
    m_keyboard.addKey(IOnKeyListener::KEY_CODE_MENU, &m_damperBoolInterface[2]);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f103 0008 	add.w	r0, r3, #8
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	33d4      	adds	r3, #212	; 0xd4
 800c476:	461a      	mov	r2, r3
 800c478:	2101      	movs	r1, #1
 800c47a:	f001 f945 	bl	800d708 <_ZN9CKeyboard6addKeyEaP14IBoolInterface>
    m_keyboard.addKey(IOnKeyListener::KEY_CODE_EXIT, &m_damperBoolInterface[3]);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f103 0008 	add.w	r0, r3, #8
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	33ec      	adds	r3, #236	; 0xec
 800c488:	461a      	mov	r2, r3
 800c48a:	2102      	movs	r1, #2
 800c48c:	f001 f93c 	bl	800d708 <_ZN9CKeyboard6addKeyEaP14IBoolInterface>
    m_keyboard.setOnKeyListener(this);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	3308      	adds	r3, #8
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	4611      	mov	r1, r2
 800c498:	4618      	mov	r0, r3
 800c49a:	f001 f962 	bl	800d762 <_ZN9CKeyboard16setOnKeyListenerEP14IOnKeyListener>

    CContext::setKeyboard(&m_keyboard);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	3308      	adds	r3, #8
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fe ffcc 	bl	800b440 <_ZN8CContext11setKeyboardEP9CKeyboard>
    CContext::addUpdatable(this);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	3304      	adds	r3, #4
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7fe ff20 	bl	800b2f4 <_ZN8CContext12addUpdatableEP10IUpdatableb>

    CTextResources::setLanguageVersion(CNapisy::getLanguageVersion( m_language ));
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fe fea2 	bl	800b204 <_ZN10CEEPROMVarIaEcvaEv>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f004 ffdb 	bl	8011480 <_ZN7CNapisy18getLanguageVersionEt>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f003 fc60 	bl	800fd94 <_ZN14CTextResources18setLanguageVersionEt>
    CContext::redraw();
 800c4d4:	f7ff f926 	bl	800b724 <_ZN8CContext6redrawEv>

}
 800c4d8:	bf00      	nop
 800c4da:	3710      	adds	r7, #16
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	40011000 	.word	0x40011000
 800c4e4:	40010c00 	.word	0x40010c00
 800c4e8:	40010800 	.word	0x40010800

0800c4ec <_ZN7AScreenC1Ev>:
#include <stdlib.h>

/**
 * Abstrakcyjna klasa ekranu.
 */
class AScreen: public IUpdatable
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7ff fe96 	bl	800c228 <_ZN10IUpdatableC1Ev>
 800c4fc:	4a03      	ldr	r2, [pc, #12]	; (800c50c <_ZN7AScreenC1Ev+0x20>)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	601a      	str	r2, [r3, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4618      	mov	r0, r3
 800c506:	3708      	adds	r7, #8
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	0801ca68 	.word	0x0801ca68

0800c510 <_ZN7CScreenC1Ev>:
#include "CGUI.h"
#include "CImgData.h"
#include "CNapisy.h"
#include "CFont.h"

class CScreen: public AScreen, protected IOnKeyListener
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7ff ffe6 	bl	800c4ec <_ZN7AScreenC1Ev>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	3304      	adds	r3, #4
 800c524:	4618      	mov	r0, r3
 800c526:	f7ff fe6f 	bl	800c208 <_ZN14IOnKeyListenerC1Ev>
 800c52a:	4a08      	ldr	r2, [pc, #32]	; (800c54c <_ZN7CScreenC1Ev+0x3c>)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	601a      	str	r2, [r3, #0]
 800c530:	4a07      	ldr	r2, [pc, #28]	; (800c550 <_ZN7CScreenC1Ev+0x40>)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	605a      	str	r2, [r3, #4]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	3308      	adds	r3, #8
 800c53a:	2103      	movs	r1, #3
 800c53c:	4618      	mov	r0, r3
 800c53e:	f003 ff3d 	bl	80103bc <_ZN6CTimerC1ENS_4UnitE>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4618      	mov	r0, r3
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	0801cbe4 	.word	0x0801cbe4
 800c550:	0801cc00 	.word	0x0801cc00

0800c554 <_ZN11CScreenLogoC1Ev>:
#ifndef CSCREENLOGO_H_
#define CSCREENLOGO_H_

#include "CScreen.h"

class CScreenLogo: public CScreen
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	4618      	mov	r0, r3
 800c560:	f7ff ffd6 	bl	800c510 <_ZN7CScreenC1Ev>
 800c564:	4a08      	ldr	r2, [pc, #32]	; (800c588 <_ZN11CScreenLogoC1Ev+0x34>)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	601a      	str	r2, [r3, #0]
 800c56a:	4a08      	ldr	r2, [pc, #32]	; (800c58c <_ZN11CScreenLogoC1Ev+0x38>)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	605a      	str	r2, [r3, #4]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	3318      	adds	r3, #24
 800c574:	2103      	movs	r1, #3
 800c576:	4618      	mov	r0, r3
 800c578:	f003 ff20 	bl	80103bc <_ZN6CTimerC1ENS_4UnitE>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	4618      	mov	r0, r3
 800c580:	3708      	adds	r7, #8
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	080222a4 	.word	0x080222a4
 800c58c:	080222c4 	.word	0x080222c4

0800c590 <_ZN4CGUI4showEv>:

void CGUI::show()
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b098      	sub	sp, #96	; 0x60
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
    CScreenLogo screenLogo;
 800c598:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7ff ffd9 	bl	800c554 <_ZN11CScreenLogoC1Ev>
    screenLogo.init(true);
 800c5a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c5a6:	2101      	movs	r1, #1
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f005 f9b5 	bl	8011918 <_ZN11CScreenLogo4initEb>
    CContext::showScreen(&screenLogo);
 800c5ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fe ff52 	bl	800b45c <_ZN8CContext10showScreenEP7AScreen>
    CST7565Driver::clear();
 800c5b8:	f002 fb50 	bl	800ec5c <_ZN13CST7565Driver5clearEv>
	while (true)
	{
		CScreenDevice screen;
 800c5bc:	f107 0308 	add.w	r3, r7, #8
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f004 ffd1 	bl	8011568 <_ZN13CScreenDeviceC1Ev>
		CContext::showScreen(&screen);
 800c5c6:	f107 0308 	add.w	r3, r7, #8
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fe ff46 	bl	800b45c <_ZN8CContext10showScreenEP7AScreen>
	}
 800c5d0:	e7f4      	b.n	800c5bc <_ZN4CGUI4showEv+0x2c>

0800c5d2 <_ZN4CGUI17getActionsCounterEv>:
	m_contrast.setValue( contrast );
    CST7565Driver::ustawKontrast(m_contrast);
}

int32_t CGUI::getActionsCounter()
{
 800c5d2:	b480      	push	{r7}
 800c5d4:	b083      	sub	sp, #12
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
    return m_actionsCounter;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	370c      	adds	r7, #12
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bc80      	pop	{r7}
 800c5e8:	4770      	bx	lr

0800c5ea <_ZN4CGUI5onKeyEaa>:
	m_backlightDriver->setFadeTime(CBacklightDriver::DEFAULT_FADE_TIME);
	m_backlightDriver->setLightSensor(CBacklightDriver::DEFAULT_LIGHT_SENSOR);
}

bool CGUI::onKey(int8_t keyCode, int8_t keyEvent)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b082      	sub	sp, #8
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	70fb      	strb	r3, [r7, #3]
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	70bb      	strb	r3, [r7, #2]
    m_actionsCounter++;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800c600:	1c5a      	adds	r2, r3, #1
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

    m_backlightDriver->update(true, false, 0);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800c60e:	2300      	movs	r3, #0
 800c610:	2200      	movs	r2, #0
 800c612:	2101      	movs	r1, #1
 800c614:	f7fe fb61 	bl	800acda <_ZN16CBacklightDriver6updateEbba>

    if (keyEvent != IOnKeyListener::KEY_EVENT_DOWN)
 800c618:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d001      	beq.n	800c624 <_ZN4CGUI5onKeyEaa+0x3a>
    {
        return false;
 800c620:	2300      	movs	r3, #0
 800c622:	e00b      	b.n	800c63c <_ZN4CGUI5onKeyEaa+0x52>
    }

    m_buzzer->beep(5);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 800c634:	2105      	movs	r1, #5
 800c636:	4610      	mov	r0, r2
 800c638:	4798      	blx	r3

    return true;
 800c63a:	2301      	movs	r3, #1
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3708      	adds	r7, #8
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <_ZN4CGUI6updateEv>:

void CGUI::update()
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
}
 800c64c:	bf00      	nop
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	bc80      	pop	{r7}
 800c654:	4770      	bx	lr

0800c656 <_ZThn4_N4CGUI6updateEv>:

public:
    bool onKey(int8_t keyCode, int8_t keyEvent);

public:
    void update();
 800c656:	f1a0 0004 	sub.w	r0, r0, #4
 800c65a:	f7ff bff3 	b.w	800c644 <_ZN4CGUI6updateEv>

0800c65e <_ZN10CEEPROMVarIhEC1Ev>:
	CEEPROMVar()
 800c65e:	b580      	push	{r7, lr}
 800c660:	b082      	sub	sp, #8
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
		addressOffset = CEEPROMMgr::allocateVar(sizeof(T));
 800c666:	2001      	movs	r0, #1
 800c668:	f7ff fd4e 	bl	800c108 <_ZN10CEEPROMMgr11allocateVarEt>
 800c66c:	4603      	mov	r3, r0
 800c66e:	b29a      	uxth	r2, r3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	801a      	strh	r2, [r3, #0]
	}
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	4618      	mov	r0, r3
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
	...

0800c680 <_ZN10CEEPROMVarIhE7initVarEh>:
    void initVar(T initial)
 800c680:	b5b0      	push	{r4, r5, r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	460b      	mov	r3, r1
 800c68a:	70fb      	strb	r3, [r7, #3]
        if (CEEPROMMgr::getShouldInitialize())
 800c68c:	f7ff fd5e 	bl	800c14c <_ZN10CEEPROMMgr19getShouldInitializeEv>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d003      	beq.n	800c69e <_ZN10CEEPROMVarIhE7initVarEh+0x1e>
            cache = initial;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	78fa      	ldrb	r2, [r7, #3]
 800c69a:	709a      	strb	r2, [r3, #2]
    }
 800c69c:	e023      	b.n	800c6e6 <_ZN10CEEPROMVarIhE7initVarEh+0x66>
            bool error = CEEPROMMgr::getEEPROMDriver()->readBlock((void*) (CEEPROMMgr::getEEPROMStart() + addressOffset), &cache, sizeof(T));
 800c69e:	f7fe fa61 	bl	800ab64 <_ZN10CEEPROMMgr15getEEPROMDriverEv>
 800c6a2:	4605      	mov	r5, r0
 800c6a4:	682b      	ldr	r3, [r5, #0]
 800c6a6:	3304      	adds	r3, #4
 800c6a8:	681c      	ldr	r4, [r3, #0]
 800c6aa:	f7fe fa53 	bl	800ab54 <_ZN10CEEPROMMgr14getEEPROMStartEv>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	881b      	ldrh	r3, [r3, #0]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	1c9a      	adds	r2, r3, #2
 800c6bc:	2301      	movs	r3, #1
 800c6be:	4628      	mov	r0, r5
 800c6c0:	47a0      	blx	r4
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	bf14      	ite	ne
 800c6c8:	2301      	movne	r3, #1
 800c6ca:	2300      	moveq	r3, #0
 800c6cc:	73fb      	strb	r3, [r7, #15]
            CEEPROMMgr::setupError(error, CEEPROMMgr::TEE_READ_ERROR);
 800c6ce:	7bfb      	ldrb	r3, [r7, #15]
 800c6d0:	2101      	movs	r1, #1
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7ff fd64 	bl	800c1a0 <_ZN10CEEPROMMgr10setupErrorEbNS_12TEEPROMErrorE>
            if (CEEPROMMgr::eeError)
 800c6d8:	4b05      	ldr	r3, [pc, #20]	; (800c6f0 <_ZN10CEEPROMVarIhE7initVarEh+0x70>)
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d002      	beq.n	800c6e6 <_ZN10CEEPROMVarIhE7initVarEh+0x66>
                cache = initial;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	78fa      	ldrb	r2, [r7, #3]
 800c6e4:	709a      	strb	r2, [r3, #2]
    }
 800c6e6:	bf00      	nop
 800c6e8:	3710      	adds	r7, #16
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bdb0      	pop	{r4, r5, r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	20000820 	.word	0x20000820

0800c6f4 <_ZN10CEEPROMVarIhEcvhEv>:
	operator T()
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
		return getValue();
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 f805 	bl	800c70c <_ZN10CEEPROMVarIhE8getValueEv>
 800c702:	4603      	mov	r3, r0
	}
 800c704:	4618      	mov	r0, r3
 800c706:	3708      	adds	r7, #8
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <_ZN10CEEPROMVarIhE8getValueEv>:
	T getValue()
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
		return cache;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	789b      	ldrb	r3, [r3, #2]
	}
 800c718:	4618      	mov	r0, r3
 800c71a:	370c      	adds	r7, #12
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bc80      	pop	{r7}
 800c720:	4770      	bx	lr
	...

0800c724 <_ZN12CGraphicFont7addFontEtPKNS_11TImgCharMapEtth>:

CGraphicFont::SFont CGraphicFont::m_fonts[FONTS_LENGTH];

void CGraphicFont::addFont(uint16_t fontID, const TImgCharMap* imgCharMap, uint16_t length, uint16_t fontHeight,
        uint8_t spaceSize)
{
 800c724:	b480      	push	{r7}
 800c726:	b087      	sub	sp, #28
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60b9      	str	r1, [r7, #8]
 800c72c:	4611      	mov	r1, r2
 800c72e:	461a      	mov	r2, r3
 800c730:	4603      	mov	r3, r0
 800c732:	81fb      	strh	r3, [r7, #14]
 800c734:	460b      	mov	r3, r1
 800c736:	81bb      	strh	r3, [r7, #12]
 800c738:	4613      	mov	r3, r2
 800c73a:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < FONTS_LENGTH; i++)
 800c73c:	2300      	movs	r3, #0
 800c73e:	82fb      	strh	r3, [r7, #22]
 800c740:	8afb      	ldrh	r3, [r7, #22]
 800c742:	2b0b      	cmp	r3, #11
 800c744:	dc41      	bgt.n	800c7ca <_ZN12CGraphicFont7addFontEtPKNS_11TImgCharMapEtth+0xa6>
    {
        if (m_fonts[i].imgCharMap == NULL)
 800c746:	8afa      	ldrh	r2, [r7, #22]
 800c748:	4922      	ldr	r1, [pc, #136]	; (800c7d4 <_ZN12CGraphicFont7addFontEtPKNS_11TImgCharMapEtth+0xb0>)
 800c74a:	4613      	mov	r3, r2
 800c74c:	005b      	lsls	r3, r3, #1
 800c74e:	4413      	add	r3, r2
 800c750:	009b      	lsls	r3, r3, #2
 800c752:	440b      	add	r3, r1
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d133      	bne.n	800c7c2 <_ZN12CGraphicFont7addFontEtPKNS_11TImgCharMapEtth+0x9e>
        {
            m_fonts[i].imgCharMap = imgCharMap;
 800c75a:	8afa      	ldrh	r2, [r7, #22]
 800c75c:	491d      	ldr	r1, [pc, #116]	; (800c7d4 <_ZN12CGraphicFont7addFontEtPKNS_11TImgCharMapEtth+0xb0>)
 800c75e:	4613      	mov	r3, r2
 800c760:	005b      	lsls	r3, r3, #1
 800c762:	4413      	add	r3, r2
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	440b      	add	r3, r1
 800c768:	68ba      	ldr	r2, [r7, #8]
 800c76a:	601a      	str	r2, [r3, #0]
            m_fonts[i].length = length;
 800c76c:	8afa      	ldrh	r2, [r7, #22]
 800c76e:	4919      	ldr	r1, [pc, #100]	; (800c7d4 <_ZN12CGraphicFont7addFontEtPKNS_11TImgCharMapEtth+0xb0>)
 800c770:	4613      	mov	r3, r2
 800c772:	005b      	lsls	r3, r3, #1
 800c774:	4413      	add	r3, r2
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	440b      	add	r3, r1
 800c77a:	3304      	adds	r3, #4
 800c77c:	89ba      	ldrh	r2, [r7, #12]
 800c77e:	801a      	strh	r2, [r3, #0]
            m_fonts[i].fontID = fontID;
 800c780:	8afa      	ldrh	r2, [r7, #22]
 800c782:	4914      	ldr	r1, [pc, #80]	; (800c7d4 <_ZN12CGraphicFont7addFontEtPKNS_11TImgCharMapEtth+0xb0>)
 800c784:	4613      	mov	r3, r2
 800c786:	005b      	lsls	r3, r3, #1
 800c788:	4413      	add	r3, r2
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	440b      	add	r3, r1
 800c78e:	3306      	adds	r3, #6
 800c790:	89fa      	ldrh	r2, [r7, #14]
 800c792:	801a      	strh	r2, [r3, #0]
            m_fonts[i].spaceSize = spaceSize;
 800c794:	8afa      	ldrh	r2, [r7, #22]
 800c796:	490f      	ldr	r1, [pc, #60]	; (800c7d4 <_ZN12CGraphicFont7addFontEtPKNS_11TImgCharMapEtth+0xb0>)
 800c798:	4613      	mov	r3, r2
 800c79a:	005b      	lsls	r3, r3, #1
 800c79c:	4413      	add	r3, r2
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	440b      	add	r3, r1
 800c7a2:	330a      	adds	r3, #10
 800c7a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c7a8:	701a      	strb	r2, [r3, #0]
            m_fonts[i].fontHeight = fontHeight;
 800c7aa:	8afa      	ldrh	r2, [r7, #22]
 800c7ac:	4909      	ldr	r1, [pc, #36]	; (800c7d4 <_ZN12CGraphicFont7addFontEtPKNS_11TImgCharMapEtth+0xb0>)
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	005b      	lsls	r3, r3, #1
 800c7b2:	4413      	add	r3, r2
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	440b      	add	r3, r1
 800c7b8:	3308      	adds	r3, #8
 800c7ba:	88fa      	ldrh	r2, [r7, #6]
 800c7bc:	801a      	strh	r2, [r3, #0]
            break;
 800c7be:	bf00      	nop
        }
    }
}
 800c7c0:	e003      	b.n	800c7ca <_ZN12CGraphicFont7addFontEtPKNS_11TImgCharMapEtth+0xa6>
    for (uint16_t i = 0; i < FONTS_LENGTH; i++)
 800c7c2:	8afb      	ldrh	r3, [r7, #22]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	82fb      	strh	r3, [r7, #22]
 800c7c8:	e7ba      	b.n	800c740 <_ZN12CGraphicFont7addFontEtPKNS_11TImgCharMapEtth+0x1c>
}
 800c7ca:	bf00      	nop
 800c7cc:	371c      	adds	r7, #28
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bc80      	pop	{r7}
 800c7d2:	4770      	bx	lr
 800c7d4:	20000954 	.word	0x20000954

0800c7d8 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb>:
}

void CGraphicFont::drawText(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint32_t stringAddress,
        const char* stringPtr, uint16_t fontID, TPrintCase printCase, TAlignText alignText, TMultiline mulitiline,
        const TColorDesc& COLOR, bool escaping)
{
 800c7d8:	b590      	push	{r4, r7, lr}
 800c7da:	b08f      	sub	sp, #60	; 0x3c
 800c7dc:	af08      	add	r7, sp, #32
 800c7de:	4604      	mov	r4, r0
 800c7e0:	4608      	mov	r0, r1
 800c7e2:	4611      	mov	r1, r2
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	4623      	mov	r3, r4
 800c7e8:	80fb      	strh	r3, [r7, #6]
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	80bb      	strh	r3, [r7, #4]
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	807b      	strh	r3, [r7, #2]
 800c7f2:	4613      	mov	r3, r2
 800c7f4:	803b      	strh	r3, [r7, #0]
#ifdef SUBTITLES_TEST
    CGraphicFontSubtitlesTest::drawText(x1, y1, x2, y2, stringAddress, fontID, printCase, alignText, mulitiline);
#endif

    CGraphicFont::SFont *font = getFont(fontID);
 800c7f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f000 f901 	bl	800ca00 <_ZN12CGraphicFont7getFontEt>
 800c7fe:	6138      	str	r0, [r7, #16]
    switch (mulitiline)
 800c800:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c804:	2b00      	cmp	r3, #0
 800c806:	d006      	beq.n	800c816 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb+0x3e>
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f2c0 80bb 	blt.w	800c984 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb+0x1ac>
 800c80e:	2b03      	cmp	r3, #3
 800c810:	f300 80b8 	bgt.w	800c984 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb+0x1ac>
 800c814:	e099      	b.n	800c94a <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb+0x172>
    {
        case MULTILINE_OFF:
            switch (alignText)
 800c816:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d03d      	beq.n	800c89a <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb+0xc2>
 800c81e:	2b02      	cmp	r3, #2
 800c820:	d002      	beq.n	800c828 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb+0x50>
 800c822:	2b00      	cmp	r3, #0
 800c824:	d07b      	beq.n	800c91e <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb+0x146>
                            printCase,
                            COLOR,
                            escaping);
                break;
            }
        break;
 800c826:	e0ad      	b.n	800c984 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb+0x1ac>
                            escaping);
 800c828:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c82c:	9304      	str	r3, [sp, #16]
 800c82e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c830:	9303      	str	r3, [sp, #12]
 800c832:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c836:	9302      	str	r3, [sp, #8]
 800c838:	2301      	movs	r3, #1
 800c83a:	9301      	str	r3, [sp, #4]
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c844:	2100      	movs	r1, #0
 800c846:	2000      	movs	r0, #0
 800c848:	f000 fbee 	bl	800d028 <_ZN12CGraphicFont17drawTextInternallEssmPKcPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb>
 800c84c:	4603      	mov	r3, r0
 800c84e:	81fb      	strh	r3, [r7, #14]
                    posX = ((x1 + x2) >> 1) - (textWidth >> 1) + 1;
 800c850:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c854:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c858:	4413      	add	r3, r2
 800c85a:	105b      	asrs	r3, r3, #1
 800c85c:	b29a      	uxth	r2, r3
 800c85e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c862:	105b      	asrs	r3, r3, #1
 800c864:	b29b      	uxth	r3, r3
 800c866:	1ad3      	subs	r3, r2, r3
 800c868:	b29b      	uxth	r3, r3
 800c86a:	3301      	adds	r3, #1
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	81bb      	strh	r3, [r7, #12]
                            escaping);
 800c870:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800c874:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 800c878:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c87c:	9304      	str	r3, [sp, #16]
 800c87e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c880:	9303      	str	r3, [sp, #12]
 800c882:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c886:	9302      	str	r3, [sp, #8]
 800c888:	2300      	movs	r3, #0
 800c88a:	9301      	str	r3, [sp, #4]
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	9300      	str	r3, [sp, #0]
 800c890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c894:	f000 fbc8 	bl	800d028 <_ZN12CGraphicFont17drawTextInternallEssmPKcPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb>
                break;
 800c898:	e056      	b.n	800c948 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb+0x170>
                            escaping);
 800c89a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c89e:	9304      	str	r3, [sp, #16]
 800c8a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8a2:	9303      	str	r3, [sp, #12]
 800c8a4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c8a8:	9302      	str	r3, [sp, #8]
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	9301      	str	r3, [sp, #4]
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	9300      	str	r3, [sp, #0]
 800c8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8b6:	2100      	movs	r1, #0
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	f000 fbb5 	bl	800d028 <_ZN12CGraphicFont17drawTextInternallEssmPKcPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	82fb      	strh	r3, [r7, #22]
                    length--;
 800c8c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	82fb      	strh	r3, [r7, #22]
                    if (length > x2 - x1)
 800c8ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8d2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800c8d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8da:	1acb      	subs	r3, r1, r3
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	dd04      	ble.n	800c8ea <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb+0x112>
                        length = x2 - x1;
 800c8e0:	887a      	ldrh	r2, [r7, #2]
 800c8e2:	88fb      	ldrh	r3, [r7, #6]
 800c8e4:	1ad3      	subs	r3, r2, r3
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	82fb      	strh	r3, [r7, #22]
                    x1 = x2 - length;
 800c8ea:	887a      	ldrh	r2, [r7, #2]
 800c8ec:	8afb      	ldrh	r3, [r7, #22]
 800c8ee:	1ad3      	subs	r3, r2, r3
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	80fb      	strh	r3, [r7, #6]
                            escaping);
 800c8f4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800c8f8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800c8fc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c900:	9304      	str	r3, [sp, #16]
 800c902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c904:	9303      	str	r3, [sp, #12]
 800c906:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c90a:	9302      	str	r3, [sp, #8]
 800c90c:	2300      	movs	r3, #0
 800c90e:	9301      	str	r3, [sp, #4]
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	9300      	str	r3, [sp, #0]
 800c914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c918:	f000 fb86 	bl	800d028 <_ZN12CGraphicFont17drawTextInternallEssmPKcPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb>
                break;
 800c91c:	e014      	b.n	800c948 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb+0x170>
                            escaping);
 800c91e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800c922:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800c926:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c92a:	9304      	str	r3, [sp, #16]
 800c92c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c92e:	9303      	str	r3, [sp, #12]
 800c930:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c934:	9302      	str	r3, [sp, #8]
 800c936:	2300      	movs	r3, #0
 800c938:	9301      	str	r3, [sp, #4]
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	9300      	str	r3, [sp, #0]
 800c93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c942:	f000 fb71 	bl	800d028 <_ZN12CGraphicFont17drawTextInternallEssmPKcPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb>
                break;
 800c946:	bf00      	nop
        break;
 800c948:	e01c      	b.n	800c984 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb+0x1ac>
                    stringPtr,
                    font,
                    printCase,
                    alignText,
                    mulitiline,
                    COLOR);
 800c94a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800c94e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c952:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800c956:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800c95a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c95c:	9306      	str	r3, [sp, #24]
 800c95e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c962:	9305      	str	r3, [sp, #20]
 800c964:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c968:	9304      	str	r3, [sp, #16]
 800c96a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c96e:	9303      	str	r3, [sp, #12]
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	9302      	str	r3, [sp, #8]
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c976:	9301      	str	r3, [sp, #4]
 800c978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97a:	9300      	str	r3, [sp, #0]
 800c97c:	4623      	mov	r3, r4
 800c97e:	f000 fc57 	bl	800d230 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc>
        break;
 800c982:	bf00      	nop
    }
}
 800c984:	bf00      	nop
 800c986:	371c      	adds	r7, #28
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd90      	pop	{r4, r7, pc}

0800c98c <_ZN12CGraphicFont13getFontHeightEt>:

int16_t CGraphicFont::getFontHeight(uint16_t fontID)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	4603      	mov	r3, r0
 800c994:	80fb      	strh	r3, [r7, #6]
    CGraphicFont::SFont *font = getFont(fontID);
 800c996:	88fb      	ldrh	r3, [r7, #6]
 800c998:	4618      	mov	r0, r3
 800c99a:	f000 f831 	bl	800ca00 <_ZN12CGraphicFont7getFontEt>
 800c99e:	60f8      	str	r0, [r7, #12]
    return font->fontHeight;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	891b      	ldrh	r3, [r3, #8]
 800c9a4:	b21b      	sxth	r3, r3
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3710      	adds	r7, #16
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
	...

0800c9b0 <_ZN12CGraphicFont12getTextWidthEmPKctNS_10TPrintCaseE>:
    CGraphicFont::SFont *font = getFont(fontID);
    return font->spaceSize;
}

int16_t CGraphicFont::getTextWidth(uint32_t stringAddress, const char* stringPtr, uint16_t fontID, TPrintCase printCase)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b08c      	sub	sp, #48	; 0x30
 800c9b4:	af06      	add	r7, sp, #24
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	4611      	mov	r1, r2
 800c9bc:	461a      	mov	r2, r3
 800c9be:	460b      	mov	r3, r1
 800c9c0:	80fb      	strh	r3, [r7, #6]
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	717b      	strb	r3, [r7, #5]
    CGraphicFont::SFont *font = getFont(fontID);
 800c9c6:	88fb      	ldrh	r3, [r7, #6]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f000 f819 	bl	800ca00 <_ZN12CGraphicFont7getFontEt>
 800c9ce:	6178      	str	r0, [r7, #20]
            stringAddress,
            stringPtr,
            font,
            true,
            printCase,
            CColor::COLOR_TRANSPARENT);
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	9304      	str	r3, [sp, #16]
 800c9d4:	4b09      	ldr	r3, [pc, #36]	; (800c9fc <_ZN12CGraphicFont12getTextWidthEmPKctNS_10TPrintCaseE+0x4c>)
 800c9d6:	9303      	str	r3, [sp, #12]
 800c9d8:	797b      	ldrb	r3, [r7, #5]
 800c9da:	9302      	str	r3, [sp, #8]
 800c9dc:	2301      	movs	r3, #1
 800c9de:	9301      	str	r3, [sp, #4]
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	2000      	movs	r0, #0
 800c9ec:	f000 fb1c 	bl	800d028 <_ZN12CGraphicFont17drawTextInternallEssmPKcPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb>
 800c9f0:	4603      	mov	r3, r0
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3718      	adds	r7, #24
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	080222f4 	.word	0x080222f4

0800ca00 <_ZN12CGraphicFont7getFontEt>:
    uint32_t imgAddress = getCharImgAddress(font, charCode);
    return getImageWidth(imgAddress);
}

CGraphicFont::SFont *CGraphicFont::getFont(uint16_t fontID)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b085      	sub	sp, #20
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	4603      	mov	r3, r0
 800ca08:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < FONTS_LENGTH; i++)
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	81fb      	strh	r3, [r7, #14]
 800ca0e:	89fb      	ldrh	r3, [r7, #14]
 800ca10:	2b0b      	cmp	r3, #11
 800ca12:	dc17      	bgt.n	800ca44 <_ZN12CGraphicFont7getFontEt+0x44>
    {
        if (m_fonts[i].fontID == fontID)
 800ca14:	89fa      	ldrh	r2, [r7, #14]
 800ca16:	490e      	ldr	r1, [pc, #56]	; (800ca50 <_ZN12CGraphicFont7getFontEt+0x50>)
 800ca18:	4613      	mov	r3, r2
 800ca1a:	005b      	lsls	r3, r3, #1
 800ca1c:	4413      	add	r3, r2
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	440b      	add	r3, r1
 800ca22:	3306      	adds	r3, #6
 800ca24:	881b      	ldrh	r3, [r3, #0]
 800ca26:	88fa      	ldrh	r2, [r7, #6]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d107      	bne.n	800ca3c <_ZN12CGraphicFont7getFontEt+0x3c>
        {
            return &m_fonts[i];
 800ca2c:	89fa      	ldrh	r2, [r7, #14]
 800ca2e:	4613      	mov	r3, r2
 800ca30:	005b      	lsls	r3, r3, #1
 800ca32:	4413      	add	r3, r2
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	4a06      	ldr	r2, [pc, #24]	; (800ca50 <_ZN12CGraphicFont7getFontEt+0x50>)
 800ca38:	4413      	add	r3, r2
 800ca3a:	e004      	b.n	800ca46 <_ZN12CGraphicFont7getFontEt+0x46>
    for (uint16_t i = 0; i < FONTS_LENGTH; i++)
 800ca3c:	89fb      	ldrh	r3, [r7, #14]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	81fb      	strh	r3, [r7, #14]
 800ca42:	e7e4      	b.n	800ca0e <_ZN12CGraphicFont7getFontEt+0xe>
        }
    }
    return NULL;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3714      	adds	r7, #20
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bc80      	pop	{r7}
 800ca4e:	4770      	bx	lr
 800ca50:	20000954 	.word	0x20000954

0800ca54 <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE>:

wchar_t CGraphicFont::convertChar(SFont *font, wchar_t charCode, TPrintCase printCase)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b08b      	sub	sp, #44	; 0x2c
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	4613      	mov	r3, r2
 800ca60:	71fb      	strb	r3, [r7, #7]
    wchar_t outChar = charCode;
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	627b      	str	r3, [r7, #36]	; 0x24

    switch (printCase)
 800ca66:	79fb      	ldrb	r3, [r7, #7]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d003      	beq.n	800ca74 <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0x20>
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	d04c      	beq.n	800cb0a <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0xb6>
 800ca70:	2b00      	cmp	r3, #0
    {
        case PR_NORMAL:
        break;
 800ca72:	e097      	b.n	800cba4 <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0x150>

        case PR_UPPER:
        {
            int32_t aIndex = -1;
 800ca74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca78:	623b      	str	r3, [r7, #32]
            for (int32_t i = 0; i < font->length; i++)
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	61fb      	str	r3, [r7, #28]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	889b      	ldrh	r3, [r3, #4]
 800ca82:	461a      	mov	r2, r3
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	f340 8089 	ble.w	800cb9e <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0x14a>
            {
                if (font->imgCharMap[i].charCode == 'a')
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	00db      	lsls	r3, r3, #3
 800ca94:	4413      	add	r3, r2
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b61      	cmp	r3, #97	; 0x61
 800ca9a:	d101      	bne.n	800caa0 <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0x4c>
                {
                    aIndex = i;
 800ca9c:	69fb      	ldr	r3, [r7, #28]
 800ca9e:	623b      	str	r3, [r7, #32]
                }

                if (font->imgCharMap[i].charCode == charCode)
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	00db      	lsls	r3, r3, #3
 800caa8:	4413      	add	r3, r2
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d125      	bne.n	800cafe <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0xaa>
                {
                    if ((aIndex != -1) && (i + 1 < font->length) && (i >= aIndex) && (i % 2 == (aIndex % 2)))
 800cab2:	6a3b      	ldr	r3, [r7, #32]
 800cab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cab8:	d025      	beq.n	800cb06 <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0xb2>
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	3301      	adds	r3, #1
 800cabe:	68fa      	ldr	r2, [r7, #12]
 800cac0:	8892      	ldrh	r2, [r2, #4]
 800cac2:	4293      	cmp	r3, r2
 800cac4:	da1f      	bge.n	800cb06 <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0xb2>
 800cac6:	69fa      	ldr	r2, [r7, #28]
 800cac8:	6a3b      	ldr	r3, [r7, #32]
 800caca:	429a      	cmp	r2, r3
 800cacc:	db1b      	blt.n	800cb06 <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0xb2>
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f003 0301 	and.w	r3, r3, #1
 800cad6:	bfb8      	it	lt
 800cad8:	425b      	neglt	r3, r3
 800cada:	461a      	mov	r2, r3
 800cadc:	6a3b      	ldr	r3, [r7, #32]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	f003 0301 	and.w	r3, r3, #1
 800cae4:	bfb8      	it	lt
 800cae6:	425b      	neglt	r3, r3
 800cae8:	429a      	cmp	r2, r3
 800caea:	d10c      	bne.n	800cb06 <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0xb2>
                    {
                        outChar = font->imgCharMap[i + 1].charCode;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681a      	ldr	r2, [r3, #0]
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	3301      	adds	r3, #1
 800caf4:	00db      	lsls	r3, r3, #3
 800caf6:	4413      	add	r3, r2
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                    break;
 800cafc:	e003      	b.n	800cb06 <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0xb2>
            for (int32_t i = 0; i < font->length; i++)
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	3301      	adds	r3, #1
 800cb02:	61fb      	str	r3, [r7, #28]
 800cb04:	e7bb      	b.n	800ca7e <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0x2a>
                    break;
 800cb06:	bf00      	nop
                }
            }
        }
        break;
 800cb08:	e049      	b.n	800cb9e <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0x14a>

        case PR_LOWER:
        {
            int32_t aIndex = -1;
 800cb0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb0e:	61bb      	str	r3, [r7, #24]
            for (int32_t i = 0; i < font->length; i++)
 800cb10:	2300      	movs	r3, #0
 800cb12:	617b      	str	r3, [r7, #20]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	889b      	ldrh	r3, [r3, #4]
 800cb18:	461a      	mov	r2, r3
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	dd40      	ble.n	800cba2 <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0x14e>
            {
                if (font->imgCharMap[i].charCode == 'a')
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	00db      	lsls	r3, r3, #3
 800cb28:	4413      	add	r3, r2
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2b61      	cmp	r3, #97	; 0x61
 800cb2e:	d101      	bne.n	800cb34 <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0xe0>
                {
                    aIndex = i;
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	61bb      	str	r3, [r7, #24]
                }

                if (font->imgCharMap[i].charCode == charCode)
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	00db      	lsls	r3, r3, #3
 800cb3c:	4413      	add	r3, r2
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d125      	bne.n	800cb92 <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0x13e>
                {
                    if ((aIndex != -1) && (i - 1 >= 0) && (i >= aIndex) && (i % 2 != (aIndex % 2)))
 800cb46:	69bb      	ldr	r3, [r7, #24]
 800cb48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb4c:	d025      	beq.n	800cb9a <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0x146>
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	3b01      	subs	r3, #1
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	db21      	blt.n	800cb9a <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0x146>
 800cb56:	697a      	ldr	r2, [r7, #20]
 800cb58:	69bb      	ldr	r3, [r7, #24]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	db1d      	blt.n	800cb9a <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0x146>
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f003 0301 	and.w	r3, r3, #1
 800cb66:	bfb8      	it	lt
 800cb68:	425b      	neglt	r3, r3
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	69bb      	ldr	r3, [r7, #24]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f003 0301 	and.w	r3, r3, #1
 800cb74:	bfb8      	it	lt
 800cb76:	425b      	neglt	r3, r3
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d00e      	beq.n	800cb9a <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0x146>
                    {
                        outChar = font->imgCharMap[i - 1].charCode;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800cb86:	3b01      	subs	r3, #1
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	4413      	add	r3, r2
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                    break;
 800cb90:	e003      	b.n	800cb9a <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0x146>
            for (int32_t i = 0; i < font->length; i++)
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	3301      	adds	r3, #1
 800cb96:	617b      	str	r3, [r7, #20]
 800cb98:	e7bc      	b.n	800cb14 <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0xc0>
                    break;
 800cb9a:	bf00      	nop
                }
            }
        }
        break;
 800cb9c:	e001      	b.n	800cba2 <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0x14e>
        break;
 800cb9e:	bf00      	nop
 800cba0:	e000      	b.n	800cba4 <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE+0x150>
        break;
 800cba2:	bf00      	nop
    }

    return outChar;
 800cba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	372c      	adds	r7, #44	; 0x2c
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bc80      	pop	{r7}
 800cbae:	4770      	bx	lr

0800cbb0 <_ZN12CGraphicFont17getCharImgAddressEPNS_5SFontEwb>:

uint32_t CGraphicFont::getCharImgAddress(SFont *font, wchar_t charCode, bool hideHash)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b089      	sub	sp, #36	; 0x24
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	4613      	mov	r3, r2
 800cbbc:	71fb      	strb	r3, [r7, #7]
    int16_t index = 0;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	83fb      	strh	r3, [r7, #30]
    uint32_t imgAddress = 0;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	61bb      	str	r3, [r7, #24]
    uint32_t hashAddress = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	617b      	str	r3, [r7, #20]

    for (index = 0; index < font->length; index++)
 800cbca:	2300      	movs	r3, #0
 800cbcc:	83fb      	strh	r3, [r7, #30]
 800cbce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	8892      	ldrh	r2, [r2, #4]
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	da30      	bge.n	800cc3c <_ZN12CGraphicFont17getCharImgAddressEPNS_5SFontEwb+0x8c>
    {
        if (font->imgCharMap[index].charCode == charCode)
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cbe2:	00db      	lsls	r3, r3, #3
 800cbe4:	4413      	add	r3, r2
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d108      	bne.n	800cc00 <_ZN12CGraphicFont17getCharImgAddressEPNS_5SFontEwb+0x50>
        {
            imgAddress = font->imgCharMap[index].imgAddress;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cbf6:	00db      	lsls	r3, r3, #3
 800cbf8:	4413      	add	r3, r2
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	61bb      	str	r3, [r7, #24]
            break;
 800cbfe:	e01d      	b.n	800cc3c <_ZN12CGraphicFont17getCharImgAddressEPNS_5SFontEwb+0x8c>
        }
        // dla każdego fonta sprawdzam gdzie lezy znak '#' jeśli nie znajdę znaku podanego jako charCode to wstawiam tam '?'
        // zabieg ten ma umożliwić szybkie odnalezienie braku jakiegoś znaku (np. diakrytycznego) w czcionce
        if (font->imgCharMap[index].charCode == (hideHash ? ' ' : '?'))
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cc08:	00db      	lsls	r3, r3, #3
 800cc0a:	4413      	add	r3, r2
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	79fb      	ldrb	r3, [r7, #7]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d001      	beq.n	800cc18 <_ZN12CGraphicFont17getCharImgAddressEPNS_5SFontEwb+0x68>
 800cc14:	2320      	movs	r3, #32
 800cc16:	e000      	b.n	800cc1a <_ZN12CGraphicFont17getCharImgAddressEPNS_5SFontEwb+0x6a>
 800cc18:	233f      	movs	r3, #63	; 0x3f
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d107      	bne.n	800cc2e <_ZN12CGraphicFont17getCharImgAddressEPNS_5SFontEwb+0x7e>
        {
            hashAddress = font->imgCharMap[index].imgAddress;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681a      	ldr	r2, [r3, #0]
 800cc22:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cc26:	00db      	lsls	r3, r3, #3
 800cc28:	4413      	add	r3, r2
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	617b      	str	r3, [r7, #20]
    for (index = 0; index < font->length; index++)
 800cc2e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	3301      	adds	r3, #1
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	83fb      	strh	r3, [r7, #30]
 800cc3a:	e7c8      	b.n	800cbce <_ZN12CGraphicFont17getCharImgAddressEPNS_5SFontEwb+0x1e>
        }
    }
    // jeśli poszukiwany znak nie został odnaleziony w czcionce to zostanie zastąpiony przez '?'
    imgAddress = imgAddress == 0? hashAddress : imgAddress;
 800cc3c:	69bb      	ldr	r3, [r7, #24]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d101      	bne.n	800cc46 <_ZN12CGraphicFont17getCharImgAddressEPNS_5SFontEwb+0x96>
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	e000      	b.n	800cc48 <_ZN12CGraphicFont17getCharImgAddressEPNS_5SFontEwb+0x98>
 800cc46:	69bb      	ldr	r3, [r7, #24]
 800cc48:	61bb      	str	r3, [r7, #24]

    return imgAddress;
 800cc4a:	69bb      	ldr	r3, [r7, #24]
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3724      	adds	r7, #36	; 0x24
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bc80      	pop	{r7}
 800cc54:	4770      	bx	lr
	...

0800cc58 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE>:

void CGraphicFont::createLineBreaks(SFont *font, int16_t maxWidth, int16_t maxHeight, wchar_t* buffer,
        TPrintCase printCase)
{
 800cc58:	b590      	push	{r4, r7, lr}
 800cc5a:	f2ad 5d44 	subw	sp, sp, #1348	; 0x544
 800cc5e:	af06      	add	r7, sp, #24
 800cc60:	f107 040c 	add.w	r4, r7, #12
 800cc64:	6020      	str	r0, [r4, #0]
 800cc66:	4608      	mov	r0, r1
 800cc68:	4611      	mov	r1, r2
 800cc6a:	1d3a      	adds	r2, r7, #4
 800cc6c:	6013      	str	r3, [r2, #0]
 800cc6e:	f107 030a 	add.w	r3, r7, #10
 800cc72:	4602      	mov	r2, r0
 800cc74:	801a      	strh	r2, [r3, #0]
 800cc76:	f107 0308 	add.w	r3, r7, #8
 800cc7a:	460a      	mov	r2, r1
 800cc7c:	801a      	strh	r2, [r3, #0]
    if (maxWidth > 50 && maxHeight > 0)
 800cc7e:	f107 030a 	add.w	r3, r7, #10
 800cc82:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc86:	2b32      	cmp	r3, #50	; 0x32
 800cc88:	f340 80a0 	ble.w	800cdcc <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x174>
 800cc8c:	f107 0308 	add.w	r3, r7, #8
 800cc90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	f340 8099 	ble.w	800cdcc <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x174>
    {
        wchar_t stringBufferUtf[STRING_BUFFER_SIZE];
        int16_t i = 0;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	f8a7 3526 	strh.w	r3, [r7, #1318]	; 0x526
        do
        {
            stringBufferUtf[i] = buffer[i];
 800cca0:	f9b7 2526 	ldrsh.w	r2, [r7, #1318]	; 0x526
 800cca4:	f9b7 3526 	ldrsh.w	r3, [r7, #1318]	; 0x526
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	1d39      	adds	r1, r7, #4
 800ccac:	6809      	ldr	r1, [r1, #0]
 800ccae:	440b      	add	r3, r1
 800ccb0:	6819      	ldr	r1, [r3, #0]
 800ccb2:	f107 0310 	add.w	r3, r7, #16
 800ccb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
        while (stringBufferUtf[i++]);
 800ccba:	f9b7 2526 	ldrsh.w	r2, [r7, #1318]	; 0x526
 800ccbe:	b293      	uxth	r3, r2
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	f8a7 3526 	strh.w	r3, [r7, #1318]	; 0x526
 800ccc8:	f107 0310 	add.w	r3, r7, #16
 800cccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        do
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	bf14      	ite	ne
 800ccd4:	2301      	movne	r3, #1
 800ccd6:	2300      	moveq	r3, #0
 800ccd8:	b2db      	uxtb	r3, r3
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d000      	beq.n	800cce0 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x88>
 800ccde:	e7df      	b.n	800cca0 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x48>

        createLineBreaks(font, maxWidth - (font->fontHeight / 2), 0, stringBufferUtf, printCase);
 800cce0:	f107 030a 	add.w	r3, r7, #10
 800cce4:	881a      	ldrh	r2, [r3, #0]
 800cce6:	f107 030c 	add.w	r3, r7, #12
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	891b      	ldrh	r3, [r3, #8]
 800ccee:	085b      	lsrs	r3, r3, #1
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	1ad3      	subs	r3, r2, r3
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	b219      	sxth	r1, r3
 800ccf8:	f107 0210 	add.w	r2, r7, #16
 800ccfc:	f107 000c 	add.w	r0, r7, #12
 800cd00:	f897 3538 	ldrb.w	r3, [r7, #1336]	; 0x538
 800cd04:	9300      	str	r3, [sp, #0]
 800cd06:	4613      	mov	r3, r2
 800cd08:	2200      	movs	r2, #0
 800cd0a:	6800      	ldr	r0, [r0, #0]
 800cd0c:	f7ff ffa4 	bl	800cc58 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE>
        int16_t lines = 1;
 800cd10:	2301      	movs	r3, #1
 800cd12:	f8a7 3524 	strh.w	r3, [r7, #1316]	; 0x524
        for (int16_t i = 0; buffer[i] != 0; i++)
 800cd16:	2300      	movs	r3, #0
 800cd18:	f8a7 3522 	strh.w	r3, [r7, #1314]	; 0x522
 800cd1c:	f9b7 3522 	ldrsh.w	r3, [r7, #1314]	; 0x522
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	1d3a      	adds	r2, r7, #4
 800cd24:	6812      	ldr	r2, [r2, #0]
 800cd26:	4413      	add	r3, r2
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d016      	beq.n	800cd5c <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x104>
        {
            if (stringBufferUtf[i] == '|')
 800cd2e:	f9b7 2522 	ldrsh.w	r2, [r7, #1314]	; 0x522
 800cd32:	f107 0310 	add.w	r3, r7, #16
 800cd36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd3a:	2b7c      	cmp	r3, #124	; 0x7c
 800cd3c:	d106      	bne.n	800cd4c <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0xf4>
            {
                lines++;
 800cd3e:	f9b7 3524 	ldrsh.w	r3, [r7, #1316]	; 0x524
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	3301      	adds	r3, #1
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	f8a7 3524 	strh.w	r3, [r7, #1316]	; 0x524
        for (int16_t i = 0; buffer[i] != 0; i++)
 800cd4c:	f9b7 3522 	ldrsh.w	r3, [r7, #1314]	; 0x522
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	3301      	adds	r3, #1
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	f8a7 3522 	strh.w	r3, [r7, #1314]	; 0x522
 800cd5a:	e7df      	b.n	800cd1c <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0xc4>
            }
        }

        if ((lines == 1) || (lines * font->fontHeight < maxHeight))
 800cd5c:	f9b7 3524 	ldrsh.w	r3, [r7, #1316]	; 0x524
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d00d      	beq.n	800cd80 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x128>
 800cd64:	f9b7 3524 	ldrsh.w	r3, [r7, #1316]	; 0x524
 800cd68:	f107 020c 	add.w	r2, r7, #12
 800cd6c:	6812      	ldr	r2, [r2, #0]
 800cd6e:	8912      	ldrh	r2, [r2, #8]
 800cd70:	fb02 f203 	mul.w	r2, r2, r3
 800cd74:	f107 0308 	add.w	r3, r7, #8
 800cd78:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	da25      	bge.n	800cdcc <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x174>
        {
            int16_t i = 0;
 800cd80:	2300      	movs	r3, #0
 800cd82:	f8a7 3520 	strh.w	r3, [r7, #1312]	; 0x520
            do
            {
                buffer[i] = stringBufferUtf[i];
 800cd86:	f9b7 3520 	ldrsh.w	r3, [r7, #1312]	; 0x520
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	1d3a      	adds	r2, r7, #4
 800cd8e:	6812      	ldr	r2, [r2, #0]
 800cd90:	4413      	add	r3, r2
 800cd92:	f9b7 1520 	ldrsh.w	r1, [r7, #1312]	; 0x520
 800cd96:	f107 0210 	add.w	r2, r7, #16
 800cd9a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800cd9e:	601a      	str	r2, [r3, #0]
            }
            while (buffer[i++]);
 800cda0:	f9b7 2520 	ldrsh.w	r2, [r7, #1312]	; 0x520
 800cda4:	b293      	uxth	r3, r2
 800cda6:	3301      	adds	r3, #1
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	f8a7 3520 	strh.w	r3, [r7, #1312]	; 0x520
 800cdae:	4613      	mov	r3, r2
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	1d3a      	adds	r2, r7, #4
 800cdb4:	6812      	ldr	r2, [r2, #0]
 800cdb6:	4413      	add	r3, r2
 800cdb8:	681b      	ldr	r3, [r3, #0]
            do
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	bf14      	ite	ne
 800cdbe:	2301      	movne	r3, #1
 800cdc0:	2300      	moveq	r3, #0
 800cdc2:	b2db      	uxtb	r3, r3
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f000 8126 	beq.w	800d016 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x3be>
 800cdca:	e7dc      	b.n	800cd86 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x12e>
            return;
        }
    }

    int8_t charWidth[STRING_BUFFER_SIZE];
    int16_t start = 0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	f8a7 351e 	strh.w	r3, [r7, #1310]	; 0x51e
    int16_t index = 0;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	f8a7 351c 	strh.w	r3, [r7, #1308]	; 0x51c

    for (int16_t i = 0; buffer[i] != 0; i++)
 800cdd8:	2300      	movs	r3, #0
 800cdda:	f8a7 351a 	strh.w	r3, [r7, #1306]	; 0x51a
 800cdde:	f9b7 351a 	ldrsh.w	r3, [r7, #1306]	; 0x51a
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	1d3a      	adds	r2, r7, #4
 800cde6:	6812      	ldr	r2, [r2, #0]
 800cde8:	4413      	add	r3, r2
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d043      	beq.n	800ce78 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x220>
    {
        switch (buffer[i])
 800cdf0:	f9b7 351a 	ldrsh.w	r3, [r7, #1306]	; 0x51a
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	1d3a      	adds	r2, r7, #4
 800cdf8:	6812      	ldr	r2, [r2, #0]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2b5e      	cmp	r3, #94	; 0x5e
 800ce00:	d003      	beq.n	800ce0a <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x1b2>
 800ce02:	2b7c      	cmp	r3, #124	; 0x7c
 800ce04:	f000 8109 	beq.w	800d01a <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x3c2>
 800ce08:	e006      	b.n	800ce18 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x1c0>
        {
            case '^':
                charWidth[i] = 0;
 800ce0a:	f9b7 351a 	ldrsh.w	r3, [r7, #1306]	; 0x51a
 800ce0e:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800ce12:	2100      	movs	r1, #0
 800ce14:	54d1      	strb	r1, [r2, r3]
            break;
 800ce16:	e027      	b.n	800ce68 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x210>

            case '|':
                return;

            default:
                charWidth[i] = drawRamTextInternall( //
 800ce18:	f9b7 451a 	ldrsh.w	r4, [r7, #1306]	; 0x51a
 800ce1c:	f9b7 151a 	ldrsh.w	r1, [r7, #1306]	; 0x51a
 800ce20:	1d3a      	adds	r2, r7, #4
 800ce22:	2300      	movs	r3, #0
 800ce24:	9305      	str	r3, [sp, #20]
 800ce26:	4b7f      	ldr	r3, [pc, #508]	; (800d024 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x3cc>)
 800ce28:	9304      	str	r3, [sp, #16]
 800ce2a:	f897 3538 	ldrb.w	r3, [r7, #1336]	; 0x538
 800ce2e:	9303      	str	r3, [sp, #12]
 800ce30:	2301      	movs	r3, #1
 800ce32:	9302      	str	r3, [sp, #8]
 800ce34:	f107 030c 	add.w	r3, r7, #12
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	9301      	str	r3, [sp, #4]
 800ce3c:	f9b7 351a 	ldrsh.w	r3, [r7, #1306]	; 0x51a
 800ce40:	9300      	str	r3, [sp, #0]
 800ce42:	460b      	mov	r3, r1
 800ce44:	6812      	ldr	r2, [r2, #0]
 800ce46:	2100      	movs	r1, #0
 800ce48:	2000      	movs	r0, #0
 800ce4a:	f000 f971 	bl	800d130 <_ZN12CGraphicFont20drawRamTextInternallEssPwssPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb>
 800ce4e:	4603      	mov	r3, r0
                        i,
                        i,
                        font,
                        true,
                        printCase,
                        CColor::COLOR_TRANSPARENT) + font->spaceSize;
 800ce50:	b2da      	uxtb	r2, r3
 800ce52:	f107 030c 	add.w	r3, r7, #12
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	7a9b      	ldrb	r3, [r3, #10]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	b25a      	sxtb	r2, r3
                charWidth[i] = drawRamTextInternall( //
 800ce60:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800ce64:	551a      	strb	r2, [r3, r4]
            break;
 800ce66:	bf00      	nop
    for (int16_t i = 0; buffer[i] != 0; i++)
 800ce68:	f9b7 351a 	ldrsh.w	r3, [r7, #1306]	; 0x51a
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	3301      	adds	r3, #1
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	f8a7 351a 	strh.w	r3, [r7, #1306]	; 0x51a
 800ce76:	e7b2      	b.n	800cdde <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x186>
        }
    }

    do
    {
        if ((buffer[index] == '^') || (buffer[index] == ' ') || (buffer[index] == 0))
 800ce78:	f9b7 351c 	ldrsh.w	r3, [r7, #1308]	; 0x51c
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	1d3a      	adds	r2, r7, #4
 800ce80:	6812      	ldr	r2, [r2, #0]
 800ce82:	4413      	add	r3, r2
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	2b5e      	cmp	r3, #94	; 0x5e
 800ce88:	d011      	beq.n	800ceae <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x256>
 800ce8a:	f9b7 351c 	ldrsh.w	r3, [r7, #1308]	; 0x51c
 800ce8e:	009b      	lsls	r3, r3, #2
 800ce90:	1d3a      	adds	r2, r7, #4
 800ce92:	6812      	ldr	r2, [r2, #0]
 800ce94:	4413      	add	r3, r2
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	2b20      	cmp	r3, #32
 800ce9a:	d008      	beq.n	800ceae <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x256>
 800ce9c:	f9b7 351c 	ldrsh.w	r3, [r7, #1308]	; 0x51c
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	1d3a      	adds	r2, r7, #4
 800cea4:	6812      	ldr	r2, [r2, #0]
 800cea6:	4413      	add	r3, r2
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d15d      	bne.n	800cf6a <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x312>
        {
            int16_t width = 0;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	f8a7 3518 	strh.w	r3, [r7, #1304]	; 0x518
            for (int16_t i = start; i < index; i++)
 800ceb4:	f8b7 351e 	ldrh.w	r3, [r7, #1310]	; 0x51e
 800ceb8:	f8a7 3516 	strh.w	r3, [r7, #1302]	; 0x516
 800cebc:	f9b7 2516 	ldrsh.w	r2, [r7, #1302]	; 0x516
 800cec0:	f9b7 351c 	ldrsh.w	r3, [r7, #1308]	; 0x51c
 800cec4:	429a      	cmp	r2, r3
 800cec6:	da13      	bge.n	800cef0 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x298>
            {
                width += charWidth[i];
 800cec8:	f9b7 3516 	ldrsh.w	r3, [r7, #1302]	; 0x516
 800cecc:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800ced0:	56d3      	ldrsb	r3, [r2, r3]
 800ced2:	b29a      	uxth	r2, r3
 800ced4:	f8b7 3518 	ldrh.w	r3, [r7, #1304]	; 0x518
 800ced8:	4413      	add	r3, r2
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	f8a7 3518 	strh.w	r3, [r7, #1304]	; 0x518
            for (int16_t i = start; i < index; i++)
 800cee0:	f9b7 3516 	ldrsh.w	r3, [r7, #1302]	; 0x516
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	3301      	adds	r3, #1
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	f8a7 3516 	strh.w	r3, [r7, #1302]	; 0x516
 800ceee:	e7e5      	b.n	800cebc <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x264>
            }

            if (width >= maxWidth)
 800cef0:	f107 030a 	add.w	r3, r7, #10
 800cef4:	f9b7 2518 	ldrsh.w	r2, [r7, #1304]	; 0x518
 800cef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	db34      	blt.n	800cf6a <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x312>
            {
                for (int16_t i = index - 1; i >= start; i--)
 800cf00:	f8b7 351c 	ldrh.w	r3, [r7, #1308]	; 0x51c
 800cf04:	3b01      	subs	r3, #1
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	f8a7 3514 	strh.w	r3, [r7, #1300]	; 0x514
 800cf0c:	f9b7 2514 	ldrsh.w	r2, [r7, #1300]	; 0x514
 800cf10:	f9b7 351e 	ldrsh.w	r3, [r7, #1310]	; 0x51e
 800cf14:	429a      	cmp	r2, r3
 800cf16:	db28      	blt.n	800cf6a <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x312>
                {
                    if ((buffer[i] == '^') || (buffer[i] == ' '))
 800cf18:	f9b7 3514 	ldrsh.w	r3, [r7, #1300]	; 0x514
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	1d3a      	adds	r2, r7, #4
 800cf20:	6812      	ldr	r2, [r2, #0]
 800cf22:	4413      	add	r3, r2
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2b5e      	cmp	r3, #94	; 0x5e
 800cf28:	d008      	beq.n	800cf3c <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x2e4>
 800cf2a:	f9b7 3514 	ldrsh.w	r3, [r7, #1300]	; 0x514
 800cf2e:	009b      	lsls	r3, r3, #2
 800cf30:	1d3a      	adds	r2, r7, #4
 800cf32:	6812      	ldr	r2, [r2, #0]
 800cf34:	4413      	add	r3, r2
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b20      	cmp	r3, #32
 800cf3a:	d10e      	bne.n	800cf5a <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x302>
                    {
                        buffer[i] = '|';
 800cf3c:	f9b7 3514 	ldrsh.w	r3, [r7, #1300]	; 0x514
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	1d3a      	adds	r2, r7, #4
 800cf44:	6812      	ldr	r2, [r2, #0]
 800cf46:	4413      	add	r3, r2
 800cf48:	227c      	movs	r2, #124	; 0x7c
 800cf4a:	601a      	str	r2, [r3, #0]
                        start = i + 1;
 800cf4c:	f8b7 3514 	ldrh.w	r3, [r7, #1300]	; 0x514
 800cf50:	3301      	adds	r3, #1
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	f8a7 351e 	strh.w	r3, [r7, #1310]	; 0x51e
                        break;
 800cf58:	e007      	b.n	800cf6a <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x312>
                for (int16_t i = index - 1; i >= start; i--)
 800cf5a:	f9b7 3514 	ldrsh.w	r3, [r7, #1300]	; 0x514
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	3b01      	subs	r3, #1
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	f8a7 3514 	strh.w	r3, [r7, #1300]	; 0x514
 800cf68:	e7d0      	b.n	800cf0c <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x2b4>
                    }
                }
            }
        }
    }
    while (buffer[index++]);
 800cf6a:	f9b7 251c 	ldrsh.w	r2, [r7, #1308]	; 0x51c
 800cf6e:	b293      	uxth	r3, r2
 800cf70:	3301      	adds	r3, #1
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	f8a7 351c 	strh.w	r3, [r7, #1308]	; 0x51c
 800cf78:	4613      	mov	r3, r2
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	1d3a      	adds	r2, r7, #4
 800cf7e:	6812      	ldr	r2, [r2, #0]
 800cf80:	4413      	add	r3, r2
 800cf82:	681b      	ldr	r3, [r3, #0]
    do
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	bf14      	ite	ne
 800cf88:	2301      	movne	r3, #1
 800cf8a:	2300      	moveq	r3, #0
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d000      	beq.n	800cf94 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x33c>
 800cf92:	e771      	b.n	800ce78 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x220>

    for (int16_t i = 0; buffer[i] != 0; i++)
 800cf94:	2300      	movs	r3, #0
 800cf96:	f8a7 3512 	strh.w	r3, [r7, #1298]	; 0x512
 800cf9a:	f9b7 3512 	ldrsh.w	r3, [r7, #1298]	; 0x512
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	1d3a      	adds	r2, r7, #4
 800cfa2:	6812      	ldr	r2, [r2, #0]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d037      	beq.n	800d01c <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x3c4>
    {
        if (buffer[i] == '^')
 800cfac:	f9b7 3512 	ldrsh.w	r3, [r7, #1298]	; 0x512
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	1d3a      	adds	r2, r7, #4
 800cfb4:	6812      	ldr	r2, [r2, #0]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	2b5e      	cmp	r3, #94	; 0x5e
 800cfbc:	d123      	bne.n	800d006 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x3ae>
        {
            for (int16_t j = i; buffer[j] != 0; j++)
 800cfbe:	f8b7 3512 	ldrh.w	r3, [r7, #1298]	; 0x512
 800cfc2:	f8a7 3510 	strh.w	r3, [r7, #1296]	; 0x510
 800cfc6:	f9b7 3510 	ldrsh.w	r3, [r7, #1296]	; 0x510
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	1d3a      	adds	r2, r7, #4
 800cfce:	6812      	ldr	r2, [r2, #0]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d016      	beq.n	800d006 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x3ae>
            {
                buffer[j] = buffer[j + 1];
 800cfd8:	f9b7 3510 	ldrsh.w	r3, [r7, #1296]	; 0x510
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	1d3a      	adds	r2, r7, #4
 800cfe0:	6812      	ldr	r2, [r2, #0]
 800cfe2:	4413      	add	r3, r2
 800cfe4:	f9b7 2510 	ldrsh.w	r2, [r7, #1296]	; 0x510
 800cfe8:	3201      	adds	r2, #1
 800cfea:	0092      	lsls	r2, r2, #2
 800cfec:	1d39      	adds	r1, r7, #4
 800cfee:	6809      	ldr	r1, [r1, #0]
 800cff0:	440a      	add	r2, r1
 800cff2:	6812      	ldr	r2, [r2, #0]
 800cff4:	601a      	str	r2, [r3, #0]
            for (int16_t j = i; buffer[j] != 0; j++)
 800cff6:	f9b7 3510 	ldrsh.w	r3, [r7, #1296]	; 0x510
 800cffa:	b29b      	uxth	r3, r3
 800cffc:	3301      	adds	r3, #1
 800cffe:	b29b      	uxth	r3, r3
 800d000:	f8a7 3510 	strh.w	r3, [r7, #1296]	; 0x510
 800d004:	e7df      	b.n	800cfc6 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x36e>
    for (int16_t i = 0; buffer[i] != 0; i++)
 800d006:	f9b7 3512 	ldrsh.w	r3, [r7, #1298]	; 0x512
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	3301      	adds	r3, #1
 800d00e:	b29b      	uxth	r3, r3
 800d010:	f8a7 3512 	strh.w	r3, [r7, #1298]	; 0x512
 800d014:	e7c1      	b.n	800cf9a <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x342>
            return;
 800d016:	bf00      	nop
 800d018:	e000      	b.n	800d01c <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE+0x3c4>
                return;
 800d01a:	bf00      	nop
            }
        }
    }
}
 800d01c:	f207 572c 	addw	r7, r7, #1324	; 0x52c
 800d020:	46bd      	mov	sp, r7
 800d022:	bd90      	pop	{r4, r7, pc}
 800d024:	080222f4 	.word	0x080222f4

0800d028 <_ZN12CGraphicFont17drawTextInternallEssmPKcPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb>:

int16_t CGraphicFont::drawTextInternall(int16_t posX, int16_t posY, uint32_t strId, const char* str, SFont *font,
        bool getLength, TPrintCase printCase, const TColorDesc& COLOR, bool escaping)
{
 800d028:	b590      	push	{r4, r7, lr}
 800d02a:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
 800d02e:	af06      	add	r7, sp, #24
 800d030:	4604      	mov	r4, r0
 800d032:	4608      	mov	r0, r1
 800d034:	f107 0108 	add.w	r1, r7, #8
 800d038:	600a      	str	r2, [r1, #0]
 800d03a:	1d3a      	adds	r2, r7, #4
 800d03c:	6013      	str	r3, [r2, #0]
 800d03e:	f107 030e 	add.w	r3, r7, #14
 800d042:	4622      	mov	r2, r4
 800d044:	801a      	strh	r2, [r3, #0]
 800d046:	f107 030c 	add.w	r3, r7, #12
 800d04a:	4602      	mov	r2, r0
 800d04c:	801a      	strh	r2, [r3, #0]
    int16_t retVal = 0;
 800d04e:	2300      	movs	r3, #0
 800d050:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
    int16_t endIndex = 0;
 800d054:	2300      	movs	r3, #0
 800d056:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
    wchar_t stringBufferUtf[STRING_BUFFER_SIZE];

    if (strId != NULL)
 800d05a:	f107 0308 	add.w	r3, r7, #8
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d02e      	beq.n	800d0c2 <_ZN12CGraphicFont17drawTextInternallEssmPKcPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb+0x9a>
    {
        endIndex = CTextResources::copyTextToBuffer(stringBufferUtf, strId, STRING_BUFFER_SIZE);
 800d064:	f107 0308 	add.w	r3, r7, #8
 800d068:	f107 0014 	add.w	r0, r7, #20
 800d06c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d070:	6819      	ldr	r1, [r3, #0]
 800d072:	f002 ff30 	bl	800fed6 <_ZN14CTextResources16copyTextToBufferEPwms>
 800d076:	4603      	mov	r3, r0
 800d078:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
                endIndex,
                font,
                getLength,
                printCase,
                COLOR,
                escaping);
 800d07c:	f107 0214 	add.w	r2, r7, #20
 800d080:	f107 030c 	add.w	r3, r7, #12
 800d084:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d088:	f107 030e 	add.w	r3, r7, #14
 800d08c:	f9b3 0000 	ldrsh.w	r0, [r3]
 800d090:	f897 3438 	ldrb.w	r3, [r7, #1080]	; 0x438
 800d094:	9305      	str	r3, [sp, #20]
 800d096:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800d09a:	9304      	str	r3, [sp, #16]
 800d09c:	f897 3430 	ldrb.w	r3, [r7, #1072]	; 0x430
 800d0a0:	9303      	str	r3, [sp, #12]
 800d0a2:	f897 342c 	ldrb.w	r3, [r7, #1068]	; 0x42c
 800d0a6:	9302      	str	r3, [sp, #8]
 800d0a8:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800d0ac:	9301      	str	r3, [sp, #4]
 800d0ae:	f9b7 3414 	ldrsh.w	r3, [r7, #1044]	; 0x414
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	f000 f83b 	bl	800d130 <_ZN12CGraphicFont20drawRamTextInternallEssPwssPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
 800d0c0:	e02f      	b.n	800d122 <_ZN12CGraphicFont17drawTextInternallEssmPKcPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb+0xfa>
    }
    else
    {
        if (str != NULL)
 800d0c2:	1d3b      	adds	r3, r7, #4
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d02b      	beq.n	800d122 <_ZN12CGraphicFont17drawTextInternallEssmPKcPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb+0xfa>
        {
            endIndex = CTextResources::copyUtfToWchar(stringBufferUtf, str);
 800d0ca:	1d3b      	adds	r3, r7, #4
 800d0cc:	f107 0214 	add.w	r2, r7, #20
 800d0d0:	6819      	ldr	r1, [r3, #0]
 800d0d2:	4610      	mov	r0, r2
 800d0d4:	f002 fe6e 	bl	800fdb4 <_ZN14CTextResources14copyUtfToWcharEPwPKc>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
                    endIndex,
                    font,
                    getLength,
                    printCase,
                    COLOR,
                    escaping);
 800d0de:	f107 0214 	add.w	r2, r7, #20
 800d0e2:	f107 030c 	add.w	r3, r7, #12
 800d0e6:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d0ea:	f107 030e 	add.w	r3, r7, #14
 800d0ee:	f9b3 0000 	ldrsh.w	r0, [r3]
 800d0f2:	f897 3438 	ldrb.w	r3, [r7, #1080]	; 0x438
 800d0f6:	9305      	str	r3, [sp, #20]
 800d0f8:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800d0fc:	9304      	str	r3, [sp, #16]
 800d0fe:	f897 3430 	ldrb.w	r3, [r7, #1072]	; 0x430
 800d102:	9303      	str	r3, [sp, #12]
 800d104:	f897 342c 	ldrb.w	r3, [r7, #1068]	; 0x42c
 800d108:	9302      	str	r3, [sp, #8]
 800d10a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800d10e:	9301      	str	r3, [sp, #4]
 800d110:	f9b7 3414 	ldrsh.w	r3, [r7, #1044]	; 0x414
 800d114:	9300      	str	r3, [sp, #0]
 800d116:	2300      	movs	r3, #0
 800d118:	f000 f80a 	bl	800d130 <_ZN12CGraphicFont20drawRamTextInternallEssPwssPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb>
 800d11c:	4603      	mov	r3, r0
 800d11e:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
        }
    }

    return retVal;
 800d122:	f9b7 3416 	ldrsh.w	r3, [r7, #1046]	; 0x416
}
 800d126:	4618      	mov	r0, r3
 800d128:	f207 471c 	addw	r7, r7, #1052	; 0x41c
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd90      	pop	{r4, r7, pc}

0800d130 <_ZN12CGraphicFont20drawRamTextInternallEssPwssPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb>:

int16_t CGraphicFont::drawRamTextInternall(int16_t posX, int16_t posY, wchar_t* str, int16_t startIndex,
        int16_t endIndex, SFont *font, bool getLength, TPrintCase printCase, const TColorDesc& COLOR, bool escaping)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b088      	sub	sp, #32
 800d134:	af00      	add	r7, sp, #0
 800d136:	60ba      	str	r2, [r7, #8]
 800d138:	461a      	mov	r2, r3
 800d13a:	4603      	mov	r3, r0
 800d13c:	81fb      	strh	r3, [r7, #14]
 800d13e:	460b      	mov	r3, r1
 800d140:	81bb      	strh	r3, [r7, #12]
 800d142:	4613      	mov	r3, r2
 800d144:	80fb      	strh	r3, [r7, #6]
    wchar_t znak = 0;
 800d146:	2300      	movs	r3, #0
 800d148:	61fb      	str	r3, [r7, #28]
    int16_t index = 0;
 800d14a:	2300      	movs	r3, #0
 800d14c:	837b      	strh	r3, [r7, #26]
    int16_t offsetX = 0;
 800d14e:	2300      	movs	r3, #0
 800d150:	833b      	strh	r3, [r7, #24]
    uint32_t imgAddress = 0;
 800d152:	2300      	movs	r3, #0
 800d154:	617b      	str	r3, [r7, #20]

    if (startIndex > endIndex)
 800d156:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d15a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d15e:	429a      	cmp	r2, r3
 800d160:	dd01      	ble.n	800d166 <_ZN12CGraphicFont20drawRamTextInternallEssPwssPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb+0x36>
    {
        return 0;
 800d162:	2300      	movs	r3, #0
 800d164:	e060      	b.n	800d228 <_ZN12CGraphicFont20drawRamTextInternallEssPwssPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb+0xf8>
    }

    for (index = startIndex; index <= endIndex; index++)
 800d166:	88fb      	ldrh	r3, [r7, #6]
 800d168:	837b      	strh	r3, [r7, #26]
 800d16a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800d16e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d172:	429a      	cmp	r2, r3
 800d174:	dc4f      	bgt.n	800d216 <_ZN12CGraphicFont20drawRamTextInternallEssPwssPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb+0xe6>
    {
        znak = str[index];
 800d176:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	68ba      	ldr	r2, [r7, #8]
 800d17e:	4413      	add	r3, r2
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	61fb      	str	r3, [r7, #28]
        if (znak == '|' && !escaping)
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	2b7c      	cmp	r3, #124	; 0x7c
 800d188:	d108      	bne.n	800d19c <_ZN12CGraphicFont20drawRamTextInternallEssPwssPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb+0x6c>
 800d18a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d18e:	f083 0301 	eor.w	r3, r3, #1
 800d192:	b2db      	uxtb	r3, r3
 800d194:	2b00      	cmp	r3, #0
 800d196:	d001      	beq.n	800d19c <_ZN12CGraphicFont20drawRamTextInternallEssPwssPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb+0x6c>
        {
            znak = ' ';
 800d198:	2320      	movs	r3, #32
 800d19a:	61fb      	str	r3, [r7, #28]
        }

        if (znak != '^' || escaping)
 800d19c:	69fb      	ldr	r3, [r7, #28]
 800d19e:	2b5e      	cmp	r3, #94	; 0x5e
 800d1a0:	d103      	bne.n	800d1aa <_ZN12CGraphicFont20drawRamTextInternallEssPwssPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb+0x7a>
 800d1a2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d02e      	beq.n	800d208 <_ZN12CGraphicFont20drawRamTextInternallEssPwssPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb+0xd8>
        {
            znak = convertChar(font, znak, printCase);
 800d1aa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	69f9      	ldr	r1, [r7, #28]
 800d1b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1b4:	f7ff fc4e 	bl	800ca54 <_ZN12CGraphicFont11convertCharEPNS_5SFontEwNS_10TPrintCaseE>
 800d1b8:	61f8      	str	r0, [r7, #28]
            imgAddress = getCharImgAddress(font, znak, escaping);
 800d1ba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d1be:	461a      	mov	r2, r3
 800d1c0:	69f9      	ldr	r1, [r7, #28]
 800d1c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1c4:	f7ff fcf4 	bl	800cbb0 <_ZN12CGraphicFont17getCharImgAddressEPNS_5SFontEwb>
 800d1c8:	6178      	str	r0, [r7, #20]
            if (!getLength)
 800d1ca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800d1ce:	f083 0301 	eor.w	r3, r3, #1
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d00a      	beq.n	800d1ee <_ZN12CGraphicFont20drawRamTextInternallEssPwssPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb+0xbe>
            {
#ifdef SUBTITLES_TEST
                CGraphicFontSubtitlesTest::drawImage(imgAddress, posX + offsetX, posY);
                if(!CGraphicFontSubtitlesTest::m_staticTest)
#endif
                drawImage(imgAddress, posX + offsetX, posY, COLOR);
 800d1d8:	89fa      	ldrh	r2, [r7, #14]
 800d1da:	8b3b      	ldrh	r3, [r7, #24]
 800d1dc:	4413      	add	r3, r2
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	b219      	sxth	r1, r3
 800d1e2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800d1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e8:	6978      	ldr	r0, [r7, #20]
 800d1ea:	f004 f915 	bl	8011418 <_ZN15CGraphicFontHAL9drawImageEmssRK10TColorDesc>
            }
            offsetX += getImageWidth(imgAddress) + font->spaceSize;
 800d1ee:	6978      	ldr	r0, [r7, #20]
 800d1f0:	f004 f92a 	bl	8011448 <_ZN15CGraphicFontHAL13getImageWidthEm>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fa:	7a9b      	ldrb	r3, [r3, #10]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	8b3b      	ldrh	r3, [r7, #24]
 800d202:	4413      	add	r3, r2
 800d204:	b29b      	uxth	r3, r3
 800d206:	833b      	strh	r3, [r7, #24]
    for (index = startIndex; index <= endIndex; index++)
 800d208:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	3301      	adds	r3, #1
 800d210:	b29b      	uxth	r3, r3
 800d212:	837b      	strh	r3, [r7, #26]
 800d214:	e7a9      	b.n	800d16a <_ZN12CGraphicFont20drawRamTextInternallEssPwssPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb+0x3a>
        }
    }
    offsetX -= font->spaceSize;
 800d216:	8b3a      	ldrh	r2, [r7, #24]
 800d218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21a:	7a9b      	ldrb	r3, [r3, #10]
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	1ad3      	subs	r3, r2, r3
 800d220:	b29b      	uxth	r3, r3
 800d222:	833b      	strh	r3, [r7, #24]

    return offsetX;
 800d224:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3720      	adds	r7, #32
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc>:

void CGraphicFont::drawTextMultiline(int16_t posX1, int16_t posY1, int16_t posX2, int16_t posY2, uint32_t strId,
        const char* str, SFont *font, TPrintCase printCase, TAlignText alignText, TMultiline mulitiline,
        const TColorDesc& COLOR)
{
 800d230:	b5b0      	push	{r4, r5, r7, lr}
 800d232:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 800d236:	af06      	add	r7, sp, #24
 800d238:	4605      	mov	r5, r0
 800d23a:	460c      	mov	r4, r1
 800d23c:	4610      	mov	r0, r2
 800d23e:	4619      	mov	r1, r3
 800d240:	1dbb      	adds	r3, r7, #6
 800d242:	462a      	mov	r2, r5
 800d244:	801a      	strh	r2, [r3, #0]
 800d246:	1d3b      	adds	r3, r7, #4
 800d248:	4622      	mov	r2, r4
 800d24a:	801a      	strh	r2, [r3, #0]
 800d24c:	1cbb      	adds	r3, r7, #2
 800d24e:	4602      	mov	r2, r0
 800d250:	801a      	strh	r2, [r3, #0]
 800d252:	463b      	mov	r3, r7
 800d254:	460a      	mov	r2, r1
 800d256:	801a      	strh	r2, [r3, #0]
    int16_t fontHeight = font->fontHeight;
 800d258:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800d25c:	891b      	ldrh	r3, [r3, #8]
 800d25e:	f8a7 3412 	strh.w	r3, [r7, #1042]	; 0x412
    int16_t textWidth = 0;
 800d262:	2300      	movs	r3, #0
 800d264:	f8a7 3410 	strh.w	r3, [r7, #1040]	; 0x410
    int16_t posX = 0;
 800d268:	2300      	movs	r3, #0
 800d26a:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
    int16_t posY = 0;
 800d26e:	2300      	movs	r3, #0
 800d270:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
    wchar_t znak = 0;
 800d274:	2300      	movs	r3, #0
 800d276:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
    int16_t startIndex = 0;
 800d27a:	2300      	movs	r3, #0
 800d27c:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e
    int16_t endIndex = 0;
 800d280:	2300      	movs	r3, #0
 800d282:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
    wchar_t stringBufferUtf[STRING_BUFFER_SIZE];

    if (mulitiline == MULTILINE_CENTER)
 800d286:	f897 344c 	ldrb.w	r3, [r7, #1100]	; 0x44c
 800d28a:	2b02      	cmp	r3, #2
 800d28c:	f040 8099 	bne.w	800d3c2 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x192>
    {
        if (posY2 > posY1)
 800d290:	463a      	mov	r2, r7
 800d292:	1d3b      	adds	r3, r7, #4
 800d294:	f9b2 2000 	ldrsh.w	r2, [r2]
 800d298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	f340 8090 	ble.w	800d3c2 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x192>
        {
            if (strId != NULL)
 800d2a2:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d009      	beq.n	800d2be <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x8e>
            {
                CTextResources::copyTextToBuffer(stringBufferUtf, strId, STRING_BUFFER_SIZE);
 800d2aa:	f107 030c 	add.w	r3, r7, #12
 800d2ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d2b2:	f8d7 1438 	ldr.w	r1, [r7, #1080]	; 0x438
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f002 fe0d 	bl	800fed6 <_ZN14CTextResources16copyTextToBufferEPwms>
 800d2bc:	e00b      	b.n	800d2d6 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0xa6>
            }
            else
            {
                if (str != NULL)
 800d2be:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	f000 81c1 	beq.w	800d64a <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x41a>
                {
                    CTextResources::copyUtfToWchar(stringBufferUtf, str);
 800d2c8:	f107 030c 	add.w	r3, r7, #12
 800d2cc:	f8d7 143c 	ldr.w	r1, [r7, #1084]	; 0x43c
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f002 fd6f 	bl	800fdb4 <_ZN14CTextResources14copyUtfToWcharEPwPKc>
                {
                    return;
                }
            }

            createLineBreaks(font, posX2 - posX1, posY2 - posY1, stringBufferUtf, printCase);
 800d2d6:	1cbb      	adds	r3, r7, #2
 800d2d8:	881a      	ldrh	r2, [r3, #0]
 800d2da:	1dbb      	adds	r3, r7, #6
 800d2dc:	881b      	ldrh	r3, [r3, #0]
 800d2de:	1ad3      	subs	r3, r2, r3
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	b219      	sxth	r1, r3
 800d2e4:	463b      	mov	r3, r7
 800d2e6:	881a      	ldrh	r2, [r3, #0]
 800d2e8:	1d3b      	adds	r3, r7, #4
 800d2ea:	881b      	ldrh	r3, [r3, #0]
 800d2ec:	1ad3      	subs	r3, r2, r3
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	b21a      	sxth	r2, r3
 800d2f2:	f107 000c 	add.w	r0, r7, #12
 800d2f6:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 800d302:	f7ff fca9 	bl	800cc58 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE>

            int16_t index = 0;
 800d306:	2300      	movs	r3, #0
 800d308:	f8a7 341a 	strh.w	r3, [r7, #1050]	; 0x41a
            int8_t lines = 0;
 800d30c:	2300      	movs	r3, #0
 800d30e:	f887 3419 	strb.w	r3, [r7, #1049]	; 0x419

            wchar_t znak = stringBufferUtf[index];
 800d312:	f9b7 241a 	ldrsh.w	r2, [r7, #1050]	; 0x41a
 800d316:	f107 030c 	add.w	r3, r7, #12
 800d31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d31e:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
            while (znak)
 800d322:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800d326:	2b00      	cmp	r3, #0
 800d328:	d022      	beq.n	800d370 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x140>
            {
                if ((znak == '|') || (znak == '^') || (index == 0))
 800d32a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800d32e:	2b7c      	cmp	r3, #124	; 0x7c
 800d330:	d007      	beq.n	800d342 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x112>
 800d332:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800d336:	2b5e      	cmp	r3, #94	; 0x5e
 800d338:	d003      	beq.n	800d342 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x112>
 800d33a:	f9b7 341a 	ldrsh.w	r3, [r7, #1050]	; 0x41a
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d106      	bne.n	800d350 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x120>
                    lines++;
 800d342:	f997 3419 	ldrsb.w	r3, [r7, #1049]	; 0x419
 800d346:	b2db      	uxtb	r3, r3
 800d348:	3301      	adds	r3, #1
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	f887 3419 	strb.w	r3, [r7, #1049]	; 0x419

                index++;
 800d350:	f9b7 341a 	ldrsh.w	r3, [r7, #1050]	; 0x41a
 800d354:	b29b      	uxth	r3, r3
 800d356:	3301      	adds	r3, #1
 800d358:	b29b      	uxth	r3, r3
 800d35a:	f8a7 341a 	strh.w	r3, [r7, #1050]	; 0x41a

                znak = stringBufferUtf[index];
 800d35e:	f9b7 241a 	ldrsh.w	r2, [r7, #1050]	; 0x41a
 800d362:	f107 030c 	add.w	r3, r7, #12
 800d366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d36a:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
            while (znak)
 800d36e:	e7d8      	b.n	800d322 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0xf2>
            }

            int16_t heigth = lines * fontHeight;
 800d370:	f997 3419 	ldrsb.w	r3, [r7, #1049]	; 0x419
 800d374:	b29b      	uxth	r3, r3
 800d376:	f8b7 2412 	ldrh.w	r2, [r7, #1042]	; 0x412
 800d37a:	fb02 f303 	mul.w	r3, r2, r3
 800d37e:	b29b      	uxth	r3, r3
 800d380:	f8a7 340c 	strh.w	r3, [r7, #1036]	; 0x40c
            if (posY2 - posY1 > heigth)
 800d384:	463b      	mov	r3, r7
 800d386:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d38a:	1d3b      	adds	r3, r7, #4
 800d38c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d390:	1ad2      	subs	r2, r2, r3
 800d392:	f9b7 340c 	ldrsh.w	r3, [r7, #1036]	; 0x40c
 800d396:	429a      	cmp	r2, r3
 800d398:	dd13      	ble.n	800d3c2 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x192>
                posY1 += ((posY2 - posY1) - heigth) / 2;
 800d39a:	463b      	mov	r3, r7
 800d39c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d3a0:	1d3b      	adds	r3, r7, #4
 800d3a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3a6:	1ad2      	subs	r2, r2, r3
 800d3a8:	f9b7 340c 	ldrsh.w	r3, [r7, #1036]	; 0x40c
 800d3ac:	1ad3      	subs	r3, r2, r3
 800d3ae:	0fda      	lsrs	r2, r3, #31
 800d3b0:	4413      	add	r3, r2
 800d3b2:	105b      	asrs	r3, r3, #1
 800d3b4:	b29a      	uxth	r2, r3
 800d3b6:	1d3b      	adds	r3, r7, #4
 800d3b8:	881b      	ldrh	r3, [r3, #0]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	1d3b      	adds	r3, r7, #4
 800d3c0:	801a      	strh	r2, [r3, #0]
        }
    }

    posY = posY1;
 800d3c2:	1d3b      	adds	r3, r7, #4
 800d3c4:	881b      	ldrh	r3, [r3, #0]
 800d3c6:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426

    if (strId != NULL)
 800d3ca:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d009      	beq.n	800d3e6 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x1b6>
    {
        CTextResources::copyTextToBuffer(stringBufferUtf, strId, STRING_BUFFER_SIZE);
 800d3d2:	f107 030c 	add.w	r3, r7, #12
 800d3d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3da:	f8d7 1438 	ldr.w	r1, [r7, #1080]	; 0x438
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f002 fd79 	bl	800fed6 <_ZN14CTextResources16copyTextToBufferEPwms>
 800d3e4:	e00b      	b.n	800d3fe <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x1ce>
    }
    else
    {
        if (str != NULL)
 800d3e6:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	f000 812f 	beq.w	800d64e <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x41e>
        {
            CTextResources::copyUtfToWchar(stringBufferUtf, str);
 800d3f0:	f107 030c 	add.w	r3, r7, #12
 800d3f4:	f8d7 143c 	ldr.w	r1, [r7, #1084]	; 0x43c
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f002 fcdb 	bl	800fdb4 <_ZN14CTextResources14copyUtfToWcharEPwPKc>
        else
        {
            return;
        }
    }
    createLineBreaks(font, posX2 - posX1, posY2 - posY1, stringBufferUtf, printCase);
 800d3fe:	1cbb      	adds	r3, r7, #2
 800d400:	881a      	ldrh	r2, [r3, #0]
 800d402:	1dbb      	adds	r3, r7, #6
 800d404:	881b      	ldrh	r3, [r3, #0]
 800d406:	1ad3      	subs	r3, r2, r3
 800d408:	b29b      	uxth	r3, r3
 800d40a:	b219      	sxth	r1, r3
 800d40c:	463b      	mov	r3, r7
 800d40e:	881a      	ldrh	r2, [r3, #0]
 800d410:	1d3b      	adds	r3, r7, #4
 800d412:	881b      	ldrh	r3, [r3, #0]
 800d414:	1ad3      	subs	r3, r2, r3
 800d416:	b29b      	uxth	r3, r3
 800d418:	b21a      	sxth	r2, r3
 800d41a:	f107 000c 	add.w	r0, r7, #12
 800d41e:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 800d422:	9300      	str	r3, [sp, #0]
 800d424:	4603      	mov	r3, r0
 800d426:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 800d42a:	f7ff fc15 	bl	800cc58 <_ZN12CGraphicFont16createLineBreaksEPNS_5SFontEssPwNS_10TPrintCaseE>

    znak = stringBufferUtf[startIndex];
 800d42e:	f9b7 241e 	ldrsh.w	r2, [r7, #1054]	; 0x41e
 800d432:	f107 030c 	add.w	r3, r7, #12
 800d436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d43a:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420

    while (znak)
 800d43e:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d442:	2b00      	cmp	r3, #0
 800d444:	f000 8104 	beq.w	800d650 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x420>
    {
        if (mulitiline == MULTILINE_SPACE_SEPARATOR ? (znak == '|') || (znak == '^') || (znak == ' ') || (startIndex == 0) : (znak == '|') || (znak == '^') || (startIndex == 0))
 800d448:	f897 344c 	ldrb.w	r3, [r7, #1100]	; 0x44c
 800d44c:	2b03      	cmp	r3, #3
 800d44e:	d113      	bne.n	800d478 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x248>
 800d450:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d454:	2b7c      	cmp	r3, #124	; 0x7c
 800d456:	d00b      	beq.n	800d470 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x240>
 800d458:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d45c:	2b5e      	cmp	r3, #94	; 0x5e
 800d45e:	d007      	beq.n	800d470 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x240>
 800d460:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d464:	2b20      	cmp	r3, #32
 800d466:	d003      	beq.n	800d470 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x240>
 800d468:	f9b7 341e 	ldrsh.w	r3, [r7, #1054]	; 0x41e
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d101      	bne.n	800d474 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x244>
 800d470:	2301      	movs	r3, #1
 800d472:	e010      	b.n	800d496 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x266>
 800d474:	2300      	movs	r3, #0
 800d476:	e00e      	b.n	800d496 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x266>
 800d478:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d47c:	2b7c      	cmp	r3, #124	; 0x7c
 800d47e:	d007      	beq.n	800d490 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x260>
 800d480:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d484:	2b5e      	cmp	r3, #94	; 0x5e
 800d486:	d003      	beq.n	800d490 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x260>
 800d488:	f9b7 341e 	ldrsh.w	r3, [r7, #1054]	; 0x41e
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d101      	bne.n	800d494 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x264>
 800d490:	2301      	movs	r3, #1
 800d492:	e000      	b.n	800d496 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x266>
 800d494:	2300      	movs	r3, #0
 800d496:	2b00      	cmp	r3, #0
 800d498:	f000 80c7 	beq.w	800d62a <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x3fa>
        {
            if (mulitiline == MULTILINE_SPACE_SEPARATOR ? (znak == '|') || (znak == ' ') || (znak == '^') : (znak == '|') || (znak == '^'))
 800d49c:	f897 344c 	ldrb.w	r3, [r7, #1100]	; 0x44c
 800d4a0:	2b03      	cmp	r3, #3
 800d4a2:	d10f      	bne.n	800d4c4 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x294>
 800d4a4:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d4a8:	2b7c      	cmp	r3, #124	; 0x7c
 800d4aa:	d007      	beq.n	800d4bc <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x28c>
 800d4ac:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d4b0:	2b20      	cmp	r3, #32
 800d4b2:	d003      	beq.n	800d4bc <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x28c>
 800d4b4:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d4b8:	2b5e      	cmp	r3, #94	; 0x5e
 800d4ba:	d101      	bne.n	800d4c0 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x290>
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e00c      	b.n	800d4da <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x2aa>
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	e00a      	b.n	800d4da <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x2aa>
 800d4c4:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d4c8:	2b7c      	cmp	r3, #124	; 0x7c
 800d4ca:	d003      	beq.n	800d4d4 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x2a4>
 800d4cc:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d4d0:	2b5e      	cmp	r3, #94	; 0x5e
 800d4d2:	d101      	bne.n	800d4d8 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x2a8>
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	e000      	b.n	800d4da <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x2aa>
 800d4d8:	2300      	movs	r3, #0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d006      	beq.n	800d4ec <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x2bc>
            {
                startIndex++;
 800d4de:	f9b7 341e 	ldrsh.w	r3, [r7, #1054]	; 0x41e
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e
            }
            endIndex = startIndex;
 800d4ec:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 800d4f0:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c

            znak = stringBufferUtf[endIndex];
 800d4f4:	f9b7 241c 	ldrsh.w	r2, [r7, #1052]	; 0x41c
 800d4f8:	f107 030c 	add.w	r3, r7, #12
 800d4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d500:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
            while (mulitiline == MULTILINE_SPACE_SEPARATOR ? (znak != '|') && (znak != ' ') && (znak != '^') && (znak != 0) : (znak != '|') && (znak != '^') && (znak != 0))
 800d504:	f897 344c 	ldrb.w	r3, [r7, #1100]	; 0x44c
 800d508:	2b03      	cmp	r3, #3
 800d50a:	d113      	bne.n	800d534 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x304>
 800d50c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d510:	2b7c      	cmp	r3, #124	; 0x7c
 800d512:	d00d      	beq.n	800d530 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x300>
 800d514:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d518:	2b20      	cmp	r3, #32
 800d51a:	d009      	beq.n	800d530 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x300>
 800d51c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d520:	2b5e      	cmp	r3, #94	; 0x5e
 800d522:	d005      	beq.n	800d530 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x300>
 800d524:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d001      	beq.n	800d530 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x300>
 800d52c:	2301      	movs	r3, #1
 800d52e:	e010      	b.n	800d552 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x322>
 800d530:	2300      	movs	r3, #0
 800d532:	e00e      	b.n	800d552 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x322>
 800d534:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d538:	2b7c      	cmp	r3, #124	; 0x7c
 800d53a:	d009      	beq.n	800d550 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x320>
 800d53c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d540:	2b5e      	cmp	r3, #94	; 0x5e
 800d542:	d005      	beq.n	800d550 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x320>
 800d544:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d001      	beq.n	800d550 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x320>
 800d54c:	2301      	movs	r3, #1
 800d54e:	e000      	b.n	800d552 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x322>
 800d550:	2300      	movs	r3, #0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d00f      	beq.n	800d576 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x346>
            {
                endIndex++;
 800d556:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	3301      	adds	r3, #1
 800d55e:	b29b      	uxth	r3, r3
 800d560:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
                znak = stringBufferUtf[endIndex];
 800d564:	f9b7 241c 	ldrsh.w	r2, [r7, #1052]	; 0x41c
 800d568:	f107 030c 	add.w	r3, r7, #12
 800d56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d570:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
            while (mulitiline == MULTILINE_SPACE_SEPARATOR ? (znak != '|') && (znak != ' ') && (znak != '^') && (znak != 0) : (znak != '|') && (znak != '^') && (znak != 0))
 800d574:	e7c6      	b.n	800d504 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x2d4>
            }
            endIndex--;
 800d576:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	3b01      	subs	r3, #1
 800d57e:	b29b      	uxth	r3, r3
 800d580:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
                    startIndex,
                    endIndex,
                    font,
                    true,
                    printCase,
                    COLOR);
 800d584:	f9b7 141e 	ldrsh.w	r1, [r7, #1054]	; 0x41e
 800d588:	f107 020c 	add.w	r2, r7, #12
 800d58c:	2300      	movs	r3, #0
 800d58e:	9305      	str	r3, [sp, #20]
 800d590:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800d594:	9304      	str	r3, [sp, #16]
 800d596:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 800d59a:	9303      	str	r3, [sp, #12]
 800d59c:	2301      	movs	r3, #1
 800d59e:	9302      	str	r3, [sp, #8]
 800d5a0:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800d5a4:	9301      	str	r3, [sp, #4]
 800d5a6:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 800d5aa:	9300      	str	r3, [sp, #0]
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	2000      	movs	r0, #0
 800d5b2:	f7ff fdbd 	bl	800d130 <_ZN12CGraphicFont20drawRamTextInternallEssPwssPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	f8a7 3410 	strh.w	r3, [r7, #1040]	; 0x410
            posX = getAlignTextPosX(posX1, posX2, textWidth, alignText);
 800d5bc:	f897 4448 	ldrb.w	r4, [r7, #1096]	; 0x448
 800d5c0:	f9b7 2410 	ldrsh.w	r2, [r7, #1040]	; 0x410
 800d5c4:	1cbb      	adds	r3, r7, #2
 800d5c6:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d5ca:	1dbb      	adds	r3, r7, #6
 800d5cc:	f9b3 0000 	ldrsh.w	r0, [r3]
 800d5d0:	4623      	mov	r3, r4
 800d5d2:	f000 f841 	bl	800d658 <_ZN12CGraphicFont16getAlignTextPosXEsssNS_10TAlignTextE>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
                    startIndex,
                    endIndex,
                    font,
                    false,
                    printCase,
                    COLOR);
 800d5dc:	f9b7 441e 	ldrsh.w	r4, [r7, #1054]	; 0x41e
 800d5e0:	f107 020c 	add.w	r2, r7, #12
 800d5e4:	f9b7 1426 	ldrsh.w	r1, [r7, #1062]	; 0x426
 800d5e8:	f9b7 040e 	ldrsh.w	r0, [r7, #1038]	; 0x40e
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	9305      	str	r3, [sp, #20]
 800d5f0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800d5f4:	9304      	str	r3, [sp, #16]
 800d5f6:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 800d5fa:	9303      	str	r3, [sp, #12]
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	9302      	str	r3, [sp, #8]
 800d600:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800d604:	9301      	str	r3, [sp, #4]
 800d606:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 800d60a:	9300      	str	r3, [sp, #0]
 800d60c:	4623      	mov	r3, r4
 800d60e:	f7ff fd8f 	bl	800d130 <_ZN12CGraphicFont20drawRamTextInternallEssPwssPNS_5SFontEbNS_10TPrintCaseERK10TColorDescb>
            posY += fontHeight;
 800d612:	f8b7 2426 	ldrh.w	r2, [r7, #1062]	; 0x426
 800d616:	f8b7 3412 	ldrh.w	r3, [r7, #1042]	; 0x412
 800d61a:	4413      	add	r3, r2
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
            startIndex = endIndex;
 800d622:	f8b7 341c 	ldrh.w	r3, [r7, #1052]	; 0x41c
 800d626:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e
        }
        startIndex++;
 800d62a:	f9b7 341e 	ldrsh.w	r3, [r7, #1054]	; 0x41e
 800d62e:	b29b      	uxth	r3, r3
 800d630:	3301      	adds	r3, #1
 800d632:	b29b      	uxth	r3, r3
 800d634:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e
        znak = stringBufferUtf[startIndex];
 800d638:	f9b7 241e 	ldrsh.w	r2, [r7, #1054]	; 0x41e
 800d63c:	f107 030c 	add.w	r3, r7, #12
 800d640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d644:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
    while (znak)
 800d648:	e6f9      	b.n	800d43e <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x20e>
                    return;
 800d64a:	bf00      	nop
 800d64c:	e000      	b.n	800d650 <_ZN12CGraphicFont17drawTextMultilineEssssmPKcPNS_5SFontENS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDesc+0x420>
            return;
 800d64e:	bf00      	nop
    }
}
 800d650:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 800d654:	46bd      	mov	sp, r7
 800d656:	bdb0      	pop	{r4, r5, r7, pc}

0800d658 <_ZN12CGraphicFont16getAlignTextPosXEsssNS_10TAlignTextE>:

int16_t CGraphicFont::getAlignTextPosX(int16_t windowX1, int16_t windowX2, int16_t textWidth, TAlignText alignText)
{
 800d658:	b490      	push	{r4, r7}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	4604      	mov	r4, r0
 800d660:	4608      	mov	r0, r1
 800d662:	4611      	mov	r1, r2
 800d664:	461a      	mov	r2, r3
 800d666:	4623      	mov	r3, r4
 800d668:	80fb      	strh	r3, [r7, #6]
 800d66a:	4603      	mov	r3, r0
 800d66c:	80bb      	strh	r3, [r7, #4]
 800d66e:	460b      	mov	r3, r1
 800d670:	807b      	strh	r3, [r7, #2]
 800d672:	4613      	mov	r3, r2
 800d674:	707b      	strb	r3, [r7, #1]
    int16_t posX = 0;
 800d676:	2300      	movs	r3, #0
 800d678:	81fb      	strh	r3, [r7, #14]

    switch (alignText)
 800d67a:	787b      	ldrb	r3, [r7, #1]
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	d006      	beq.n	800d68e <_ZN12CGraphicFont16getAlignTextPosXEsssNS_10TAlignTextE+0x36>
 800d680:	2b02      	cmp	r3, #2
 800d682:	d00a      	beq.n	800d69a <_ZN12CGraphicFont16getAlignTextPosXEsssNS_10TAlignTextE+0x42>
 800d684:	2b00      	cmp	r3, #0
 800d686:	d117      	bne.n	800d6b8 <_ZN12CGraphicFont16getAlignTextPosXEsssNS_10TAlignTextE+0x60>
    {
        case AT_LEFT:
            posX = windowX1;
 800d688:	88fb      	ldrh	r3, [r7, #6]
 800d68a:	81fb      	strh	r3, [r7, #14]
        break;
 800d68c:	e014      	b.n	800d6b8 <_ZN12CGraphicFont16getAlignTextPosXEsssNS_10TAlignTextE+0x60>

        case AT_RIGHT:
            posX = windowX2 - textWidth;
 800d68e:	88ba      	ldrh	r2, [r7, #4]
 800d690:	887b      	ldrh	r3, [r7, #2]
 800d692:	1ad3      	subs	r3, r2, r3
 800d694:	b29b      	uxth	r3, r3
 800d696:	81fb      	strh	r3, [r7, #14]
        break;
 800d698:	e00e      	b.n	800d6b8 <_ZN12CGraphicFont16getAlignTextPosXEsssNS_10TAlignTextE+0x60>

        case AT_CENTER:
            posX = ((windowX1 + windowX2) >> 1) - (textWidth >> 1);
 800d69a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d69e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d6a2:	4413      	add	r3, r2
 800d6a4:	105b      	asrs	r3, r3, #1
 800d6a6:	b29a      	uxth	r2, r3
 800d6a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d6ac:	105b      	asrs	r3, r3, #1
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	1ad3      	subs	r3, r2, r3
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	81fb      	strh	r3, [r7, #14]
        break;
 800d6b6:	bf00      	nop
    }

    return posX;
 800d6b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3710      	adds	r7, #16
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bc90      	pop	{r4, r7}
 800d6c4:	4770      	bx	lr

0800d6c6 <_ZN9CKeyboardC1Ev>:

#include "CKeyboard.h"

#include <string.h>

CKeyboard::CKeyboard() :
 800d6c6:	b580      	push	{r7, lr}
 800d6c8:	b082      	sub	sp, #8
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	6078      	str	r0, [r7, #4]
        m_keysCount(0), m_timer(CTimer::COUNTER_CSEK)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	335c      	adds	r3, #92	; 0x5c
 800d6da:	2101      	movs	r1, #1
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f002 fe6d 	bl	80103bc <_ZN6CTimerC1ENS_4UnitE>
{
    memset(m_keyLastState, 0, sizeof(m_keyLastState));
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2208      	movs	r2, #8
 800d6e6:	2100      	movs	r1, #0
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f009 fe07 	bl	80172fc <memset>
    clearKeyEvents();
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 f97f 	bl	800d9f2 <_ZN9CKeyboard14clearKeyEventsEv>
    m_timer.startFreeRun();
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	335c      	adds	r3, #92	; 0x5c
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f002 fed8 	bl	80104ae <_ZN6CTimer12startFreeRunEv>
}
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	4618      	mov	r0, r3
 800d702:	3708      	adds	r7, #8
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <_ZN9CKeyboard6addKeyEaP14IBoolInterface>:

void CKeyboard::addKey(int8_t keyCode, IBoolInterface* boolInterface)
{
 800d708:	b480      	push	{r7}
 800d70a:	b085      	sub	sp, #20
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	460b      	mov	r3, r1
 800d712:	607a      	str	r2, [r7, #4]
 800d714:	72fb      	strb	r3, [r7, #11]
    if (m_keysCount < MAX_KEYS)
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 800d71c:	2b07      	cmp	r3, #7
 800d71e:	dc1b      	bgt.n	800d758 <_ZN9CKeyboard6addKeyEaP14IBoolInterface+0x50>
    {
        m_keys[m_keysCount] = boolInterface;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 800d726:	461a      	mov	r2, r3
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	3202      	adds	r2, #2
 800d72c:	6879      	ldr	r1, [r7, #4]
 800d72e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_keyCodes[m_keysCount] = keyCode;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 800d738:	461a      	mov	r2, r3
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	4413      	add	r3, r2
 800d73e:	7afa      	ldrb	r2, [r7, #11]
 800d740:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        m_keysCount++;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	3301      	adds	r3, #1
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	b25a      	sxtb	r2, r3
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    }
}
 800d758:	bf00      	nop
 800d75a:	3714      	adds	r7, #20
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bc80      	pop	{r7}
 800d760:	4770      	bx	lr

0800d762 <_ZN9CKeyboard16setOnKeyListenerEP14IOnKeyListener>:

void CKeyboard::setOnKeyListener(IOnKeyListener *onKeyListener)
{
 800d762:	b480      	push	{r7}
 800d764:	b083      	sub	sp, #12
 800d766:	af00      	add	r7, sp, #0
 800d768:	6078      	str	r0, [r7, #4]
 800d76a:	6039      	str	r1, [r7, #0]
    m_onKeyListener = onKeyListener;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	683a      	ldr	r2, [r7, #0]
 800d770:	669a      	str	r2, [r3, #104]	; 0x68
}
 800d772:	bf00      	nop
 800d774:	370c      	adds	r7, #12
 800d776:	46bd      	mov	sp, r7
 800d778:	bc80      	pop	{r7}
 800d77a:	4770      	bx	lr

0800d77c <_ZN9CKeyboard6updateEv>:

void CKeyboard::update()
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b086      	sub	sp, #24
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
    uint16_t time = m_timer.getElapsedTime();
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	335c      	adds	r3, #92	; 0x5c
 800d788:	4618      	mov	r0, r3
 800d78a:	f002 ff03 	bl	8010594 <_ZN6CTimer14getElapsedTimeEv>
 800d78e:	4603      	mov	r3, r0
 800d790:	81bb      	strh	r3, [r7, #12]
    bool resetTimer = true;
 800d792:	2301      	movs	r3, #1
 800d794:	75fb      	strb	r3, [r7, #23]

    while (true)
    {
        int8_t keyCode = 0;
 800d796:	2300      	movs	r3, #0
 800d798:	75bb      	strb	r3, [r7, #22]
        int8_t keyEvent = 0;
 800d79a:	2300      	movs	r3, #0
 800d79c:	757b      	strb	r3, [r7, #21]

        for (int16_t i = 0; i < m_keysCount; i++)
 800d79e:	2300      	movs	r3, #0
 800d7a0:	827b      	strh	r3, [r7, #18]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 800d7a8:	b21b      	sxth	r3, r3
 800d7aa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	f280 808d 	bge.w	800d8ce <_ZN9CKeyboard6updateEv+0x152>
        {
            bool keyState = m_keys[i]->isOn();
 800d7b4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	3202      	adds	r2, #2
 800d7bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800d7c8:	687a      	ldr	r2, [r7, #4]
 800d7ca:	3102      	adds	r1, #2
 800d7cc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d7d0:	4610      	mov	r0, r2
 800d7d2:	4798      	blx	r3
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	72fb      	strb	r3, [r7, #11]

            if (keyState)
 800d7d8:	7afb      	ldrb	r3, [r7, #11]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d001      	beq.n	800d7e2 <_ZN9CKeyboard6updateEv+0x66>
            {
                resetTimer = false;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	75fb      	strb	r3, [r7, #23]
            }

            if (m_keyLastState[i] != keyState)
 800d7e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	5cd3      	ldrb	r3, [r2, r3]
 800d7ea:	7afa      	ldrb	r2, [r7, #11]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d01c      	beq.n	800d82a <_ZN9CKeyboard6updateEv+0xae>
            {
                m_keyLastState[i] = keyState;
 800d7f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	7af9      	ldrb	r1, [r7, #11]
 800d7f8:	54d1      	strb	r1, [r2, r3]

                keyEvent = keyState ? IOnKeyListener::KEY_EVENT_DOWN : IOnKeyListener::KEY_EVENT_UP;
 800d7fa:	7afb      	ldrb	r3, [r7, #11]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d001      	beq.n	800d804 <_ZN9CKeyboard6updateEv+0x88>
 800d800:	2301      	movs	r3, #1
 800d802:	e000      	b.n	800d806 <_ZN9CKeyboard6updateEv+0x8a>
 800d804:	2302      	movs	r3, #2
 800d806:	757b      	strb	r3, [r7, #21]

                if (keyState)
 800d808:	7afb      	ldrb	r3, [r7, #11]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00d      	beq.n	800d82a <_ZN9CKeyboard6updateEv+0xae>
                {
                    m_keyTime[i] = time;
 800d80e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	3218      	adds	r2, #24
 800d816:	89b9      	ldrh	r1, [r7, #12]
 800d818:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                    m_keyRepeats[i] = 0;
 800d81c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	4413      	add	r3, r2
 800d824:	2200      	movs	r2, #0
 800d826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                }
            }

            if (keyState)
 800d82a:	7afb      	ldrb	r3, [r7, #11]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d03b      	beq.n	800d8a8 <_ZN9CKeyboard6updateEv+0x12c>
            {
                int16_t interval = 200 / (5 + m_keyRepeats[i]);
 800d830:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	4413      	add	r3, r2
 800d838:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d83c:	3305      	adds	r3, #5
 800d83e:	22c8      	movs	r2, #200	; 0xc8
 800d840:	fb92 f3f3 	sdiv	r3, r2, r3
 800d844:	823b      	strh	r3, [r7, #16]
                if (interval < 10)
 800d846:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d84a:	2b09      	cmp	r3, #9
 800d84c:	dc01      	bgt.n	800d852 <_ZN9CKeyboard6updateEv+0xd6>
                {
                    interval = 10;
 800d84e:	230a      	movs	r3, #10
 800d850:	823b      	strh	r3, [r7, #16]
                }

                if (m_keyTime[i] + interval <= time)
 800d852:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	3218      	adds	r2, #24
 800d85a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d85e:	461a      	mov	r2, r3
 800d860:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d864:	441a      	add	r2, r3
 800d866:	89bb      	ldrh	r3, [r7, #12]
 800d868:	429a      	cmp	r2, r3
 800d86a:	dc1d      	bgt.n	800d8a8 <_ZN9CKeyboard6updateEv+0x12c>
                {
                    keyEvent = IOnKeyListener::KEY_EVENT_PRESSED;
 800d86c:	2303      	movs	r3, #3
 800d86e:	757b      	strb	r3, [r7, #21]
                    m_keyTime[i] = time;
 800d870:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	3218      	adds	r2, #24
 800d878:	89b9      	ldrh	r1, [r7, #12]
 800d87a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                    if (m_keyRepeats[i] < 0xFF)
 800d87e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	4413      	add	r3, r2
 800d886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d88a:	2bfe      	cmp	r3, #254	; 0xfe
 800d88c:	dc0c      	bgt.n	800d8a8 <_ZN9CKeyboard6updateEv+0x12c>
                    {
                        m_keyRepeats[i]++;
 800d88e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	441a      	add	r2, r3
 800d896:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800d89a:	3201      	adds	r2, #1
 800d89c:	b2d1      	uxtb	r1, r2
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	4413      	add	r3, r2
 800d8a2:	460a      	mov	r2, r1
 800d8a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                    }
                }
            }

            if (keyEvent != 0)
 800d8a8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d007      	beq.n	800d8c0 <_ZN9CKeyboard6updateEv+0x144>
            {
                keyCode = m_keyCodes[i];
 800d8b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8bc:	75bb      	strb	r3, [r7, #22]
                break;
 800d8be:	e006      	b.n	800d8ce <_ZN9CKeyboard6updateEv+0x152>
        for (int16_t i = 0; i < m_keysCount; i++)
 800d8c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	827b      	strh	r3, [r7, #18]
 800d8cc:	e769      	b.n	800d7a2 <_ZN9CKeyboard6updateEv+0x26>
            }
        }

        if (keyEvent == 0)
 800d8ce:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d034      	beq.n	800d940 <_ZN9CKeyboard6updateEv+0x1c4>
        {
            break;
        }

        if (m_onKeyListener != NULL)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d00a      	beq.n	800d8f4 <_ZN9CKeyboard6updateEv+0x178>
        {
            m_onKeyListener->onKey(keyCode, keyEvent);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	687a      	ldr	r2, [r7, #4]
 800d8e8:	6e90      	ldr	r0, [r2, #104]	; 0x68
 800d8ea:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800d8ee:	f997 1016 	ldrsb.w	r1, [r7, #22]
 800d8f2:	4798      	blx	r3
        }

        for (int8_t i = 0; i < MAX_KEY_EVENTS; i++)
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	73fb      	strb	r3, [r7, #15]
 800d8f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8fc:	2b07      	cmp	r3, #7
 800d8fe:	f73f af4a 	bgt.w	800d796 <_ZN9CKeyboard6updateEv+0x1a>
        {
            if (m_keyEventsKeyEvent[i] == 0)
 800d902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d906:	687a      	ldr	r2, [r7, #4]
 800d908:	4413      	add	r3, r2
 800d90a:	f993 3051 	ldrsb.w	r3, [r3, #81]	; 0x51
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d10e      	bne.n	800d930 <_ZN9CKeyboard6updateEv+0x1b4>
            {
                m_keyEventsKeyCode[i] = keyCode;
 800d912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d916:	687a      	ldr	r2, [r7, #4]
 800d918:	4413      	add	r3, r2
 800d91a:	7dba      	ldrb	r2, [r7, #22]
 800d91c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                m_keyEventsKeyEvent[i] = keyEvent;
 800d920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	4413      	add	r3, r2
 800d928:	7d7a      	ldrb	r2, [r7, #21]
 800d92a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                break;
 800d92e:	e006      	b.n	800d93e <_ZN9CKeyboard6updateEv+0x1c2>
        for (int8_t i = 0; i < MAX_KEY_EVENTS; i++)
 800d930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d934:	b2db      	uxtb	r3, r3
 800d936:	3301      	adds	r3, #1
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	73fb      	strb	r3, [r7, #15]
 800d93c:	e7dc      	b.n	800d8f8 <_ZN9CKeyboard6updateEv+0x17c>
            }
        }
    }
 800d93e:	e72a      	b.n	800d796 <_ZN9CKeyboard6updateEv+0x1a>
            break;
 800d940:	bf00      	nop

    if (resetTimer)
 800d942:	7dfb      	ldrb	r3, [r7, #23]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d004      	beq.n	800d952 <_ZN9CKeyboard6updateEv+0x1d6>
    {
        m_timer.startFreeRun();
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	335c      	adds	r3, #92	; 0x5c
 800d94c:	4618      	mov	r0, r3
 800d94e:	f002 fdae 	bl	80104ae <_ZN6CTimer12startFreeRunEv>
    }
}
 800d952:	bf00      	nop
 800d954:	3718      	adds	r7, #24
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <_ZN9CKeyboard13callKeyEventsEP14IOnKeyListener>:

void CKeyboard::callKeyEvents(IOnKeyListener *onKeyListener)
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b084      	sub	sp, #16
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
 800d962:	6039      	str	r1, [r7, #0]
    for (int8_t i = 0; i < MAX_KEY_EVENTS; i++)
 800d964:	2300      	movs	r3, #0
 800d966:	73fb      	strb	r3, [r7, #15]
 800d968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d96c:	2b07      	cmp	r3, #7
 800d96e:	dc3c      	bgt.n	800d9ea <_ZN9CKeyboard13callKeyEventsEP14IOnKeyListener+0x90>
    {
        int8_t keyCode = m_keyEventsKeyCode[i];
 800d970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	4413      	add	r3, r2
 800d978:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d97c:	73bb      	strb	r3, [r7, #14]
        int8_t keyEvent = m_keyEventsKeyEvent[i];
 800d97e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	4413      	add	r3, r2
 800d986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d98a:	737b      	strb	r3, [r7, #13]
        if (keyEvent != 0)
 800d98c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d023      	beq.n	800d9dc <_ZN9CKeyboard13callKeyEventsEP14IOnKeyListener+0x82>
        {
            int8_t tmp = m_keyEventsKeyEvent[i];
 800d994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	4413      	add	r3, r2
 800d99c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d9a0:	733b      	strb	r3, [r7, #12]
            m_keyEventsKeyEvent[i] = 0;
 800d9a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            if (onKeyListener->onKey(keyCode, keyEvent) == false)
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f997 200d 	ldrsb.w	r2, [r7, #13]
 800d9ba:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800d9be:	6838      	ldr	r0, [r7, #0]
 800d9c0:	4798      	blx	r3
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	f083 0301 	eor.w	r3, r3, #1
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d006      	beq.n	800d9dc <_ZN9CKeyboard13callKeyEventsEP14IOnKeyListener+0x82>
            {
                m_keyEventsKeyEvent[i] = tmp;
 800d9ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	4413      	add	r3, r2
 800d9d6:	7b3a      	ldrb	r2, [r7, #12]
 800d9d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    for (int8_t i = 0; i < MAX_KEY_EVENTS; i++)
 800d9dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	73fb      	strb	r3, [r7, #15]
 800d9e8:	e7be      	b.n	800d968 <_ZN9CKeyboard13callKeyEventsEP14IOnKeyListener+0xe>
            }
        }
    }
}
 800d9ea:	bf00      	nop
 800d9ec:	3710      	adds	r7, #16
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <_ZN9CKeyboard14clearKeyEventsEv>:

void CKeyboard::clearKeyEvents()
{
 800d9f2:	b480      	push	{r7}
 800d9f4:	b085      	sub	sp, #20
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
    for (int8_t i = 0; i < MAX_KEY_EVENTS; i++)
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	73fb      	strb	r3, [r7, #15]
 800d9fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da02:	2b07      	cmp	r3, #7
 800da04:	dc0d      	bgt.n	800da22 <_ZN9CKeyboard14clearKeyEventsEv+0x30>
    {
        m_keyEventsKeyEvent[i] = 0;
 800da06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	4413      	add	r3, r2
 800da0e:	2200      	movs	r2, #0
 800da10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    for (int8_t i = 0; i < MAX_KEY_EVENTS; i++)
 800da14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	3301      	adds	r3, #1
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	73fb      	strb	r3, [r7, #15]
 800da20:	e7ed      	b.n	800d9fe <_ZN9CKeyboard14clearKeyEventsEv+0xc>
    }
}
 800da22:	bf00      	nop
 800da24:	3714      	adds	r7, #20
 800da26:	46bd      	mov	sp, r7
 800da28:	bc80      	pop	{r7}
 800da2a:	4770      	bx	lr

0800da2c <_ZN25ITwoLogicalStatesHardwareC1Ev>:
class ITwoLogicalStatesHardware : public IBoolInterface
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	4618      	mov	r0, r3
 800da38:	f7fd ff36 	bl	800b8a8 <_ZN14IBoolInterfaceC1Ev>
 800da3c:	4a03      	ldr	r2, [pc, #12]	; (800da4c <_ZN25ITwoLogicalStatesHardwareC1Ev+0x20>)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	601a      	str	r2, [r3, #0]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	4618      	mov	r0, r3
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	0801cb4c 	.word	0x0801cb4c

0800da50 <_ZN16CModulatedBuzzerC1Ev>:
 */

#include "CModulatedBuzzer.h"


CModulatedBuzzer::CModulatedBuzzer()
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7ff ffe6 	bl	800da2c <_ZN25ITwoLogicalStatesHardwareC1Ev>
 800da60:	4a0a      	ldr	r2, [pc, #40]	; (800da8c <_ZN16CModulatedBuzzerC1Ev+0x3c>)
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	601a      	str	r2, [r3, #0]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	3304      	adds	r3, #4
 800da6a:	4618      	mov	r0, r3
 800da6c:	f000 f85e 	bl	800db2c <_ZN14CPwmControllerC1Ev>
{
	m_divider = 2;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2202      	movs	r2, #2
 800da74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	m_maxPulseWidth = 1000;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da7e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
}
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4618      	mov	r0, r3
 800da86:	3708      	adds	r7, #8
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	0801cb3c 	.word	0x0801cb3c

0800da90 <_ZN16CModulatedBuzzer4initEPN14CPwmController11TInitStructEtmt>:

void CModulatedBuzzer::init(CPwmController::TInitStruct* initStruct, uint16_t pwmFrequency, uint32_t systemClockFrequency, uint16_t maxPulseWidth)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b086      	sub	sp, #24
 800da94:	af02      	add	r7, sp, #8
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	603b      	str	r3, [r7, #0]
 800da9c:	4613      	mov	r3, r2
 800da9e:	80fb      	strh	r3, [r7, #6]
	m_maxPulseWidth = maxPulseWidth;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	8b3a      	ldrh	r2, [r7, #24]
 800daa4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	m_pwmController.init(initStruct, pwmFrequency, systemClockFrequency, maxPulseWidth);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	1d18      	adds	r0, r3, #4
 800daac:	88fa      	ldrh	r2, [r7, #6]
 800daae:	8b3b      	ldrh	r3, [r7, #24]
 800dab0:	9300      	str	r3, [sp, #0]
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	68b9      	ldr	r1, [r7, #8]
 800dab6:	f000 f856 	bl	800db66 <_ZN14CPwmController4initEPNS_11TInitStructEtmt>
}
 800daba:	bf00      	nop
 800dabc:	3710      	adds	r7, #16
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <_ZN16CModulatedBuzzer8setStateEb>:
		m_divider = divider;
	}
}

void CModulatedBuzzer::setState(bool state)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b082      	sub	sp, #8
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
 800daca:	460b      	mov	r3, r1
 800dacc:	70fb      	strb	r3, [r7, #3]
	if(state)
 800dace:	78fb      	ldrb	r3, [r7, #3]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d00e      	beq.n	800daf2 <_ZN16CModulatedBuzzer8setStateEb+0x30>
	{
		m_pwmController.setPulseWidth(m_maxPulseWidth/m_divider);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	1d18      	adds	r0, r3, #4
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dae4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dae8:	b29b      	uxth	r3, r3
 800daea:	4619      	mov	r1, r3
 800daec:	f000 f8eb 	bl	800dcc6 <_ZN14CPwmController13setPulseWidthEt>
	}
	else
	{
		m_pwmController.setPulseWidth(0);
	}
}
 800daf0:	e005      	b.n	800dafe <_ZN16CModulatedBuzzer8setStateEb+0x3c>
		m_pwmController.setPulseWidth(0);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	3304      	adds	r3, #4
 800daf6:	2100      	movs	r1, #0
 800daf8:	4618      	mov	r0, r3
 800dafa:	f000 f8e4 	bl	800dcc6 <_ZN14CPwmController13setPulseWidthEt>
}
 800dafe:	bf00      	nop
 800db00:	3708      	adds	r7, #8
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}

0800db06 <_ZN16CModulatedBuzzer4isOnEv>:

bool CModulatedBuzzer::isOn()
{
 800db06:	b580      	push	{r7, lr}
 800db08:	b082      	sub	sp, #8
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
	return m_pwmController.getPulseWidth() != 0;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	3304      	adds	r3, #4
 800db12:	4618      	mov	r0, r3
 800db14:	f000 f8fd 	bl	800dd12 <_ZN14CPwmController13getPulseWidthEv>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	bf14      	ite	ne
 800db1e:	2301      	movne	r3, #1
 800db20:	2300      	moveq	r3, #0
 800db22:	b2db      	uxtb	r3, r3
}
 800db24:	4618      	mov	r0, r3
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <_ZN14CPwmControllerC1Ev>:
 *     Version: 1.0.0
 */
#include "pwmController.h"

//--------------------------------------------------------------------------------------------------
CPwmController::CPwmController()
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
//--------------------------------------------------------------------------------------------------
{
    m_userPulseWidth = 0;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	801a      	strh	r2, [r3, #0]
    m_maxUserPulseWidthValue = DEFAULT_MAX_USER_PULSE_WIDTH_VALUE;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f242 7210 	movw	r2, #10000	; 0x2710
 800db40:	805a      	strh	r2, [r3, #2]
    m_pwmPeriod = 0;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2200      	movs	r2, #0
 800db46:	809a      	strh	r2, [r3, #4]
    m_pulseMaxWidth = 0;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	80da      	strh	r2, [r3, #6]
    m_prescaler = 0;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2200      	movs	r2, #0
 800db52:	811a      	strh	r2, [r3, #8]
    m_systemClockFrequency = 0;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	60da      	str	r2, [r3, #12]
}
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	4618      	mov	r0, r3
 800db5e:	370c      	adds	r7, #12
 800db60:	46bd      	mov	sp, r7
 800db62:	bc80      	pop	{r7}
 800db64:	4770      	bx	lr

0800db66 <_ZN14CPwmController4initEPNS_11TInitStructEtmt>:

//--------------------------------------------------------------------------------------------------
void CPwmController::init(TInitStruct* initStruct, uint16_t pwmFrequency, uint32_t systemClockFrequency,
        uint16_t maxPulseWidthValue)
//--------------------------------------------------------------------------------------------------
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b088      	sub	sp, #32
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	60f8      	str	r0, [r7, #12]
 800db6e:	60b9      	str	r1, [r7, #8]
 800db70:	603b      	str	r3, [r7, #0]
 800db72:	4613      	mov	r3, r2
 800db74:	80fb      	strh	r3, [r7, #6]
    m_pwmPeriod = pwmFrequency;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	88fa      	ldrh	r2, [r7, #6]
 800db7a:	809a      	strh	r2, [r3, #4]
    m_systemClockFrequency = systemClockFrequency;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	683a      	ldr	r2, [r7, #0]
 800db80:	60da      	str	r2, [r3, #12]
    m_maxUserPulseWidthValue = maxPulseWidthValue;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800db86:	805a      	strh	r2, [r3, #2]

    if (initStruct != &m_initStruct)
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	429a      	cmp	r2, r3
 800db92:	d016      	beq.n	800dbc2 <_ZN14CPwmController4initEPNS_11TInitStructEtmt+0x5c>
    {
        m_initStruct.PWMChannel = initStruct->PWMChannel;
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	791a      	ldrb	r2, [r3, #4]
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        m_initStruct.TIMx = initStruct->TIMx;
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	681a      	ldr	r2, [r3, #0]
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	651a      	str	r2, [r3, #80]	; 0x50
        m_initStruct.TIMx_OCPolarity = initStruct->TIMx_OCPolarity;
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	88da      	ldrh	r2, [r3, #6]
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
        m_initStruct.pin = initStruct->pin;
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	899a      	ldrh	r2, [r3, #12]
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        m_initStruct.port = initStruct->port;
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	689a      	ldr	r2, [r3, #8]
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	659a      	str	r2, [r3, #88]	; 0x58
    }

    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Pin = m_initStruct.pin;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dbc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbca:	2302      	movs	r3, #2
 800dbcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800dbd2:	2302      	movs	r3, #2
 800dbd4:	61fb      	str	r3, [r7, #28]

#ifdef DEF_HAL_F2
    GPIO_InitStruct.Alternate = getAlternate(m_initStruct.TIMx);
#endif
    HAL_GPIO_Init(m_initStruct.port, &GPIO_InitStruct);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbda:	f107 0210 	add.w	r2, r7, #16
 800dbde:	4611      	mov	r1, r2
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7fa fe39 	bl	8008858 <HAL_GPIO_Init>

    reInitSystemClock(systemClockFrequency);
 800dbe6:	6839      	ldr	r1, [r7, #0]
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f000 f804 	bl	800dbf6 <_ZN14CPwmController17reInitSystemClockEm>
}
 800dbee:	bf00      	nop
 800dbf0:	3720      	adds	r7, #32
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <_ZN14CPwmController17reInitSystemClockEm>:

//--------------------------------------------------------------------------------------------------
void CPwmController::reInitSystemClock(uint32_t systemClockFrequency)
//--------------------------------------------------------------------------------------------------
{
 800dbf6:	b580      	push	{r7, lr}
 800dbf8:	b08a      	sub	sp, #40	; 0x28
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
 800dbfe:	6039      	str	r1, [r7, #0]
    uint16_t dzielnik = 100;
 800dc00:	2364      	movs	r3, #100	; 0x64
 800dc02:	84fb      	strh	r3, [r7, #38]	; 0x26
    m_systemClockFrequency = systemClockFrequency;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	683a      	ldr	r2, [r7, #0]
 800dc08:	60da      	str	r2, [r3, #12]
    m_prescaler = dzielnik - 1;
 800dc0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc0c:	3b01      	subs	r3, #1
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	811a      	strh	r2, [r3, #8]
    m_pulseMaxWidth = (m_systemClockFrequency / m_pwmPeriod / dzielnik);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	687a      	ldr	r2, [r7, #4]
 800dc1a:	8892      	ldrh	r2, [r2, #4]
 800dc1c:	fbb3 f2f2 	udiv	r2, r3, r2
 800dc20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc22:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc26:	b29a      	uxth	r2, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	80da      	strh	r2, [r3, #6]

    m_htim.Instance = m_initStruct.TIMx;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	611a      	str	r2, [r3, #16]
    m_htim.Init.Prescaler = m_prescaler;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	891b      	ldrh	r3, [r3, #8]
 800dc38:	461a      	mov	r2, r3
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	615a      	str	r2, [r3, #20]
    m_htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	619a      	str	r2, [r3, #24]
    m_htim.Init.Period = m_pulseMaxWidth - 1;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	88db      	ldrh	r3, [r3, #6]
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	61da      	str	r2, [r3, #28]
    m_htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	621a      	str	r2, [r3, #32]
    m_htim.Init.RepetitionCounter = 0;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_PWM_Init(&m_htim);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	3310      	adds	r3, #16
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7fc fc1d 	bl	800a4a0 <HAL_TIM_PWM_Init>

    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dc66:	2360      	movs	r3, #96	; 0x60
 800dc68:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = m_initStruct.TIMx_OCPolarity;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dc70:	613b      	str	r3, [r7, #16]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dc72:	2300      	movs	r3, #0
 800dc74:	61bb      	str	r3, [r7, #24]

    //----------- ustawienia nie ważne dla wywoływanego trybu
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800dc76:	2300      	movs	r3, #0
 800dc78:	623b      	str	r3, [r7, #32]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	61fb      	str	r3, [r7, #28]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	617b      	str	r3, [r7, #20]
    //-----------

    HAL_TIM_PWM_ConfigChannel(&m_htim, &sConfigOC, (m_initStruct.PWMChannel - 1) << 2);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f103 0010 	add.w	r0, r3, #16
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800dc8e:	3b01      	subs	r3, #1
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	461a      	mov	r2, r3
 800dc94:	f107 0308 	add.w	r3, r7, #8
 800dc98:	4619      	mov	r1, r3
 800dc9a:	f7fc fc47 	bl	800a52c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&m_htim, (m_initStruct.PWMChannel - 1) << 2);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f103 0210 	add.w	r2, r3, #16
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	009b      	lsls	r3, r3, #2
 800dcae:	4619      	mov	r1, r3
 800dcb0:	4610      	mov	r0, r2
 800dcb2:	f7fc fcab 	bl	800a60c <HAL_TIM_PWM_Start>

    setPulseWidthInternal(0);
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 f835 	bl	800dd28 <_ZN14CPwmController21setPulseWidthInternalEt>
}
 800dcbe:	bf00      	nop
 800dcc0:	3728      	adds	r7, #40	; 0x28
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <_ZN14CPwmController13setPulseWidthEt>:

//--------------------------------------------------------------------------------------------------
void CPwmController::setPulseWidth(uint16_t value)
//--------------------------------------------------------------------------------------------------
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b084      	sub	sp, #16
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
 800dcce:	460b      	mov	r3, r1
 800dcd0:	807b      	strh	r3, [r7, #2]
    if (value > m_maxUserPulseWidthValue)
 800dcd2:	887b      	ldrh	r3, [r7, #2]
 800dcd4:	687a      	ldr	r2, [r7, #4]
 800dcd6:	8852      	ldrh	r2, [r2, #2]
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	dd02      	ble.n	800dce2 <_ZN14CPwmController13setPulseWidthEt+0x1c>
    {
        value = m_maxUserPulseWidthValue;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	885b      	ldrh	r3, [r3, #2]
 800dce0:	807b      	strh	r3, [r7, #2]
    }

    m_userPulseWidth = value;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	887a      	ldrh	r2, [r7, #2]
 800dce6:	801a      	strh	r2, [r3, #0]

    uint16_t newComputedValue = (uint32_t) m_userPulseWidth * (uint32_t) m_pulseMaxWidth
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	881b      	ldrh	r3, [r3, #0]
 800dcec:	461a      	mov	r2, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	88db      	ldrh	r3, [r3, #6]
 800dcf2:	fb03 f302 	mul.w	r3, r3, r2
            / (uint32_t) m_maxUserPulseWidthValue;
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	8852      	ldrh	r2, [r2, #2]
 800dcfa:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcfe:	81fb      	strh	r3, [r7, #14]

    setPulseWidthInternal(newComputedValue);
 800dd00:	89fb      	ldrh	r3, [r7, #14]
 800dd02:	4619      	mov	r1, r3
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 f80f 	bl	800dd28 <_ZN14CPwmController21setPulseWidthInternalEt>
}
 800dd0a:	bf00      	nop
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <_ZN14CPwmController13getPulseWidthEv>:

//--------------------------------------------------------------------------------------------------
uint16_t CPwmController::getPulseWidth()
//--------------------------------------------------------------------------------------------------
{
 800dd12:	b480      	push	{r7}
 800dd14:	b083      	sub	sp, #12
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
    return m_userPulseWidth;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	881b      	ldrh	r3, [r3, #0]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	370c      	adds	r7, #12
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bc80      	pop	{r7}
 800dd26:	4770      	bx	lr

0800dd28 <_ZN14CPwmController21setPulseWidthInternalEt>:
}

//--------------------------------------------------------------------------------------------------
void CPwmController::setPulseWidthInternal(uint16_t value)
//--------------------------------------------------------------------------------------------------
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b083      	sub	sp, #12
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	460b      	mov	r3, r1
 800dd32:	807b      	strh	r3, [r7, #2]
    __HAL_TIM_SetCompare(&m_htim, (m_initStruct.PWMChannel - 1) << 2, value);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800dd3a:	3b01      	subs	r3, #1
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d104      	bne.n	800dd4c <_ZN14CPwmController21setPulseWidthInternalEt+0x24>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	691b      	ldr	r3, [r3, #16]
 800dd46:	887a      	ldrh	r2, [r7, #2]
 800dd48:	635a      	str	r2, [r3, #52]	; 0x34
}
 800dd4a:	e01b      	b.n	800dd84 <_ZN14CPwmController21setPulseWidthInternalEt+0x5c>
    __HAL_TIM_SetCompare(&m_htim, (m_initStruct.PWMChannel - 1) << 2, value);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800dd52:	3b01      	subs	r3, #1
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	2b04      	cmp	r3, #4
 800dd58:	d104      	bne.n	800dd64 <_ZN14CPwmController21setPulseWidthInternalEt+0x3c>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	691b      	ldr	r3, [r3, #16]
 800dd5e:	887a      	ldrh	r2, [r7, #2]
 800dd60:	639a      	str	r2, [r3, #56]	; 0x38
}
 800dd62:	e00f      	b.n	800dd84 <_ZN14CPwmController21setPulseWidthInternalEt+0x5c>
    __HAL_TIM_SetCompare(&m_htim, (m_initStruct.PWMChannel - 1) << 2, value);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	2b08      	cmp	r3, #8
 800dd70:	d104      	bne.n	800dd7c <_ZN14CPwmController21setPulseWidthInternalEt+0x54>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	691b      	ldr	r3, [r3, #16]
 800dd76:	887a      	ldrh	r2, [r7, #2]
 800dd78:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800dd7a:	e003      	b.n	800dd84 <_ZN14CPwmController21setPulseWidthInternalEt+0x5c>
    __HAL_TIM_SetCompare(&m_htim, (m_initStruct.PWMChannel - 1) << 2, value);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	691b      	ldr	r3, [r3, #16]
 800dd80:	887a      	ldrh	r2, [r7, #2]
 800dd82:	641a      	str	r2, [r3, #64]	; 0x40
}
 800dd84:	bf00      	nop
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bc80      	pop	{r7}
 800dd8c:	4770      	bx	lr
	...

0800dd90 <_ZN9IDateTimeD1Ev>:
            ERROR_NONE = 0,
            ERROR_READ_PROBLEM,
            ERROR_TIME_NOT_SET,
        };

        virtual ~IDateTime() {};
 800dd90:	b480      	push	{r7}
 800dd92:	b083      	sub	sp, #12
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	4a04      	ldr	r2, [pc, #16]	; (800ddac <_ZN9IDateTimeD1Ev+0x1c>)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	601a      	str	r2, [r3, #0]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	4618      	mov	r0, r3
 800dda2:	370c      	adds	r7, #12
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bc80      	pop	{r7}
 800dda8:	4770      	bx	lr
 800ddaa:	bf00      	nop
 800ddac:	0801cba0 	.word	0x0801cba0

0800ddb0 <_ZN9IDateTimeD0Ev>:
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f7ff ffe9 	bl	800dd90 <_ZN9IDateTimeD1Ev>
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f007 fc0c 	bl	80155dc <_ZdlPv>
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3708      	adds	r7, #8
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <_ZN9IDateTime6updateEv>:

        /**
         * \brief Służy np. do zbuforowania odczytu zegara do lokalnych zmiennych
         * \return kod błedu w przypadku jego wystąpienia
         */
        virtual TError update() { return ERROR_NONE; }
 800ddce:	b480      	push	{r7}
 800ddd0:	b083      	sub	sp, #12
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	4618      	mov	r0, r3
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bc80      	pop	{r7}
 800dde0:	4770      	bx	lr
	...

0800dde4 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions>:
volatile bool CRTCalendar::secondsChanged = true;
bool CRTCalendar::useCacheInterrupt;
IDelayFunctions* CRTCalendar::delayFn;

CRTCalendar::TRTCInitResult CRTCalendar::initialize(TRTCClock clkSrc, bool useChacheIT, IDelayFunctions* delays)
{
 800dde4:	b590      	push	{r4, r7, lr}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	607b      	str	r3, [r7, #4]
 800ddee:	460b      	mov	r3, r1
 800ddf0:	817b      	strh	r3, [r7, #10]
 800ddf2:	4613      	mov	r3, r2
 800ddf4:	727b      	strb	r3, [r7, #9]
	useCacheInterrupt = useChacheIT;
 800ddf6:	4a84      	ldr	r2, [pc, #528]	; (800e008 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x224>)
 800ddf8:	7a7b      	ldrb	r3, [r7, #9]
 800ddfa:	7013      	strb	r3, [r2, #0]
	delayFn = delays;
 800ddfc:	4a83      	ldr	r2, [pc, #524]	; (800e00c <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x228>)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6013      	str	r3, [r2, #0]

	RCC->APB1ENR |= RCC_APB1ENR_BKPEN;
 800de02:	4a83      	ldr	r2, [pc, #524]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800de04:	4b82      	ldr	r3, [pc, #520]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800de06:	69db      	ldr	r3, [r3, #28]
 800de08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800de0c:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800de0e:	4a80      	ldr	r2, [pc, #512]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800de10:	4b7f      	ldr	r3, [pc, #508]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800de12:	69db      	ldr	r3, [r3, #28]
 800de14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de18:	61d3      	str	r3, [r2, #28]
	PWR->CR |= PWR_CR_DBP;
 800de1a:	4a7e      	ldr	r2, [pc, #504]	; (800e014 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x230>)
 800de1c:	4b7d      	ldr	r3, [pc, #500]	; (800e014 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x230>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de24:	6013      	str	r3, [r2, #0]

	switch (clkSrc)
 800de26:	897b      	ldrh	r3, [r7, #10]
 800de28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de2c:	d01c      	beq.n	800de68 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x84>
 800de2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de32:	d000      	beq.n	800de36 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x52>
			break;

		case TRCTCLK_LSE:
			break;
		default:
			break;
 800de34:	e01b      	b.n	800de6e <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x8a>
			RCC->CSR |= RCC_CSR_LSION;
 800de36:	4a76      	ldr	r2, [pc, #472]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800de38:	4b75      	ldr	r3, [pc, #468]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800de3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de3c:	f043 0301 	orr.w	r3, r3, #1
 800de40:	6253      	str	r3, [r2, #36]	; 0x24
			if(!waitForRegisterFlag(&RCC->CSR,RCC_CSR_LSIRDY, delayFn))
 800de42:	4b72      	ldr	r3, [pc, #456]	; (800e00c <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x228>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2202      	movs	r2, #2
 800de48:	4973      	ldr	r1, [pc, #460]	; (800e018 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x234>)
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	f000 fa41 	bl	800e2d2 <_ZN11CRTCalendar19waitForRegisterFlagEPVmmP15IDelayFunctions>
 800de50:	4603      	mov	r3, r0
 800de52:	f083 0301 	eor.w	r3, r3, #1
 800de56:	b2db      	uxtb	r3, r3
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d007      	beq.n	800de6c <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x88>
				initStatus = TRTC_FAIL;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2203      	movs	r2, #3
 800de60:	721a      	strb	r2, [r3, #8]
				return initStatus;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	7a1b      	ldrb	r3, [r3, #8]
 800de66:	e0cb      	b.n	800e000 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x21c>
			break;
 800de68:	bf00      	nop
 800de6a:	e000      	b.n	800de6e <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x8a>
			break;
 800de6c:	bf00      	nop
	}

	if(!(RCC->BDCR & RCC_BDCR_RTCEN))
 800de6e:	4b68      	ldr	r3, [pc, #416]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800de70:	6a1b      	ldr	r3, [r3, #32]
 800de72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de76:	2b00      	cmp	r3, #0
 800de78:	bf0c      	ite	eq
 800de7a:	2301      	moveq	r3, #1
 800de7c:	2300      	movne	r3, #0
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	2b00      	cmp	r3, #0
 800de82:	f000 80a3 	beq.w	800dfcc <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x1e8>
	{


		RCC->BDCR |= RCC_BDCR_BDRST;
 800de86:	4a62      	ldr	r2, [pc, #392]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800de88:	4b61      	ldr	r3, [pc, #388]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800de8a:	6a1b      	ldr	r3, [r3, #32]
 800de8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de90:	6213      	str	r3, [r2, #32]
		RCC->BDCR &= ~RCC_BDCR_BDRST;
 800de92:	4a5f      	ldr	r2, [pc, #380]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800de94:	4b5e      	ldr	r3, [pc, #376]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800de96:	6a1b      	ldr	r3, [r3, #32]
 800de98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de9c:	6213      	str	r3, [r2, #32]


		switch(clkSrc)
 800de9e:	897b      	ldrh	r3, [r7, #10]
 800dea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dea4:	d00a      	beq.n	800debc <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0xd8>
 800dea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800deaa:	d000      	beq.n	800deae <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0xca>
				}
				RCC->BDCR |= RCC_BDCR_RTCSEL_LSE;
				break;

			default:
				break;
 800deac:	e026      	b.n	800defc <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x118>
				RCC->BDCR |= RCC_BDCR_RTCSEL_LSI;
 800deae:	4a58      	ldr	r2, [pc, #352]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800deb0:	4b57      	ldr	r3, [pc, #348]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800deb2:	6a1b      	ldr	r3, [r3, #32]
 800deb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800deb8:	6213      	str	r3, [r2, #32]
				break;
 800deba:	e01f      	b.n	800defc <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x118>
				RCC->BDCR |= RCC_BDCR_LSEON;
 800debc:	4a54      	ldr	r2, [pc, #336]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800debe:	4b54      	ldr	r3, [pc, #336]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800dec0:	6a1b      	ldr	r3, [r3, #32]
 800dec2:	f043 0301 	orr.w	r3, r3, #1
 800dec6:	6213      	str	r3, [r2, #32]
				if(!waitForRegisterFlag(&RCC->BDCR,RCC_BDCR_LSERDY, delayFn))
 800dec8:	4b50      	ldr	r3, [pc, #320]	; (800e00c <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x228>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2202      	movs	r2, #2
 800dece:	4953      	ldr	r1, [pc, #332]	; (800e01c <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x238>)
 800ded0:	68f8      	ldr	r0, [r7, #12]
 800ded2:	f000 f9fe 	bl	800e2d2 <_ZN11CRTCalendar19waitForRegisterFlagEPVmmP15IDelayFunctions>
 800ded6:	4603      	mov	r3, r0
 800ded8:	f083 0301 	eor.w	r3, r3, #1
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d005      	beq.n	800deee <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x10a>
					initStatus = TRTC_FAIL;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2203      	movs	r2, #3
 800dee6:	721a      	strb	r2, [r3, #8]
					return initStatus;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	7a1b      	ldrb	r3, [r3, #8]
 800deec:	e088      	b.n	800e000 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x21c>
				RCC->BDCR |= RCC_BDCR_RTCSEL_LSE;
 800deee:	4a48      	ldr	r2, [pc, #288]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800def0:	4b47      	ldr	r3, [pc, #284]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800def2:	6a1b      	ldr	r3, [r3, #32]
 800def4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800def8:	6213      	str	r3, [r2, #32]
				break;
 800defa:	bf00      	nop
		}


		RCC->BDCR |= RCC_BDCR_RTCEN;
 800defc:	4a44      	ldr	r2, [pc, #272]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800defe:	4b44      	ldr	r3, [pc, #272]	; (800e010 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x22c>)
 800df00:	6a1b      	ldr	r3, [r3, #32]
 800df02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df06:	6213      	str	r3, [r2, #32]

		if(!waitForSync())
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f000 fa45 	bl	800e398 <_ZN11CRTCalendar11waitForSyncEv>
 800df0e:	4603      	mov	r3, r0
 800df10:	f083 0301 	eor.w	r3, r3, #1
 800df14:	b2db      	uxtb	r3, r3
 800df16:	2b00      	cmp	r3, #0
 800df18:	d005      	beq.n	800df26 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x142>
		{
			initStatus = TRTC_FAIL;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2203      	movs	r2, #3
 800df1e:	721a      	strb	r2, [r3, #8]
			return initStatus;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	7a1b      	ldrb	r3, [r3, #8]
 800df24:	e06c      	b.n	800e000 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x21c>
		}
		if(!waitForTask())
 800df26:	68f8      	ldr	r0, [r7, #12]
 800df28:	f000 fa52 	bl	800e3d0 <_ZN11CRTCalendar11waitForTaskEv>
 800df2c:	4603      	mov	r3, r0
 800df2e:	f083 0301 	eor.w	r3, r3, #1
 800df32:	b2db      	uxtb	r3, r3
 800df34:	2b00      	cmp	r3, #0
 800df36:	d005      	beq.n	800df44 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x160>
		{
			initStatus = TRTC_FAIL;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2203      	movs	r2, #3
 800df3c:	721a      	strb	r2, [r3, #8]
			return initStatus;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	7a1b      	ldrb	r3, [r3, #8]
 800df42:	e05d      	b.n	800e000 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x21c>
		}

		RTC->CRL |= RTC_CRL_CNF;
 800df44:	4a36      	ldr	r2, [pc, #216]	; (800e020 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x23c>)
 800df46:	4b36      	ldr	r3, [pc, #216]	; (800e020 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x23c>)
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	f043 0310 	orr.w	r3, r3, #16
 800df4e:	6053      	str	r3, [r2, #4]

		switch(clkSrc)
 800df50:	897b      	ldrh	r3, [r7, #10]
 800df52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df56:	d003      	beq.n	800df60 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x17c>
 800df58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df5c:	d005      	beq.n	800df6a <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x186>
		case TRCTCLK_LSI:
			RTC->PRLL = 0x9c40;
			break;

		default:
			break;
 800df5e:	e009      	b.n	800df74 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x190>
			RTC->PRLL = 0x7fff;
 800df60:	4b2f      	ldr	r3, [pc, #188]	; (800e020 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x23c>)
 800df62:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800df66:	60da      	str	r2, [r3, #12]
			break;
 800df68:	e004      	b.n	800df74 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x190>
			RTC->PRLL = 0x9c40;
 800df6a:	4b2d      	ldr	r3, [pc, #180]	; (800e020 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x23c>)
 800df6c:	f649 4240 	movw	r2, #40000	; 0x9c40
 800df70:	60da      	str	r2, [r3, #12]
			break;
 800df72:	bf00      	nop
		}

		RTC->CRL &= ~RTC_CRL_CNF;
 800df74:	4a2a      	ldr	r2, [pc, #168]	; (800e020 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x23c>)
 800df76:	4b2a      	ldr	r3, [pc, #168]	; (800e020 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x23c>)
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	f023 0310 	bic.w	r3, r3, #16
 800df7e:	6053      	str	r3, [r2, #4]
		if(!waitForTask())
 800df80:	68f8      	ldr	r0, [r7, #12]
 800df82:	f000 fa25 	bl	800e3d0 <_ZN11CRTCalendar11waitForTaskEv>
 800df86:	4603      	mov	r3, r0
 800df88:	f083 0301 	eor.w	r3, r3, #1
 800df8c:	b2db      	uxtb	r3, r3
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d005      	beq.n	800df9e <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x1ba>
		{
			initStatus = TRTC_FAIL;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2203      	movs	r2, #3
 800df96:	721a      	strb	r2, [r3, #8]
			return initStatus;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	7a1b      	ldrb	r3, [r3, #8]
 800df9c:	e030      	b.n	800e000 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x21c>
		}
		setDate(INITIAL_YEAR,1,1);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	3324      	adds	r3, #36	; 0x24
 800dfa4:	681c      	ldr	r4, [r3, #0]
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800dfae:	68f8      	ldr	r0, [r7, #12]
 800dfb0:	47a0      	blx	r4
		setTime(12,0,0);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	3328      	adds	r3, #40	; 0x28
 800dfb8:	681c      	ldr	r4, [r3, #0]
 800dfba:	2300      	movs	r3, #0
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	210c      	movs	r1, #12
 800dfc0:	68f8      	ldr	r0, [r7, #12]
 800dfc2:	47a0      	blx	r4
		initStatus = TRTC_OK_RESET;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2202      	movs	r2, #2
 800dfc8:	721a      	strb	r2, [r3, #8]
 800dfca:	e011      	b.n	800dff0 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x20c>
	}else
	{
		if(!waitForSync())
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	f000 f9e3 	bl	800e398 <_ZN11CRTCalendar11waitForSyncEv>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	f083 0301 	eor.w	r3, r3, #1
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d005      	beq.n	800dfea <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x206>
		{
			initStatus = TRTC_FAIL;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2203      	movs	r2, #3
 800dfe2:	721a      	strb	r2, [r3, #8]
			return initStatus;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	7a1b      	ldrb	r3, [r3, #8]
 800dfe8:	e00a      	b.n	800e000 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x21c>
		}
		initStatus = TRTC_OK;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2201      	movs	r2, #1
 800dfee:	721a      	strb	r2, [r3, #8]
	}

	PWR->CR &= ~PWR_CR_DBP;
 800dff0:	4a08      	ldr	r2, [pc, #32]	; (800e014 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x230>)
 800dff2:	4b08      	ldr	r3, [pc, #32]	; (800e014 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions+0x230>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dffa:	6013      	str	r3, [r2, #0]

    return initStatus;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	7a1b      	ldrb	r3, [r3, #8]
}
 800e000:	4618      	mov	r0, r3
 800e002:	3714      	adds	r7, #20
 800e004:	46bd      	mov	sp, r7
 800e006:	bd90      	pop	{r4, r7, pc}
 800e008:	200009e4 	.word	0x200009e4
 800e00c:	200009e8 	.word	0x200009e8
 800e010:	40021000 	.word	0x40021000
 800e014:	40007000 	.word	0x40007000
 800e018:	40021024 	.word	0x40021024
 800e01c:	40021020 	.word	0x40021020
 800e020:	40002800 	.word	0x40002800

0800e024 <_ZN11CRTCalendar10getWeekDayEv>:

uint8_t CRTCalendar::getWeekDay()
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
	return getTimeStruct()->tm_wday;
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 f8bb 	bl	800e1a8 <_ZN11CRTCalendar13getTimeStructEv>
 800e032:	4603      	mov	r3, r0
 800e034:	699b      	ldr	r3, [r3, #24]
 800e036:	b2db      	uxtb	r3, r3
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3708      	adds	r7, #8
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <_ZN11CRTCalendar6getDayEv>:

uint8_t CRTCalendar::getDay()
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
	return getTimeStruct()->tm_mday;
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f000 f8ad 	bl	800e1a8 <_ZN11CRTCalendar13getTimeStructEv>
 800e04e:	4603      	mov	r3, r0
 800e050:	68db      	ldr	r3, [r3, #12]
 800e052:	b2db      	uxtb	r3, r3
}
 800e054:	4618      	mov	r0, r3
 800e056:	3708      	adds	r7, #8
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <_ZN11CRTCalendar8getMonthEv>:

uint8_t CRTCalendar::getMonth()
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
	return getTimeStruct()->tm_mon+1;
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f000 f89f 	bl	800e1a8 <_ZN11CRTCalendar13getTimeStructEv>
 800e06a:	4603      	mov	r3, r0
 800e06c:	691b      	ldr	r3, [r3, #16]
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	3301      	adds	r3, #1
 800e072:	b2db      	uxtb	r3, r3
}
 800e074:	4618      	mov	r0, r3
 800e076:	3708      	adds	r7, #8
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <_ZN11CRTCalendar7getYearEv>:

uint16_t CRTCalendar::getYear()
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
	return getTimeStruct()->tm_year + 1900;
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f000 f88f 	bl	800e1a8 <_ZN11CRTCalendar13getTimeStructEv>
 800e08a:	4603      	mov	r3, r0
 800e08c:	695b      	ldr	r3, [r3, #20]
 800e08e:	b29b      	uxth	r3, r3
 800e090:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800e094:	b29b      	uxth	r3, r3
}
 800e096:	4618      	mov	r0, r3
 800e098:	3708      	adds	r7, #8
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}

0800e09e <_ZN11CRTCalendar10getSecondsEv>:

uint8_t CRTCalendar::getSeconds()
{
 800e09e:	b580      	push	{r7, lr}
 800e0a0:	b082      	sub	sp, #8
 800e0a2:	af00      	add	r7, sp, #0
 800e0a4:	6078      	str	r0, [r7, #4]
	return getTimeStruct()->tm_sec;
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f000 f87e 	bl	800e1a8 <_ZN11CRTCalendar13getTimeStructEv>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	b2db      	uxtb	r3, r3
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3708      	adds	r7, #8
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <_ZN11CRTCalendar10getMinutesEv>:

uint8_t CRTCalendar::getMinutes()
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b082      	sub	sp, #8
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
	return getTimeStruct()->tm_min;
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 f870 	bl	800e1a8 <_ZN11CRTCalendar13getTimeStructEv>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	b2db      	uxtb	r3, r3
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <_ZN11CRTCalendar8getHoursEv>:

uint8_t CRTCalendar::getHours()
{
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b082      	sub	sp, #8
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
	return getTimeStruct()->tm_hour;
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 f862 	bl	800e1a8 <_ZN11CRTCalendar13getTimeStructEv>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	689b      	ldr	r3, [r3, #8]
 800e0e8:	b2db      	uxtb	r3, r3
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3708      	adds	r7, #8
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
	...

0800e0f4 <_ZN11CRTCalendar7setTimeEhhh>:

void CRTCalendar::setTime(uint8_t hr, uint8_t min, uint8_t sec)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	4608      	mov	r0, r1
 800e0fe:	4611      	mov	r1, r2
 800e100:	461a      	mov	r2, r3
 800e102:	4603      	mov	r3, r0
 800e104:	70fb      	strb	r3, [r7, #3]
 800e106:	460b      	mov	r3, r1
 800e108:	70bb      	strb	r3, [r7, #2]
 800e10a:	4613      	mov	r3, r2
 800e10c:	707b      	strb	r3, [r7, #1]
	tm* o = getTimeStruct();
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f000 f84a 	bl	800e1a8 <_ZN11CRTCalendar13getTimeStructEv>
 800e114:	60f8      	str	r0, [r7, #12]
	o->tm_hour = hr;
 800e116:	78fa      	ldrb	r2, [r7, #3]
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	609a      	str	r2, [r3, #8]
	o->tm_min = min;
 800e11c:	78ba      	ldrb	r2, [r7, #2]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	605a      	str	r2, [r3, #4]
	o->tm_sec = sec;
 800e122:	787a      	ldrb	r2, [r7, #1]
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	601a      	str	r2, [r3, #0]
	writeRTC((uint32_t)CTimeFix::mktimeFix(o));
 800e128:	68f8      	ldr	r0, [r7, #12]
 800e12a:	f002 f8ed 	bl	8010308 <_ZN8CTimeFix9mktimeFixEP2tm>
 800e12e:	4603      	mov	r3, r0
 800e130:	4619      	mov	r1, r3
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 f870 	bl	800e218 <_ZN11CRTCalendar8writeRTCEm>
	secondsChanged = true;
 800e138:	4b03      	ldr	r3, [pc, #12]	; (800e148 <_ZN11CRTCalendar7setTimeEhhh+0x54>)
 800e13a:	2201      	movs	r2, #1
 800e13c:	701a      	strb	r2, [r3, #0]

}
 800e13e:	bf00      	nop
 800e140:	3710      	adds	r7, #16
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	2000000c 	.word	0x2000000c

0800e14c <_ZN11CRTCalendar7setDateEthh>:

void CRTCalendar::setDate(uint16_t yr, uint8_t month, uint8_t day)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	4608      	mov	r0, r1
 800e156:	4611      	mov	r1, r2
 800e158:	461a      	mov	r2, r3
 800e15a:	4603      	mov	r3, r0
 800e15c:	807b      	strh	r3, [r7, #2]
 800e15e:	460b      	mov	r3, r1
 800e160:	707b      	strb	r3, [r7, #1]
 800e162:	4613      	mov	r3, r2
 800e164:	703b      	strb	r3, [r7, #0]
	tm* o = getTimeStruct();
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 f81e 	bl	800e1a8 <_ZN11CRTCalendar13getTimeStructEv>
 800e16c:	60f8      	str	r0, [r7, #12]
	o->tm_year =  yr - 1900;
 800e16e:	887b      	ldrh	r3, [r7, #2]
 800e170:	f2a3 726c 	subw	r2, r3, #1900	; 0x76c
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	615a      	str	r2, [r3, #20]
	o->tm_mon = month - 1;
 800e178:	787b      	ldrb	r3, [r7, #1]
 800e17a:	1e5a      	subs	r2, r3, #1
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	611a      	str	r2, [r3, #16]
	o->tm_mday = day;
 800e180:	783a      	ldrb	r2, [r7, #0]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	60da      	str	r2, [r3, #12]
	writeRTC((uint32_t)CTimeFix::mktimeFix(o));
 800e186:	68f8      	ldr	r0, [r7, #12]
 800e188:	f002 f8be 	bl	8010308 <_ZN8CTimeFix9mktimeFixEP2tm>
 800e18c:	4603      	mov	r3, r0
 800e18e:	4619      	mov	r1, r3
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 f841 	bl	800e218 <_ZN11CRTCalendar8writeRTCEm>
	secondsChanged = true;
 800e196:	4b03      	ldr	r3, [pc, #12]	; (800e1a4 <_ZN11CRTCalendar7setDateEthh+0x58>)
 800e198:	2201      	movs	r2, #1
 800e19a:	701a      	strb	r2, [r3, #0]
}
 800e19c:	bf00      	nop
 800e19e:	3710      	adds	r7, #16
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}
 800e1a4:	2000000c 	.word	0x2000000c

0800e1a8 <_ZN11CRTCalendar13getTimeStructEv>:

tm *CRTCalendar::getTimeStruct()
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
	if(secondsChanged || useCacheInterrupt == false)
 800e1b0:	4b16      	ldr	r3, [pc, #88]	; (800e20c <_ZN11CRTCalendar13getTimeStructEv+0x64>)
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	b2db      	uxtb	r3, r3
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d106      	bne.n	800e1c8 <_ZN11CRTCalendar13getTimeStructEv+0x20>
 800e1ba:	4b15      	ldr	r3, [pc, #84]	; (800e210 <_ZN11CRTCalendar13getTimeStructEv+0x68>)
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	f083 0301 	eor.w	r3, r3, #1
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d001      	beq.n	800e1cc <_ZN11CRTCalendar13getTimeStructEv+0x24>
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	e000      	b.n	800e1ce <_ZN11CRTCalendar13getTimeStructEv+0x26>
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d015      	beq.n	800e1fe <_ZN11CRTCalendar13getTimeStructEv+0x56>
	{
		secondsChanged = false;
 800e1d2:	4b0e      	ldr	r3, [pc, #56]	; (800e20c <_ZN11CRTCalendar13getTimeStructEv+0x64>)
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	701a      	strb	r2, [r3, #0]

		uint16_t tmp = 0;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	81fb      	strh	r3, [r7, #14]
		tmp = RTC->CNTL;
 800e1dc:	4b0d      	ldr	r3, [pc, #52]	; (800e214 <_ZN11CRTCalendar13getTimeStructEv+0x6c>)
 800e1de:	69db      	ldr	r3, [r3, #28]
 800e1e0:	81fb      	strh	r3, [r7, #14]
		time_t t = (((uint32_t)RTC->CNTH << 16 ) | tmp);
 800e1e2:	4b0c      	ldr	r3, [pc, #48]	; (800e214 <_ZN11CRTCalendar13getTimeStructEv+0x6c>)
 800e1e4:	699b      	ldr	r3, [r3, #24]
 800e1e6:	041a      	lsls	r2, r3, #16
 800e1e8:	89fb      	ldrh	r3, [r7, #14]
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	60bb      	str	r3, [r7, #8]
		cachedTimeStruct = CTimeFix::localtimeFix(&t);
 800e1ee:	f107 0308 	add.w	r3, r7, #8
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f002 f832 	bl	801025c <_ZN8CTimeFix12localtimeFixEPKl>
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	605a      	str	r2, [r3, #4]
	}
	return cachedTimeStruct;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	685b      	ldr	r3, [r3, #4]
}
 800e202:	4618      	mov	r0, r3
 800e204:	3710      	adds	r7, #16
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	2000000c 	.word	0x2000000c
 800e210:	200009e4 	.word	0x200009e4
 800e214:	40002800 	.word	0x40002800

0800e218 <_ZN11CRTCalendar8writeRTCEm>:

bool CRTCalendar::writeRTC(uint32_t counter)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
	PWR->CR |= PWR_CR_DBP;
 800e222:	4a1d      	ldr	r2, [pc, #116]	; (800e298 <_ZN11CRTCalendar8writeRTCEm+0x80>)
 800e224:	4b1c      	ldr	r3, [pc, #112]	; (800e298 <_ZN11CRTCalendar8writeRTCEm+0x80>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e22c:	6013      	str	r3, [r2, #0]
	if(!waitForTask()) return false;
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 f8ce 	bl	800e3d0 <_ZN11CRTCalendar11waitForTaskEv>
 800e234:	4603      	mov	r3, r0
 800e236:	f083 0301 	eor.w	r3, r3, #1
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d001      	beq.n	800e244 <_ZN11CRTCalendar8writeRTCEm+0x2c>
 800e240:	2300      	movs	r3, #0
 800e242:	e025      	b.n	800e290 <_ZN11CRTCalendar8writeRTCEm+0x78>
	RTC->CRL |= RTC_CRL_CNF;
 800e244:	4a15      	ldr	r2, [pc, #84]	; (800e29c <_ZN11CRTCalendar8writeRTCEm+0x84>)
 800e246:	4b15      	ldr	r3, [pc, #84]	; (800e29c <_ZN11CRTCalendar8writeRTCEm+0x84>)
 800e248:	685b      	ldr	r3, [r3, #4]
 800e24a:	f043 0310 	orr.w	r3, r3, #16
 800e24e:	6053      	str	r3, [r2, #4]
	RTC->CNTH = counter >> 16;
 800e250:	4a12      	ldr	r2, [pc, #72]	; (800e29c <_ZN11CRTCalendar8writeRTCEm+0x84>)
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	0c1b      	lsrs	r3, r3, #16
 800e256:	6193      	str	r3, [r2, #24]
	RTC->CNTL = counter & 0xffff;
 800e258:	4a10      	ldr	r2, [pc, #64]	; (800e29c <_ZN11CRTCalendar8writeRTCEm+0x84>)
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	61d3      	str	r3, [r2, #28]
	RTC->CRL &= ~RTC_CRL_CNF;
 800e260:	4a0e      	ldr	r2, [pc, #56]	; (800e29c <_ZN11CRTCalendar8writeRTCEm+0x84>)
 800e262:	4b0e      	ldr	r3, [pc, #56]	; (800e29c <_ZN11CRTCalendar8writeRTCEm+0x84>)
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	f023 0310 	bic.w	r3, r3, #16
 800e26a:	6053      	str	r3, [r2, #4]
	if(!waitForTask()) return false;
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f000 f8af 	bl	800e3d0 <_ZN11CRTCalendar11waitForTaskEv>
 800e272:	4603      	mov	r3, r0
 800e274:	f083 0301 	eor.w	r3, r3, #1
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d001      	beq.n	800e282 <_ZN11CRTCalendar8writeRTCEm+0x6a>
 800e27e:	2300      	movs	r3, #0
 800e280:	e006      	b.n	800e290 <_ZN11CRTCalendar8writeRTCEm+0x78>

	PWR->CR &= ~PWR_CR_DBP;
 800e282:	4a05      	ldr	r2, [pc, #20]	; (800e298 <_ZN11CRTCalendar8writeRTCEm+0x80>)
 800e284:	4b04      	ldr	r3, [pc, #16]	; (800e298 <_ZN11CRTCalendar8writeRTCEm+0x80>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e28c:	6013      	str	r3, [r2, #0]
	return true;
 800e28e:	2301      	movs	r3, #1
}
 800e290:	4618      	mov	r0, r3
 800e292:	3708      	adds	r7, #8
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	40007000 	.word	0x40007000
 800e29c:	40002800 	.word	0x40002800

0800e2a0 <_ZN11CRTCalendar15getMinutesOfDayEv>:

uint16_t CRTCalendar::getMinutesOfDay()
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
	tm* o = getTimeStruct();
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f7ff ff7d 	bl	800e1a8 <_ZN11CRTCalendar13getTimeStructEv>
 800e2ae:	60f8      	str	r0, [r7, #12]
	return o->tm_hour * 60 + o->tm_min;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	689b      	ldr	r3, [r3, #8]
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	0112      	lsls	r2, r2, #4
 800e2ba:	1ad3      	subs	r3, r2, r3
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	4413      	add	r3, r2
 800e2c8:	b29b      	uxth	r3, r3
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3710      	adds	r7, #16
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}

0800e2d2 <_ZN11CRTCalendar19waitForRegisterFlagEPVmmP15IDelayFunctions>:
{
	 return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;
}

bool CRTCalendar::waitForRegisterFlag(volatile uint32_t* reg, uint32_t bit, IDelayFunctions* dl)
{
 800e2d2:	b580      	push	{r7, lr}
 800e2d4:	b086      	sub	sp, #24
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	60f8      	str	r0, [r7, #12]
 800e2da:	60b9      	str	r1, [r7, #8]
 800e2dc:	607a      	str	r2, [r7, #4]
 800e2de:	603b      	str	r3, [r7, #0]
	uint32_t c = REGISTER_FLAG_TIMEOUT_MS;
 800e2e0:	f241 3388 	movw	r3, #5000	; 0x1388
 800e2e4:	617b      	str	r3, [r7, #20]
	while(!((*reg) & bit) && c)
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	681a      	ldr	r2, [r3, #0]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	4013      	ands	r3, r2
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d104      	bne.n	800e2fc <_ZN11CRTCalendar19waitForRegisterFlagEPVmmP15IDelayFunctions+0x2a>
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d001      	beq.n	800e2fc <_ZN11CRTCalendar19waitForRegisterFlagEPVmmP15IDelayFunctions+0x2a>
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	e000      	b.n	800e2fe <_ZN11CRTCalendar19waitForRegisterFlagEPVmmP15IDelayFunctions+0x2c>
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d00a      	beq.n	800e318 <_ZN11CRTCalendar19waitForRegisterFlagEPVmmP15IDelayFunctions+0x46>
	{
		dl->delayms(1);
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	3308      	adds	r3, #8
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2101      	movs	r1, #1
 800e30c:	6838      	ldr	r0, [r7, #0]
 800e30e:	4798      	blx	r3
		c--;
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	3b01      	subs	r3, #1
 800e314:	617b      	str	r3, [r7, #20]
	while(!((*reg) & bit) && c)
 800e316:	e7e6      	b.n	800e2e6 <_ZN11CRTCalendar19waitForRegisterFlagEPVmmP15IDelayFunctions+0x14>
	}
	return c;
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	bf14      	ite	ne
 800e31e:	2301      	movne	r3, #1
 800e320:	2300      	moveq	r3, #0
 800e322:	b2db      	uxtb	r3, r3
}
 800e324:	4618      	mov	r0, r3
 800e326:	3718      	adds	r7, #24
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <_ZN11CRTCalendar13RTCIRQHandlerEv>:

void CRTCalendar::RTCIRQHandler()
{
 800e32c:	b480      	push	{r7}
 800e32e:	af00      	add	r7, sp, #0
	secondsChanged = true;
 800e330:	4b03      	ldr	r3, [pc, #12]	; (800e340 <_ZN11CRTCalendar13RTCIRQHandlerEv+0x14>)
 800e332:	2201      	movs	r2, #1
 800e334:	701a      	strb	r2, [r3, #0]
}
 800e336:	bf00      	nop
 800e338:	46bd      	mov	sp, r7
 800e33a:	bc80      	pop	{r7}
 800e33c:	4770      	bx	lr
 800e33e:	bf00      	nop
 800e340:	2000000c 	.word	0x2000000c

0800e344 <_ZN11CRTCalendar10initRTCIRQEhh>:

void CRTCalendar::initRTCIRQ(uint8_t preemPrio, uint8_t subPrio)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	460b      	mov	r3, r1
 800e34e:	70fb      	strb	r3, [r7, #3]
 800e350:	4613      	mov	r3, r2
 800e352:	70bb      	strb	r3, [r7, #2]
	RTC->CRL |= RTC_CRL_CNF;
 800e354:	4a0f      	ldr	r2, [pc, #60]	; (800e394 <_ZN11CRTCalendar10initRTCIRQEhh+0x50>)
 800e356:	4b0f      	ldr	r3, [pc, #60]	; (800e394 <_ZN11CRTCalendar10initRTCIRQEhh+0x50>)
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	f043 0310 	orr.w	r3, r3, #16
 800e35e:	6053      	str	r3, [r2, #4]
	waitForTask();
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f000 f835 	bl	800e3d0 <_ZN11CRTCalendar11waitForTaskEv>
	i.NVIC_IRQChannelPreemptionPriority = preemPrio;
	i.NVIC_IRQChannelSubPriority = subPrio;
	i.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&i);
#else
    HAL_NVIC_SetPriority(RTC_IRQn, preemPrio, subPrio);
 800e366:	78fb      	ldrb	r3, [r7, #3]
 800e368:	78ba      	ldrb	r2, [r7, #2]
 800e36a:	4619      	mov	r1, r3
 800e36c:	2003      	movs	r0, #3
 800e36e:	f7fa f8a1 	bl	80084b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800e372:	2003      	movs	r0, #3
 800e374:	f7fa f8d2 	bl	800851c <HAL_NVIC_EnableIRQ>
//    	}
//    }

#endif

    RTC->CRH |= RTC_IT_SEC;
 800e378:	4a06      	ldr	r2, [pc, #24]	; (800e394 <_ZN11CRTCalendar10initRTCIRQEhh+0x50>)
 800e37a:	4b06      	ldr	r3, [pc, #24]	; (800e394 <_ZN11CRTCalendar10initRTCIRQEhh+0x50>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f043 0301 	orr.w	r3, r3, #1
 800e382:	6013      	str	r3, [r2, #0]
	waitForTask();
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f000 f823 	bl	800e3d0 <_ZN11CRTCalendar11waitForTaskEv>
}
 800e38a:	bf00      	nop
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	40002800 	.word	0x40002800

0800e398 <_ZN11CRTCalendar11waitForSyncEv>:

inline bool CRTCalendar::waitForSync()
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
	RTC->CRL &= ~RTC_CRL_RSF;
 800e3a0:	4a08      	ldr	r2, [pc, #32]	; (800e3c4 <_ZN11CRTCalendar11waitForSyncEv+0x2c>)
 800e3a2:	4b08      	ldr	r3, [pc, #32]	; (800e3c4 <_ZN11CRTCalendar11waitForSyncEv+0x2c>)
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	f023 0308 	bic.w	r3, r3, #8
 800e3aa:	6053      	str	r3, [r2, #4]
	return waitForRegisterFlag(&RTC->CRL,RTC_CRL_RSF,delayFn);
 800e3ac:	4b06      	ldr	r3, [pc, #24]	; (800e3c8 <_ZN11CRTCalendar11waitForSyncEv+0x30>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	2208      	movs	r2, #8
 800e3b2:	4906      	ldr	r1, [pc, #24]	; (800e3cc <_ZN11CRTCalendar11waitForSyncEv+0x34>)
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f7ff ff8c 	bl	800e2d2 <_ZN11CRTCalendar19waitForRegisterFlagEPVmmP15IDelayFunctions>
 800e3ba:	4603      	mov	r3, r0
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3708      	adds	r7, #8
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	40002800 	.word	0x40002800
 800e3c8:	200009e8 	.word	0x200009e8
 800e3cc:	40002804 	.word	0x40002804

0800e3d0 <_ZN11CRTCalendar11waitForTaskEv>:

inline bool CRTCalendar::waitForTask()
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
	return 	waitForRegisterFlag(&RTC->CRL,RTC_CRL_RTOFF,delayFn);
 800e3d8:	4b05      	ldr	r3, [pc, #20]	; (800e3f0 <_ZN11CRTCalendar11waitForTaskEv+0x20>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2220      	movs	r2, #32
 800e3de:	4905      	ldr	r1, [pc, #20]	; (800e3f4 <_ZN11CRTCalendar11waitForTaskEv+0x24>)
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f7ff ff76 	bl	800e2d2 <_ZN11CRTCalendar19waitForRegisterFlagEPVmmP15IDelayFunctions>
 800e3e6:	4603      	mov	r3, r0
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3708      	adds	r7, #8
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	200009e8 	.word	0x200009e8
 800e3f4:	40002804 	.word	0x40002804

0800e3f8 <_ZN11CRTCalendar12getTotalTimeEv>:
	time_t end = getTotalTime();
	return difftime(then,end);
}

time_t CRTCalendar::getTotalTime()
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
	return CTimeFix::mktimeFix(getTimeStruct());
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f7ff fed1 	bl	800e1a8 <_ZN11CRTCalendar13getTimeStructEv>
 800e406:	4603      	mov	r3, r0
 800e408:	4618      	mov	r0, r3
 800e40a:	f001 ff7d 	bl	8010308 <_ZN8CTimeFix9mktimeFixEP2tm>
 800e40e:	4603      	mov	r3, r0
}
 800e410:	4618      	mov	r0, r3
 800e412:	3708      	adds	r7, #8
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}

0800e418 <_ZN11CRTCalendar10setWeekDayEh>:
	}
	return c;
}

void CRTCalendar::setWeekDay(uint8_t d)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b086      	sub	sp, #24
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	460b      	mov	r3, r1
 800e422:	70fb      	strb	r3, [r7, #3]
	const uint32_t zeroSeconds = 259200;
 800e424:	4b10      	ldr	r3, [pc, #64]	; (800e468 <_ZN11CRTCalendar10setWeekDayEh+0x50>)
 800e426:	617b      	str	r3, [r7, #20]
	uint32_t currDaySeconds = getMinutesOfDay() * 60;
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f7ff ff39 	bl	800e2a0 <_ZN11CRTCalendar15getMinutesOfDayEv>
 800e42e:	4603      	mov	r3, r0
 800e430:	461a      	mov	r2, r3
 800e432:	4613      	mov	r3, r2
 800e434:	011b      	lsls	r3, r3, #4
 800e436:	1a9b      	subs	r3, r3, r2
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	613b      	str	r3, [r7, #16]
	uint32_t newDaySeconds = zeroSeconds + (d * 86400) + currDaySeconds;
 800e43c:	78fb      	ldrb	r3, [r7, #3]
 800e43e:	4a0b      	ldr	r2, [pc, #44]	; (800e46c <_ZN11CRTCalendar10setWeekDayEh+0x54>)
 800e440:	fb02 f303 	mul.w	r3, r2, r3
 800e444:	461a      	mov	r2, r3
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	4413      	add	r3, r2
 800e44a:	f503 337d 	add.w	r3, r3, #259072	; 0x3f400
 800e44e:	3380      	adds	r3, #128	; 0x80
 800e450:	60fb      	str	r3, [r7, #12]
	writeRTC(newDaySeconds);
 800e452:	68f9      	ldr	r1, [r7, #12]
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f7ff fedf 	bl	800e218 <_ZN11CRTCalendar8writeRTCEm>
	secondsChanged = true;
 800e45a:	4b05      	ldr	r3, [pc, #20]	; (800e470 <_ZN11CRTCalendar10setWeekDayEh+0x58>)
 800e45c:	2201      	movs	r2, #1
 800e45e:	701a      	strb	r2, [r3, #0]
}
 800e460:	bf00      	nop
 800e462:	3718      	adds	r7, #24
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	0003f480 	.word	0x0003f480
 800e46c:	00015180 	.word	0x00015180
 800e470:	2000000c 	.word	0x2000000c

0800e474 <_ZN11CRTCalendar13isDateTimeSetEv>:
{
	return initStatus;
}

bool CRTCalendar::isDateTimeSet()
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
    tm* timeStruct = getTimeStruct();
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f7ff fe93 	bl	800e1a8 <_ZN11CRTCalendar13getTimeStructEv>
 800e482:	60f8      	str	r0, [r7, #12]
    uint16_t year = timeStruct->tm_year + 1900;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	695b      	ldr	r3, [r3, #20]
 800e488:	b29b      	uxth	r3, r3
 800e48a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800e48e:	817b      	strh	r3, [r7, #10]
    return isDateTimeSet(year, timeStruct->tm_mon + 1);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	691b      	ldr	r3, [r3, #16]
 800e494:	b2db      	uxtb	r3, r3
 800e496:	3301      	adds	r3, #1
 800e498:	b2da      	uxtb	r2, r3
 800e49a:	897b      	ldrh	r3, [r7, #10]
 800e49c:	4619      	mov	r1, r3
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f000 f805 	bl	800e4ae <_ZN11CRTCalendar13isDateTimeSetEth>
 800e4a4:	4603      	mov	r3, r0
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3710      	adds	r7, #16
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}

0800e4ae <_ZN11CRTCalendar13isDateTimeSetEth>:

bool CRTCalendar::isDateTimeSet(uint16_t year, uint8_t month)
{
 800e4ae:	b480      	push	{r7}
 800e4b0:	b083      	sub	sp, #12
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
 800e4b6:	460b      	mov	r3, r1
 800e4b8:	807b      	strh	r3, [r7, #2]
 800e4ba:	4613      	mov	r3, r2
 800e4bc:	707b      	strb	r3, [r7, #1]
    return (year > INITIAL_YEAR || (year == INITIAL_YEAR && month > 1));
 800e4be:	887b      	ldrh	r3, [r7, #2]
 800e4c0:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800e4c4:	dc06      	bgt.n	800e4d4 <_ZN11CRTCalendar13isDateTimeSetEth+0x26>
 800e4c6:	887b      	ldrh	r3, [r7, #2]
 800e4c8:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800e4cc:	d104      	bne.n	800e4d8 <_ZN11CRTCalendar13isDateTimeSetEth+0x2a>
 800e4ce:	787b      	ldrb	r3, [r7, #1]
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	dd01      	ble.n	800e4d8 <_ZN11CRTCalendar13isDateTimeSetEth+0x2a>
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	e000      	b.n	800e4da <_ZN11CRTCalendar13isDateTimeSetEth+0x2c>
 800e4d8:	2300      	movs	r3, #0
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	370c      	adds	r7, #12
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bc80      	pop	{r7}
 800e4e2:	4770      	bx	lr

0800e4e4 <_ZN11CRTCalendarD1Ev>:
 *		- usunięcie metody getFullYear()
 *		- getYear() zwraca pełny rok
 *		- setDate() parametr "yr" oczekuje pełnego roku
 *
 */
class CRTCalendar: public IDateTime
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	4a05      	ldr	r2, [pc, #20]	; (800e504 <_ZN11CRTCalendarD1Ev+0x20>)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	601a      	str	r2, [r3, #0]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7ff fc4b 	bl	800dd90 <_ZN9IDateTimeD1Ev>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3708      	adds	r7, #8
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}
 800e504:	0801cb5c 	.word	0x0801cb5c

0800e508 <_ZN11CRTCalendarD0Ev>:
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f7ff ffe7 	bl	800e4e4 <_ZN11CRTCalendarD1Ev>
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f007 f860 	bl	80155dc <_ZdlPv>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	4618      	mov	r0, r3
 800e520:	3708      	adds	r7, #8
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
	...

0800e528 <_ZN10CST7565HAL7halInitEv>:

class CST7565HAL
{
    public:

        static inline void halInit()
 800e528:	b580      	push	{r7, lr}
 800e52a:	b08a      	sub	sp, #40	; 0x28
 800e52c:	af00      	add	r7, sp, #0
        {
        	__HAL_RCC_SPI1_CLK_ENABLE();
 800e52e:	4a51      	ldr	r2, [pc, #324]	; (800e674 <_ZN10CST7565HAL7halInitEv+0x14c>)
 800e530:	4b50      	ldr	r3, [pc, #320]	; (800e674 <_ZN10CST7565HAL7halInitEv+0x14c>)
 800e532:	699b      	ldr	r3, [r3, #24]
 800e534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e538:	6193      	str	r3, [r2, #24]
 800e53a:	4b4e      	ldr	r3, [pc, #312]	; (800e674 <_ZN10CST7565HAL7halInitEv+0x14c>)
 800e53c:	699b      	ldr	r3, [r3, #24]
 800e53e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e542:	60fb      	str	r3, [r7, #12]
 800e544:	68fb      	ldr	r3, [r7, #12]
            GPIO_InitTypeDef GPIO_InitStruct;

            __GPIOB_CLK_ENABLE();
 800e546:	4a4b      	ldr	r2, [pc, #300]	; (800e674 <_ZN10CST7565HAL7halInitEv+0x14c>)
 800e548:	4b4a      	ldr	r3, [pc, #296]	; (800e674 <_ZN10CST7565HAL7halInitEv+0x14c>)
 800e54a:	699b      	ldr	r3, [r3, #24]
 800e54c:	f043 0308 	orr.w	r3, r3, #8
 800e550:	6193      	str	r3, [r2, #24]
 800e552:	4b48      	ldr	r3, [pc, #288]	; (800e674 <_ZN10CST7565HAL7halInitEv+0x14c>)
 800e554:	699b      	ldr	r3, [r3, #24]
 800e556:	f003 0308 	and.w	r3, r3, #8
 800e55a:	60bb      	str	r3, [r7, #8]
 800e55c:	68bb      	ldr	r3, [r7, #8]
            __GPIOC_CLK_ENABLE();
 800e55e:	4a45      	ldr	r2, [pc, #276]	; (800e674 <_ZN10CST7565HAL7halInitEv+0x14c>)
 800e560:	4b44      	ldr	r3, [pc, #272]	; (800e674 <_ZN10CST7565HAL7halInitEv+0x14c>)
 800e562:	699b      	ldr	r3, [r3, #24]
 800e564:	f043 0310 	orr.w	r3, r3, #16
 800e568:	6193      	str	r3, [r2, #24]
 800e56a:	4b42      	ldr	r3, [pc, #264]	; (800e674 <_ZN10CST7565HAL7halInitEv+0x14c>)
 800e56c:	699b      	ldr	r3, [r3, #24]
 800e56e:	f003 0310 	and.w	r3, r3, #16
 800e572:	607b      	str	r3, [r7, #4]
 800e574:	687b      	ldr	r3, [r7, #4]

            /*Configure GPIO pins : PB12 PB5 */
            GPIO_InitStruct.Pin = ST7565_BIT_CS;
 800e576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e57a:	617b      	str	r3, [r7, #20]
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e57c:	2301      	movs	r3, #1
 800e57e:	61bb      	str	r3, [r7, #24]
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e580:	2300      	movs	r3, #0
 800e582:	61fb      	str	r3, [r7, #28]
            GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800e584:	2302      	movs	r3, #2
 800e586:	623b      	str	r3, [r7, #32]
            HAL_GPIO_Init(ST7565_PORT_CS, &GPIO_InitStruct);
 800e588:	f107 0314 	add.w	r3, r7, #20
 800e58c:	4619      	mov	r1, r3
 800e58e:	483a      	ldr	r0, [pc, #232]	; (800e678 <_ZN10CST7565HAL7halInitEv+0x150>)
 800e590:	f7fa f962 	bl	8008858 <HAL_GPIO_Init>

            GPIO_InitStruct.Pin = ST7565_BIT_RST;
 800e594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e598:	617b      	str	r3, [r7, #20]
            HAL_GPIO_Init(ST7565_PORT_RST, &GPIO_InitStruct);
 800e59a:	f107 0314 	add.w	r3, r7, #20
 800e59e:	4619      	mov	r1, r3
 800e5a0:	4835      	ldr	r0, [pc, #212]	; (800e678 <_ZN10CST7565HAL7halInitEv+0x150>)
 800e5a2:	f7fa f959 	bl	8008858 <HAL_GPIO_Init>

            /*Configure GPIO pin : PD7 */
            GPIO_InitStruct.Pin = ST7565_BIT_A0;
 800e5a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5aa:	617b      	str	r3, [r7, #20]
            HAL_GPIO_Init(ST7565_PORT_A0, &GPIO_InitStruct);
 800e5ac:	f107 0314 	add.w	r3, r7, #20
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	4831      	ldr	r0, [pc, #196]	; (800e678 <_ZN10CST7565HAL7halInitEv+0x150>)
 800e5b4:	f7fa f950 	bl	8008858 <HAL_GPIO_Init>

            GPIO_InitStruct.Pin = ST7565_BIT_SCK;
 800e5b8:	2308      	movs	r3, #8
 800e5ba:	617b      	str	r3, [r7, #20]
            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5bc:	2302      	movs	r3, #2
 800e5be:	61bb      	str	r3, [r7, #24]
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	61fb      	str	r3, [r7, #28]
            GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800e5c4:	2302      	movs	r3, #2
 800e5c6:	623b      	str	r3, [r7, #32]
            HAL_GPIO_Init(ST7565_PORT_SCK, &GPIO_InitStruct);
 800e5c8:	f107 0314 	add.w	r3, r7, #20
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	482b      	ldr	r0, [pc, #172]	; (800e67c <_ZN10CST7565HAL7halInitEv+0x154>)
 800e5d0:	f7fa f942 	bl	8008858 <HAL_GPIO_Init>

            GPIO_InitStruct.Pin = ST7565_BIT_MOSI;
 800e5d4:	2320      	movs	r3, #32
 800e5d6:	617b      	str	r3, [r7, #20]
            HAL_GPIO_Init(ST7565_PORT_MOSI, &GPIO_InitStruct);
 800e5d8:	f107 0314 	add.w	r3, r7, #20
 800e5dc:	4619      	mov	r1, r3
 800e5de:	4827      	ldr	r0, [pc, #156]	; (800e67c <_ZN10CST7565HAL7halInitEv+0x154>)
 800e5e0:	f7fa f93a 	bl	8008858 <HAL_GPIO_Init>

            m_hspi.Instance = ST7565_SPI;
 800e5e4:	4b26      	ldr	r3, [pc, #152]	; (800e680 <_ZN10CST7565HAL7halInitEv+0x158>)
 800e5e6:	4a27      	ldr	r2, [pc, #156]	; (800e684 <_ZN10CST7565HAL7halInitEv+0x15c>)
 800e5e8:	601a      	str	r2, [r3, #0]
            m_hspi.Init.Mode = SPI_MODE_MASTER;
 800e5ea:	4b25      	ldr	r3, [pc, #148]	; (800e680 <_ZN10CST7565HAL7halInitEv+0x158>)
 800e5ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 800e5f0:	605a      	str	r2, [r3, #4]
            m_hspi.Init.Direction = SPI_DIRECTION_1LINE;
 800e5f2:	4b23      	ldr	r3, [pc, #140]	; (800e680 <_ZN10CST7565HAL7halInitEv+0x158>)
 800e5f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e5f8:	609a      	str	r2, [r3, #8]
            m_hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 800e5fa:	4b21      	ldr	r3, [pc, #132]	; (800e680 <_ZN10CST7565HAL7halInitEv+0x158>)
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	60da      	str	r2, [r3, #12]
            m_hspi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800e600:	4b1f      	ldr	r3, [pc, #124]	; (800e680 <_ZN10CST7565HAL7halInitEv+0x158>)
 800e602:	2202      	movs	r2, #2
 800e604:	611a      	str	r2, [r3, #16]
            m_hspi.Init.CLKPhase = SPI_PHASE_2EDGE;
 800e606:	4b1e      	ldr	r3, [pc, #120]	; (800e680 <_ZN10CST7565HAL7halInitEv+0x158>)
 800e608:	2201      	movs	r2, #1
 800e60a:	615a      	str	r2, [r3, #20]
            m_hspi.Init.NSS = SPI_NSS_SOFT;
 800e60c:	4b1c      	ldr	r3, [pc, #112]	; (800e680 <_ZN10CST7565HAL7halInitEv+0x158>)
 800e60e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e612:	619a      	str	r2, [r3, #24]
            m_hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800e614:	4b1a      	ldr	r3, [pc, #104]	; (800e680 <_ZN10CST7565HAL7halInitEv+0x158>)
 800e616:	2218      	movs	r2, #24
 800e618:	61da      	str	r2, [r3, #28]
            m_hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e61a:	4b19      	ldr	r3, [pc, #100]	; (800e680 <_ZN10CST7565HAL7halInitEv+0x158>)
 800e61c:	2200      	movs	r2, #0
 800e61e:	621a      	str	r2, [r3, #32]
            m_hspi.Init.TIMode = SPI_TIMODE_DISABLED;
 800e620:	4b17      	ldr	r3, [pc, #92]	; (800e680 <_ZN10CST7565HAL7halInitEv+0x158>)
 800e622:	2200      	movs	r2, #0
 800e624:	625a      	str	r2, [r3, #36]	; 0x24
            m_hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800e626:	4b16      	ldr	r3, [pc, #88]	; (800e680 <_ZN10CST7565HAL7halInitEv+0x158>)
 800e628:	2200      	movs	r2, #0
 800e62a:	629a      	str	r2, [r3, #40]	; 0x28
            m_hspi.Init.CRCPolynomial = SPI_CRCPR_CRCPOLY;              // potrzebne przy full assert
 800e62c:	4b14      	ldr	r3, [pc, #80]	; (800e680 <_ZN10CST7565HAL7halInitEv+0x158>)
 800e62e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e632:	62da      	str	r2, [r3, #44]	; 0x2c
            HAL_SPI_Init(&m_hspi);
 800e634:	4812      	ldr	r0, [pc, #72]	; (800e680 <_ZN10CST7565HAL7halInitEv+0x158>)
 800e636:	f7fb fc91 	bl	8009f5c <HAL_SPI_Init>
            __HAL_AFIO_REMAP_SPI1_ENABLE();
 800e63a:	4b13      	ldr	r3, [pc, #76]	; (800e688 <_ZN10CST7565HAL7halInitEv+0x160>)
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	627b      	str	r3, [r7, #36]	; 0x24
 800e640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e642:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800e646:	627b      	str	r3, [r7, #36]	; 0x24
 800e648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64a:	f043 0301 	orr.w	r3, r3, #1
 800e64e:	627b      	str	r3, [r7, #36]	; 0x24
 800e650:	4a0d      	ldr	r2, [pc, #52]	; (800e688 <_ZN10CST7565HAL7halInitEv+0x160>)
 800e652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e654:	6053      	str	r3, [r2, #4]
            uint8_t data = 0;
 800e656:	2300      	movs	r3, #0
 800e658:	74fb      	strb	r3, [r7, #19]
            halDeselectChip();
 800e65a:	f000 f823 	bl	800e6a4 <_ZN10CST7565HAL15halDeselectChipEv>
            halSendBytes(&data, sizeof(data)); // wysłanie głupiego bajtu - pierwszy wysłany bajt jakoś przepada dziwnym sposobem
 800e65e:	f107 0313 	add.w	r3, r7, #19
 800e662:	2101      	movs	r1, #1
 800e664:	4618      	mov	r0, r3
 800e666:	f000 f885 	bl	800e774 <_ZN10CST7565HAL12halSendBytesEPvt>
        }
 800e66a:	bf00      	nop
 800e66c:	3728      	adds	r7, #40	; 0x28
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	40021000 	.word	0x40021000
 800e678:	40011000 	.word	0x40011000
 800e67c:	40010c00 	.word	0x40010c00
 800e680:	20000df4 	.word	0x20000df4
 800e684:	40013000 	.word	0x40013000
 800e688:	40010000 	.word	0x40010000

0800e68c <_ZN10CST7565HAL13halSelectChipEv>:

        static inline void halSelectChip()
 800e68c:	b580      	push	{r7, lr}
 800e68e:	af00      	add	r7, sp, #0
        {
            HAL_GPIO_WritePin(ST7565_PORT_CS, ST7565_BIT_CS, GPIO_PIN_RESET);
 800e690:	2200      	movs	r2, #0
 800e692:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e696:	4802      	ldr	r0, [pc, #8]	; (800e6a0 <_ZN10CST7565HAL13halSelectChipEv+0x14>)
 800e698:	f7fa f9c6 	bl	8008a28 <HAL_GPIO_WritePin>
        }
 800e69c:	bf00      	nop
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	40011000 	.word	0x40011000

0800e6a4 <_ZN10CST7565HAL15halDeselectChipEv>:

        static inline void halDeselectChip()
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	af00      	add	r7, sp, #0
        {
            HAL_GPIO_WritePin(ST7565_PORT_CS, ST7565_BIT_CS, GPIO_PIN_SET);
 800e6a8:	2201      	movs	r2, #1
 800e6aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e6ae:	4802      	ldr	r0, [pc, #8]	; (800e6b8 <_ZN10CST7565HAL15halDeselectChipEv+0x14>)
 800e6b0:	f7fa f9ba 	bl	8008a28 <HAL_GPIO_WritePin>
        }
 800e6b4:	bf00      	nop
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	40011000 	.word	0x40011000

0800e6bc <_ZN10CST7565HAL13halStartResetEv>:

        static inline void halStartReset()
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	af00      	add	r7, sp, #0
        {
            HAL_GPIO_WritePin(ST7565_PORT_RST, ST7565_BIT_RST, GPIO_PIN_RESET);
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e6c6:	4802      	ldr	r0, [pc, #8]	; (800e6d0 <_ZN10CST7565HAL13halStartResetEv+0x14>)
 800e6c8:	f7fa f9ae 	bl	8008a28 <HAL_GPIO_WritePin>
        }
 800e6cc:	bf00      	nop
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	40011000 	.word	0x40011000

0800e6d4 <_ZN10CST7565HAL12halStopResetEv>:

        static inline void halStopReset()
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	af00      	add	r7, sp, #0
        {
            HAL_GPIO_WritePin(ST7565_PORT_RST, ST7565_BIT_RST, GPIO_PIN_SET);
 800e6d8:	2201      	movs	r2, #1
 800e6da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e6de:	4802      	ldr	r0, [pc, #8]	; (800e6e8 <_ZN10CST7565HAL12halStopResetEv+0x14>)
 800e6e0:	f7fa f9a2 	bl	8008a28 <HAL_GPIO_WritePin>
        }
 800e6e4:	bf00      	nop
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	40011000 	.word	0x40011000

0800e6ec <_ZN10CST7565HAL22halStartSendingCommandEv>:

        static inline bool halStartSendingCommand()
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
        {
            bool changeWasRequired = false;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	71fb      	strb	r3, [r7, #7]
            if (HAL_GPIO_ReadPin(ST7565_PORT_A0, ST7565_BIT_A0) == GPIO_PIN_SET)
 800e6f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e6fa:	480c      	ldr	r0, [pc, #48]	; (800e72c <_ZN10CST7565HAL22halStartSendingCommandEv+0x40>)
 800e6fc:	f7fa f98e 	bl	8008a1c <HAL_GPIO_ReadPin>
 800e700:	4603      	mov	r3, r0
 800e702:	2b01      	cmp	r3, #1
 800e704:	bf0c      	ite	eq
 800e706:	2301      	moveq	r3, #1
 800e708:	2300      	movne	r3, #0
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d007      	beq.n	800e720 <_ZN10CST7565HAL22halStartSendingCommandEv+0x34>
            {
                HAL_GPIO_WritePin(ST7565_PORT_A0, ST7565_BIT_A0, GPIO_PIN_RESET);
 800e710:	2200      	movs	r2, #0
 800e712:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e716:	4805      	ldr	r0, [pc, #20]	; (800e72c <_ZN10CST7565HAL22halStartSendingCommandEv+0x40>)
 800e718:	f7fa f986 	bl	8008a28 <HAL_GPIO_WritePin>
                changeWasRequired = true;
 800e71c:	2301      	movs	r3, #1
 800e71e:	71fb      	strb	r3, [r7, #7]
            }
            return changeWasRequired;
 800e720:	79fb      	ldrb	r3, [r7, #7]
        }
 800e722:	4618      	mov	r0, r3
 800e724:	3708      	adds	r7, #8
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	40011000 	.word	0x40011000

0800e730 <_ZN10CST7565HAL19halStartSendingDataEv>:

        static inline bool halStartSendingData()
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
        {
            bool changeWasRequired = false;
 800e736:	2300      	movs	r3, #0
 800e738:	71fb      	strb	r3, [r7, #7]
            if (HAL_GPIO_ReadPin(ST7565_PORT_A0, ST7565_BIT_A0) == GPIO_PIN_RESET)
 800e73a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e73e:	480c      	ldr	r0, [pc, #48]	; (800e770 <_ZN10CST7565HAL19halStartSendingDataEv+0x40>)
 800e740:	f7fa f96c 	bl	8008a1c <HAL_GPIO_ReadPin>
 800e744:	4603      	mov	r3, r0
 800e746:	2b00      	cmp	r3, #0
 800e748:	bf0c      	ite	eq
 800e74a:	2301      	moveq	r3, #1
 800e74c:	2300      	movne	r3, #0
 800e74e:	b2db      	uxtb	r3, r3
 800e750:	2b00      	cmp	r3, #0
 800e752:	d007      	beq.n	800e764 <_ZN10CST7565HAL19halStartSendingDataEv+0x34>
            {
                HAL_GPIO_WritePin(ST7565_PORT_A0, ST7565_BIT_A0, GPIO_PIN_SET);
 800e754:	2201      	movs	r2, #1
 800e756:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e75a:	4805      	ldr	r0, [pc, #20]	; (800e770 <_ZN10CST7565HAL19halStartSendingDataEv+0x40>)
 800e75c:	f7fa f964 	bl	8008a28 <HAL_GPIO_WritePin>
                changeWasRequired = true;
 800e760:	2301      	movs	r3, #1
 800e762:	71fb      	strb	r3, [r7, #7]
            }
            return changeWasRequired;
 800e764:	79fb      	ldrb	r3, [r7, #7]
        }
 800e766:	4618      	mov	r0, r3
 800e768:	3708      	adds	r7, #8
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	40011000 	.word	0x40011000

0800e774 <_ZN10CST7565HAL12halSendBytesEPvt>:

        static inline bool halSendBytes(void* bytes, uint16_t size)
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	460b      	mov	r3, r1
 800e77e:	807b      	strh	r3, [r7, #2]
        {
            return (HAL_SPI_Transmit(&m_hspi, (uint8_t*) bytes, size, 50) == HAL_OK);
 800e780:	887a      	ldrh	r2, [r7, #2]
 800e782:	2332      	movs	r3, #50	; 0x32
 800e784:	6879      	ldr	r1, [r7, #4]
 800e786:	4806      	ldr	r0, [pc, #24]	; (800e7a0 <_ZN10CST7565HAL12halSendBytesEPvt+0x2c>)
 800e788:	f7fb fc3a 	bl	800a000 <HAL_SPI_Transmit>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	bf0c      	ite	eq
 800e792:	2301      	moveq	r3, #1
 800e794:	2300      	movne	r3, #0
 800e796:	b2db      	uxtb	r3, r3
        }
 800e798:	4618      	mov	r0, r3
 800e79a:	3708      	adds	r7, #8
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	20000df4 	.word	0x20000df4

0800e7a4 <_ZN13CST7565Driver4initEP15IDelayFunctionsb>:
int16_t CST7565Driver::m_iSuspendedAreaY1 = -1;
int16_t CST7565Driver::m_iSuspendedAreaX2 = -1;
int16_t CST7565Driver::m_iSuspendedAreaY2 = -1;

void CST7565Driver::init(IDelayFunctions* delays, bool displayRotated)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	70fb      	strb	r3, [r7, #3]
    m_delay = delays;
 800e7b0:	4a07      	ldr	r2, [pc, #28]	; (800e7d0 <_ZN13CST7565Driver4initEP15IDelayFunctionsb+0x2c>)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6013      	str	r3, [r2, #0]

    m_displayRotated = displayRotated;
 800e7b6:	4a07      	ldr	r2, [pc, #28]	; (800e7d4 <_ZN13CST7565Driver4initEP15IDelayFunctionsb+0x30>)
 800e7b8:	78fb      	ldrb	r3, [r7, #3]
 800e7ba:	7013      	strb	r3, [r2, #0]

    halInit();
 800e7bc:	f7ff feb4 	bl	800e528 <_ZN10CST7565HAL7halInitEv>
    reinitInternal(true);
 800e7c0:	2001      	movs	r0, #1
 800e7c2:	f000 f809 	bl	800e7d8 <_ZN13CST7565Driver14reinitInternalEb>
}
 800e7c6:	bf00      	nop
 800e7c8:	3708      	adds	r7, #8
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	200009ec 	.word	0x200009ec
 800e7d4:	20000df1 	.word	0x20000df1

0800e7d8 <_ZN13CST7565Driver14reinitInternalEb>:
{
    reinitInternal(false);
}

void CST7565Driver::reinitInternal(bool initial)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b086      	sub	sp, #24
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	4603      	mov	r3, r0
 800e7e0:	71fb      	strb	r3, [r7, #7]
    halSelectChip();
 800e7e2:	f7ff ff53 	bl	800e68c <_ZN10CST7565HAL13halSelectChipEv>
    halStartReset();
 800e7e6:	f7ff ff69 	bl	800e6bc <_ZN10CST7565HAL13halStartResetEv>
    m_delay->delayms(initial ? 10 : 1);
 800e7ea:	4b3f      	ldr	r3, [pc, #252]	; (800e8e8 <_ZN13CST7565Driver14reinitInternalEb+0x110>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	3308      	adds	r3, #8
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4a3c      	ldr	r2, [pc, #240]	; (800e8e8 <_ZN13CST7565Driver14reinitInternalEb+0x110>)
 800e7f6:	6810      	ldr	r0, [r2, #0]
 800e7f8:	79fa      	ldrb	r2, [r7, #7]
 800e7fa:	2a00      	cmp	r2, #0
 800e7fc:	d001      	beq.n	800e802 <_ZN13CST7565Driver14reinitInternalEb+0x2a>
 800e7fe:	220a      	movs	r2, #10
 800e800:	e000      	b.n	800e804 <_ZN13CST7565Driver14reinitInternalEb+0x2c>
 800e802:	2201      	movs	r2, #1
 800e804:	4611      	mov	r1, r2
 800e806:	4798      	blx	r3
    halStopReset();
 800e808:	f7ff ff64 	bl	800e6d4 <_ZN10CST7565HAL12halStopResetEv>

    m_delay->delayms(initial ? 10 : 1);
 800e80c:	4b36      	ldr	r3, [pc, #216]	; (800e8e8 <_ZN13CST7565Driver14reinitInternalEb+0x110>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	3308      	adds	r3, #8
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	4a34      	ldr	r2, [pc, #208]	; (800e8e8 <_ZN13CST7565Driver14reinitInternalEb+0x110>)
 800e818:	6810      	ldr	r0, [r2, #0]
 800e81a:	79fa      	ldrb	r2, [r7, #7]
 800e81c:	2a00      	cmp	r2, #0
 800e81e:	d001      	beq.n	800e824 <_ZN13CST7565Driver14reinitInternalEb+0x4c>
 800e820:	220a      	movs	r2, #10
 800e822:	e000      	b.n	800e826 <_ZN13CST7565Driver14reinitInternalEb+0x4e>
 800e824:	2201      	movs	r2, #1
 800e826:	4611      	mov	r1, r2
 800e828:	4798      	blx	r3
        cmd_set_bias_9,
		cmd_set_adc_reverse,
		cmd_set_com_normal,
        cmd_set_disp_start_line,
        cmd_set_power_control | 0x4,
    };
 800e82a:	4a30      	ldr	r2, [pc, #192]	; (800e8ec <_ZN13CST7565Driver14reinitInternalEb+0x114>)
 800e82c:	f107 0310 	add.w	r3, r7, #16
 800e830:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e834:	6018      	str	r0, [r3, #0]
 800e836:	3304      	adds	r3, #4
 800e838:	7019      	strb	r1, [r3, #0]

    if(m_displayRotated)
 800e83a:	4b2d      	ldr	r3, [pc, #180]	; (800e8f0 <_ZN13CST7565Driver14reinitInternalEb+0x118>)
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d003      	beq.n	800e84a <_ZN13CST7565Driver14reinitInternalEb+0x72>
    {
    	rozkazy[1] = cmd_set_adc_normal;
 800e842:	23a0      	movs	r3, #160	; 0xa0
 800e844:	747b      	strb	r3, [r7, #17]
    	rozkazy[2] = cmd_set_com_reverse;
 800e846:	23c8      	movs	r3, #200	; 0xc8
 800e848:	74bb      	strb	r3, [r7, #18]
    }

    sendCommands(rozkazy, sizeof(rozkazy));
 800e84a:	f107 0310 	add.w	r3, r7, #16
 800e84e:	2105      	movs	r1, #5
 800e850:	4618      	mov	r0, r3
 800e852:	f000 fe1d 	bl	800f490 <_ZN13CST7565Driver12sendCommandsEPht>

    if (initial)
 800e856:	79fb      	ldrb	r3, [r7, #7]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d009      	beq.n	800e870 <_ZN13CST7565Driver14reinitInternalEb+0x98>
    {
        m_delay->delayms(50);
 800e85c:	4b22      	ldr	r3, [pc, #136]	; (800e8e8 <_ZN13CST7565Driver14reinitInternalEb+0x110>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	3308      	adds	r3, #8
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4a20      	ldr	r2, [pc, #128]	; (800e8e8 <_ZN13CST7565Driver14reinitInternalEb+0x110>)
 800e868:	6812      	ldr	r2, [r2, #0]
 800e86a:	2132      	movs	r1, #50	; 0x32
 800e86c:	4610      	mov	r0, r2
 800e86e:	4798      	blx	r3
    }

    sendCommand(cmd_set_power_control | 0x6);
 800e870:	202e      	movs	r0, #46	; 0x2e
 800e872:	f000 fdf9 	bl	800f468 <_ZN13CST7565Driver11sendCommandEh>

    if (initial)
 800e876:	79fb      	ldrb	r3, [r7, #7]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d009      	beq.n	800e890 <_ZN13CST7565Driver14reinitInternalEb+0xb8>
    {
        m_delay->delayms(50);
 800e87c:	4b1a      	ldr	r3, [pc, #104]	; (800e8e8 <_ZN13CST7565Driver14reinitInternalEb+0x110>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	3308      	adds	r3, #8
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4a18      	ldr	r2, [pc, #96]	; (800e8e8 <_ZN13CST7565Driver14reinitInternalEb+0x110>)
 800e888:	6812      	ldr	r2, [r2, #0]
 800e88a:	2132      	movs	r1, #50	; 0x32
 800e88c:	4610      	mov	r0, r2
 800e88e:	4798      	blx	r3
    }

    sendCommand(cmd_set_power_control | 0x7);
 800e890:	202f      	movs	r0, #47	; 0x2f
 800e892:	f000 fde9 	bl	800f468 <_ZN13CST7565Driver11sendCommandEh>

    if (initial)
 800e896:	79fb      	ldrb	r3, [r7, #7]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d009      	beq.n	800e8b0 <_ZN13CST7565Driver14reinitInternalEb+0xd8>
    {
        m_delay->delayms(10);
 800e89c:	4b12      	ldr	r3, [pc, #72]	; (800e8e8 <_ZN13CST7565Driver14reinitInternalEb+0x110>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	4a10      	ldr	r2, [pc, #64]	; (800e8e8 <_ZN13CST7565Driver14reinitInternalEb+0x110>)
 800e8a8:	6812      	ldr	r2, [r2, #0]
 800e8aa:	210a      	movs	r1, #10
 800e8ac:	4610      	mov	r0, r2
 800e8ae:	4798      	blx	r3

    uint8_t rozkazy2[] = {
        cmd_set_resistor_ratio | 0x5,
        cmd_display_on,
        cmd_set_allpts_normal,
    };
 800e8b0:	4a10      	ldr	r2, [pc, #64]	; (800e8f4 <_ZN13CST7565Driver14reinitInternalEb+0x11c>)
 800e8b2:	f107 030c 	add.w	r3, r7, #12
 800e8b6:	6812      	ldr	r2, [r2, #0]
 800e8b8:	4611      	mov	r1, r2
 800e8ba:	8019      	strh	r1, [r3, #0]
 800e8bc:	3302      	adds	r3, #2
 800e8be:	0c12      	lsrs	r2, r2, #16
 800e8c0:	701a      	strb	r2, [r3, #0]
    sendCommands(rozkazy2, sizeof(rozkazy2));
 800e8c2:	f107 030c 	add.w	r3, r7, #12
 800e8c6:	2103      	movs	r1, #3
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f000 fde1 	bl	800f490 <_ZN13CST7565Driver12sendCommandsEPht>


    ustawKontrast(m_contrast);
 800e8ce:	4b0a      	ldr	r3, [pc, #40]	; (800e8f8 <_ZN13CST7565Driver14reinitInternalEb+0x120>)
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f000 f812 	bl	800e8fc <_ZN13CST7565Driver13ustawKontrastEh>
    sendCommand(cmd_rmw);
 800e8d8:	20e0      	movs	r0, #224	; 0xe0
 800e8da:	f000 fdc5 	bl	800f468 <_ZN13CST7565Driver11sendCommandEh>
}
 800e8de:	bf00      	nop
 800e8e0:	3718      	adds	r7, #24
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	200009ec 	.word	0x200009ec
 800e8ec:	0801c274 	.word	0x0801c274
 800e8f0:	20000df1 	.word	0x20000df1
 800e8f4:	0801c27c 	.word	0x0801c27c
 800e8f8:	2000000d 	.word	0x2000000d

0800e8fc <_ZN13CST7565Driver13ustawKontrastEh>:

void CST7565Driver::ustawKontrast(uint8_t value)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	4603      	mov	r3, r0
 800e904:	71fb      	strb	r3, [r7, #7]
    m_contrast = value;
 800e906:	4a0b      	ldr	r2, [pc, #44]	; (800e934 <_ZN13CST7565Driver13ustawKontrastEh+0x38>)
 800e908:	79fb      	ldrb	r3, [r7, #7]
 800e90a:	7013      	strb	r3, [r2, #0]
    uint8_t rozkazy[] = {
        cmd_set_volume_first,
        (uint8_t) (cmd_set_volume_second | (value & 0x3f)),
    };
 800e90c:	2300      	movs	r3, #0
 800e90e:	81bb      	strh	r3, [r7, #12]
 800e910:	2381      	movs	r3, #129	; 0x81
 800e912:	733b      	strb	r3, [r7, #12]
        (uint8_t) (cmd_set_volume_second | (value & 0x3f)),
 800e914:	79fb      	ldrb	r3, [r7, #7]
 800e916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e91a:	b2db      	uxtb	r3, r3
    };
 800e91c:	737b      	strb	r3, [r7, #13]

    sendCommands(rozkazy, sizeof(rozkazy));
 800e91e:	f107 030c 	add.w	r3, r7, #12
 800e922:	2102      	movs	r1, #2
 800e924:	4618      	mov	r0, r3
 800e926:	f000 fdb3 	bl	800f490 <_ZN13CST7565Driver12sendCommandsEPht>
}
 800e92a:	bf00      	nop
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	2000000d 	.word	0x2000000d

0800e938 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE>:

void CST7565Driver::fill(int16_t imgX1, int16_t imgY1, int16_t imgX2, int16_t imgY2, TFillOperation fillOperation)
{
 800e938:	b590      	push	{r4, r7, lr}
 800e93a:	b087      	sub	sp, #28
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	4604      	mov	r4, r0
 800e940:	4608      	mov	r0, r1
 800e942:	4611      	mov	r1, r2
 800e944:	461a      	mov	r2, r3
 800e946:	4623      	mov	r3, r4
 800e948:	80fb      	strh	r3, [r7, #6]
 800e94a:	4603      	mov	r3, r0
 800e94c:	80bb      	strh	r3, [r7, #4]
 800e94e:	460b      	mov	r3, r1
 800e950:	807b      	strh	r3, [r7, #2]
 800e952:	4613      	mov	r3, r2
 800e954:	803b      	strh	r3, [r7, #0]
    if (imgX2 >= LCD_WIDTH)
 800e956:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e95a:	2b7f      	cmp	r3, #127	; 0x7f
 800e95c:	dd01      	ble.n	800e962 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x2a>
    {
        imgX2 = LCD_WIDTH - 1;
 800e95e:	237f      	movs	r3, #127	; 0x7f
 800e960:	807b      	strh	r3, [r7, #2]
    }

    if (imgY2 >= LCD_HEIGHT)
 800e962:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e966:	2b3f      	cmp	r3, #63	; 0x3f
 800e968:	dd01      	ble.n	800e96e <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x36>
    {
        imgY2 = LCD_HEIGHT - 1;
 800e96a:	233f      	movs	r3, #63	; 0x3f
 800e96c:	803b      	strh	r3, [r7, #0]
    }

    if (imgX1 > imgX2 || imgY1 > imgY2)
 800e96e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e972:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e976:	429a      	cmp	r2, r3
 800e978:	f300 8167 	bgt.w	800ec4a <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x312>
 800e97c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e980:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e984:	429a      	cmp	r2, r3
 800e986:	f300 8160 	bgt.w	800ec4a <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x312>
    {
        return;
    }

    uint8_t yb1 = imgY1 / 8;
 800e98a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	da00      	bge.n	800e994 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x5c>
 800e992:	3307      	adds	r3, #7
 800e994:	10db      	asrs	r3, r3, #3
 800e996:	b21b      	sxth	r3, r3
 800e998:	743b      	strb	r3, [r7, #16]
    uint8_t yb2 = imgY2 / 8;
 800e99a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	da00      	bge.n	800e9a4 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x6c>
 800e9a2:	3307      	adds	r3, #7
 800e9a4:	10db      	asrs	r3, r3, #3
 800e9a6:	b21b      	sxth	r3, r3
 800e9a8:	73fb      	strb	r3, [r7, #15]
    uint8_t *adr_byte_bufora;
///----------------------------------------------------------

    /* Check the parameters */
    //assert_param((x1 >=0) && (x2 < LCD_SZEROKOSC) && (y1 >=0) && (y2 < LCD_WYSOKOSC) );
    if (imgX1 >= LCD_WIDTH)
 800e9aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e9ae:	2b7f      	cmp	r3, #127	; 0x7f
 800e9b0:	dd01      	ble.n	800e9b6 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x7e>
    {
        imgX1 = LCD_WIDTH - 1;
 800e9b2:	237f      	movs	r3, #127	; 0x7f
 800e9b4:	80fb      	strh	r3, [r7, #6]
    }

    if (imgX2 >= LCD_WIDTH)
 800e9b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e9ba:	2b7f      	cmp	r3, #127	; 0x7f
 800e9bc:	dd01      	ble.n	800e9c2 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x8a>
    {
        imgX2 = LCD_WIDTH - 1;
 800e9be:	237f      	movs	r3, #127	; 0x7f
 800e9c0:	807b      	strh	r3, [r7, #2]
    }

    if (imgX1 > imgX2)
 800e9c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e9c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	dd01      	ble.n	800e9d2 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x9a>
    {
        imgX1 = imgX2;
 800e9ce:	887b      	ldrh	r3, [r7, #2]
 800e9d0:	80fb      	strh	r3, [r7, #6]
    }

    if (imgY1 >= LCD_HEIGHT)
 800e9d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e9d6:	2b3f      	cmp	r3, #63	; 0x3f
 800e9d8:	dd01      	ble.n	800e9de <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0xa6>
    {
        imgY1 = LCD_HEIGHT - 1;
 800e9da:	233f      	movs	r3, #63	; 0x3f
 800e9dc:	80bb      	strh	r3, [r7, #4]
    }

    if (imgY2 >= LCD_HEIGHT)
 800e9de:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e9e2:	2b3f      	cmp	r3, #63	; 0x3f
 800e9e4:	dd01      	ble.n	800e9ea <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0xb2>
    {
        imgY2 = LCD_HEIGHT - 1;
 800e9e6:	233f      	movs	r3, #63	; 0x3f
 800e9e8:	803b      	strh	r3, [r7, #0]
    }

    if (imgY1 > imgY2)
 800e9ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e9ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	dd01      	ble.n	800e9fa <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0xc2>
    {
        imgY1 = imgY2;
 800e9f6:	883b      	ldrh	r3, [r7, #0]
 800e9f8:	80bb      	strh	r3, [r7, #4]
    }

    if (m_iSuspendLayout > 0)
 800e9fa:	4b96      	ldr	r3, [pc, #600]	; (800ec54 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x31c>)
 800e9fc:	f993 3000 	ldrsb.w	r3, [r3]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	dd09      	ble.n	800ea18 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0xe0>
    {
        setSuspendedArea(imgX1, imgY1, imgX2, imgY2);
 800ea04:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ea08:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ea0c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800ea10:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800ea14:	f000 fbda 	bl	800f1cc <_ZN13CST7565Driver16setSuspendedAreaEssss>
    }

    for (uint8_t y = yb1; y <= yb2; y++)
 800ea18:	7c3b      	ldrb	r3, [r7, #16]
 800ea1a:	757b      	strb	r3, [r7, #21]
 800ea1c:	7d7a      	ldrb	r2, [r7, #21]
 800ea1e:	7bfb      	ldrb	r3, [r7, #15]
 800ea20:	429a      	cmp	r2, r3
 800ea22:	f300 8113 	bgt.w	800ec4c <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x314>
    {
        modyfikacja1 = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	75fb      	strb	r3, [r7, #23]
        modyfikacja2 = 0;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	75bb      	strb	r3, [r7, #22]

        if (yb1 == yb2)
 800ea2e:	7c3a      	ldrb	r2, [r7, #16]
 800ea30:	7bfb      	ldrb	r3, [r7, #15]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d126      	bne.n	800ea84 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x14c>
        {
            for (uint8_t i = imgY1 % 8; i <= imgY2 % 8; i++)
 800ea36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ea3a:	425a      	negs	r2, r3
 800ea3c:	f003 0307 	and.w	r3, r3, #7
 800ea40:	f002 0207 	and.w	r2, r2, #7
 800ea44:	bf58      	it	pl
 800ea46:	4253      	negpl	r3, r2
 800ea48:	b21b      	sxth	r3, r3
 800ea4a:	753b      	strb	r3, [r7, #20]
 800ea4c:	7d3a      	ldrb	r2, [r7, #20]
 800ea4e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ea52:	4259      	negs	r1, r3
 800ea54:	f003 0307 	and.w	r3, r3, #7
 800ea58:	f001 0107 	and.w	r1, r1, #7
 800ea5c:	bf58      	it	pl
 800ea5e:	424b      	negpl	r3, r1
 800ea60:	b21b      	sxth	r3, r3
 800ea62:	429a      	cmp	r2, r3
 800ea64:	dc0b      	bgt.n	800ea7e <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x146>
            {
                modyfikacja1 += (1 << i);
 800ea66:	7d3b      	ldrb	r3, [r7, #20]
 800ea68:	2201      	movs	r2, #1
 800ea6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ea6e:	b2da      	uxtb	r2, r3
 800ea70:	7dfb      	ldrb	r3, [r7, #23]
 800ea72:	4413      	add	r3, r2
 800ea74:	75fb      	strb	r3, [r7, #23]
            for (uint8_t i = imgY1 % 8; i <= imgY2 % 8; i++)
 800ea76:	7d3b      	ldrb	r3, [r7, #20]
 800ea78:	3301      	adds	r3, #1
 800ea7a:	753b      	strb	r3, [r7, #20]
 800ea7c:	e7e6      	b.n	800ea4c <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x114>
            }
            modyfikacja2 = modyfikacja1;
 800ea7e:	7dfb      	ldrb	r3, [r7, #23]
 800ea80:	75bb      	strb	r3, [r7, #22]
 800ea82:	e03c      	b.n	800eafe <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x1c6>
        }
        else
        {
            if (y == yb1) // (zwykle) modyfikujemy tylko czesc bajtu w ktorym znajduje sie y1
 800ea84:	7d7a      	ldrb	r2, [r7, #21]
 800ea86:	7c3b      	ldrb	r3, [r7, #16]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d119      	bne.n	800eac0 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x188>
            {
                for (uint8_t i = imgY1 % 8; i <= 8; i++)
 800ea8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ea90:	425a      	negs	r2, r3
 800ea92:	f003 0307 	and.w	r3, r3, #7
 800ea96:	f002 0207 	and.w	r2, r2, #7
 800ea9a:	bf58      	it	pl
 800ea9c:	4253      	negpl	r3, r2
 800ea9e:	b21b      	sxth	r3, r3
 800eaa0:	74fb      	strb	r3, [r7, #19]
 800eaa2:	7cfb      	ldrb	r3, [r7, #19]
 800eaa4:	2b08      	cmp	r3, #8
 800eaa6:	dc0b      	bgt.n	800eac0 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x188>
                {
                    modyfikacja1 += (1 << i);
 800eaa8:	7cfb      	ldrb	r3, [r7, #19]
 800eaaa:	2201      	movs	r2, #1
 800eaac:	fa02 f303 	lsl.w	r3, r2, r3
 800eab0:	b2da      	uxtb	r2, r3
 800eab2:	7dfb      	ldrb	r3, [r7, #23]
 800eab4:	4413      	add	r3, r2
 800eab6:	75fb      	strb	r3, [r7, #23]
                for (uint8_t i = imgY1 % 8; i <= 8; i++)
 800eab8:	7cfb      	ldrb	r3, [r7, #19]
 800eaba:	3301      	adds	r3, #1
 800eabc:	74fb      	strb	r3, [r7, #19]
 800eabe:	e7f0      	b.n	800eaa2 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x16a>
                }
            }

            if (y == yb2) // (zwykle) modyfikujemy tylko czesc bajtu w ktorym znajduje sie y2
 800eac0:	7d7a      	ldrb	r2, [r7, #21]
 800eac2:	7bfb      	ldrb	r3, [r7, #15]
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d11a      	bne.n	800eafe <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x1c6>
            {
                for (uint8_t i = 0; i <= imgY2 % 8; i++)
 800eac8:	2300      	movs	r3, #0
 800eaca:	74bb      	strb	r3, [r7, #18]
 800eacc:	7cba      	ldrb	r2, [r7, #18]
 800eace:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ead2:	4259      	negs	r1, r3
 800ead4:	f003 0307 	and.w	r3, r3, #7
 800ead8:	f001 0107 	and.w	r1, r1, #7
 800eadc:	bf58      	it	pl
 800eade:	424b      	negpl	r3, r1
 800eae0:	b21b      	sxth	r3, r3
 800eae2:	429a      	cmp	r2, r3
 800eae4:	dc0b      	bgt.n	800eafe <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x1c6>
                {
                    modyfikacja2 += (1 << i);
 800eae6:	7cbb      	ldrb	r3, [r7, #18]
 800eae8:	2201      	movs	r2, #1
 800eaea:	fa02 f303 	lsl.w	r3, r2, r3
 800eaee:	b2da      	uxtb	r2, r3
 800eaf0:	7dbb      	ldrb	r3, [r7, #22]
 800eaf2:	4413      	add	r3, r2
 800eaf4:	75bb      	strb	r3, [r7, #22]
                for (uint8_t i = 0; i <= imgY2 % 8; i++)
 800eaf6:	7cbb      	ldrb	r3, [r7, #18]
 800eaf8:	3301      	adds	r3, #1
 800eafa:	74bb      	strb	r3, [r7, #18]
 800eafc:	e7e6      	b.n	800eacc <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x194>
            }
        }

        ///----------------------------------------------------------

        for (uint8_t x = imgX1; x <= imgX2; x++)
 800eafe:	88fb      	ldrh	r3, [r7, #6]
 800eb00:	747b      	strb	r3, [r7, #17]
 800eb02:	7c7a      	ldrb	r2, [r7, #17]
 800eb04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	f300 808c 	bgt.w	800ec26 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x2ee>
        {
            adr_byte_bufora = bufor_ekranu + (y * LCD_WIDTH) + x;
 800eb0e:	7d7b      	ldrb	r3, [r7, #21]
 800eb10:	01db      	lsls	r3, r3, #7
 800eb12:	461a      	mov	r2, r3
 800eb14:	7c7b      	ldrb	r3, [r7, #17]
 800eb16:	4413      	add	r3, r2
 800eb18:	4a4f      	ldr	r2, [pc, #316]	; (800ec58 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x320>)
 800eb1a:	4413      	add	r3, r2
 800eb1c:	60bb      	str	r3, [r7, #8]

            switch (fillOperation)
 800eb1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d025      	beq.n	800eb72 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x23a>
 800eb26:	2b02      	cmp	r3, #2
 800eb28:	d04f      	beq.n	800ebca <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x292>
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d177      	bne.n	800ec1e <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x2e6>
            {
                case FILL_OPERATION_FILL:
                    if (y == yb1)
 800eb2e:	7d7a      	ldrb	r2, [r7, #21]
 800eb30:	7c3b      	ldrb	r3, [r7, #16]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d106      	bne.n	800eb44 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x20c>
                    {
                        *adr_byte_bufora |= modyfikacja1;
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	781a      	ldrb	r2, [r3, #0]
 800eb3a:	7dfb      	ldrb	r3, [r7, #23]
 800eb3c:	4313      	orrs	r3, r2
 800eb3e:	b2da      	uxtb	r2, r3
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	701a      	strb	r2, [r3, #0]
                    }

                    if (y == yb2)
 800eb44:	7d7a      	ldrb	r2, [r7, #21]
 800eb46:	7bfb      	ldrb	r3, [r7, #15]
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d106      	bne.n	800eb5a <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x222>
                    {
                        *adr_byte_bufora |= modyfikacja2;
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	781a      	ldrb	r2, [r3, #0]
 800eb50:	7dbb      	ldrb	r3, [r7, #22]
 800eb52:	4313      	orrs	r3, r2
 800eb54:	b2da      	uxtb	r2, r3
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	701a      	strb	r2, [r3, #0]
                    }

                    if (y != yb1 && y != yb2)
 800eb5a:	7d7a      	ldrb	r2, [r7, #21]
 800eb5c:	7c3b      	ldrb	r3, [r7, #16]
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d058      	beq.n	800ec14 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x2dc>
 800eb62:	7d7a      	ldrb	r2, [r7, #21]
 800eb64:	7bfb      	ldrb	r3, [r7, #15]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d054      	beq.n	800ec14 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x2dc>
                    {
                        *adr_byte_bufora = 0xff;
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	22ff      	movs	r2, #255	; 0xff
 800eb6e:	701a      	strb	r2, [r3, #0]
                    }

                    break;
 800eb70:	e050      	b.n	800ec14 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x2dc>

                case FILL_OPERATION_ERASE:
                    if (y == yb1)
 800eb72:	7d7a      	ldrb	r2, [r7, #21]
 800eb74:	7c3b      	ldrb	r3, [r7, #16]
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d10b      	bne.n	800eb92 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x25a>
                    {
                        *adr_byte_bufora &= ~modyfikacja1;
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	b25a      	sxtb	r2, r3
 800eb80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb84:	43db      	mvns	r3, r3
 800eb86:	b25b      	sxtb	r3, r3
 800eb88:	4013      	ands	r3, r2
 800eb8a:	b25b      	sxtb	r3, r3
 800eb8c:	b2da      	uxtb	r2, r3
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	701a      	strb	r2, [r3, #0]
                    }

                    if (y == yb2)
 800eb92:	7d7a      	ldrb	r2, [r7, #21]
 800eb94:	7bfb      	ldrb	r3, [r7, #15]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d10b      	bne.n	800ebb2 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x27a>
                    {
                        *adr_byte_bufora &= ~modyfikacja2;
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	b25a      	sxtb	r2, r3
 800eba0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800eba4:	43db      	mvns	r3, r3
 800eba6:	b25b      	sxtb	r3, r3
 800eba8:	4013      	ands	r3, r2
 800ebaa:	b25b      	sxtb	r3, r3
 800ebac:	b2da      	uxtb	r2, r3
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	701a      	strb	r2, [r3, #0]
                    }

                    if (y != yb1 && y != yb2)
 800ebb2:	7d7a      	ldrb	r2, [r7, #21]
 800ebb4:	7c3b      	ldrb	r3, [r7, #16]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d02e      	beq.n	800ec18 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x2e0>
 800ebba:	7d7a      	ldrb	r2, [r7, #21]
 800ebbc:	7bfb      	ldrb	r3, [r7, #15]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d02a      	beq.n	800ec18 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x2e0>
                    {
                        *adr_byte_bufora = 0x0;
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	701a      	strb	r2, [r3, #0]
                    }

                    break;
 800ebc8:	e026      	b.n	800ec18 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x2e0>

                case FILL_OPERATION_NEGATE:
                    if (y == yb1)
 800ebca:	7d7a      	ldrb	r2, [r7, #21]
 800ebcc:	7c3b      	ldrb	r3, [r7, #16]
 800ebce:	429a      	cmp	r2, r3
 800ebd0:	d106      	bne.n	800ebe0 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x2a8>
                    {
                        *adr_byte_bufora ^= modyfikacja1;
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	781a      	ldrb	r2, [r3, #0]
 800ebd6:	7dfb      	ldrb	r3, [r7, #23]
 800ebd8:	4053      	eors	r3, r2
 800ebda:	b2da      	uxtb	r2, r3
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	701a      	strb	r2, [r3, #0]
                    }

                    if (y == yb2)
 800ebe0:	7d7a      	ldrb	r2, [r7, #21]
 800ebe2:	7bfb      	ldrb	r3, [r7, #15]
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d106      	bne.n	800ebf6 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x2be>
                    {
                        *adr_byte_bufora ^= modyfikacja2;
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	781a      	ldrb	r2, [r3, #0]
 800ebec:	7dbb      	ldrb	r3, [r7, #22]
 800ebee:	4053      	eors	r3, r2
 800ebf0:	b2da      	uxtb	r2, r3
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	701a      	strb	r2, [r3, #0]
                    }

                    if (y != yb1 && y != yb2)
 800ebf6:	7d7a      	ldrb	r2, [r7, #21]
 800ebf8:	7c3b      	ldrb	r3, [r7, #16]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d00e      	beq.n	800ec1c <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x2e4>
 800ebfe:	7d7a      	ldrb	r2, [r7, #21]
 800ec00:	7bfb      	ldrb	r3, [r7, #15]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d00a      	beq.n	800ec1c <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x2e4>
                    {
                        *adr_byte_bufora = ~(*adr_byte_bufora);
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	43db      	mvns	r3, r3
 800ec0c:	b2da      	uxtb	r2, r3
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	701a      	strb	r2, [r3, #0]
                    }

                    break;
 800ec12:	e003      	b.n	800ec1c <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x2e4>
                    break;
 800ec14:	bf00      	nop
 800ec16:	e002      	b.n	800ec1e <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x2e6>
                    break;
 800ec18:	bf00      	nop
 800ec1a:	e000      	b.n	800ec1e <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x2e6>
                    break;
 800ec1c:	bf00      	nop
        for (uint8_t x = imgX1; x <= imgX2; x++)
 800ec1e:	7c7b      	ldrb	r3, [r7, #17]
 800ec20:	3301      	adds	r3, #1
 800ec22:	747b      	strb	r3, [r7, #17]
 800ec24:	e76d      	b.n	800eb02 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x1ca>
            }
        }

        if (m_iSuspendLayout == 0)
 800ec26:	4b0b      	ldr	r3, [pc, #44]	; (800ec54 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x31c>)
 800ec28:	f993 3000 	ldrsb.w	r3, [r3]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d108      	bne.n	800ec42 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0x30a>
        {
            drawBufferLine(y, imgX1, imgX2);
 800ec30:	7d7b      	ldrb	r3, [r7, #21]
 800ec32:	b21b      	sxth	r3, r3
 800ec34:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ec38:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f000 fba7 	bl	800f390 <_ZN13CST7565Driver14drawBufferLineEsss>
    for (uint8_t y = yb1; y <= yb2; y++)
 800ec42:	7d7b      	ldrb	r3, [r7, #21]
 800ec44:	3301      	adds	r3, #1
 800ec46:	757b      	strb	r3, [r7, #21]
 800ec48:	e6e8      	b.n	800ea1c <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE+0xe4>
        return;
 800ec4a:	bf00      	nop
        }
    }
}
 800ec4c:	371c      	adds	r7, #28
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd90      	pop	{r4, r7, pc}
 800ec52:	bf00      	nop
 800ec54:	20000df0 	.word	0x20000df0
 800ec58:	200009f0 	.word	0x200009f0

0800ec5c <_ZN13CST7565Driver5clearEv>:
    fill(x1, y1, x1, y2, CST7565Driver::FILL_OPERATION_FILL);
    fill(x2, y1, x2, y2, CST7565Driver::FILL_OPERATION_FILL);
}

void CST7565Driver::clear()
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b082      	sub	sp, #8
 800ec60:	af02      	add	r7, sp, #8
    fill(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1, FILL_OPERATION_ERASE);
 800ec62:	2301      	movs	r3, #1
 800ec64:	9300      	str	r3, [sp, #0]
 800ec66:	233f      	movs	r3, #63	; 0x3f
 800ec68:	227f      	movs	r2, #127	; 0x7f
 800ec6a:	2100      	movs	r1, #0
 800ec6c:	2000      	movs	r0, #0
 800ec6e:	f7ff fe63 	bl	800e938 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE>
}
 800ec72:	bf00      	nop
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}

0800ec78 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE>:

void CST7565Driver::imgBitBltCenterBox(int16_t imgX1, int16_t imgY1, int16_t imgX2, int16_t imgY2,
        const uint16_t imgAddress, TBitOperation bitOperation)
{
 800ec78:	b590      	push	{r4, r7, lr}
 800ec7a:	b08f      	sub	sp, #60	; 0x3c
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	4604      	mov	r4, r0
 800ec80:	4608      	mov	r0, r1
 800ec82:	4611      	mov	r1, r2
 800ec84:	461a      	mov	r2, r3
 800ec86:	4623      	mov	r3, r4
 800ec88:	80fb      	strh	r3, [r7, #6]
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	80bb      	strh	r3, [r7, #4]
 800ec8e:	460b      	mov	r3, r1
 800ec90:	807b      	strh	r3, [r7, #2]
 800ec92:	4613      	mov	r3, r2
 800ec94:	803b      	strh	r3, [r7, #0]
    int16_t imgWidth = 0;
 800ec96:	2300      	movs	r3, #0
 800ec98:	827b      	strh	r3, [r7, #18]
    int16_t imgHeight = 0;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	823b      	strh	r3, [r7, #16]

    flashStartReadSequentialBytes(imgAddress);
 800ec9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800eca2:	4618      	mov	r0, r3
 800eca4:	f002 fc12 	bl	80114cc <_ZN17CST7565_Hal_Flash29flashStartReadSequentialBytesEm>
    readSequenctialImgHeaderData(&imgWidth, &imgHeight);
 800eca8:	f107 0210 	add.w	r2, r7, #16
 800ecac:	f107 0312 	add.w	r3, r7, #18
 800ecb0:	4611      	mov	r1, r2
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f000 fc2a 	bl	800f50c <_ZN13CST7565Driver28readSequenctialImgHeaderDataEPsS0_>
//    flashEndReadSequentialBytes();


    if (imgX2 > 0)
 800ecb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	dd19      	ble.n	800ecf4 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x7c>
    {
        int16_t boxWidth = imgX2 - imgX1 + 1;
 800ecc0:	887a      	ldrh	r2, [r7, #2]
 800ecc2:	88fb      	ldrh	r3, [r7, #6]
 800ecc4:	1ad3      	subs	r3, r2, r3
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	3301      	adds	r3, #1
 800ecca:	b29b      	uxth	r3, r3
 800eccc:	84fb      	strh	r3, [r7, #38]	; 0x26
        if (imgWidth < boxWidth)
 800ecce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ecd2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	dd0c      	ble.n	800ecf4 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x7c>
        {
            imgX1 += (boxWidth - imgWidth) / 2;
 800ecda:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ecde:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800ece2:	1a9b      	subs	r3, r3, r2
 800ece4:	0fda      	lsrs	r2, r3, #31
 800ece6:	4413      	add	r3, r2
 800ece8:	105b      	asrs	r3, r3, #1
 800ecea:	b29a      	uxth	r2, r3
 800ecec:	88fb      	ldrh	r3, [r7, #6]
 800ecee:	4413      	add	r3, r2
 800ecf0:	b29b      	uxth	r3, r3
 800ecf2:	80fb      	strh	r3, [r7, #6]
        }
    }

    if (imgY2 > 0)
 800ecf4:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	dd19      	ble.n	800ed30 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0xb8>
    {
        int16_t boxHeight = imgY2 - imgY1 + 1;
 800ecfc:	883a      	ldrh	r2, [r7, #0]
 800ecfe:	88bb      	ldrh	r3, [r7, #4]
 800ed00:	1ad3      	subs	r3, r2, r3
 800ed02:	b29b      	uxth	r3, r3
 800ed04:	3301      	adds	r3, #1
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (imgHeight < boxHeight)
 800ed0a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ed0e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800ed12:	429a      	cmp	r2, r3
 800ed14:	dd0c      	ble.n	800ed30 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0xb8>
        {
            imgY1 += (boxHeight - imgHeight) / 2;
 800ed16:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ed1a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800ed1e:	1a9b      	subs	r3, r3, r2
 800ed20:	0fda      	lsrs	r2, r3, #31
 800ed22:	4413      	add	r3, r2
 800ed24:	105b      	asrs	r3, r3, #1
 800ed26:	b29a      	uxth	r2, r3
 800ed28:	88bb      	ldrh	r3, [r7, #4]
 800ed2a:	4413      	add	r3, r2
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	80bb      	strh	r3, [r7, #4]
        }
    }

    //lcd::rysuj_bitmape(imgX1, imgY1, (CImgData::TImgAddress) imgAddress, operacja);

    int16_t illegalX = (int16_t)LCD_WIDTH;
 800ed30:	2380      	movs	r3, #128	; 0x80
 800ed32:	847b      	strh	r3, [r7, #34]	; 0x22
    int16_t illegalY = (int16_t)LCD_HEIGHT;
 800ed34:	2340      	movs	r3, #64	; 0x40
 800ed36:	843b      	strh	r3, [r7, #32]

    if (imgX1 >= illegalX || imgY1 >= illegalY)
 800ed38:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ed3c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ed40:	429a      	cmp	r2, r3
 800ed42:	f280 81fe 	bge.w	800f142 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x4ca>
 800ed46:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800ed4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	f280 81f7 	bge.w	800f142 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x4ca>
    {
        return;
    }

    uint8_t wiersz = imgY1 / 8;
 800ed54:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	da00      	bge.n	800ed5e <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0xe6>
 800ed5c:	3307      	adds	r3, #7
 800ed5e:	10db      	asrs	r3, r3, #3
 800ed60:	b21b      	sxth	r3, r3
 800ed62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint8_t* adres_w_buforze = bufor_ekranu + (wiersz * LCD_WIDTH) + imgX1;
 800ed66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed6a:	01db      	lsls	r3, r3, #7
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ed72:	4413      	add	r3, r2
 800ed74:	4ac0      	ldr	r2, [pc, #768]	; (800f078 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x400>)
 800ed76:	4413      	add	r3, r2
 800ed78:	61fb      	str	r3, [r7, #28]
    uint8_t ybit = imgY1 % 8;
 800ed7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ed7e:	425a      	negs	r2, r3
 800ed80:	f003 0307 	and.w	r3, r3, #7
 800ed84:	f002 0207 	and.w	r2, r2, #7
 800ed88:	bf58      	it	pl
 800ed8a:	4253      	negpl	r3, r2
 800ed8c:	b21b      	sxth	r3, r3
 800ed8e:	76fb      	strb	r3, [r7, #27]

    uint8_t max_wierszy = getImgByteHeight(imgHeight);
 800ed90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ed94:	4618      	mov	r0, r3
 800ed96:	f000 fbf2 	bl	800f57e <_ZN13CST7565Driver16getImgByteHeightEs>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	76bb      	strb	r3, [r7, #26]
    uint8_t max_wierszy_do_narysowania = getOffsetImgByteHeight(imgHeight, imgY1);
 800ed9e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800eda2:	88ba      	ldrh	r2, [r7, #4]
 800eda4:	b2d2      	uxtb	r2, r2
 800eda6:	4611      	mov	r1, r2
 800eda8:	4618      	mov	r0, r3
 800edaa:	f000 fc11 	bl	800f5d0 <_ZN13CST7565Driver22getOffsetImgByteHeightEsh>
 800edae:	4603      	mov	r3, r0
 800edb0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    uint8_t max_kolumn = imgWidth;
 800edb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800edb8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint8_t dane = 0;
 800edbc:	2300      	movs	r3, #0
 800edbe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    uint8_t newVal = 0;
 800edc2:	2300      	movs	r3, #0
 800edc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    TImageLine imgLine = IML_FIRST;
 800edc8:	2300      	movs	r3, #0
 800edca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    uint8_t firstRowMask = (0xFF << ybit);
 800edce:	7efb      	ldrb	r3, [r7, #27]
 800edd0:	22ff      	movs	r2, #255	; 0xff
 800edd2:	fa02 f303 	lsl.w	r3, r2, r3
 800edd6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    uint8_t bajtyKoncowe = ((imgY1 + imgHeight) % 8);
 800edda:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800edde:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800ede2:	4413      	add	r3, r2
 800ede4:	425a      	negs	r2, r3
 800ede6:	f003 0307 	and.w	r3, r3, #7
 800edea:	f002 0207 	and.w	r2, r2, #7
 800edee:	bf58      	it	pl
 800edf0:	4253      	negpl	r3, r2
 800edf2:	767b      	strb	r3, [r7, #25]
    uint8_t lastRowMask = (0xFF >> (8 - bajtyKoncowe));
 800edf4:	7e7b      	ldrb	r3, [r7, #25]
 800edf6:	f1c3 0308 	rsb	r3, r3, #8
 800edfa:	22ff      	movs	r2, #255	; 0xff
 800edfc:	fa42 f303 	asr.w	r3, r2, r3
 800ee00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    lastRowMask = (lastRowMask > 0 ? lastRowMask : 0xFF);
 800ee04:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	dd02      	ble.n	800ee12 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x19a>
 800ee0c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ee10:	e000      	b.n	800ee14 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x19c>
 800ee12:	23ff      	movs	r3, #255	; 0xff
 800ee14:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

//    Przyjrzeć się, czy ostatni linia jest dobrze maskowana i czy nie trzeba njpierw odwrócić jakoś tego maskowania
//    Wygląda na to, że bajty są rysowane na ekranie w odwrotną stronę niż się wydawało i tak trzeba je także w pamięci maskować

    if (max_wierszy == max_wierszy_do_narysowania && max_wierszy == 1)
 800ee18:	7eba      	ldrb	r2, [r7, #26]
 800ee1a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d109      	bne.n	800ee36 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x1be>
 800ee22:	7ebb      	ldrb	r3, [r7, #26]
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d106      	bne.n	800ee36 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x1be>
    {
        firstRowMask = (firstRowMask & lastRowMask);
 800ee28:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800ee2c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ee30:	4013      	ands	r3, r2
 800ee32:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    }

    uint8_t middleMask = 0xFF;
 800ee36:	23ff      	movs	r3, #255	; 0xff
 800ee38:	763b      	strb	r3, [r7, #24]
    uint8_t actualMask = 0xFF;
 800ee3a:	23ff      	movs	r3, #255	; 0xff
 800ee3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if ((int16_t)max_kolumn + (int16_t)imgX1 > illegalX)
 800ee40:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800ee44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ee48:	441a      	add	r2, r3
 800ee4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	dd06      	ble.n	800ee60 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x1e8>
    {
        max_kolumn = illegalX - (int16_t)imgX1;
 800ee52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee54:	b2da      	uxtb	r2, r3
 800ee56:	88fb      	ldrh	r3, [r7, #6]
 800ee58:	b2db      	uxtb	r3, r3
 800ee5a:	1ad3      	subs	r3, r2, r3
 800ee5c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if ((int16_t)max_wierszy_do_narysowania + (int16_t)wiersz > illegalY / 8)
 800ee60:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ee64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee68:	441a      	add	r2, r3
 800ee6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	da00      	bge.n	800ee74 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x1fc>
 800ee72:	3307      	adds	r3, #7
 800ee74:	10db      	asrs	r3, r3, #3
 800ee76:	b21b      	sxth	r3, r3
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	dd0f      	ble.n	800ee9c <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x224>
    {
        max_wierszy_do_narysowania = (illegalY / 8) - (int16_t)wiersz;
 800ee7c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	da00      	bge.n	800ee86 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x20e>
 800ee84:	3307      	adds	r3, #7
 800ee86:	10db      	asrs	r3, r3, #3
 800ee88:	b21b      	sxth	r3, r3
 800ee8a:	b2da      	uxtb	r2, r3
 800ee8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee90:	1ad3      	subs	r3, r2, r3
 800ee92:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        lastRowMask = 0xFF;
 800ee96:	23ff      	movs	r3, #255	; 0xff
 800ee98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    }

    if (m_iSuspendLayout > 0)
 800ee9c:	4b77      	ldr	r3, [pc, #476]	; (800f07c <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x404>)
 800ee9e:	f993 3000 	ldrsb.w	r3, [r3]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	dd18      	ble.n	800eed8 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x260>
    {
        setSuspendedArea(imgX1, imgY1, imgX1 + max_kolumn - 1, imgY1 + imgHeight - 1);
 800eea6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800eeaa:	b29a      	uxth	r2, r3
 800eeac:	88fb      	ldrh	r3, [r7, #6]
 800eeae:	4413      	add	r3, r2
 800eeb0:	b29b      	uxth	r3, r3
 800eeb2:	3b01      	subs	r3, #1
 800eeb4:	b29b      	uxth	r3, r3
 800eeb6:	b21c      	sxth	r4, r3
 800eeb8:	88ba      	ldrh	r2, [r7, #4]
 800eeba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	4413      	add	r3, r2
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	3b01      	subs	r3, #1
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	b21b      	sxth	r3, r3
 800eeca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800eece:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800eed2:	4622      	mov	r2, r4
 800eed4:	f000 f97a 	bl	800f1cc <_ZN13CST7565Driver16setSuspendedAreaEssss>

    uint8_t rozkazy[] = {
        cmd_set_page,
        (uint8_t) (cmd_set_column_lower | (imgX1 & 0xf)),
        (uint8_t) (cmd_set_column_upper | ((imgX1 >> 4) & 0xf)),
    };
 800eed8:	f107 030c 	add.w	r3, r7, #12
 800eedc:	2100      	movs	r1, #0
 800eede:	460a      	mov	r2, r1
 800eee0:	801a      	strh	r2, [r3, #0]
 800eee2:	460a      	mov	r2, r1
 800eee4:	709a      	strb	r2, [r3, #2]
 800eee6:	23b0      	movs	r3, #176	; 0xb0
 800eee8:	733b      	strb	r3, [r7, #12]
        (uint8_t) (cmd_set_column_lower | (imgX1 & 0xf)),
 800eeea:	88fb      	ldrh	r3, [r7, #6]
 800eeec:	b2db      	uxtb	r3, r3
 800eeee:	f003 030f 	and.w	r3, r3, #15
 800eef2:	b2db      	uxtb	r3, r3
    };
 800eef4:	737b      	strb	r3, [r7, #13]
        (uint8_t) (cmd_set_column_upper | ((imgX1 >> 4) & 0xf)),
 800eef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800eefa:	111b      	asrs	r3, r3, #4
 800eefc:	b25b      	sxtb	r3, r3
 800eefe:	f003 030f 	and.w	r3, r3, #15
 800ef02:	b25b      	sxtb	r3, r3
 800ef04:	f043 0310 	orr.w	r3, r3, #16
 800ef08:	b25b      	sxtb	r3, r3
 800ef0a:	b2db      	uxtb	r3, r3
    };
 800ef0c:	73bb      	strb	r3, [r7, #14]


    //#####################################################
    //przerobka na takie rysowanie kolejnych bajtow na ekranie jak sa zapisane w pamieci

    uint8_t wierszPrev = wiersz;
 800ef0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef12:	75fb      	strb	r3, [r7, #23]
    uint8_t danePrev = 0;
 800ef14:	2300      	movs	r3, #0
 800ef16:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int16_t adresPrev = -1;
 800ef1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef1e:	85bb      	strh	r3, [r7, #44]	; 0x2c

    for (uint8_t k = 0; k < max_kolumn; ++k)
 800ef20:	2300      	movs	r3, #0
 800ef22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef26:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ef2a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	f280 8104 	bge.w	800f13c <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x4c4>
    {
    	uint8_t w = 0;
 800ef34:	2300      	movs	r3, #0
 800ef36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

        for (w = 0; w < max_wierszy_do_narysowania; ++w)
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ef40:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800ef44:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	f280 80ee 	bge.w	800f12a <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x4b2>
        {
        	adres_w_buforze = bufor_ekranu + (wiersz * LCD_WIDTH) + k + imgX1;
 800ef4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef52:	01db      	lsls	r3, r3, #7
 800ef54:	461a      	mov	r2, r3
 800ef56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef5a:	441a      	add	r2, r3
 800ef5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ef60:	4413      	add	r3, r2
 800ef62:	4a45      	ldr	r2, [pc, #276]	; (800f078 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x400>)
 800ef64:	4413      	add	r3, r2
 800ef66:	61fb      	str	r3, [r7, #28]

            if (m_iSuspendLayout == 0)
 800ef68:	4b44      	ldr	r3, [pc, #272]	; (800f07c <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x404>)
 800ef6a:	f993 3000 	ldrsb.w	r3, [r3]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d124      	bne.n	800efbc <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x344>
            {
                rozkazy[0] = (cmd_set_page | wiersz);
 800ef72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef76:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	733b      	strb	r3, [r7, #12]
                rozkazy[1] = (cmd_set_column_lower | ((k + imgX1) & 0xf)),
 800ef7e:	88fb      	ldrh	r3, [r7, #6]
 800ef80:	b2da      	uxtb	r2, r3
 800ef82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef86:	4413      	add	r3, r2
 800ef88:	b2db      	uxtb	r3, r3
 800ef8a:	f003 030f 	and.w	r3, r3, #15
 800ef8e:	b2db      	uxtb	r3, r3
 800ef90:	737b      	strb	r3, [r7, #13]
                rozkazy[2] = (cmd_set_column_upper | (((k + imgX1) >> 4) & 0xf)),
 800ef92:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ef96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ef9a:	4413      	add	r3, r2
 800ef9c:	111b      	asrs	r3, r3, #4
 800ef9e:	b25b      	sxtb	r3, r3
 800efa0:	f003 030f 	and.w	r3, r3, #15
 800efa4:	b25b      	sxtb	r3, r3
 800efa6:	f043 0310 	orr.w	r3, r3, #16
 800efaa:	b25b      	sxtb	r3, r3
 800efac:	b2db      	uxtb	r3, r3
 800efae:	73bb      	strb	r3, [r7, #14]
                sendCommands(rozkazy, sizeof(rozkazy));
 800efb0:	f107 030c 	add.w	r3, r7, #12
 800efb4:	2103      	movs	r1, #3
 800efb6:	4618      	mov	r0, r3
 800efb8:	f000 fa6a 	bl	800f490 <_ZN13CST7565Driver12sendCommandsEPht>
            }

            ++wiersz;
 800efbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800efc0:	3301      	adds	r3, #1
 800efc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

            if (w == 0)
 800efc6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d107      	bne.n	800efde <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x366>
            {
                imgLine = IML_FIRST;
 800efce:	2300      	movs	r3, #0
 800efd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                actualMask = firstRowMask;
 800efd4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800efd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800efdc:	e014      	b.n	800f008 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x390>
            }
            else if (w == max_wierszy_do_narysowania - 1)
 800efde:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800efe2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800efe6:	3b01      	subs	r3, #1
 800efe8:	429a      	cmp	r2, r3
 800efea:	d107      	bne.n	800effc <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x384>
            {
                imgLine = IML_LAST;
 800efec:	2302      	movs	r3, #2
 800efee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                actualMask = lastRowMask;
 800eff2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800eff6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800effa:	e005      	b.n	800f008 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x390>
            }
            else
            {
                imgLine = IML_MIDDLE;
 800effc:	2301      	movs	r3, #1
 800effe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                actualMask = middleMask;
 800f002:	7e3b      	ldrb	r3, [r7, #24]
 800f004:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }

            int16_t adress = k * max_wierszy + w;
 800f008:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f00c:	b29b      	uxth	r3, r3
 800f00e:	7eba      	ldrb	r2, [r7, #26]
 800f010:	b292      	uxth	r2, r2
 800f012:	fb02 f303 	mul.w	r3, r2, r3
 800f016:	b29a      	uxth	r2, r3
 800f018:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800f01c:	b29b      	uxth	r3, r3
 800f01e:	4413      	add	r3, r2
 800f020:	b29b      	uxth	r3, r3
 800f022:	82bb      	strh	r3, [r7, #20]
            uint8_t daneTmp = 0;
 800f024:	2300      	movs	r3, #0
 800f026:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

            if(adresPrev != adress)
 800f02a:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800f02e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f032:	429a      	cmp	r2, r3
 800f034:	d00c      	beq.n	800f050 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x3d8>
            {
            	adresPrev = adress;
 800f036:	8abb      	ldrh	r3, [r7, #20]
 800f038:	85bb      	strh	r3, [r7, #44]	; 0x2c
            	daneTmp = (getImgData(imgAddress, adress));
 800f03a:	8aba      	ldrh	r2, [r7, #20]
 800f03c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800f040:	4611      	mov	r1, r2
 800f042:	4618      	mov	r0, r3
 800f044:	f000 fa88 	bl	800f558 <_ZN13CST7565Driver10getImgDataEtt>
 800f048:	4603      	mov	r3, r0
 800f04a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800f04e:	e003      	b.n	800f058 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x3e0>
            }
            else
            {
            	daneTmp = danePrev;
 800f050:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f054:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            }


			if (imgLine == IML_FIRST)
 800f058:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d10f      	bne.n	800f080 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x408>
			{
//				uint8_t daneTmp = (getImgData(imgAddress, k * max_wierszy + w));
				danePrev = daneTmp;
 800f060:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800f064:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

				dane = (daneTmp << ybit);
 800f068:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800f06c:	7efb      	ldrb	r3, [r7, #27]
 800f06e:	fa02 f303 	lsl.w	r3, r2, r3
 800f072:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800f076:	e019      	b.n	800f0ac <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x434>
 800f078:	200009f0 	.word	0x200009f0
 800f07c:	20000df0 	.word	0x20000df0
			else
			{
//				uint8_t daneTmp = (getImgData(imgAddress, k * max_wierszy + w));


				dane = (daneTmp << ybit)
 800f080:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800f084:	7efb      	ldrb	r3, [r7, #27]
 800f086:	fa02 f303 	lsl.w	r3, r2, r3
							| ((danePrev) >> (8 - ybit));
 800f08a:	b25a      	sxtb	r2, r3
 800f08c:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800f090:	7efb      	ldrb	r3, [r7, #27]
 800f092:	f1c3 0308 	rsb	r3, r3, #8
 800f096:	fa41 f303 	asr.w	r3, r1, r3
 800f09a:	b25b      	sxtb	r3, r3
 800f09c:	4313      	orrs	r3, r2
 800f09e:	b25b      	sxtb	r3, r3
				dane = (daneTmp << ybit)
 800f0a0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

				danePrev = daneTmp;
 800f0a4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800f0a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			}

			newVal = *adres_w_buforze;
 800f0ac:	69fb      	ldr	r3, [r7, #28]
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			switch (bitOperation)
 800f0b4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d004      	beq.n	800f0c6 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x44e>
 800f0bc:	2b02      	cmp	r3, #2
 800f0be:	d00f      	beq.n	800f0e0 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x468>
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d008      	beq.n	800f0d6 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x45e>
 800f0c4:	e014      	b.n	800f0f0 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x478>
			{
				case BIT_OPERATION_OR:
					newVal |= dane;
 800f0c6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f0ca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f0ce:	4313      	orrs	r3, r2
 800f0d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					break;
 800f0d4:	e00c      	b.n	800f0f0 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x478>

				case BIT_OPERATION_AND:
					newVal = dane;
 800f0d6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					break;
 800f0de:	e007      	b.n	800f0f0 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x478>

				case BIT_OPERATION_XOR:
					newVal ^= dane;
 800f0e0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f0e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f0e8:	4053      	eors	r3, r2
 800f0ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					break;
 800f0ee:	bf00      	nop
			}

			*adres_w_buforze = uaktualnijBajt(*adres_w_buforze, newVal, actualMask);
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f0f8:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f000 f827 	bl	800f150 <_ZN13CST7565Driver14uaktualnijBajtEhhh>
 800f102:	4603      	mov	r3, r0
 800f104:	461a      	mov	r2, r3
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	701a      	strb	r2, [r3, #0]

			if (m_iSuspendLayout == 0)
 800f10a:	4b10      	ldr	r3, [pc, #64]	; (800f14c <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x4d4>)
 800f10c:	f993 3000 	ldrsb.w	r3, [r3]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d104      	bne.n	800f11e <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x4a6>
			{
				sendDataValue(*adres_w_buforze);
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	4618      	mov	r0, r3
 800f11a:	f000 f9ce 	bl	800f4ba <_ZN13CST7565Driver13sendDataValueEh>
        for (w = 0; w < max_wierszy_do_narysowania; ++w)
 800f11e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800f122:	3301      	adds	r3, #1
 800f124:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f128:	e70a      	b.n	800ef40 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x2c8>

				//TODO: można to przerobić w taki sposób, żeby była możliwość wykorzystania funkcji rysującej całą linię - szybsza obsługa
			}
        }

        wiersz = wierszPrev;
 800f12a:	7dfb      	ldrb	r3, [r7, #23]
 800f12c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    for (uint8_t k = 0; k < max_kolumn; ++k)
 800f130:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f134:	3301      	adds	r3, #1
 800f136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f13a:	e6f4      	b.n	800ef26 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x2ae>
    }

	flashEndReadSequentialBytes();
 800f13c:	f002 f9f2 	bl	8011524 <_ZN17CST7565_Hal_Flash27flashEndReadSequentialBytesEv>
 800f140:	e000      	b.n	800f144 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE+0x4cc>
        return;
 800f142:	bf00      	nop
}
 800f144:	373c      	adds	r7, #60	; 0x3c
 800f146:	46bd      	mov	sp, r7
 800f148:	bd90      	pop	{r4, r7, pc}
 800f14a:	bf00      	nop
 800f14c:	20000df0 	.word	0x20000df0

0800f150 <_ZN13CST7565Driver14uaktualnijBajtEhhh>:

uint8_t CST7565Driver::uaktualnijBajt(uint8_t oryginal, uint8_t newValue, uint8_t bitMask)
{
 800f150:	b480      	push	{r7}
 800f152:	b083      	sub	sp, #12
 800f154:	af00      	add	r7, sp, #0
 800f156:	4603      	mov	r3, r0
 800f158:	71fb      	strb	r3, [r7, #7]
 800f15a:	460b      	mov	r3, r1
 800f15c:	71bb      	strb	r3, [r7, #6]
 800f15e:	4613      	mov	r3, r2
 800f160:	717b      	strb	r3, [r7, #5]
    return ((oryginal & ~bitMask) | (newValue & bitMask));
 800f162:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800f166:	43db      	mvns	r3, r3
 800f168:	b25a      	sxtb	r2, r3
 800f16a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f16e:	4013      	ands	r3, r2
 800f170:	b25a      	sxtb	r2, r3
 800f172:	79b9      	ldrb	r1, [r7, #6]
 800f174:	797b      	ldrb	r3, [r7, #5]
 800f176:	400b      	ands	r3, r1
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	b25b      	sxtb	r3, r3
 800f17c:	4313      	orrs	r3, r2
 800f17e:	b25b      	sxtb	r3, r3
 800f180:	b2db      	uxtb	r3, r3
}
 800f182:	4618      	mov	r0, r3
 800f184:	370c      	adds	r7, #12
 800f186:	46bd      	mov	sp, r7
 800f188:	bc80      	pop	{r7}
 800f18a:	4770      	bx	lr

0800f18c <_ZN13CST7565Driver9imgBitBltEsstNS_13TBitOperationE>:

void CST7565Driver::imgBitBlt(int16_t imgX, int16_t imgY, const uint16_t imgAddress, TBitOperation bitOperation)
{
 800f18c:	b590      	push	{r4, r7, lr}
 800f18e:	b085      	sub	sp, #20
 800f190:	af02      	add	r7, sp, #8
 800f192:	4604      	mov	r4, r0
 800f194:	4608      	mov	r0, r1
 800f196:	4611      	mov	r1, r2
 800f198:	461a      	mov	r2, r3
 800f19a:	4623      	mov	r3, r4
 800f19c:	80fb      	strh	r3, [r7, #6]
 800f19e:	4603      	mov	r3, r0
 800f1a0:	80bb      	strh	r3, [r7, #4]
 800f1a2:	460b      	mov	r3, r1
 800f1a4:	807b      	strh	r3, [r7, #2]
 800f1a6:	4613      	mov	r3, r2
 800f1a8:	707b      	strb	r3, [r7, #1]
    imgBitBltCenterBox(imgX, imgY, 0, 0, imgAddress, bitOperation);
 800f1aa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800f1ae:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800f1b2:	787b      	ldrb	r3, [r7, #1]
 800f1b4:	9301      	str	r3, [sp, #4]
 800f1b6:	887b      	ldrh	r3, [r7, #2]
 800f1b8:	9300      	str	r3, [sp, #0]
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	2200      	movs	r2, #0
 800f1be:	f7ff fd5b 	bl	800ec78 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE>
}
 800f1c2:	bf00      	nop
 800f1c4:	370c      	adds	r7, #12
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd90      	pop	{r4, r7, pc}
	...

0800f1cc <_ZN13CST7565Driver16setSuspendedAreaEssss>:

void CST7565Driver::setSuspendedArea(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
 800f1cc:	b490      	push	{r4, r7}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	4604      	mov	r4, r0
 800f1d4:	4608      	mov	r0, r1
 800f1d6:	4611      	mov	r1, r2
 800f1d8:	461a      	mov	r2, r3
 800f1da:	4623      	mov	r3, r4
 800f1dc:	80fb      	strh	r3, [r7, #6]
 800f1de:	4603      	mov	r3, r0
 800f1e0:	80bb      	strh	r3, [r7, #4]
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	807b      	strh	r3, [r7, #2]
 800f1e6:	4613      	mov	r3, r2
 800f1e8:	803b      	strh	r3, [r7, #0]
    if (x1 < m_iSuspendedAreaX1 || m_iSuspendedAreaX1 < 0)
 800f1ea:	4b2c      	ldr	r3, [pc, #176]	; (800f29c <_ZN13CST7565Driver16setSuspendedAreaEssss+0xd0>)
 800f1ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	db04      	blt.n	800f202 <_ZN13CST7565Driver16setSuspendedAreaEssss+0x36>
 800f1f8:	4b28      	ldr	r3, [pc, #160]	; (800f29c <_ZN13CST7565Driver16setSuspendedAreaEssss+0xd0>)
 800f1fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	da08      	bge.n	800f214 <_ZN13CST7565Driver16setSuspendedAreaEssss+0x48>
    {
        if (x1 < 0)
 800f202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f206:	2b00      	cmp	r3, #0
 800f208:	da01      	bge.n	800f20e <_ZN13CST7565Driver16setSuspendedAreaEssss+0x42>
            x1 = 0;
 800f20a:	2300      	movs	r3, #0
 800f20c:	80fb      	strh	r3, [r7, #6]
        m_iSuspendedAreaX1 = x1;
 800f20e:	4a23      	ldr	r2, [pc, #140]	; (800f29c <_ZN13CST7565Driver16setSuspendedAreaEssss+0xd0>)
 800f210:	88fb      	ldrh	r3, [r7, #6]
 800f212:	8013      	strh	r3, [r2, #0]
    }
    if (y1 < m_iSuspendedAreaY1 || m_iSuspendedAreaY1 < 0)
 800f214:	4b22      	ldr	r3, [pc, #136]	; (800f2a0 <_ZN13CST7565Driver16setSuspendedAreaEssss+0xd4>)
 800f216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f21a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f21e:	429a      	cmp	r2, r3
 800f220:	db04      	blt.n	800f22c <_ZN13CST7565Driver16setSuspendedAreaEssss+0x60>
 800f222:	4b1f      	ldr	r3, [pc, #124]	; (800f2a0 <_ZN13CST7565Driver16setSuspendedAreaEssss+0xd4>)
 800f224:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	da08      	bge.n	800f23e <_ZN13CST7565Driver16setSuspendedAreaEssss+0x72>
    {
        if (y1 < 0)
 800f22c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f230:	2b00      	cmp	r3, #0
 800f232:	da01      	bge.n	800f238 <_ZN13CST7565Driver16setSuspendedAreaEssss+0x6c>
            y1 = 0;
 800f234:	2300      	movs	r3, #0
 800f236:	80bb      	strh	r3, [r7, #4]
        m_iSuspendedAreaY1 = y1;
 800f238:	4a19      	ldr	r2, [pc, #100]	; (800f2a0 <_ZN13CST7565Driver16setSuspendedAreaEssss+0xd4>)
 800f23a:	88bb      	ldrh	r3, [r7, #4]
 800f23c:	8013      	strh	r3, [r2, #0]
    }
    if (x2 > m_iSuspendedAreaX2 || m_iSuspendedAreaX2 < 0)
 800f23e:	4b19      	ldr	r3, [pc, #100]	; (800f2a4 <_ZN13CST7565Driver16setSuspendedAreaEssss+0xd8>)
 800f240:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f244:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f248:	429a      	cmp	r2, r3
 800f24a:	dc04      	bgt.n	800f256 <_ZN13CST7565Driver16setSuspendedAreaEssss+0x8a>
 800f24c:	4b15      	ldr	r3, [pc, #84]	; (800f2a4 <_ZN13CST7565Driver16setSuspendedAreaEssss+0xd8>)
 800f24e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f252:	2b00      	cmp	r3, #0
 800f254:	da08      	bge.n	800f268 <_ZN13CST7565Driver16setSuspendedAreaEssss+0x9c>
    {
        if (x2 >= (int16_t)LCD_WIDTH)
 800f256:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f25a:	2b7f      	cmp	r3, #127	; 0x7f
 800f25c:	dd01      	ble.n	800f262 <_ZN13CST7565Driver16setSuspendedAreaEssss+0x96>
            x2 = LCD_WIDTH - 1;
 800f25e:	237f      	movs	r3, #127	; 0x7f
 800f260:	807b      	strh	r3, [r7, #2]
        m_iSuspendedAreaX2 = x2;
 800f262:	4a10      	ldr	r2, [pc, #64]	; (800f2a4 <_ZN13CST7565Driver16setSuspendedAreaEssss+0xd8>)
 800f264:	887b      	ldrh	r3, [r7, #2]
 800f266:	8013      	strh	r3, [r2, #0]
    }
    if (y2 > m_iSuspendedAreaY2 || m_iSuspendedAreaY2 < 0)
 800f268:	4b0f      	ldr	r3, [pc, #60]	; (800f2a8 <_ZN13CST7565Driver16setSuspendedAreaEssss+0xdc>)
 800f26a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f26e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f272:	429a      	cmp	r2, r3
 800f274:	dc04      	bgt.n	800f280 <_ZN13CST7565Driver16setSuspendedAreaEssss+0xb4>
 800f276:	4b0c      	ldr	r3, [pc, #48]	; (800f2a8 <_ZN13CST7565Driver16setSuspendedAreaEssss+0xdc>)
 800f278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	da08      	bge.n	800f292 <_ZN13CST7565Driver16setSuspendedAreaEssss+0xc6>
    {
        if (y2 >= (int16_t)LCD_HEIGHT)
 800f280:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f284:	2b3f      	cmp	r3, #63	; 0x3f
 800f286:	dd01      	ble.n	800f28c <_ZN13CST7565Driver16setSuspendedAreaEssss+0xc0>
            y2 = LCD_HEIGHT - 1;
 800f288:	233f      	movs	r3, #63	; 0x3f
 800f28a:	803b      	strh	r3, [r7, #0]
        m_iSuspendedAreaY2 = y2;
 800f28c:	4a06      	ldr	r2, [pc, #24]	; (800f2a8 <_ZN13CST7565Driver16setSuspendedAreaEssss+0xdc>)
 800f28e:	883b      	ldrh	r3, [r7, #0]
 800f290:	8013      	strh	r3, [r2, #0]
    }
}
 800f292:	bf00      	nop
 800f294:	3708      	adds	r7, #8
 800f296:	46bd      	mov	sp, r7
 800f298:	bc90      	pop	{r4, r7}
 800f29a:	4770      	bx	lr
 800f29c:	2000000e 	.word	0x2000000e
 800f2a0:	20000010 	.word	0x20000010
 800f2a4:	20000012 	.word	0x20000012
 800f2a8:	20000014 	.word	0x20000014

0800f2ac <_ZN13CST7565Driver13resumeDrawingEv>:

void CST7565Driver::resumeDrawing()
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	af00      	add	r7, sp, #0
    if (m_iSuspendLayout > 0)
 800f2b0:	4b08      	ldr	r3, [pc, #32]	; (800f2d4 <_ZN13CST7565Driver13resumeDrawingEv+0x28>)
 800f2b2:	f993 3000 	ldrsb.w	r3, [r3]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	dd0a      	ble.n	800f2d0 <_ZN13CST7565Driver13resumeDrawingEv+0x24>
    {
        --m_iSuspendLayout;
 800f2ba:	4b06      	ldr	r3, [pc, #24]	; (800f2d4 <_ZN13CST7565Driver13resumeDrawingEv+0x28>)
 800f2bc:	f993 3000 	ldrsb.w	r3, [r3]
 800f2c0:	b2db      	uxtb	r3, r3
 800f2c2:	3b01      	subs	r3, #1
 800f2c4:	b2db      	uxtb	r3, r3
 800f2c6:	b25a      	sxtb	r2, r3
 800f2c8:	4b02      	ldr	r3, [pc, #8]	; (800f2d4 <_ZN13CST7565Driver13resumeDrawingEv+0x28>)
 800f2ca:	701a      	strb	r2, [r3, #0]

        writeDataFromMemory();
 800f2cc:	f000 f804 	bl	800f2d8 <_ZN13CST7565Driver19writeDataFromMemoryEv>
    }
}
 800f2d0:	bf00      	nop
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	20000df0 	.word	0x20000df0

0800f2d8 <_ZN13CST7565Driver19writeDataFromMemoryEv>:

//------------------------------------------------------------------------------
void CST7565Driver::writeDataFromMemory()
//------------------------------------------------------------------------------
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
    if ((m_iSuspendLayout == 0) && (m_iSuspendedAreaY1 != -1))
 800f2de:	4b27      	ldr	r3, [pc, #156]	; (800f37c <_ZN13CST7565Driver19writeDataFromMemoryEv+0xa4>)
 800f2e0:	f993 3000 	ldrsb.w	r3, [r3]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d145      	bne.n	800f374 <_ZN13CST7565Driver19writeDataFromMemoryEv+0x9c>
 800f2e8:	4b25      	ldr	r3, [pc, #148]	; (800f380 <_ZN13CST7565Driver19writeDataFromMemoryEv+0xa8>)
 800f2ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2f2:	d03f      	beq.n	800f374 <_ZN13CST7565Driver19writeDataFromMemoryEv+0x9c>
    {
        int16_t actualY = 0;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	80fb      	strh	r3, [r7, #6]
        int8_t byteIndex1 = m_iSuspendedAreaY1 / 8;
 800f2f8:	4b21      	ldr	r3, [pc, #132]	; (800f380 <_ZN13CST7565Driver19writeDataFromMemoryEv+0xa8>)
 800f2fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	da00      	bge.n	800f304 <_ZN13CST7565Driver19writeDataFromMemoryEv+0x2c>
 800f302:	3307      	adds	r3, #7
 800f304:	10db      	asrs	r3, r3, #3
 800f306:	b21b      	sxth	r3, r3
 800f308:	717b      	strb	r3, [r7, #5]
        int8_t byteIndex2 = m_iSuspendedAreaY2 / 8;
 800f30a:	4b1e      	ldr	r3, [pc, #120]	; (800f384 <_ZN13CST7565Driver19writeDataFromMemoryEv+0xac>)
 800f30c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f310:	2b00      	cmp	r3, #0
 800f312:	da00      	bge.n	800f316 <_ZN13CST7565Driver19writeDataFromMemoryEv+0x3e>
 800f314:	3307      	adds	r3, #7
 800f316:	10db      	asrs	r3, r3, #3
 800f318:	b21b      	sxth	r3, r3
 800f31a:	713b      	strb	r3, [r7, #4]

        for (actualY = byteIndex1; (int16_t) actualY <= byteIndex2; actualY++)
 800f31c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800f320:	80fb      	strh	r3, [r7, #6]
 800f322:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800f326:	b21b      	sxth	r3, r3
 800f328:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	dc11      	bgt.n	800f354 <_ZN13CST7565Driver19writeDataFromMemoryEv+0x7c>
        {
            drawBufferLine(actualY, m_iSuspendedAreaX1, m_iSuspendedAreaX2);
 800f330:	4b15      	ldr	r3, [pc, #84]	; (800f388 <_ZN13CST7565Driver19writeDataFromMemoryEv+0xb0>)
 800f332:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f336:	4b15      	ldr	r3, [pc, #84]	; (800f38c <_ZN13CST7565Driver19writeDataFromMemoryEv+0xb4>)
 800f338:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f33c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f340:	4618      	mov	r0, r3
 800f342:	f000 f825 	bl	800f390 <_ZN13CST7565Driver14drawBufferLineEsss>
        for (actualY = byteIndex1; (int16_t) actualY <= byteIndex2; actualY++)
 800f346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	3301      	adds	r3, #1
 800f34e:	b29b      	uxth	r3, r3
 800f350:	80fb      	strh	r3, [r7, #6]
 800f352:	e7e6      	b.n	800f322 <_ZN13CST7565Driver19writeDataFromMemoryEv+0x4a>
        }

        m_iSuspendedAreaX1 = -1;
 800f354:	4b0c      	ldr	r3, [pc, #48]	; (800f388 <_ZN13CST7565Driver19writeDataFromMemoryEv+0xb0>)
 800f356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f35a:	801a      	strh	r2, [r3, #0]
        m_iSuspendedAreaY1 = -1;
 800f35c:	4b08      	ldr	r3, [pc, #32]	; (800f380 <_ZN13CST7565Driver19writeDataFromMemoryEv+0xa8>)
 800f35e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f362:	801a      	strh	r2, [r3, #0]
        m_iSuspendedAreaX2 = -1;
 800f364:	4b09      	ldr	r3, [pc, #36]	; (800f38c <_ZN13CST7565Driver19writeDataFromMemoryEv+0xb4>)
 800f366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f36a:	801a      	strh	r2, [r3, #0]
        m_iSuspendedAreaY2 = -1;
 800f36c:	4b05      	ldr	r3, [pc, #20]	; (800f384 <_ZN13CST7565Driver19writeDataFromMemoryEv+0xac>)
 800f36e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f372:	801a      	strh	r2, [r3, #0]
    }
}
 800f374:	bf00      	nop
 800f376:	3708      	adds	r7, #8
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}
 800f37c:	20000df0 	.word	0x20000df0
 800f380:	20000010 	.word	0x20000010
 800f384:	20000014 	.word	0x20000014
 800f388:	2000000e 	.word	0x2000000e
 800f38c:	20000012 	.word	0x20000012

0800f390 <_ZN13CST7565Driver14drawBufferLineEsss>:

void CST7565Driver::drawBufferLine(int16_t byteLine, int16_t fromX, int16_t toX)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b084      	sub	sp, #16
 800f394:	af00      	add	r7, sp, #0
 800f396:	4603      	mov	r3, r0
 800f398:	80fb      	strh	r3, [r7, #6]
 800f39a:	460b      	mov	r3, r1
 800f39c:	80bb      	strh	r3, [r7, #4]
 800f39e:	4613      	mov	r3, r2
 800f3a0:	807b      	strh	r3, [r7, #2]
    uint8_t rozkazy[] = {
        (uint8_t) (cmd_set_page | byteLine),
 800f3a2:	88fb      	ldrh	r3, [r7, #6]
 800f3a4:	b25b      	sxtb	r3, r3
 800f3a6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800f3aa:	b25b      	sxtb	r3, r3
 800f3ac:	b2db      	uxtb	r3, r3
        (uint8_t) (cmd_set_column_lower | (fromX & 0xf)),
        (uint8_t) (cmd_set_column_upper | ((fromX >> 4) & 0xf)),
    };
 800f3ae:	733b      	strb	r3, [r7, #12]
        (uint8_t) (cmd_set_column_lower | (fromX & 0xf)),
 800f3b0:	88bb      	ldrh	r3, [r7, #4]
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	f003 030f 	and.w	r3, r3, #15
 800f3b8:	b2db      	uxtb	r3, r3
    };
 800f3ba:	737b      	strb	r3, [r7, #13]
        (uint8_t) (cmd_set_column_upper | ((fromX >> 4) & 0xf)),
 800f3bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f3c0:	111b      	asrs	r3, r3, #4
 800f3c2:	b25b      	sxtb	r3, r3
 800f3c4:	f003 030f 	and.w	r3, r3, #15
 800f3c8:	b25b      	sxtb	r3, r3
 800f3ca:	f043 0310 	orr.w	r3, r3, #16
 800f3ce:	b25b      	sxtb	r3, r3
 800f3d0:	b2db      	uxtb	r3, r3
    };
 800f3d2:	73bb      	strb	r3, [r7, #14]

    sendCommands(rozkazy, sizeof(rozkazy));
 800f3d4:	f107 030c 	add.w	r3, r7, #12
 800f3d8:	2103      	movs	r1, #3
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f000 f858 	bl	800f490 <_ZN13CST7565Driver12sendCommandsEPht>

    sendDataValues(&bufor_ekranu[(byteLine * LCD_WIDTH) + fromX], toX - fromX + 1);
 800f3e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f3e4:	01da      	lsls	r2, r3, #7
 800f3e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f3ea:	4413      	add	r3, r2
 800f3ec:	4a07      	ldr	r2, [pc, #28]	; (800f40c <_ZN13CST7565Driver14drawBufferLineEsss+0x7c>)
 800f3ee:	1898      	adds	r0, r3, r2
 800f3f0:	887a      	ldrh	r2, [r7, #2]
 800f3f2:	88bb      	ldrh	r3, [r7, #4]
 800f3f4:	1ad3      	subs	r3, r2, r3
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	f000 f870 	bl	800f4e2 <_ZN13CST7565Driver14sendDataValuesEPht>
}
 800f402:	bf00      	nop
 800f404:	3710      	adds	r7, #16
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	200009f0 	.word	0x200009f0

0800f410 <_ZN13CST7565Driver20startSendingCommandsEv>:

void CST7565Driver::startSendingCommands()
{
 800f410:	b580      	push	{r7, lr}
 800f412:	af00      	add	r7, sp, #0
    if (halStartSendingCommand())
 800f414:	f7ff f96a 	bl	800e6ec <_ZN10CST7565HAL22halStartSendingCommandEv>
 800f418:	4603      	mov	r3, r0
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d009      	beq.n	800f432 <_ZN13CST7565Driver20startSendingCommandsEv+0x22>
    {
        m_delay->delayus(1);
 800f41e:	4b06      	ldr	r3, [pc, #24]	; (800f438 <_ZN13CST7565Driver20startSendingCommandsEv+0x28>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	330c      	adds	r3, #12
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	4a03      	ldr	r2, [pc, #12]	; (800f438 <_ZN13CST7565Driver20startSendingCommandsEv+0x28>)
 800f42a:	6812      	ldr	r2, [r2, #0]
 800f42c:	2101      	movs	r1, #1
 800f42e:	4610      	mov	r0, r2
 800f430:	4798      	blx	r3
    }
}
 800f432:	bf00      	nop
 800f434:	bd80      	pop	{r7, pc}
 800f436:	bf00      	nop
 800f438:	200009ec 	.word	0x200009ec

0800f43c <_ZN13CST7565Driver16startSendingDataEv>:

void CST7565Driver::startSendingData()
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	af00      	add	r7, sp, #0
    if (halStartSendingData())
 800f440:	f7ff f976 	bl	800e730 <_ZN10CST7565HAL19halStartSendingDataEv>
 800f444:	4603      	mov	r3, r0
 800f446:	2b00      	cmp	r3, #0
 800f448:	d009      	beq.n	800f45e <_ZN13CST7565Driver16startSendingDataEv+0x22>
    {
        m_delay->delayus(1);
 800f44a:	4b06      	ldr	r3, [pc, #24]	; (800f464 <_ZN13CST7565Driver16startSendingDataEv+0x28>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	330c      	adds	r3, #12
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	4a03      	ldr	r2, [pc, #12]	; (800f464 <_ZN13CST7565Driver16startSendingDataEv+0x28>)
 800f456:	6812      	ldr	r2, [r2, #0]
 800f458:	2101      	movs	r1, #1
 800f45a:	4610      	mov	r0, r2
 800f45c:	4798      	blx	r3
    }
}
 800f45e:	bf00      	nop
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	200009ec 	.word	0x200009ec

0800f468 <_ZN13CST7565Driver11sendCommandEh>:

void CST7565Driver::sendCommand(uint8_t command)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	4603      	mov	r3, r0
 800f470:	71fb      	strb	r3, [r7, #7]
    startSendingCommands();
 800f472:	f7ff ffcd 	bl	800f410 <_ZN13CST7565Driver20startSendingCommandsEv>
    halSelectChip();
 800f476:	f7ff f909 	bl	800e68c <_ZN10CST7565HAL13halSelectChipEv>
    halSendBytes(&command, sizeof(command));
 800f47a:	1dfb      	adds	r3, r7, #7
 800f47c:	2101      	movs	r1, #1
 800f47e:	4618      	mov	r0, r3
 800f480:	f7ff f978 	bl	800e774 <_ZN10CST7565HAL12halSendBytesEPvt>
    halDeselectChip();
 800f484:	f7ff f90e 	bl	800e6a4 <_ZN10CST7565HAL15halDeselectChipEv>
}
 800f488:	bf00      	nop
 800f48a:	3708      	adds	r7, #8
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <_ZN13CST7565Driver12sendCommandsEPht>:

void CST7565Driver::sendCommands(uint8_t* commands, uint16_t size)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	460b      	mov	r3, r1
 800f49a:	807b      	strh	r3, [r7, #2]
    startSendingCommands();
 800f49c:	f7ff ffb8 	bl	800f410 <_ZN13CST7565Driver20startSendingCommandsEv>
    halSelectChip();
 800f4a0:	f7ff f8f4 	bl	800e68c <_ZN10CST7565HAL13halSelectChipEv>
    halSendBytes(commands, size);
 800f4a4:	887b      	ldrh	r3, [r7, #2]
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f7ff f963 	bl	800e774 <_ZN10CST7565HAL12halSendBytesEPvt>
    halDeselectChip();
 800f4ae:	f7ff f8f9 	bl	800e6a4 <_ZN10CST7565HAL15halDeselectChipEv>
}
 800f4b2:	bf00      	nop
 800f4b4:	3708      	adds	r7, #8
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}

0800f4ba <_ZN13CST7565Driver13sendDataValueEh>:

void CST7565Driver::sendDataValue(uint8_t dataValue)
{
 800f4ba:	b580      	push	{r7, lr}
 800f4bc:	b082      	sub	sp, #8
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	71fb      	strb	r3, [r7, #7]
    startSendingData();
 800f4c4:	f7ff ffba 	bl	800f43c <_ZN13CST7565Driver16startSendingDataEv>
    halSelectChip();
 800f4c8:	f7ff f8e0 	bl	800e68c <_ZN10CST7565HAL13halSelectChipEv>
    halSendBytes(&dataValue, sizeof(dataValue));
 800f4cc:	1dfb      	adds	r3, r7, #7
 800f4ce:	2101      	movs	r1, #1
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7ff f94f 	bl	800e774 <_ZN10CST7565HAL12halSendBytesEPvt>
    halDeselectChip();
 800f4d6:	f7ff f8e5 	bl	800e6a4 <_ZN10CST7565HAL15halDeselectChipEv>
}
 800f4da:	bf00      	nop
 800f4dc:	3708      	adds	r7, #8
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <_ZN13CST7565Driver14sendDataValuesEPht>:

void CST7565Driver::sendDataValues(uint8_t* dataValues, uint16_t size)
{
 800f4e2:	b580      	push	{r7, lr}
 800f4e4:	b082      	sub	sp, #8
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	6078      	str	r0, [r7, #4]
 800f4ea:	460b      	mov	r3, r1
 800f4ec:	807b      	strh	r3, [r7, #2]
    startSendingData();
 800f4ee:	f7ff ffa5 	bl	800f43c <_ZN13CST7565Driver16startSendingDataEv>
    halSelectChip();
 800f4f2:	f7ff f8cb 	bl	800e68c <_ZN10CST7565HAL13halSelectChipEv>
    halSendBytes(dataValues, size);
 800f4f6:	887b      	ldrh	r3, [r7, #2]
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f7ff f93a 	bl	800e774 <_ZN10CST7565HAL12halSendBytesEPvt>
    halDeselectChip();
 800f500:	f7ff f8d0 	bl	800e6a4 <_ZN10CST7565HAL15halDeselectChipEv>
}
 800f504:	bf00      	nop
 800f506:	3708      	adds	r7, #8
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <_ZN13CST7565Driver28readSequenctialImgHeaderDataEPsS0_>:

bool CST7565Driver::readSequenctialImgHeaderData(int16_t* outWidth, int16_t* outHeight)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	6039      	str	r1, [r7, #0]
    uint8_t imgHeaderData[2];
    flashReadSequentialBytes(imgHeaderData, sizeof(imgHeaderData));
 800f516:	f107 0308 	add.w	r3, r7, #8
 800f51a:	2102      	movs	r1, #2
 800f51c:	4618      	mov	r0, r3
 800f51e:	f001 ffe3 	bl	80114e8 <_ZN17CST7565_Hal_Flash24flashReadSequentialBytesEPht>

    int16_t imgWidth = imgHeaderData[0];
 800f522:	7a3b      	ldrb	r3, [r7, #8]
 800f524:	81fb      	strh	r3, [r7, #14]
    int16_t imgHeight = imgHeaderData[1];
 800f526:	7a7b      	ldrb	r3, [r7, #9]
 800f528:	81bb      	strh	r3, [r7, #12]

    bool poprawnyNaglowek = imgWidth <= LCD_WIDTH && imgHeight <= LCD_HEIGHT;
 800f52a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f52e:	2b80      	cmp	r3, #128	; 0x80
 800f530:	dc05      	bgt.n	800f53e <_ZN13CST7565Driver28readSequenctialImgHeaderDataEPsS0_+0x32>
 800f532:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f536:	2b40      	cmp	r3, #64	; 0x40
 800f538:	dc01      	bgt.n	800f53e <_ZN13CST7565Driver28readSequenctialImgHeaderDataEPsS0_+0x32>
 800f53a:	2301      	movs	r3, #1
 800f53c:	e000      	b.n	800f540 <_ZN13CST7565Driver28readSequenctialImgHeaderDataEPsS0_+0x34>
 800f53e:	2300      	movs	r3, #0
 800f540:	72fb      	strb	r3, [r7, #11]

    *outWidth = imgWidth;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	89fa      	ldrh	r2, [r7, #14]
 800f546:	801a      	strh	r2, [r3, #0]
    *outHeight = imgHeight;
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	89ba      	ldrh	r2, [r7, #12]
 800f54c:	801a      	strh	r2, [r3, #0]

    return poprawnyNaglowek;
 800f54e:	7afb      	ldrb	r3, [r7, #11]
}
 800f550:	4618      	mov	r0, r3
 800f552:	3710      	adds	r7, #16
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}

0800f558 <_ZN13CST7565Driver10getImgDataEtt>:

uint8_t CST7565Driver::getImgData(uint16_t imgAddress, uint16_t offset)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b084      	sub	sp, #16
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	4603      	mov	r3, r0
 800f560:	460a      	mov	r2, r1
 800f562:	80fb      	strh	r3, [r7, #6]
 800f564:	4613      	mov	r3, r2
 800f566:	80bb      	strh	r3, [r7, #4]
    uint8_t outData;
//    flashStartReadSequentialBytes(imgAddress + offset + 2);
    flashReadSequentialBytes(&outData, sizeof(outData));
 800f568:	f107 030f 	add.w	r3, r7, #15
 800f56c:	2101      	movs	r1, #1
 800f56e:	4618      	mov	r0, r3
 800f570:	f001 ffba 	bl	80114e8 <_ZN17CST7565_Hal_Flash24flashReadSequentialBytesEPht>
//    flashEndReadSequentialBytes();
    return outData;
 800f574:	7bfb      	ldrb	r3, [r7, #15]
}
 800f576:	4618      	mov	r0, r3
 800f578:	3710      	adds	r7, #16
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}

0800f57e <_ZN13CST7565Driver16getImgByteHeightEs>:

uint8_t CST7565Driver::getImgByteHeight(int16_t imgHeight)
{
 800f57e:	b480      	push	{r7}
 800f580:	b083      	sub	sp, #12
 800f582:	af00      	add	r7, sp, #0
 800f584:	4603      	mov	r3, r0
 800f586:	80fb      	strh	r3, [r7, #6]
    if (imgHeight < 8)
 800f588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f58c:	2b07      	cmp	r3, #7
 800f58e:	dc01      	bgt.n	800f594 <_ZN13CST7565Driver16getImgByteHeightEs+0x16>
    {
        return 1;
 800f590:	2301      	movs	r3, #1
 800f592:	e018      	b.n	800f5c6 <_ZN13CST7565Driver16getImgByteHeightEs+0x48>
    }
    else if (imgHeight % 8)
 800f594:	88fb      	ldrh	r3, [r7, #6]
 800f596:	f003 0307 	and.w	r3, r3, #7
 800f59a:	b29b      	uxth	r3, r3
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d00a      	beq.n	800f5b6 <_ZN13CST7565Driver16getImgByteHeightEs+0x38>
    {
        return (imgHeight / 8) + 1;
 800f5a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	da00      	bge.n	800f5aa <_ZN13CST7565Driver16getImgByteHeightEs+0x2c>
 800f5a8:	3307      	adds	r3, #7
 800f5aa:	10db      	asrs	r3, r3, #3
 800f5ac:	b21b      	sxth	r3, r3
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	e007      	b.n	800f5c6 <_ZN13CST7565Driver16getImgByteHeightEs+0x48>
    }
    else
    {
        return imgHeight / 8;
 800f5b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	da00      	bge.n	800f5c0 <_ZN13CST7565Driver16getImgByteHeightEs+0x42>
 800f5be:	3307      	adds	r3, #7
 800f5c0:	10db      	asrs	r3, r3, #3
 800f5c2:	b21b      	sxth	r3, r3
 800f5c4:	b2db      	uxtb	r3, r3
    }
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	370c      	adds	r7, #12
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bc80      	pop	{r7}
 800f5ce:	4770      	bx	lr

0800f5d0 <_ZN13CST7565Driver22getOffsetImgByteHeightEsh>:

uint8_t CST7565Driver::getOffsetImgByteHeight(int16_t imgHeight, uint8_t yoffset)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b085      	sub	sp, #20
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	460a      	mov	r2, r1
 800f5da:	80fb      	strh	r3, [r7, #6]
 800f5dc:	4613      	mov	r3, r2
 800f5de:	717b      	strb	r3, [r7, #5]
    uint8_t hpx = imgHeight + (yoffset % 8);
 800f5e0:	88fb      	ldrh	r3, [r7, #6]
 800f5e2:	b2da      	uxtb	r2, r3
 800f5e4:	797b      	ldrb	r3, [r7, #5]
 800f5e6:	f003 0307 	and.w	r3, r3, #7
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	4413      	add	r3, r2
 800f5ee:	73fb      	strb	r3, [r7, #15]

    if (hpx < 8)
 800f5f0:	7bfb      	ldrb	r3, [r7, #15]
 800f5f2:	2b07      	cmp	r3, #7
 800f5f4:	dc01      	bgt.n	800f5fa <_ZN13CST7565Driver22getOffsetImgByteHeightEsh+0x2a>
    {
        return 1;
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	e00d      	b.n	800f616 <_ZN13CST7565Driver22getOffsetImgByteHeightEsh+0x46>
    }
    else if (hpx % 8)
 800f5fa:	7bfb      	ldrb	r3, [r7, #15]
 800f5fc:	f003 0307 	and.w	r3, r3, #7
 800f600:	2b00      	cmp	r3, #0
 800f602:	d005      	beq.n	800f610 <_ZN13CST7565Driver22getOffsetImgByteHeightEsh+0x40>
    {
        return (uint8_t) (hpx / 8) + 1;
 800f604:	7bfb      	ldrb	r3, [r7, #15]
 800f606:	08db      	lsrs	r3, r3, #3
 800f608:	b2db      	uxtb	r3, r3
 800f60a:	3301      	adds	r3, #1
 800f60c:	b2db      	uxtb	r3, r3
 800f60e:	e002      	b.n	800f616 <_ZN13CST7565Driver22getOffsetImgByteHeightEsh+0x46>
    }
    else
    {
        return hpx / 8;
 800f610:	7bfb      	ldrb	r3, [r7, #15]
 800f612:	08db      	lsrs	r3, r3, #3
 800f614:	b2db      	uxtb	r3, r3
    }

}
 800f616:	4618      	mov	r0, r3
 800f618:	3714      	adds	r7, #20
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bc80      	pop	{r7}
 800f61e:	4770      	bx	lr

0800f620 <_ZN13CST7565Driver14suspendDrawingEv>:
        static void reinit();
        static void clear();

        static void ustawKontrast(uint8_t value);

        static void suspendDrawing()
 800f620:	b480      	push	{r7}
 800f622:	af00      	add	r7, sp, #0
        {
            if (m_iSuspendLayout < 127)
 800f624:	4b08      	ldr	r3, [pc, #32]	; (800f648 <_ZN13CST7565Driver14suspendDrawingEv+0x28>)
 800f626:	f993 3000 	ldrsb.w	r3, [r3]
 800f62a:	2b7f      	cmp	r3, #127	; 0x7f
 800f62c:	d008      	beq.n	800f640 <_ZN13CST7565Driver14suspendDrawingEv+0x20>
                ++m_iSuspendLayout;
 800f62e:	4b06      	ldr	r3, [pc, #24]	; (800f648 <_ZN13CST7565Driver14suspendDrawingEv+0x28>)
 800f630:	f993 3000 	ldrsb.w	r3, [r3]
 800f634:	b2db      	uxtb	r3, r3
 800f636:	3301      	adds	r3, #1
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	b25a      	sxtb	r2, r3
 800f63c:	4b02      	ldr	r3, [pc, #8]	; (800f648 <_ZN13CST7565Driver14suspendDrawingEv+0x28>)
 800f63e:	701a      	strb	r2, [r3, #0]
        }
 800f640:	bf00      	nop
 800f642:	46bd      	mov	sp, r7
 800f644:	bc80      	pop	{r7}
 800f646:	4770      	bx	lr
 800f648:	20000df0 	.word	0x20000df0

0800f64c <_ZN7CScreen8onResumeEv>:

#include "CScreen.h"
#include "CDateTimeTextHelper.h"

void CScreen::onResume()
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
    CContext::registerOnKeyListener(this);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	3304      	adds	r3, #4
 800f658:	4618      	mov	r0, r3
 800f65a:	f7fc f86f 	bl	800b73c <_ZN8CContext21registerOnKeyListenerEP14IOnKeyListener>
    m_timer.start(60);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	3308      	adds	r3, #8
 800f662:	213c      	movs	r1, #60	; 0x3c
 800f664:	4618      	mov	r0, r3
 800f666:	f000 fed8 	bl	801041a <_ZN6CTimer5startEm>
}
 800f66a:	bf00      	nop
 800f66c:	3708      	adds	r7, #8
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}

0800f672 <_ZN7CScreen6updateEv>:

void CScreen::update()
{
 800f672:	b590      	push	{r4, r7, lr}
 800f674:	b085      	sub	sp, #20
 800f676:	af00      	add	r7, sp, #0
 800f678:	6078      	str	r0, [r7, #4]
    int32_t actionsCounter = CGUI::getInstance().getActionsCounter();
 800f67a:	f7fc fe53 	bl	800c324 <_ZN4CGUI11getInstanceEv>
 800f67e:	4603      	mov	r3, r0
 800f680:	4618      	mov	r0, r3
 800f682:	f7fc ffa6 	bl	800c5d2 <_ZN4CGUI17getActionsCounterEv>
 800f686:	60f8      	str	r0, [r7, #12]
    if (m_actionsCounter != actionsCounter)
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	695a      	ldr	r2, [r3, #20]
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	429a      	cmp	r2, r3
 800f690:	d00f      	beq.n	800f6b2 <_ZN7CScreen6updateEv+0x40>
    {
        m_actionsCounter = actionsCounter;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	615a      	str	r2, [r3, #20]
        m_timer.start(m_timer.getOverallTime());
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f103 0408 	add.w	r4, r3, #8
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	3308      	adds	r3, #8
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f000 ff16 	bl	80104d4 <_ZN6CTimer14getOverallTimeEv>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	f000 feb4 	bl	801041a <_ZN6CTimer5startEm>
    }
    if (m_timer.isElapsed())
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	3308      	adds	r3, #8
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f000 ff4c 	bl	8010554 <_ZN6CTimer9isElapsedEv>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d003      	beq.n	800f6ca <_ZN7CScreen6updateEv+0x58>
    {
        finish();
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7fb fa0c 	bl	800aae2 <_ZN7AScreen6finishEv>
    }
}
 800f6ca:	bf00      	nop
 800f6cc:	3714      	adds	r7, #20
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd90      	pop	{r4, r7, pc}

0800f6d2 <_ZN7CScreen7onPauseEv>:

void CScreen::onPause()
{
 800f6d2:	b580      	push	{r7, lr}
 800f6d4:	b082      	sub	sp, #8
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
    CContext::unregisterOnKeyListener(this);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	3304      	adds	r3, #4
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7fc f858 	bl	800b794 <_ZN8CContext23unregisterOnKeyListenerEP14IOnKeyListener>
}
 800f6e4:	bf00      	nop
 800f6e6:	3708      	adds	r7, #8
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <_ZN7CScreen10drawHeaderEmb>:

void CScreen::drawHeader(uint32_t title, bool thin)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b08c      	sub	sp, #48	; 0x30
 800f6f0:	af08      	add	r7, sp, #32
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	460b      	mov	r3, r1
 800f6f6:	70fb      	strb	r3, [r7, #3]
    CST7565Driver::suspendDrawing();
 800f6f8:	f7ff ff92 	bl	800f620 <_ZN13CST7565Driver14suspendDrawingEv>
    CST7565Driver::fill(0, 9, 127, 9, CST7565Driver::FILL_OPERATION_ERASE);
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	2309      	movs	r3, #9
 800f702:	227f      	movs	r2, #127	; 0x7f
 800f704:	2109      	movs	r1, #9
 800f706:	2000      	movs	r0, #0
 800f708:	f7ff f916 	bl	800e938 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE>
    if(!thin)
 800f70c:	78fb      	ldrb	r3, [r7, #3]
 800f70e:	f083 0301 	eor.w	r3, r3, #1
 800f712:	b2db      	uxtb	r3, r3
 800f714:	2b00      	cmp	r3, #0
 800f716:	d007      	beq.n	800f728 <_ZN7CScreen10drawHeaderEmb+0x3c>
    {
        CST7565Driver::fill(0, 10, 127, 10, CST7565Driver::FILL_OPERATION_FILL);
 800f718:	2300      	movs	r3, #0
 800f71a:	9300      	str	r3, [sp, #0]
 800f71c:	230a      	movs	r3, #10
 800f71e:	227f      	movs	r2, #127	; 0x7f
 800f720:	210a      	movs	r1, #10
 800f722:	2000      	movs	r0, #0
 800f724:	f7ff f908 	bl	800e938 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE>
    }
    drawRoundedRectangle(0, 0, 127, 8);
 800f728:	2300      	movs	r3, #0
 800f72a:	9300      	str	r3, [sp, #0]
 800f72c:	2308      	movs	r3, #8
 800f72e:	227f      	movs	r2, #127	; 0x7f
 800f730:	2100      	movs	r1, #0
 800f732:	2000      	movs	r0, #0
 800f734:	f000 f821 	bl	800f77a <_ZN7CScreen20drawRoundedRectangleEssssN13CST7565Driver14TFillOperationE>
    CGraphicFont::drawText(
 800f738:	2300      	movs	r3, #0
 800f73a:	60fb      	str	r3, [r7, #12]
 800f73c:	2302      	movs	r3, #2
 800f73e:	733b      	strb	r3, [r7, #12]
            0,
            CFont::FONT_2,
            CGraphicFont::PR_UPPER,
            CGraphicFont::AT_LEFT,
            CGraphicFont::MULTILINE_OFF,
            {CST7565Driver::BIT_OPERATION_XOR});
 800f740:	2300      	movs	r3, #0
 800f742:	9307      	str	r3, [sp, #28]
 800f744:	f107 030c 	add.w	r3, r7, #12
 800f748:	9306      	str	r3, [sp, #24]
 800f74a:	2300      	movs	r3, #0
 800f74c:	9305      	str	r3, [sp, #20]
 800f74e:	2300      	movs	r3, #0
 800f750:	9304      	str	r3, [sp, #16]
 800f752:	2301      	movs	r3, #1
 800f754:	9303      	str	r3, [sp, #12]
 800f756:	2302      	movs	r3, #2
 800f758:	9302      	str	r3, [sp, #8]
 800f75a:	2300      	movs	r3, #0
 800f75c:	9301      	str	r3, [sp, #4]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	9300      	str	r3, [sp, #0]
 800f762:	2309      	movs	r3, #9
 800f764:	227e      	movs	r2, #126	; 0x7e
 800f766:	2100      	movs	r1, #0
 800f768:	2002      	movs	r0, #2
 800f76a:	f7fd f835 	bl	800c7d8 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb>
    CST7565Driver::resumeDrawing();
 800f76e:	f7ff fd9d 	bl	800f2ac <_ZN13CST7565Driver13resumeDrawingEv>
}
 800f772:	bf00      	nop
 800f774:	3710      	adds	r7, #16
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}

0800f77a <_ZN7CScreen20drawRoundedRectangleEssssN13CST7565Driver14TFillOperationE>:
    CST7565Driver::resumeDrawing();
}

void CScreen::drawRoundedRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2,
        CST7565Driver::TFillOperation fillOperation)
{
 800f77a:	b590      	push	{r4, r7, lr}
 800f77c:	b085      	sub	sp, #20
 800f77e:	af02      	add	r7, sp, #8
 800f780:	4604      	mov	r4, r0
 800f782:	4608      	mov	r0, r1
 800f784:	4611      	mov	r1, r2
 800f786:	461a      	mov	r2, r3
 800f788:	4623      	mov	r3, r4
 800f78a:	80fb      	strh	r3, [r7, #6]
 800f78c:	4603      	mov	r3, r0
 800f78e:	80bb      	strh	r3, [r7, #4]
 800f790:	460b      	mov	r3, r1
 800f792:	807b      	strh	r3, [r7, #2]
 800f794:	4613      	mov	r3, r2
 800f796:	803b      	strh	r3, [r7, #0]
    CST7565Driver::suspendDrawing();
 800f798:	f7ff ff42 	bl	800f620 <_ZN13CST7565Driver14suspendDrawingEv>
    CST7565Driver::fill(x1, y1 + 1, x1, y2 - 1, fillOperation);
 800f79c:	88bb      	ldrh	r3, [r7, #4]
 800f79e:	3301      	adds	r3, #1
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	b219      	sxth	r1, r3
 800f7a4:	883b      	ldrh	r3, [r7, #0]
 800f7a6:	3b01      	subs	r3, #1
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	b21c      	sxth	r4, r3
 800f7ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f7b0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800f7b4:	7e3b      	ldrb	r3, [r7, #24]
 800f7b6:	9300      	str	r3, [sp, #0]
 800f7b8:	4623      	mov	r3, r4
 800f7ba:	f7ff f8bd 	bl	800e938 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE>
    CST7565Driver::fill(x1 + 1, y1, x2 - 1, y2, fillOperation);
 800f7be:	88fb      	ldrh	r3, [r7, #6]
 800f7c0:	3301      	adds	r3, #1
 800f7c2:	b29b      	uxth	r3, r3
 800f7c4:	b218      	sxth	r0, r3
 800f7c6:	887b      	ldrh	r3, [r7, #2]
 800f7c8:	3b01      	subs	r3, #1
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	b21a      	sxth	r2, r3
 800f7ce:	f9b7 4000 	ldrsh.w	r4, [r7]
 800f7d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800f7d6:	7e3b      	ldrb	r3, [r7, #24]
 800f7d8:	9300      	str	r3, [sp, #0]
 800f7da:	4623      	mov	r3, r4
 800f7dc:	f7ff f8ac 	bl	800e938 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE>
    CST7565Driver::fill(x2, y1 + 1, x2, y2 - 1, fillOperation);
 800f7e0:	88bb      	ldrh	r3, [r7, #4]
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	b29b      	uxth	r3, r3
 800f7e6:	b219      	sxth	r1, r3
 800f7e8:	883b      	ldrh	r3, [r7, #0]
 800f7ea:	3b01      	subs	r3, #1
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	b21c      	sxth	r4, r3
 800f7f0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f7f4:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800f7f8:	7e3b      	ldrb	r3, [r7, #24]
 800f7fa:	9300      	str	r3, [sp, #0]
 800f7fc:	4623      	mov	r3, r4
 800f7fe:	f7ff f89b 	bl	800e938 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE>
    CST7565Driver::resumeDrawing();
 800f802:	f7ff fd53 	bl	800f2ac <_ZN13CST7565Driver13resumeDrawingEv>
}
 800f806:	bf00      	nop
 800f808:	370c      	adds	r7, #12
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd90      	pop	{r4, r7, pc}
	...

0800f810 <__NVIC_SystemReset>:
{
 800f810:	b480      	push	{r7}
 800f812:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800f814:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800f818:	4905      	ldr	r1, [pc, #20]	; (800f830 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800f81a:	4b05      	ldr	r3, [pc, #20]	; (800f830 <__NVIC_SystemReset+0x20>)
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f822:	4b04      	ldr	r3, [pc, #16]	; (800f834 <__NVIC_SystemReset+0x24>)
 800f824:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800f826:	60cb      	str	r3, [r1, #12]
 800f828:	f3bf 8f4f 	dsb	sy
    __NOP();
 800f82c:	bf00      	nop
 800f82e:	e7fd      	b.n	800f82c <__NVIC_SystemReset+0x1c>
 800f830:	e000ed00 	.word	0xe000ed00
 800f834:	05fa0004 	.word	0x05fa0004

0800f838 <_ZN15IDelayFunctionsD1Ev>:
 */
class IDelayFunctions
{
    public:

        virtual ~IDelayFunctions() {}
 800f838:	b480      	push	{r7}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	4a04      	ldr	r2, [pc, #16]	; (800f854 <_ZN15IDelayFunctionsD1Ev+0x1c>)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	601a      	str	r2, [r3, #0]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4618      	mov	r0, r3
 800f84a:	370c      	adds	r7, #12
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bc80      	pop	{r7}
 800f850:	4770      	bx	lr
 800f852:	bf00      	nop
 800f854:	0801cc24 	.word	0x0801cc24

0800f858 <_ZN15IDelayFunctionsD0Ev>:
 800f858:	b580      	push	{r7, lr}
 800f85a:	b082      	sub	sp, #8
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f7ff ffe9 	bl	800f838 <_ZN15IDelayFunctionsD1Ev>
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f005 feb8 	bl	80155dc <_ZdlPv>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	4618      	mov	r0, r3
 800f870:	3708      	adds	r7, #8
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}

0800f876 <_ZN7CSystem15CDelayFunctions7delaymsEt>:

IInterruptUpdatable* CSystem::m_interruptUpdatable[UPDATABLES_COUNT] = {NULL};
IInterruptUpdatable* CSystem::m_fastInterruptUpdatable[FAST_UPDATABLES_COUNT] = {NULL};

void CSystem::CDelayFunctions::delayms(uint16_t ms)
{
 800f876:	b580      	push	{r7, lr}
 800f878:	b082      	sub	sp, #8
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	6078      	str	r0, [r7, #4]
 800f87e:	460b      	mov	r3, r1
 800f880:	807b      	strh	r3, [r7, #2]
    CSystem::delayMs(ms);
 800f882:	887b      	ldrh	r3, [r7, #2]
 800f884:	4618      	mov	r0, r3
 800f886:	f000 f98f 	bl	800fba8 <_ZN7CSystem7delayMsEm>
}
 800f88a:	bf00      	nop
 800f88c:	3708      	adds	r7, #8
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}

0800f892 <_ZN7CSystem15CDelayFunctions7delayusEt>:

void CSystem::CDelayFunctions::delayus(uint16_t ns)
{
 800f892:	b580      	push	{r7, lr}
 800f894:	b082      	sub	sp, #8
 800f896:	af00      	add	r7, sp, #0
 800f898:	6078      	str	r0, [r7, #4]
 800f89a:	460b      	mov	r3, r1
 800f89c:	807b      	strh	r3, [r7, #2]
    CSystem::delayUs(ns);
 800f89e:	887b      	ldrh	r3, [r7, #2]
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f000 f9a6 	bl	800fbf2 <_ZN7CSystem7delayUsEm>
}
 800f8a6:	bf00      	nop
 800f8a8:	3708      	adds	r7, #8
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}
	...

0800f8b0 <_ZN7CSystem15initSystemClockENS_14TOscilatorTypeE>:

void CSystem::initSystemClock(TOscilatorType oscilatorType)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b08a      	sub	sp, #40	; 0x28
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	71fb      	strb	r3, [r7, #7]
    m_oscilatorType = oscilatorType;
 800f8ba:	4a41      	ldr	r2, [pc, #260]	; (800f9c0 <_ZN7CSystem15initSystemClockENS_14TOscilatorTypeE+0x110>)
 800f8bc:	79fb      	ldrb	r3, [r7, #7]
 800f8be:	7013      	strb	r3, [r2, #0]

    HAL_Init();
 800f8c0:	f7f8 fdb0 	bl	8008424 <HAL_Init>

    __HAL_RCC_AFIO_CLK_ENABLE();
 800f8c4:	4a3f      	ldr	r2, [pc, #252]	; (800f9c4 <_ZN7CSystem15initSystemClockENS_14TOscilatorTypeE+0x114>)
 800f8c6:	4b3f      	ldr	r3, [pc, #252]	; (800f9c4 <_ZN7CSystem15initSystemClockENS_14TOscilatorTypeE+0x114>)
 800f8c8:	699b      	ldr	r3, [r3, #24]
 800f8ca:	f043 0301 	orr.w	r3, r3, #1
 800f8ce:	6193      	str	r3, [r2, #24]
 800f8d0:	4b3c      	ldr	r3, [pc, #240]	; (800f9c4 <_ZN7CSystem15initSystemClockENS_14TOscilatorTypeE+0x114>)
 800f8d2:	699b      	ldr	r3, [r3, #24]
 800f8d4:	f003 0301 	and.w	r3, r3, #1
 800f8d8:	60fb      	str	r3, [r7, #12]
 800f8da:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f8dc:	2003      	movs	r0, #3
 800f8de:	f7f8 fdd7 	bl	8008490 <HAL_NVIC_SetPriorityGrouping>
    HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	2100      	movs	r1, #0
 800f8e6:	f06f 000b 	mvn.w	r0, #11
 800f8ea:	f7f8 fde3 	bl	80084b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	2100      	movs	r1, #0
 800f8f2:	f06f 000a 	mvn.w	r0, #10
 800f8f6:	f7f8 fddd 	bl	80084b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	2100      	movs	r1, #0
 800f8fe:	f06f 0009 	mvn.w	r0, #9
 800f902:	f7f8 fdd7 	bl	80084b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800f906:	2200      	movs	r2, #0
 800f908:	2100      	movs	r1, #0
 800f90a:	f06f 0004 	mvn.w	r0, #4
 800f90e:	f7f8 fdd1 	bl	80084b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800f912:	2200      	movs	r2, #0
 800f914:	2100      	movs	r1, #0
 800f916:	f06f 0003 	mvn.w	r0, #3
 800f91a:	f7f8 fdcb 	bl	80084b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800f91e:	2200      	movs	r2, #0
 800f920:	2100      	movs	r1, #0
 800f922:	f06f 0001 	mvn.w	r0, #1
 800f926:	f7f8 fdc5 	bl	80084b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800f92a:	2200      	movs	r2, #0
 800f92c:	2100      	movs	r1, #0
 800f92e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f932:	f7f8 fdbf 	bl	80084b4 <HAL_NVIC_SetPriority>
    __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800f936:	4b24      	ldr	r3, [pc, #144]	; (800f9c8 <_ZN7CSystem15initSystemClockENS_14TOscilatorTypeE+0x118>)
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	627b      	str	r3, [r7, #36]	; 0x24
 800f93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800f942:	627b      	str	r3, [r7, #36]	; 0x24
 800f944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f946:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f94a:	627b      	str	r3, [r7, #36]	; 0x24
 800f94c:	4a1e      	ldr	r2, [pc, #120]	; (800f9c8 <_ZN7CSystem15initSystemClockENS_14TOscilatorTypeE+0x118>)
 800f94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f950:	6053      	str	r3, [r2, #4]

    switch (oscilatorType)
 800f952:	79fb      	ldrb	r3, [r7, #7]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d002      	beq.n	800f95e <_ZN7CSystem15initSystemClockENS_14TOscilatorTypeE+0xae>
 800f958:	2b01      	cmp	r3, #1
 800f95a:	d003      	beq.n	800f964 <_ZN7CSystem15initSystemClockENS_14TOscilatorTypeE+0xb4>
 800f95c:	e005      	b.n	800f96a <_ZN7CSystem15initSystemClockENS_14TOscilatorTypeE+0xba>
    {
        case OT_OSCILATOR_EXTERNAL:
            initSystemClockOscExternal();
 800f95e:	f000 f84f 	bl	800fa00 <_ZN7CSystem26initSystemClockOscExternalEv>
        break;
 800f962:	e002      	b.n	800f96a <_ZN7CSystem15initSystemClockENS_14TOscilatorTypeE+0xba>

        case OT_OSCILATOR_INTERNAL:
            initSystemClockOscInternal();
 800f964:	f000 f86e 	bl	800fa44 <_ZN7CSystem26initSystemClockOscInternalEv>
        break;
 800f968:	bf00      	nop
    }

    RCC_ClkInitTypeDef RCC_ClkInitStruct;

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f96a:	230f      	movs	r3, #15
 800f96c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f96e:	2302      	movs	r3, #2
 800f970:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f972:	2300      	movs	r3, #0
 800f974:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800f976:	2300      	movs	r3, #0
 800f978:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800f97a:	2300      	movs	r3, #0
 800f97c:	623b      	str	r3, [r7, #32]

//	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
//	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
//	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800f97e:	f107 0310 	add.w	r3, r7, #16
 800f982:	2102      	movs	r1, #2
 800f984:	4618      	mov	r0, r3
 800f986:	f7f9 ffad 	bl	80098e4 <HAL_RCC_ClockConfig>

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800f98a:	f7fa f849 	bl	8009a20 <HAL_RCC_GetHCLKFreq>
 800f98e:	4602      	mov	r2, r0
 800f990:	4b0e      	ldr	r3, [pc, #56]	; (800f9cc <_ZN7CSystem15initSystemClockENS_14TOscilatorTypeE+0x11c>)
 800f992:	fba3 2302 	umull	r2, r3, r3, r2
 800f996:	099b      	lsrs	r3, r3, #6
 800f998:	4618      	mov	r0, r3
 800f99a:	f7f8 fdcd 	bl	8008538 <HAL_SYSTICK_Config>

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800f99e:	2004      	movs	r0, #4
 800f9a0:	f7f8 fdf0 	bl	8008584 <HAL_SYSTICK_CLKSourceConfig>

	__HAL_RCC_PLLI2S_ENABLE();
 800f9a4:	4b0a      	ldr	r3, [pc, #40]	; (800f9d0 <_ZN7CSystem15initSystemClockENS_14TOscilatorTypeE+0x120>)
 800f9a6:	2201      	movs	r2, #1
 800f9a8:	601a      	str	r2, [r3, #0]

	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	2100      	movs	r1, #0
 800f9ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9b2:	f7f8 fd7f 	bl	80084b4 <HAL_NVIC_SetPriority>
}
 800f9b6:	bf00      	nop
 800f9b8:	3728      	adds	r7, #40	; 0x28
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	20000e4c 	.word	0x20000e4c
 800f9c4:	40021000 	.word	0x40021000
 800f9c8:	40010000 	.word	0x40010000
 800f9cc:	10624dd3 	.word	0x10624dd3
 800f9d0:	42420070 	.word	0x42420070

0800f9d4 <_ZN7CSystem18getSystemClockFreqEv>:

uint32_t CSystem::getSystemClockFreq()
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	af00      	add	r7, sp, #0
    static const uint32_t m_oscilatorExternalPLLMul = 9;

    static const uint32_t m_oscilatorInternalFreq = 8000000;
    static const uint32_t m_oscilatorInternalPLLMul = 9;

    switch (m_oscilatorType)
 800f9d8:	4b07      	ldr	r3, [pc, #28]	; (800f9f8 <_ZN7CSystem18getSystemClockFreqEv+0x24>)
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d002      	beq.n	800f9e6 <_ZN7CSystem18getSystemClockFreqEv+0x12>
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d002      	beq.n	800f9ea <_ZN7CSystem18getSystemClockFreqEv+0x16>
 800f9e4:	e003      	b.n	800f9ee <_ZN7CSystem18getSystemClockFreqEv+0x1a>
    {
        case OT_OSCILATOR_EXTERNAL:
            return m_oscilatorExternalFreq * m_oscilatorExternalPLLMul;
 800f9e6:	4b05      	ldr	r3, [pc, #20]	; (800f9fc <_ZN7CSystem18getSystemClockFreqEv+0x28>)
 800f9e8:	e002      	b.n	800f9f0 <_ZN7CSystem18getSystemClockFreqEv+0x1c>

        case OT_OSCILATOR_INTERNAL:
            return m_oscilatorInternalFreq * m_oscilatorInternalPLLMul;
 800f9ea:	4b04      	ldr	r3, [pc, #16]	; (800f9fc <_ZN7CSystem18getSystemClockFreqEv+0x28>)
 800f9ec:	e000      	b.n	800f9f0 <_ZN7CSystem18getSystemClockFreqEv+0x1c>

        default:
            return 0;
 800f9ee:	2300      	movs	r3, #0
    }
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bc80      	pop	{r7}
 800f9f6:	4770      	bx	lr
 800f9f8:	20000e4c 	.word	0x20000e4c
 800f9fc:	044aa200 	.word	0x044aa200

0800fa00 <_ZN7CSystem26initSystemClockOscExternalEv>:

bool CSystem::initSystemClockOscExternal()
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b08e      	sub	sp, #56	; 0x38
 800fa04:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800fa06:	2302      	movs	r3, #2
 800fa08:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800fa0e:	2310      	movs	r3, #16
 800fa10:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800fa12:	2300      	movs	r3, #0
 800fa14:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800fa16:	2302      	movs	r3, #2
 800fa18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800fa1e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800fa22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800fa24:	2300      	movs	r3, #0
 800fa26:	62fb      	str	r3, [r7, #44]	; 0x2c
//	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
//	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
//	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
//	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;

    return HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK;
 800fa28:	463b      	mov	r3, r7
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7f9 fcf8 	bl	8009420 <HAL_RCC_OscConfig>
 800fa30:	4603      	mov	r3, r0
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	bf0c      	ite	eq
 800fa36:	2301      	moveq	r3, #1
 800fa38:	2300      	movne	r3, #0
 800fa3a:	b2db      	uxtb	r3, r3
}
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3738      	adds	r7, #56	; 0x38
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}

0800fa44 <_ZN7CSystem26initSystemClockOscInternalEv>:

bool CSystem::initSystemClockOscInternal()
{
 800fa44:	b480      	push	{r7}
 800fa46:	af00      	add	r7, sp, #0

    return false;
 800fa48:	2300      	movs	r3, #0

}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bc80      	pop	{r7}
 800fa50:	4770      	bx	lr
	...

0800fa54 <_ZN7CSystem21initPeripherialsClockEv>:

void CSystem::initPeripherialsClock()
{
 800fa54:	b480      	push	{r7}
 800fa56:	b087      	sub	sp, #28
 800fa58:	af00      	add	r7, sp, #0
	__GPIOA_CLK_ENABLE();
 800fa5a:	4a20      	ldr	r2, [pc, #128]	; (800fadc <_ZN7CSystem21initPeripherialsClockEv+0x88>)
 800fa5c:	4b1f      	ldr	r3, [pc, #124]	; (800fadc <_ZN7CSystem21initPeripherialsClockEv+0x88>)
 800fa5e:	699b      	ldr	r3, [r3, #24]
 800fa60:	f043 0304 	orr.w	r3, r3, #4
 800fa64:	6193      	str	r3, [r2, #24]
 800fa66:	4b1d      	ldr	r3, [pc, #116]	; (800fadc <_ZN7CSystem21initPeripherialsClockEv+0x88>)
 800fa68:	699b      	ldr	r3, [r3, #24]
 800fa6a:	f003 0304 	and.w	r3, r3, #4
 800fa6e:	617b      	str	r3, [r7, #20]
 800fa70:	697b      	ldr	r3, [r7, #20]
	__GPIOB_CLK_ENABLE();
 800fa72:	4a1a      	ldr	r2, [pc, #104]	; (800fadc <_ZN7CSystem21initPeripherialsClockEv+0x88>)
 800fa74:	4b19      	ldr	r3, [pc, #100]	; (800fadc <_ZN7CSystem21initPeripherialsClockEv+0x88>)
 800fa76:	699b      	ldr	r3, [r3, #24]
 800fa78:	f043 0308 	orr.w	r3, r3, #8
 800fa7c:	6193      	str	r3, [r2, #24]
 800fa7e:	4b17      	ldr	r3, [pc, #92]	; (800fadc <_ZN7CSystem21initPeripherialsClockEv+0x88>)
 800fa80:	699b      	ldr	r3, [r3, #24]
 800fa82:	f003 0308 	and.w	r3, r3, #8
 800fa86:	613b      	str	r3, [r7, #16]
 800fa88:	693b      	ldr	r3, [r7, #16]
	__GPIOC_CLK_ENABLE();
 800fa8a:	4a14      	ldr	r2, [pc, #80]	; (800fadc <_ZN7CSystem21initPeripherialsClockEv+0x88>)
 800fa8c:	4b13      	ldr	r3, [pc, #76]	; (800fadc <_ZN7CSystem21initPeripherialsClockEv+0x88>)
 800fa8e:	699b      	ldr	r3, [r3, #24]
 800fa90:	f043 0310 	orr.w	r3, r3, #16
 800fa94:	6193      	str	r3, [r2, #24]
 800fa96:	4b11      	ldr	r3, [pc, #68]	; (800fadc <_ZN7CSystem21initPeripherialsClockEv+0x88>)
 800fa98:	699b      	ldr	r3, [r3, #24]
 800fa9a:	f003 0310 	and.w	r3, r3, #16
 800fa9e:	60fb      	str	r3, [r7, #12]
 800faa0:	68fb      	ldr	r3, [r7, #12]
	__GPIOD_CLK_ENABLE();
 800faa2:	4a0e      	ldr	r2, [pc, #56]	; (800fadc <_ZN7CSystem21initPeripherialsClockEv+0x88>)
 800faa4:	4b0d      	ldr	r3, [pc, #52]	; (800fadc <_ZN7CSystem21initPeripherialsClockEv+0x88>)
 800faa6:	699b      	ldr	r3, [r3, #24]
 800faa8:	f043 0320 	orr.w	r3, r3, #32
 800faac:	6193      	str	r3, [r2, #24]
 800faae:	4b0b      	ldr	r3, [pc, #44]	; (800fadc <_ZN7CSystem21initPeripherialsClockEv+0x88>)
 800fab0:	699b      	ldr	r3, [r3, #24]
 800fab2:	f003 0320 	and.w	r3, r3, #32
 800fab6:	60bb      	str	r3, [r7, #8]
 800fab8:	68bb      	ldr	r3, [r7, #8]
	__GPIOE_CLK_ENABLE();
 800faba:	4a08      	ldr	r2, [pc, #32]	; (800fadc <_ZN7CSystem21initPeripherialsClockEv+0x88>)
 800fabc:	4b07      	ldr	r3, [pc, #28]	; (800fadc <_ZN7CSystem21initPeripherialsClockEv+0x88>)
 800fabe:	699b      	ldr	r3, [r3, #24]
 800fac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fac4:	6193      	str	r3, [r2, #24]
 800fac6:	4b05      	ldr	r3, [pc, #20]	; (800fadc <_ZN7CSystem21initPeripherialsClockEv+0x88>)
 800fac8:	699b      	ldr	r3, [r3, #24]
 800faca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800face:	607b      	str	r3, [r7, #4]
 800fad0:	687b      	ldr	r3, [r7, #4]
}
 800fad2:	bf00      	nop
 800fad4:	371c      	adds	r7, #28
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bc80      	pop	{r7}
 800fada:	4770      	bx	lr
 800fadc:	40021000 	.word	0x40021000

0800fae0 <_ZN7CSystem18getTimeMilisecondsEv>:
{
    return getTimeMiliseconds() / 10;
}

uint64_t CSystem::getTimeMiliseconds()
{
 800fae0:	b490      	push	{r4, r7}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
    uint64_t time;
    do
    {
        time = m_timeMiliseconds;
 800fae6:	4b0c      	ldr	r3, [pc, #48]	; (800fb18 <_ZN7CSystem18getTimeMilisecondsEv+0x38>)
 800fae8:	cb18      	ldmia	r3, {r3, r4}
 800faea:	e887 0018 	stmia.w	r7, {r3, r4}
    }
    while (time != m_timeMiliseconds);
 800faee:	4b0a      	ldr	r3, [pc, #40]	; (800fb18 <_ZN7CSystem18getTimeMilisecondsEv+0x38>)
 800faf0:	cb18      	ldmia	r3, {r3, r4}
    do
 800faf2:	e897 0006 	ldmia.w	r7, {r1, r2}
 800faf6:	42a2      	cmp	r2, r4
 800faf8:	bf0a      	itet	eq
 800fafa:	4299      	cmpeq	r1, r3
 800fafc:	2301      	movne	r3, #1
 800fafe:	2300      	moveq	r3, #0
 800fb00:	b2db      	uxtb	r3, r3
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d000      	beq.n	800fb08 <_ZN7CSystem18getTimeMilisecondsEv+0x28>
 800fb06:	e7ee      	b.n	800fae6 <_ZN7CSystem18getTimeMilisecondsEv+0x6>
    return time;
 800fb08:	e897 0018 	ldmia.w	r7, {r3, r4}
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	4621      	mov	r1, r4
 800fb10:	3708      	adds	r7, #8
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bc90      	pop	{r4, r7}
 800fb16:	4770      	bx	lr
 800fb18:	20000e50 	.word	0x20000e50

0800fb1c <_ZN7CSystem19getTimeMicrosecondsEv>:

uint64_t CSystem::getTimeMicroseconds()
{
 800fb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb20:	b083      	sub	sp, #12
 800fb22:	af00      	add	r7, sp, #0
    uint32_t LOAD = SysTick->LOAD;
 800fb24:	4b1f      	ldr	r3, [pc, #124]	; (800fba4 <_ZN7CSystem19getTimeMicrosecondsEv+0x88>)
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	607b      	str	r3, [r7, #4]
    uint32_t VAL = SysTick->VAL;
 800fb2a:	4b1e      	ldr	r3, [pc, #120]	; (800fba4 <_ZN7CSystem19getTimeMicrosecondsEv+0x88>)
 800fb2c:	689b      	ldr	r3, [r3, #8]
 800fb2e:	603b      	str	r3, [r7, #0]
    return getTimeMiliseconds() * 1000 + ((1000UL * (LOAD - VAL)) / (LOAD + 1));
 800fb30:	f7ff ffd6 	bl	800fae0 <_ZN7CSystem18getTimeMilisecondsEv>
 800fb34:	460a      	mov	r2, r1
 800fb36:	4601      	mov	r1, r0
 800fb38:	460b      	mov	r3, r1
 800fb3a:	4614      	mov	r4, r2
 800fb3c:	ea4f 1b44 	mov.w	fp, r4, lsl #5
 800fb40:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
 800fb44:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 800fb48:	4653      	mov	r3, sl
 800fb4a:	465c      	mov	r4, fp
 800fb4c:	1a5b      	subs	r3, r3, r1
 800fb4e:	eb64 0402 	sbc.w	r4, r4, r2
 800fb52:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800fb56:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
 800fb5a:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800fb5e:	4643      	mov	r3, r8
 800fb60:	464c      	mov	r4, r9
 800fb62:	185b      	adds	r3, r3, r1
 800fb64:	eb44 0402 	adc.w	r4, r4, r2
 800fb68:	00e6      	lsls	r6, r4, #3
 800fb6a:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 800fb6e:	00dd      	lsls	r5, r3, #3
 800fb70:	462b      	mov	r3, r5
 800fb72:	4634      	mov	r4, r6
 800fb74:	4619      	mov	r1, r3
 800fb76:	4622      	mov	r2, r4
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	1ac3      	subs	r3, r0, r3
 800fb7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fb82:	fb00 f003 	mul.w	r0, r0, r3
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	3301      	adds	r3, #1
 800fb8a:	fbb0 f3f3 	udiv	r3, r0, r3
 800fb8e:	f04f 0400 	mov.w	r4, #0
 800fb92:	185b      	adds	r3, r3, r1
 800fb94:	eb44 0402 	adc.w	r4, r4, r2
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	4621      	mov	r1, r4
 800fb9c:	370c      	adds	r7, #12
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba4:	e000e010 	.word	0xe000e010

0800fba8 <_ZN7CSystem7delayMsEm>:

void CSystem::delayMs(uint32_t miliseconds)
{
 800fba8:	b590      	push	{r4, r7, lr}
 800fbaa:	b085      	sub	sp, #20
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
    uint64_t time = getTimeMiliseconds() + miliseconds;
 800fbb0:	f7ff ff96 	bl	800fae0 <_ZN7CSystem18getTimeMilisecondsEv>
 800fbb4:	460a      	mov	r2, r1
 800fbb6:	4601      	mov	r1, r0
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f04f 0400 	mov.w	r4, #0
 800fbbe:	185b      	adds	r3, r3, r1
 800fbc0:	eb44 0402 	adc.w	r4, r4, r2
 800fbc4:	e9c7 3402 	strd	r3, r4, [r7, #8]
    while (time >= getTimeMiliseconds())
 800fbc8:	f7ff ff8a 	bl	800fae0 <_ZN7CSystem18getTimeMilisecondsEv>
 800fbcc:	460a      	mov	r2, r1
 800fbce:	4601      	mov	r1, r0
 800fbd0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800fbd4:	4294      	cmp	r4, r2
 800fbd6:	bf08      	it	eq
 800fbd8:	428b      	cmpeq	r3, r1
 800fbda:	bf2c      	ite	cs
 800fbdc:	2301      	movcs	r3, #1
 800fbde:	2300      	movcc	r3, #0
 800fbe0:	b2db      	uxtb	r3, r3
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d001      	beq.n	800fbea <_ZN7CSystem7delayMsEm+0x42>
        continue;
 800fbe6:	bf00      	nop
    while (time >= getTimeMiliseconds())
 800fbe8:	e7ee      	b.n	800fbc8 <_ZN7CSystem7delayMsEm+0x20>
}
 800fbea:	bf00      	nop
 800fbec:	3714      	adds	r7, #20
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd90      	pop	{r4, r7, pc}

0800fbf2 <_ZN7CSystem7delayUsEm>:

void CSystem::delayUs(uint32_t microseconds)
{
 800fbf2:	b590      	push	{r4, r7, lr}
 800fbf4:	b085      	sub	sp, #20
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	6078      	str	r0, [r7, #4]
    uint64_t time = getTimeMicroseconds() + microseconds;
 800fbfa:	f7ff ff8f 	bl	800fb1c <_ZN7CSystem19getTimeMicrosecondsEv>
 800fbfe:	460a      	mov	r2, r1
 800fc00:	4601      	mov	r1, r0
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f04f 0400 	mov.w	r4, #0
 800fc08:	185b      	adds	r3, r3, r1
 800fc0a:	eb44 0402 	adc.w	r4, r4, r2
 800fc0e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    while (time >= getTimeMicroseconds())
 800fc12:	f7ff ff83 	bl	800fb1c <_ZN7CSystem19getTimeMicrosecondsEv>
 800fc16:	460a      	mov	r2, r1
 800fc18:	4601      	mov	r1, r0
 800fc1a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800fc1e:	4294      	cmp	r4, r2
 800fc20:	bf08      	it	eq
 800fc22:	428b      	cmpeq	r3, r1
 800fc24:	bf2c      	ite	cs
 800fc26:	2301      	movcs	r3, #1
 800fc28:	2300      	movcc	r3, #0
 800fc2a:	b2db      	uxtb	r3, r3
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d001      	beq.n	800fc34 <_ZN7CSystem7delayUsEm+0x42>
        continue;
 800fc30:	bf00      	nop
    while (time >= getTimeMicroseconds())
 800fc32:	e7ee      	b.n	800fc12 <_ZN7CSystem7delayUsEm+0x20>
}
 800fc34:	bf00      	nop
 800fc36:	3714      	adds	r7, #20
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd90      	pop	{r4, r7, pc}

0800fc3c <_ZN7CSystem25addFastInterruptUpdatableEP19IInterruptUpdatable>:
		}
	}
}

void CSystem::addFastInterruptUpdatable(IInterruptUpdatable *interruptUpdatable)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b085      	sub	sp, #20
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<FAST_UPDATABLES_COUNT; i++)
 800fc44:	2300      	movs	r3, #0
 800fc46:	73fb      	strb	r3, [r7, #15]
 800fc48:	7bfb      	ldrb	r3, [r7, #15]
 800fc4a:	2b05      	cmp	r3, #5
 800fc4c:	dc10      	bgt.n	800fc70 <_ZN7CSystem25addFastInterruptUpdatableEP19IInterruptUpdatable+0x34>
	{
		if(m_fastInterruptUpdatable[i] == NULL)
 800fc4e:	7bfb      	ldrb	r3, [r7, #15]
 800fc50:	4a0a      	ldr	r2, [pc, #40]	; (800fc7c <_ZN7CSystem25addFastInterruptUpdatableEP19IInterruptUpdatable+0x40>)
 800fc52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d106      	bne.n	800fc68 <_ZN7CSystem25addFastInterruptUpdatableEP19IInterruptUpdatable+0x2c>
		{
			m_fastInterruptUpdatable[i] = interruptUpdatable;
 800fc5a:	7bfb      	ldrb	r3, [r7, #15]
 800fc5c:	4907      	ldr	r1, [pc, #28]	; (800fc7c <_ZN7CSystem25addFastInterruptUpdatableEP19IInterruptUpdatable+0x40>)
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 800fc64:	bf00      	nop
		}
	}
}
 800fc66:	e003      	b.n	800fc70 <_ZN7CSystem25addFastInterruptUpdatableEP19IInterruptUpdatable+0x34>
	for(uint8_t i=0; i<FAST_UPDATABLES_COUNT; i++)
 800fc68:	7bfb      	ldrb	r3, [r7, #15]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	73fb      	strb	r3, [r7, #15]
 800fc6e:	e7eb      	b.n	800fc48 <_ZN7CSystem25addFastInterruptUpdatableEP19IInterruptUpdatable+0xc>
}
 800fc70:	bf00      	nop
 800fc72:	3714      	adds	r7, #20
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bc80      	pop	{r7}
 800fc78:	4770      	bx	lr
 800fc7a:	bf00      	nop
 800fc7c:	20000e70 	.word	0x20000e70

0800fc80 <_ZN7CSystem15SysTick_HandlerEv>:

void CSystem::SysTick_Handler()
{
 800fc80:	b590      	push	{r4, r7, lr}
 800fc82:	b083      	sub	sp, #12
 800fc84:	af00      	add	r7, sp, #0
    m_timeMiliseconds++;
 800fc86:	4b2c      	ldr	r3, [pc, #176]	; (800fd38 <_ZN7CSystem15SysTick_HandlerEv+0xb8>)
 800fc88:	cb18      	ldmia	r3, {r3, r4}
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	f144 0400 	adc.w	r4, r4, #0
 800fc90:	4a29      	ldr	r2, [pc, #164]	; (800fd38 <_ZN7CSystem15SysTick_HandlerEv+0xb8>)
 800fc92:	e882 0018 	stmia.w	r2, {r3, r4}
    if (m_timeMiliseconds % 8 == 0)
 800fc96:	4b28      	ldr	r3, [pc, #160]	; (800fd38 <_ZN7CSystem15SysTick_HandlerEv+0xb8>)
 800fc98:	cb18      	ldmia	r3, {r3, r4}
 800fc9a:	f04f 0107 	mov.w	r1, #7
 800fc9e:	f04f 0200 	mov.w	r2, #0
 800fca2:	ea03 0301 	and.w	r3, r3, r1
 800fca6:	ea04 0402 	and.w	r4, r4, r2
 800fcaa:	4323      	orrs	r3, r4
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	bf0c      	ite	eq
 800fcb0:	2301      	moveq	r3, #1
 800fcb2:	2300      	movne	r3, #0
 800fcb4:	b2db      	uxtb	r3, r3
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d01c      	beq.n	800fcf4 <_ZN7CSystem15SysTick_HandlerEv+0x74>
    {
    	for(uint8_t i=0; i<UPDATABLES_COUNT; i++)
 800fcba:	2300      	movs	r3, #0
 800fcbc:	71fb      	strb	r3, [r7, #7]
 800fcbe:	79fb      	ldrb	r3, [r7, #7]
 800fcc0:	2b05      	cmp	r3, #5
 800fcc2:	dc17      	bgt.n	800fcf4 <_ZN7CSystem15SysTick_HandlerEv+0x74>
    	{
    		if(m_interruptUpdatable[i] != NULL)
 800fcc4:	79fb      	ldrb	r3, [r7, #7]
 800fcc6:	4a1d      	ldr	r2, [pc, #116]	; (800fd3c <_ZN7CSystem15SysTick_HandlerEv+0xbc>)
 800fcc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d00d      	beq.n	800fcec <_ZN7CSystem15SysTick_HandlerEv+0x6c>
    		{
    			m_interruptUpdatable[i]->updateFromInterrupt(125);
 800fcd0:	79fb      	ldrb	r3, [r7, #7]
 800fcd2:	4a1a      	ldr	r2, [pc, #104]	; (800fd3c <_ZN7CSystem15SysTick_HandlerEv+0xbc>)
 800fcd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	3308      	adds	r3, #8
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	79fa      	ldrb	r2, [r7, #7]
 800fce0:	4916      	ldr	r1, [pc, #88]	; (800fd3c <_ZN7CSystem15SysTick_HandlerEv+0xbc>)
 800fce2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fce6:	217d      	movs	r1, #125	; 0x7d
 800fce8:	4610      	mov	r0, r2
 800fcea:	4798      	blx	r3
    	for(uint8_t i=0; i<UPDATABLES_COUNT; i++)
 800fcec:	79fb      	ldrb	r3, [r7, #7]
 800fcee:	3301      	adds	r3, #1
 800fcf0:	71fb      	strb	r3, [r7, #7]
 800fcf2:	e7e4      	b.n	800fcbe <_ZN7CSystem15SysTick_HandlerEv+0x3e>
    		}
    	}
    }

	for(uint8_t i=0; i<FAST_UPDATABLES_COUNT; i++)
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	71bb      	strb	r3, [r7, #6]
 800fcf8:	79bb      	ldrb	r3, [r7, #6]
 800fcfa:	2b05      	cmp	r3, #5
 800fcfc:	dc18      	bgt.n	800fd30 <_ZN7CSystem15SysTick_HandlerEv+0xb0>
	{
		if(m_fastInterruptUpdatable[i] != NULL)
 800fcfe:	79bb      	ldrb	r3, [r7, #6]
 800fd00:	4a0f      	ldr	r2, [pc, #60]	; (800fd40 <_ZN7CSystem15SysTick_HandlerEv+0xc0>)
 800fd02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d00e      	beq.n	800fd28 <_ZN7CSystem15SysTick_HandlerEv+0xa8>
		{
			m_fastInterruptUpdatable[i]->updateFromInterrupt(1000);
 800fd0a:	79bb      	ldrb	r3, [r7, #6]
 800fd0c:	4a0c      	ldr	r2, [pc, #48]	; (800fd40 <_ZN7CSystem15SysTick_HandlerEv+0xc0>)
 800fd0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	3308      	adds	r3, #8
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	79ba      	ldrb	r2, [r7, #6]
 800fd1a:	4909      	ldr	r1, [pc, #36]	; (800fd40 <_ZN7CSystem15SysTick_HandlerEv+0xc0>)
 800fd1c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fd20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fd24:	4610      	mov	r0, r2
 800fd26:	4798      	blx	r3
	for(uint8_t i=0; i<FAST_UPDATABLES_COUNT; i++)
 800fd28:	79bb      	ldrb	r3, [r7, #6]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	71bb      	strb	r3, [r7, #6]
 800fd2e:	e7e3      	b.n	800fcf8 <_ZN7CSystem15SysTick_HandlerEv+0x78>
//    if (msp < max)
//    {
//        max = msp;
//        debug_printf("Max MSP: %08X\n", max);
//    }
}
 800fd30:	bf00      	nop
 800fd32:	370c      	adds	r7, #12
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd90      	pop	{r4, r7, pc}
 800fd38:	20000e50 	.word	0x20000e50
 800fd3c:	20000e58 	.word	0x20000e58
 800fd40:	20000e70 	.word	0x20000e70

0800fd44 <PVD_IRQHandler>:

extern "C" void PVD_IRQHandler()
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	af00      	add	r7, sp, #0
    HAL_PWR_PVD_IRQHandler();
 800fd48:	f7f9 fb5c 	bl	8009404 <HAL_PWR_PVD_IRQHandler>
    NVIC_SystemReset();
 800fd4c:	f7ff fd60 	bl	800f810 <__NVIC_SystemReset>

0800fd50 <_ZN7CSystem15CDelayFunctionsD1Ev>:
    typedef enum
    {
        OT_OSCILATOR_EXTERNAL, OT_OSCILATOR_INTERNAL,
    } TOscilatorType;

    class CDelayFunctions: public IDelayFunctions
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	4a05      	ldr	r2, [pc, #20]	; (800fd70 <_ZN7CSystem15CDelayFunctionsD1Ev+0x20>)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	601a      	str	r2, [r3, #0]
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7ff fd69 	bl	800f838 <_ZN15IDelayFunctionsD1Ev>
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	0801cc0c 	.word	0x0801cc0c

0800fd74 <_ZN7CSystem15CDelayFunctionsD0Ev>:
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b082      	sub	sp, #8
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f7ff ffe7 	bl	800fd50 <_ZN7CSystem15CDelayFunctionsD1Ev>
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f005 fc2a 	bl	80155dc <_ZdlPv>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3708      	adds	r7, #8
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
	...

0800fd94 <_ZN14CTextResources18setLanguageVersionEt>:

uint16_t CTextResources::m_languageVersion;
uint16_t CTextResources::m_defaultLanguageVersion;

void CTextResources::setLanguageVersion(uint16_t languageVersion)
{
 800fd94:	b480      	push	{r7}
 800fd96:	b083      	sub	sp, #12
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	80fb      	strh	r3, [r7, #6]
    m_languageVersion = languageVersion;
 800fd9e:	4a04      	ldr	r2, [pc, #16]	; (800fdb0 <_ZN14CTextResources18setLanguageVersionEt+0x1c>)
 800fda0:	88fb      	ldrh	r3, [r7, #6]
 800fda2:	8013      	strh	r3, [r2, #0]
}
 800fda4:	bf00      	nop
 800fda6:	370c      	adds	r7, #12
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bc80      	pop	{r7}
 800fdac:	4770      	bx	lr
 800fdae:	bf00      	nop
 800fdb0:	20000e88 	.word	0x20000e88

0800fdb4 <_ZN14CTextResources14copyUtfToWcharEPwPKc>:
{
    return m_defaultLanguageVersion;
}

uint16_t CTextResources::copyUtfToWchar(wchar_t* to, const char* from)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b087      	sub	sp, #28
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	6039      	str	r1, [r7, #0]
    uint16_t cnt = 0;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	82fb      	strh	r3, [r7, #22]
    uint16_t c1, c2, c3, c4;

    while (*from)
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d07a      	beq.n	800fec0 <_ZN14CTextResources14copyUtfToWcharEPwPKc+0x10c>
    {
        if ((*from & 0x80) == 0)
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	781b      	ldrb	r3, [r3, #0]
 800fdce:	b25b      	sxtb	r3, r3
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	db07      	blt.n	800fde4 <_ZN14CTextResources14copyUtfToWcharEPwPKc+0x30>
        {
            *to = *from++;
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	1c5a      	adds	r2, r3, #1
 800fdd8:	603a      	str	r2, [r7, #0]
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	461a      	mov	r2, r3
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	601a      	str	r2, [r3, #0]
 800fde2:	e066      	b.n	800feb2 <_ZN14CTextResources14copyUtfToWcharEPwPKc+0xfe>
        }
        else
            if ((*from & 0xe0) == 0xc0)
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800fdec:	2bc0      	cmp	r3, #192	; 0xc0
 800fdee:	d111      	bne.n	800fe14 <_ZN14CTextResources14copyUtfToWcharEPwPKc+0x60>
            {
                c1 = *from++; //& 0x1f;
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	1c5a      	adds	r2, r3, #1
 800fdf4:	603a      	str	r2, [r7, #0]
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	82bb      	strh	r3, [r7, #20]
                c2 = *from++; //& 0x3f;
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	1c5a      	adds	r2, r3, #1
 800fdfe:	603a      	str	r2, [r7, #0]
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	827b      	strh	r3, [r7, #18]
                *to = (c1 << 8) | c2;
 800fe04:	8abb      	ldrh	r3, [r7, #20]
 800fe06:	021a      	lsls	r2, r3, #8
 800fe08:	8a7b      	ldrh	r3, [r7, #18]
 800fe0a:	4313      	orrs	r3, r2
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	601a      	str	r2, [r3, #0]
 800fe12:	e04e      	b.n	800feb2 <_ZN14CTextResources14copyUtfToWcharEPwPKc+0xfe>
                //             c2 = *from++ & 0x3f;
                //             *to = (c1 << 6) | c2;

            }
            //         sizeof( wchar_t ) > 2
            else if ((*from & 0xf0) == 0xe0)
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	781b      	ldrb	r3, [r3, #0]
 800fe18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe1c:	2be0      	cmp	r3, #224	; 0xe0
 800fe1e:	d119      	bne.n	800fe54 <_ZN14CTextResources14copyUtfToWcharEPwPKc+0xa0>
            {

                 c1 = *from++;
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	1c5a      	adds	r2, r3, #1
 800fe24:	603a      	str	r2, [r7, #0]
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	82bb      	strh	r3, [r7, #20]
                 c2 = *from++;
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	1c5a      	adds	r2, r3, #1
 800fe2e:	603a      	str	r2, [r7, #0]
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	827b      	strh	r3, [r7, #18]
                 c3 = *from++;
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	1c5a      	adds	r2, r3, #1
 800fe38:	603a      	str	r2, [r7, #0]
 800fe3a:	781b      	ldrb	r3, [r3, #0]
 800fe3c:	823b      	strh	r3, [r7, #16]
                 *to = (c1 << 16) | (c2 << 8) | c3;
 800fe3e:	8abb      	ldrh	r3, [r7, #20]
 800fe40:	041a      	lsls	r2, r3, #16
 800fe42:	8a7b      	ldrh	r3, [r7, #18]
 800fe44:	021b      	lsls	r3, r3, #8
 800fe46:	431a      	orrs	r2, r3
 800fe48:	8a3b      	ldrh	r3, [r7, #16]
 800fe4a:	4313      	orrs	r3, r2
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	601a      	str	r2, [r3, #0]
 800fe52:	e02e      	b.n	800feb2 <_ZN14CTextResources14copyUtfToWcharEPwPKc+0xfe>
//                 c2 = *from++ & 0x3f;
//                 c3 = *from++ & 0x3f;
//                 *to = (c1 << 12) | (c2 << 6) | c3;
//                 len -= 3;
            }
            else if ((*from & 0xf8) == 0xf0)
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800fe5c:	2bf0      	cmp	r3, #240	; 0xf0
 800fe5e:	d121      	bne.n	800fea4 <_ZN14CTextResources14copyUtfToWcharEPwPKc+0xf0>
            {

                 c1 = *from++;
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	1c5a      	adds	r2, r3, #1
 800fe64:	603a      	str	r2, [r7, #0]
 800fe66:	781b      	ldrb	r3, [r3, #0]
 800fe68:	82bb      	strh	r3, [r7, #20]
                 c2 = *from++;
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	1c5a      	adds	r2, r3, #1
 800fe6e:	603a      	str	r2, [r7, #0]
 800fe70:	781b      	ldrb	r3, [r3, #0]
 800fe72:	827b      	strh	r3, [r7, #18]
                 c3 = *from++;
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	1c5a      	adds	r2, r3, #1
 800fe78:	603a      	str	r2, [r7, #0]
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	823b      	strh	r3, [r7, #16]
                 c4 = *from++;
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	1c5a      	adds	r2, r3, #1
 800fe82:	603a      	str	r2, [r7, #0]
 800fe84:	781b      	ldrb	r3, [r3, #0]
 800fe86:	81fb      	strh	r3, [r7, #14]
                 *to = (c1 << 24) | (c2 << 16) | (c3 << 8) | c4;
 800fe88:	8abb      	ldrh	r3, [r7, #20]
 800fe8a:	061a      	lsls	r2, r3, #24
 800fe8c:	8a7b      	ldrh	r3, [r7, #18]
 800fe8e:	041b      	lsls	r3, r3, #16
 800fe90:	431a      	orrs	r2, r3
 800fe92:	8a3b      	ldrh	r3, [r7, #16]
 800fe94:	021b      	lsls	r3, r3, #8
 800fe96:	431a      	orrs	r2, r3
 800fe98:	89fb      	ldrh	r3, [r7, #14]
 800fe9a:	4313      	orrs	r3, r2
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	601a      	str	r2, [r3, #0]
 800fea2:	e006      	b.n	800feb2 <_ZN14CTextResources14copyUtfToWcharEPwPKc+0xfe>
//                 *to = (c1 << 18) | (c2 << 12) | (c3 << 6) | c4;
//             len -= 4;
            }
            else
            {
                *to = *from++;
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	1c5a      	adds	r2, r3, #1
 800fea8:	603a      	str	r2, [r7, #0]
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	461a      	mov	r2, r3
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	601a      	str	r2, [r3, #0]
            }
        to++;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	3304      	adds	r3, #4
 800feb6:	607b      	str	r3, [r7, #4]
        cnt++;
 800feb8:	8afb      	ldrh	r3, [r7, #22]
 800feba:	3301      	adds	r3, #1
 800febc:	82fb      	strh	r3, [r7, #22]
    while (*from)
 800febe:	e780      	b.n	800fdc2 <_ZN14CTextResources14copyUtfToWcharEPwPKc+0xe>
    }
    *to = 0;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2200      	movs	r2, #0
 800fec4:	601a      	str	r2, [r3, #0]
    return cnt - 1;
 800fec6:	8afb      	ldrh	r3, [r7, #22]
 800fec8:	3b01      	subs	r3, #1
 800feca:	b29b      	uxth	r3, r3
}
 800fecc:	4618      	mov	r0, r3
 800fece:	371c      	adds	r7, #28
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bc80      	pop	{r7}
 800fed4:	4770      	bx	lr

0800fed6 <_ZN14CTextResources16copyTextToBufferEPwms>:

int16_t CTextResources::copyTextToBuffer(wchar_t *outBuffer, uint32_t strId, int16_t bufferSize)
{
 800fed6:	b580      	push	{r7, lr}
 800fed8:	b088      	sub	sp, #32
 800feda:	af00      	add	r7, sp, #0
 800fedc:	60f8      	str	r0, [r7, #12]
 800fede:	60b9      	str	r1, [r7, #8]
 800fee0:	4613      	mov	r3, r2
 800fee2:	80fb      	strh	r3, [r7, #6]
    int16_t index = 0;
 800fee4:	2300      	movs	r3, #0
 800fee6:	83fb      	strh	r3, [r7, #30]
    uint16_t stringLength = 0;
 800fee8:	2300      	movs	r3, #0
 800feea:	82fb      	strh	r3, [r7, #22]
    uint8_t buf, c2, c3, c4;
    int16_t cout = 0;
 800feec:	2300      	movs	r3, #0
 800feee:	83bb      	strh	r3, [r7, #28]

    uint32_t address = startSequentialRead(strId);
 800fef0:	68b8      	ldr	r0, [r7, #8]
 800fef2:	f000 f93f 	bl	8010174 <_ZN14CTextResources19startSequentialReadEm>
 800fef6:	61b8      	str	r0, [r7, #24]
    address += readStringLength(address, &stringLength);
 800fef8:	f107 0316 	add.w	r3, r7, #22
 800fefc:	4619      	mov	r1, r3
 800fefe:	69b8      	ldr	r0, [r7, #24]
 800ff00:	f000 f980 	bl	8010204 <_ZN14CTextResources16readStringLengthEmPt>
 800ff04:	4603      	mov	r3, r0
 800ff06:	461a      	mov	r2, r3
 800ff08:	69bb      	ldr	r3, [r7, #24]
 800ff0a:	4413      	add	r3, r2
 800ff0c:	61bb      	str	r3, [r7, #24]

    if (stringLength > (bufferSize - 1))
 800ff0e:	8afb      	ldrh	r3, [r7, #22]
 800ff10:	461a      	mov	r2, r3
 800ff12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ff16:	3b01      	subs	r3, #1
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	dd03      	ble.n	800ff24 <_ZN14CTextResources16copyTextToBufferEPwms+0x4e>
    {
        stringLength = bufferSize - 1;
 800ff1c:	88fb      	ldrh	r3, [r7, #6]
 800ff1e:	3b01      	subs	r3, #1
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	82fb      	strh	r3, [r7, #22]
    }

    while (cout < stringLength)
 800ff24:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ff28:	8afa      	ldrh	r2, [r7, #22]
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	f280 80a1 	bge.w	8010072 <_ZN14CTextResources16copyTextToBufferEPwms+0x19c>
    {
        readData(address, &buf, sizeof(buf));
 800ff30:	f107 0315 	add.w	r3, r7, #21
 800ff34:	2201      	movs	r2, #1
 800ff36:	4619      	mov	r1, r3
 800ff38:	69b8      	ldr	r0, [r7, #24]
 800ff3a:	f001 fab1 	bl	80114a0 <_ZN17CTextResourcesHAL8readDataEmPvs>
        address += sizeof(buf);
 800ff3e:	69bb      	ldr	r3, [r7, #24]
 800ff40:	3301      	adds	r3, #1
 800ff42:	61bb      	str	r3, [r7, #24]
        //Znak ma jeden znak
        if ((buf & 0x80) == 0)
 800ff44:	7d7b      	ldrb	r3, [r7, #21]
 800ff46:	b25b      	sxtb	r3, r3
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	db0b      	blt.n	800ff64 <_ZN14CTextResources16copyTextToBufferEPwms+0x8e>
        {
            outBuffer[index] = (wchar_t) buf;
 800ff4c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ff50:	009b      	lsls	r3, r3, #2
 800ff52:	68fa      	ldr	r2, [r7, #12]
 800ff54:	4413      	add	r3, r2
 800ff56:	7d7a      	ldrb	r2, [r7, #21]
 800ff58:	601a      	str	r2, [r3, #0]
            cout += 1;
 800ff5a:	8bbb      	ldrh	r3, [r7, #28]
 800ff5c:	3301      	adds	r3, #1
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	83bb      	strh	r3, [r7, #28]
 800ff62:	e07f      	b.n	8010064 <_ZN14CTextResources16copyTextToBufferEPwms+0x18e>
        }
        else
            //Znak ma dwa znaki
            if ((buf & 0xe0) == 0xc0)
 800ff64:	7d7b      	ldrb	r3, [r7, #21]
 800ff66:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800ff6a:	2bc0      	cmp	r3, #192	; 0xc0
 800ff6c:	d118      	bne.n	800ffa0 <_ZN14CTextResources16copyTextToBufferEPwms+0xca>
            {
                readData(address, &c2, sizeof(c2));
 800ff6e:	f107 0314 	add.w	r3, r7, #20
 800ff72:	2201      	movs	r2, #1
 800ff74:	4619      	mov	r1, r3
 800ff76:	69b8      	ldr	r0, [r7, #24]
 800ff78:	f001 fa92 	bl	80114a0 <_ZN17CTextResourcesHAL8readDataEmPvs>
                address += sizeof(c2);
 800ff7c:	69bb      	ldr	r3, [r7, #24]
 800ff7e:	3301      	adds	r3, #1
 800ff80:	61bb      	str	r3, [r7, #24]
                outBuffer[index] = (((uint16_t) buf) << 8) | c2;
 800ff82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ff86:	009b      	lsls	r3, r3, #2
 800ff88:	68fa      	ldr	r2, [r7, #12]
 800ff8a:	4413      	add	r3, r2
 800ff8c:	7d7a      	ldrb	r2, [r7, #21]
 800ff8e:	0212      	lsls	r2, r2, #8
 800ff90:	7d39      	ldrb	r1, [r7, #20]
 800ff92:	430a      	orrs	r2, r1
 800ff94:	601a      	str	r2, [r3, #0]
                cout += 2;
 800ff96:	8bbb      	ldrh	r3, [r7, #28]
 800ff98:	3302      	adds	r3, #2
 800ff9a:	b29b      	uxth	r3, r3
 800ff9c:	83bb      	strh	r3, [r7, #28]
 800ff9e:	e061      	b.n	8010064 <_ZN14CTextResources16copyTextToBufferEPwms+0x18e>
            }
            //Znak ma trzy znaki
            else
                if ((buf & 0xf0) == 0xe0)
 800ffa0:	7d7b      	ldrb	r3, [r7, #21]
 800ffa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ffa6:	2be0      	cmp	r3, #224	; 0xe0
 800ffa8:	d125      	bne.n	800fff6 <_ZN14CTextResources16copyTextToBufferEPwms+0x120>
                {
                    readData(address, &c2, sizeof(c2));
 800ffaa:	f107 0314 	add.w	r3, r7, #20
 800ffae:	2201      	movs	r2, #1
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	69b8      	ldr	r0, [r7, #24]
 800ffb4:	f001 fa74 	bl	80114a0 <_ZN17CTextResourcesHAL8readDataEmPvs>
                    address += sizeof(c2);
 800ffb8:	69bb      	ldr	r3, [r7, #24]
 800ffba:	3301      	adds	r3, #1
 800ffbc:	61bb      	str	r3, [r7, #24]
                    readData(address, &c3, sizeof(c3));
 800ffbe:	f107 0313 	add.w	r3, r7, #19
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	69b8      	ldr	r0, [r7, #24]
 800ffc8:	f001 fa6a 	bl	80114a0 <_ZN17CTextResourcesHAL8readDataEmPvs>
                    address += sizeof(c3);
 800ffcc:	69bb      	ldr	r3, [r7, #24]
 800ffce:	3301      	adds	r3, #1
 800ffd0:	61bb      	str	r3, [r7, #24]
                    outBuffer[index] = (((uint16_t) buf) << 16) | (((uint16_t) c2) << 8 ) | c3;
 800ffd2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ffd6:	009b      	lsls	r3, r3, #2
 800ffd8:	68fa      	ldr	r2, [r7, #12]
 800ffda:	4413      	add	r3, r2
 800ffdc:	7d7a      	ldrb	r2, [r7, #21]
 800ffde:	0411      	lsls	r1, r2, #16
 800ffe0:	7d3a      	ldrb	r2, [r7, #20]
 800ffe2:	0212      	lsls	r2, r2, #8
 800ffe4:	430a      	orrs	r2, r1
 800ffe6:	7cf9      	ldrb	r1, [r7, #19]
 800ffe8:	430a      	orrs	r2, r1
 800ffea:	601a      	str	r2, [r3, #0]
                    cout += 3;
 800ffec:	8bbb      	ldrh	r3, [r7, #28]
 800ffee:	3303      	adds	r3, #3
 800fff0:	b29b      	uxth	r3, r3
 800fff2:	83bb      	strh	r3, [r7, #28]
 800fff4:	e036      	b.n	8010064 <_ZN14CTextResources16copyTextToBufferEPwms+0x18e>
                }
                //Znak ma cztery znaki
                else
                    if ((buf & 0xf8) == 0xf0)
 800fff6:	7d7b      	ldrb	r3, [r7, #21]
 800fff8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800fffc:	2bf0      	cmp	r3, #240	; 0xf0
 800fffe:	d131      	bne.n	8010064 <_ZN14CTextResources16copyTextToBufferEPwms+0x18e>
                    {
                        readData(address, &c2, sizeof(c2));
 8010000:	f107 0314 	add.w	r3, r7, #20
 8010004:	2201      	movs	r2, #1
 8010006:	4619      	mov	r1, r3
 8010008:	69b8      	ldr	r0, [r7, #24]
 801000a:	f001 fa49 	bl	80114a0 <_ZN17CTextResourcesHAL8readDataEmPvs>
                        address += sizeof(c2);
 801000e:	69bb      	ldr	r3, [r7, #24]
 8010010:	3301      	adds	r3, #1
 8010012:	61bb      	str	r3, [r7, #24]
                        readData(address, &c3, sizeof(c3));
 8010014:	f107 0313 	add.w	r3, r7, #19
 8010018:	2201      	movs	r2, #1
 801001a:	4619      	mov	r1, r3
 801001c:	69b8      	ldr	r0, [r7, #24]
 801001e:	f001 fa3f 	bl	80114a0 <_ZN17CTextResourcesHAL8readDataEmPvs>
                        address += sizeof(c3);
 8010022:	69bb      	ldr	r3, [r7, #24]
 8010024:	3301      	adds	r3, #1
 8010026:	61bb      	str	r3, [r7, #24]
                        readData(address, &c4, sizeof(c4));
 8010028:	f107 0312 	add.w	r3, r7, #18
 801002c:	2201      	movs	r2, #1
 801002e:	4619      	mov	r1, r3
 8010030:	69b8      	ldr	r0, [r7, #24]
 8010032:	f001 fa35 	bl	80114a0 <_ZN17CTextResourcesHAL8readDataEmPvs>
                        address += sizeof(c4);
 8010036:	69bb      	ldr	r3, [r7, #24]
 8010038:	3301      	adds	r3, #1
 801003a:	61bb      	str	r3, [r7, #24]
                        outBuffer[index] = (((uint16_t) buf) << 24) | (((uint16_t) c2) << 16 ) | (((uint16_t) c3) << 8 ) | c4;
 801003c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010040:	009b      	lsls	r3, r3, #2
 8010042:	68fa      	ldr	r2, [r7, #12]
 8010044:	4413      	add	r3, r2
 8010046:	7d7a      	ldrb	r2, [r7, #21]
 8010048:	0611      	lsls	r1, r2, #24
 801004a:	7d3a      	ldrb	r2, [r7, #20]
 801004c:	0412      	lsls	r2, r2, #16
 801004e:	4311      	orrs	r1, r2
 8010050:	7cfa      	ldrb	r2, [r7, #19]
 8010052:	0212      	lsls	r2, r2, #8
 8010054:	430a      	orrs	r2, r1
 8010056:	7cb9      	ldrb	r1, [r7, #18]
 8010058:	430a      	orrs	r2, r1
 801005a:	601a      	str	r2, [r3, #0]
                        cout += 4;
 801005c:	8bbb      	ldrh	r3, [r7, #28]
 801005e:	3304      	adds	r3, #4
 8010060:	b29b      	uxth	r3, r3
 8010062:	83bb      	strh	r3, [r7, #28]
                    }

        index++;
 8010064:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010068:	b29b      	uxth	r3, r3
 801006a:	3301      	adds	r3, #1
 801006c:	b29b      	uxth	r3, r3
 801006e:	83fb      	strh	r3, [r7, #30]
    while (cout < stringLength)
 8010070:	e758      	b.n	800ff24 <_ZN14CTextResources16copyTextToBufferEPwms+0x4e>
    }
    outBuffer[index] = 0;
 8010072:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010076:	009b      	lsls	r3, r3, #2
 8010078:	68fa      	ldr	r2, [r7, #12]
 801007a:	4413      	add	r3, r2
 801007c:	2200      	movs	r2, #0
 801007e:	601a      	str	r2, [r3, #0]
    outBuffer[bufferSize - 1] = 0;
 8010080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010084:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010088:	3b01      	subs	r3, #1
 801008a:	009b      	lsls	r3, r3, #2
 801008c:	68fa      	ldr	r2, [r7, #12]
 801008e:	4413      	add	r3, r2
 8010090:	2200      	movs	r2, #0
 8010092:	601a      	str	r2, [r3, #0]

    if (index > 0)
 8010094:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010098:	2b00      	cmp	r3, #0
 801009a:	dd04      	ble.n	80100a6 <_ZN14CTextResources16copyTextToBufferEPwms+0x1d0>
    {
        return index - 1;
 801009c:	8bfb      	ldrh	r3, [r7, #30]
 801009e:	3b01      	subs	r3, #1
 80100a0:	b29b      	uxth	r3, r3
 80100a2:	b21b      	sxth	r3, r3
 80100a4:	e000      	b.n	80100a8 <_ZN14CTextResources16copyTextToBufferEPwms+0x1d2>
    }
    else
    {
        return 0;
 80100a6:	2300      	movs	r3, #0
    }
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3720      	adds	r7, #32
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}

080100b0 <_ZN14CTextResources16copyTextToBufferEPcms>:

int16_t CTextResources::copyTextToBuffer(char *outBuffer, uint32_t strId, int16_t bufferSize)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b086      	sub	sp, #24
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	60f8      	str	r0, [r7, #12]
 80100b8:	60b9      	str	r1, [r7, #8]
 80100ba:	4613      	mov	r3, r2
 80100bc:	80fb      	strh	r3, [r7, #6]
    uint16_t stringLength = 0;
 80100be:	2300      	movs	r3, #0
 80100c0:	827b      	strh	r3, [r7, #18]
    uint32_t address = CTextResources::startSequentialRead(strId);
 80100c2:	68b8      	ldr	r0, [r7, #8]
 80100c4:	f000 f856 	bl	8010174 <_ZN14CTextResources19startSequentialReadEm>
 80100c8:	6178      	str	r0, [r7, #20]
    address += readStringLength(address, &stringLength);
 80100ca:	f107 0312 	add.w	r3, r7, #18
 80100ce:	4619      	mov	r1, r3
 80100d0:	6978      	ldr	r0, [r7, #20]
 80100d2:	f000 f897 	bl	8010204 <_ZN14CTextResources16readStringLengthEmPt>
 80100d6:	4603      	mov	r3, r0
 80100d8:	461a      	mov	r2, r3
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	4413      	add	r3, r2
 80100de:	617b      	str	r3, [r7, #20]

    if (stringLength > (bufferSize - 1))
 80100e0:	8a7b      	ldrh	r3, [r7, #18]
 80100e2:	461a      	mov	r2, r3
 80100e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80100e8:	3b01      	subs	r3, #1
 80100ea:	429a      	cmp	r2, r3
 80100ec:	dd03      	ble.n	80100f6 <_ZN14CTextResources16copyTextToBufferEPcms+0x46>
    {
        stringLength = bufferSize - 1;
 80100ee:	88fb      	ldrh	r3, [r7, #6]
 80100f0:	3b01      	subs	r3, #1
 80100f2:	b29b      	uxth	r3, r3
 80100f4:	827b      	strh	r3, [r7, #18]
    }

    readData(address, outBuffer, stringLength);
 80100f6:	8a7b      	ldrh	r3, [r7, #18]
 80100f8:	b21b      	sxth	r3, r3
 80100fa:	461a      	mov	r2, r3
 80100fc:	68f9      	ldr	r1, [r7, #12]
 80100fe:	6978      	ldr	r0, [r7, #20]
 8010100:	f001 f9ce 	bl	80114a0 <_ZN17CTextResourcesHAL8readDataEmPvs>
    outBuffer[stringLength] = 0;
 8010104:	8a7b      	ldrh	r3, [r7, #18]
 8010106:	461a      	mov	r2, r3
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	4413      	add	r3, r2
 801010c:	2200      	movs	r2, #0
 801010e:	701a      	strb	r2, [r3, #0]

    return stringLength;
 8010110:	8a7b      	ldrh	r3, [r7, #18]
 8010112:	b21b      	sxth	r3, r3
}
 8010114:	4618      	mov	r0, r3
 8010116:	3718      	adds	r7, #24
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <_ZN14CTextResources30getCurrentLanguageStringAdressEm>:

uint32_t CTextResources::getCurrentLanguageStringAdress(uint32_t stringAddress)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b084      	sub	sp, #16
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
	for (int16_t i = 0; i < m_languageVersion; i++)
 8010124:	2300      	movs	r3, #0
 8010126:	81fb      	strh	r3, [r7, #14]
 8010128:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801012c:	4a10      	ldr	r2, [pc, #64]	; (8010170 <_ZN14CTextResources30getCurrentLanguageStringAdressEm+0x54>)
 801012e:	8812      	ldrh	r2, [r2, #0]
 8010130:	4293      	cmp	r3, r2
 8010132:	da18      	bge.n	8010166 <_ZN14CTextResources30getCurrentLanguageStringAdressEm+0x4a>
	{
		uint16_t currentStringLength = 0;
 8010134:	2300      	movs	r3, #0
 8010136:	81bb      	strh	r3, [r7, #12]
		stringAddress += readStringLength(stringAddress, &currentStringLength);
 8010138:	f107 030c 	add.w	r3, r7, #12
 801013c:	4619      	mov	r1, r3
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f000 f860 	bl	8010204 <_ZN14CTextResources16readStringLengthEmPt>
 8010144:	4603      	mov	r3, r0
 8010146:	461a      	mov	r2, r3
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	4413      	add	r3, r2
 801014c:	607b      	str	r3, [r7, #4]
		stringAddress += currentStringLength;
 801014e:	89bb      	ldrh	r3, [r7, #12]
 8010150:	461a      	mov	r2, r3
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	4413      	add	r3, r2
 8010156:	607b      	str	r3, [r7, #4]
	for (int16_t i = 0; i < m_languageVersion; i++)
 8010158:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801015c:	b29b      	uxth	r3, r3
 801015e:	3301      	adds	r3, #1
 8010160:	b29b      	uxth	r3, r3
 8010162:	81fb      	strh	r3, [r7, #14]
 8010164:	e7e0      	b.n	8010128 <_ZN14CTextResources30getCurrentLanguageStringAdressEm+0xc>
	}
	return stringAddress;
 8010166:	687b      	ldr	r3, [r7, #4]
}
 8010168:	4618      	mov	r0, r3
 801016a:	3710      	adds	r7, #16
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}
 8010170:	20000e88 	.word	0x20000e88

08010174 <_ZN14CTextResources19startSequentialReadEm>:

uint32_t CTextResources::startSequentialRead(uint32_t address)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b084      	sub	sp, #16
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
#ifdef SUBTITLES_TEST
    CGraphicFontSubtitlesTest::startSequentialRead(address);
#endif

    uint32_t stringAddress = address;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	60fb      	str	r3, [r7, #12]
    uint16_t stringLength = 0;
 8010180:	2300      	movs	r3, #0
 8010182:	813b      	strh	r3, [r7, #8]

	stringAddress = getCurrentLanguageStringAdress(stringAddress);
 8010184:	68f8      	ldr	r0, [r7, #12]
 8010186:	f7ff ffc9 	bl	801011c <_ZN14CTextResources30getCurrentLanguageStringAdressEm>
 801018a:	60f8      	str	r0, [r7, #12]

    readStringLength(stringAddress, &stringLength);
 801018c:	f107 0308 	add.w	r3, r7, #8
 8010190:	4619      	mov	r1, r3
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f000 f836 	bl	8010204 <_ZN14CTextResources16readStringLengthEmPt>

    if (stringLength == 0)
 8010198:	893b      	ldrh	r3, [r7, #8]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d12b      	bne.n	80101f6 <_ZN14CTextResources19startSequentialReadEm+0x82>
    {
        stringAddress = address;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	60fb      	str	r3, [r7, #12]

        for (int16_t i = 0; i < m_defaultLanguageVersion; i++)
 80101a2:	2300      	movs	r3, #0
 80101a4:	817b      	strh	r3, [r7, #10]
 80101a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80101aa:	4a15      	ldr	r2, [pc, #84]	; (8010200 <_ZN14CTextResources19startSequentialReadEm+0x8c>)
 80101ac:	8812      	ldrh	r2, [r2, #0]
 80101ae:	4293      	cmp	r3, r2
 80101b0:	da16      	bge.n	80101e0 <_ZN14CTextResources19startSequentialReadEm+0x6c>
        {
            stringAddress += readStringLength(stringAddress, &stringLength);
 80101b2:	f107 0308 	add.w	r3, r7, #8
 80101b6:	4619      	mov	r1, r3
 80101b8:	68f8      	ldr	r0, [r7, #12]
 80101ba:	f000 f823 	bl	8010204 <_ZN14CTextResources16readStringLengthEmPt>
 80101be:	4603      	mov	r3, r0
 80101c0:	461a      	mov	r2, r3
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	4413      	add	r3, r2
 80101c6:	60fb      	str	r3, [r7, #12]
            stringAddress += stringLength;
 80101c8:	893b      	ldrh	r3, [r7, #8]
 80101ca:	461a      	mov	r2, r3
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	4413      	add	r3, r2
 80101d0:	60fb      	str	r3, [r7, #12]
        for (int16_t i = 0; i < m_defaultLanguageVersion; i++)
 80101d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	3301      	adds	r3, #1
 80101da:	b29b      	uxth	r3, r3
 80101dc:	817b      	strh	r3, [r7, #10]
 80101de:	e7e2      	b.n	80101a6 <_ZN14CTextResources19startSequentialReadEm+0x32>
        }

        readStringLength(stringAddress, &stringLength);
 80101e0:	f107 0308 	add.w	r3, r7, #8
 80101e4:	4619      	mov	r1, r3
 80101e6:	68f8      	ldr	r0, [r7, #12]
 80101e8:	f000 f80c 	bl	8010204 <_ZN14CTextResources16readStringLengthEmPt>

        if (stringLength == 0)
 80101ec:	893b      	ldrh	r3, [r7, #8]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d101      	bne.n	80101f6 <_ZN14CTextResources19startSequentialReadEm+0x82>
        {
            stringAddress = address;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	60fb      	str	r3, [r7, #12]
        }
    }

    return stringAddress;
 80101f6:	68fb      	ldr	r3, [r7, #12]
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3710      	adds	r7, #16
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}
 8010200:	20000e8a 	.word	0x20000e8a

08010204 <_ZN14CTextResources16readStringLengthEmPt>:

int8_t CTextResources::readStringLength(uint32_t address, uint16_t *result)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b084      	sub	sp, #16
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
    uint8_t stringLength[2];
    readData(address, &stringLength[0], sizeof(stringLength[0]));
 801020e:	f107 030c 	add.w	r3, r7, #12
 8010212:	2201      	movs	r2, #1
 8010214:	4619      	mov	r1, r3
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f001 f942 	bl	80114a0 <_ZN17CTextResourcesHAL8readDataEmPvs>
    if (stringLength[0] < 255)
 801021c:	7b3b      	ldrb	r3, [r7, #12]
 801021e:	2bfe      	cmp	r3, #254	; 0xfe
 8010220:	dc05      	bgt.n	801022e <_ZN14CTextResources16readStringLengthEmPt+0x2a>
    {
        *result = stringLength[0];
 8010222:	7b3b      	ldrb	r3, [r7, #12]
 8010224:	b29a      	uxth	r2, r3
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	801a      	strh	r2, [r3, #0]
        return 1;
 801022a:	2301      	movs	r3, #1
 801022c:	e012      	b.n	8010254 <_ZN14CTextResources16readStringLengthEmPt+0x50>
    }
    else
    {
        readData(address + sizeof(stringLength[0]), stringLength, sizeof(stringLength));
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	3301      	adds	r3, #1
 8010232:	f107 010c 	add.w	r1, r7, #12
 8010236:	2202      	movs	r2, #2
 8010238:	4618      	mov	r0, r3
 801023a:	f001 f931 	bl	80114a0 <_ZN17CTextResourcesHAL8readDataEmPvs>
        *result = (stringLength[0] * 256) + stringLength[1];
 801023e:	7b3b      	ldrb	r3, [r7, #12]
 8010240:	b29b      	uxth	r3, r3
 8010242:	021b      	lsls	r3, r3, #8
 8010244:	b29a      	uxth	r2, r3
 8010246:	7b7b      	ldrb	r3, [r7, #13]
 8010248:	b29b      	uxth	r3, r3
 801024a:	4413      	add	r3, r2
 801024c:	b29a      	uxth	r2, r3
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	801a      	strh	r2, [r3, #0]
        return 3;
 8010252:	2303      	movs	r3, #3
    }
}
 8010254:	4618      	mov	r0, r3
 8010256:	3710      	adds	r7, #16
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <_ZN8CTimeFix12localtimeFixEPKl>:
 */

#include "CTimeFix.h"

tm *CTimeFix::localtimeFix(const time_t *__tp)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b084      	sub	sp, #16
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
    tm *result;
    time_t time = *__tp;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	60bb      	str	r3, [r7, #8]
    if (time > 0)
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	2b00      	cmp	r3, #0
 801026e:	dd06      	ble.n	801027e <_ZN8CTimeFix12localtimeFixEPKl+0x22>
    {
        result = localtime(&time);
 8010270:	f107 0308 	add.w	r3, r7, #8
 8010274:	4618      	mov	r0, r3
 8010276:	f006 fce7 	bl	8016c48 <localtime>
 801027a:	60f8      	str	r0, [r7, #12]
 801027c:	e03b      	b.n	80102f6 <_ZN8CTimeFix12localtimeFixEPKl+0x9a>
    }
    else
    {
        if (time >= -184204800 - 0x2FD100 - (24 * 60 * 60)) //Rok 2100 nie jest przestępny
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	4a1f      	ldr	r2, [pc, #124]	; (8010300 <_ZN8CTimeFix12localtimeFixEPKl+0xa4>)
 8010282:	4293      	cmp	r3, r2
 8010284:	db11      	blt.n	80102aa <_ZN8CTimeFix12localtimeFixEPKl+0x4e>
        {
            time += 0x2FD100 + (24 * 60 * 60); //1.03.2100 -> 1.03.1964
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	f503 1344 	add.w	r3, r3, #3211264	; 0x310000
 801028c:	f503 530a 	add.w	r3, r3, #8832	; 0x2280
 8010290:	60bb      	str	r3, [r7, #8]
            result = localtime(&time);
 8010292:	f107 0308 	add.w	r3, r7, #8
 8010296:	4618      	mov	r0, r3
 8010298:	f006 fcd6 	bl	8016c48 <localtime>
 801029c:	60f8      	str	r0, [r7, #12]
            result->tm_wday += 1; //1.03.1902 to niedziela, 1.03.2100 to poniedziałek
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	699b      	ldr	r3, [r3, #24]
 80102a2:	1c5a      	adds	r2, r3, #1
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	619a      	str	r2, [r3, #24]
 80102a8:	e010      	b.n	80102cc <_ZN8CTimeFix12localtimeFixEPKl+0x70>
        }
        else
        {
            time += 0x2FD100; //1.01.2038 -> 1.01.1902
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	f503 133f 	add.w	r3, r3, #3129344	; 0x2fc000
 80102b0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80102b4:	60bb      	str	r3, [r7, #8]
            result = localtime(&time);
 80102b6:	f107 0308 	add.w	r3, r7, #8
 80102ba:	4618      	mov	r0, r3
 80102bc:	f006 fcc4 	bl	8016c48 <localtime>
 80102c0:	60f8      	str	r0, [r7, #12]
            result->tm_wday += 2; //1.01.1902 to środa, 1.01.2038 to piątek
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	699b      	ldr	r3, [r3, #24]
 80102c6:	1c9a      	adds	r2, r3, #2
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	619a      	str	r2, [r3, #24]
        }
        result->tm_year += 136; //1902 -> 2138
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	695b      	ldr	r3, [r3, #20]
 80102d0:	f103 0288 	add.w	r2, r3, #136	; 0x88
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	615a      	str	r2, [r3, #20]
        result->tm_wday %= 7;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	699a      	ldr	r2, [r3, #24]
 80102dc:	4b09      	ldr	r3, [pc, #36]	; (8010304 <_ZN8CTimeFix12localtimeFixEPKl+0xa8>)
 80102de:	fb83 1302 	smull	r1, r3, r3, r2
 80102e2:	4413      	add	r3, r2
 80102e4:	1099      	asrs	r1, r3, #2
 80102e6:	17d3      	asrs	r3, r2, #31
 80102e8:	1ac9      	subs	r1, r1, r3
 80102ea:	460b      	mov	r3, r1
 80102ec:	00db      	lsls	r3, r3, #3
 80102ee:	1a5b      	subs	r3, r3, r1
 80102f0:	1ad1      	subs	r1, r2, r3
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	6199      	str	r1, [r3, #24]
    }
    return result;
 80102f6:	68fb      	ldr	r3, [r7, #12]
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	3710      	adds	r7, #16
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	f4d41f80 	.word	0xf4d41f80
 8010304:	92492493 	.word	0x92492493

08010308 <_ZN8CTimeFix9mktimeFixEP2tm>:

time_t CTimeFix::mktimeFix(tm *__tp)
{
 8010308:	b5b0      	push	{r4, r5, r7, lr}
 801030a:	b08c      	sub	sp, #48	; 0x30
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
    time_t result;
    tm time = *__tp;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f107 0408 	add.w	r4, r7, #8
 8010316:	461d      	mov	r5, r3
 8010318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801031a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801031c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801031e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010320:	682b      	ldr	r3, [r5, #0]
 8010322:	6023      	str	r3, [r4, #0]
    if (time.tm_year < 138)
 8010324:	69fb      	ldr	r3, [r7, #28]
 8010326:	2b89      	cmp	r3, #137	; 0x89
 8010328:	dc06      	bgt.n	8010338 <_ZN8CTimeFix9mktimeFixEP2tm+0x30>
    {
        result = mktime(&time);
 801032a:	f107 0308 	add.w	r3, r7, #8
 801032e:	4618      	mov	r0, r3
 8010330:	f007 f8cc 	bl	80174cc <mktime>
 8010334:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010336:	e019      	b.n	801036c <_ZN8CTimeFix9mktimeFixEP2tm+0x64>
    }
    else
    {
        time.tm_year -= 136; //2138 -> 1902
 8010338:	69fb      	ldr	r3, [r7, #28]
 801033a:	3b88      	subs	r3, #136	; 0x88
 801033c:	61fb      	str	r3, [r7, #28]
        result = mktime(&time);
 801033e:	f107 0308 	add.w	r3, r7, #8
 8010342:	4618      	mov	r0, r3
 8010344:	f007 f8c2 	bl	80174cc <mktime>
 8010348:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (result >= -184204800) //Rok 2100 nie jest przestępny
 801034a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801034c:	4a0a      	ldr	r2, [pc, #40]	; (8010378 <_ZN8CTimeFix9mktimeFixEP2tm+0x70>)
 801034e:	4293      	cmp	r3, r2
 8010350:	db06      	blt.n	8010360 <_ZN8CTimeFix9mktimeFixEP2tm+0x58>
        {
            result -= 0x2FD100 + (24 * 60 * 60); //1.03.1964 -> 1.03.2100
 8010352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010354:	f5a3 1344 	sub.w	r3, r3, #3211264	; 0x310000
 8010358:	f5a3 530a 	sub.w	r3, r3, #8832	; 0x2280
 801035c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801035e:	e005      	b.n	801036c <_ZN8CTimeFix9mktimeFixEP2tm+0x64>
        }
        else
        {
            result -= 0x2FD100; //1.01.1902 -> 1.01.2038
 8010360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010362:	f5a3 133f 	sub.w	r3, r3, #3129344	; 0x2fc000
 8010366:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 801036a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }
    return result;
 801036c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801036e:	4618      	mov	r0, r3
 8010370:	3730      	adds	r7, #48	; 0x30
 8010372:	46bd      	mov	sp, r7
 8010374:	bdb0      	pop	{r4, r5, r7, pc}
 8010376:	bf00      	nop
 8010378:	f5054200 	.word	0xf5054200

0801037c <_ZN6CTimer13classInit1000EPFmvE>:
uint32_t (*CTimer::getTickFunc)() = CTimer::defaultGetTickFunc;

/*---CLASS FUNCTIONS-------------------------------------*/
/*-------------------------------------------------------*/
void CTimer::classInit1000(uint32_t (*getterTick1000)())
{
 801037c:	b480      	push	{r7}
 801037e:	b083      	sub	sp, #12
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
    getTickFunc = getterTick1000;
 8010384:	4a03      	ldr	r2, [pc, #12]	; (8010394 <_ZN6CTimer13classInit1000EPFmvE+0x18>)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6013      	str	r3, [r2, #0]
}
 801038a:	bf00      	nop
 801038c:	370c      	adds	r7, #12
 801038e:	46bd      	mov	sp, r7
 8010390:	bc80      	pop	{r7}
 8010392:	4770      	bx	lr
 8010394:	20000018 	.word	0x20000018

08010398 <_ZN6CTimer18defaultGetTickFuncEv>:

/*-------------------------------------------------------*/
uint32_t CTimer::defaultGetTickFunc()
{
 8010398:	b480      	push	{r7}
 801039a:	af00      	add	r7, sp, #0
    return 0;
 801039c:	2300      	movs	r3, #0
}
 801039e:	4618      	mov	r0, r3
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bc80      	pop	{r7}
 80103a4:	4770      	bx	lr
	...

080103a8 <_ZN6CTimer7getTickEv>:

/*-------------------------------------------------------*/
uint32_t CTimer::getTick()
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	af00      	add	r7, sp, #0
    return getTickFunc();
 80103ac:	4b02      	ldr	r3, [pc, #8]	; (80103b8 <_ZN6CTimer7getTickEv+0x10>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4798      	blx	r3
 80103b2:	4603      	mov	r3, r0
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	20000018 	.word	0x20000018

080103bc <_ZN6CTimerC1ENS_4UnitE>:

/*---OBJECT FUNCTIONS------------------------------------*/
/*-------------------------------------------------------*/
CTimer::CTimer(Unit unit)
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	460b      	mov	r3, r1
 80103c6:	70fb      	strb	r3, [r7, #3]
{
    setCounterUnit(unit);
 80103c8:	78fb      	ldrb	r3, [r7, #3]
 80103ca:	4619      	mov	r1, r3
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f000 f805 	bl	80103dc <_ZN6CTimer14setCounterUnitENS_4UnitE>
}
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	4618      	mov	r0, r3
 80103d6:	3708      	adds	r7, #8
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <_ZN6CTimer14setCounterUnitENS_4UnitE>:

/*-------------------------------------------------------*/
void CTimer::setCounterUnit(Unit unit)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b082      	sub	sp, #8
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	460b      	mov	r3, r1
 80103e6:	70fb      	strb	r3, [r7, #3]
    turnOff();
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f000 f887 	bl	80104fc <_ZN6CTimer7turnOffEv>
    this->unit = unit;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	78fa      	ldrb	r2, [r7, #3]
 80103f2:	721a      	strb	r2, [r3, #8]
}
 80103f4:	bf00      	nop
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <_ZN6CTimer14setCounterTypeENS_4UnitE>:

/*-------------------------------------------------------*/
void CTimer::setCounterType(Unit unit)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	460b      	mov	r3, r1
 8010406:	70fb      	strb	r3, [r7, #3]
    setCounterUnit(unit);
 8010408:	78fb      	ldrb	r3, [r7, #3]
 801040a:	4619      	mov	r1, r3
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f7ff ffe5 	bl	80103dc <_ZN6CTimer14setCounterUnitENS_4UnitE>
}
 8010412:	bf00      	nop
 8010414:	3708      	adds	r7, #8
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}

0801041a <_ZN6CTimer5startEm>:

/*-------------------------------------------------------*/
void CTimer::start(uint32_t time)
{
 801041a:	b580      	push	{r7, lr}
 801041c:	b082      	sub	sp, #8
 801041e:	af00      	add	r7, sp, #0
 8010420:	6078      	str	r0, [r7, #4]
 8010422:	6039      	str	r1, [r7, #0]
	timState = TS_DOWNCOUNTING;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2201      	movs	r2, #1
 8010428:	725a      	strb	r2, [r3, #9]
    startTick = getTick();
 801042a:	f7ff ffbd 	bl	80103a8 <_ZN6CTimer7getTickEv>
 801042e:	4602      	mov	r2, r0
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	601a      	str	r2, [r3, #0]
    duration = time;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	683a      	ldr	r2, [r7, #0]
 8010438:	605a      	str	r2, [r3, #4]
}
 801043a:	bf00      	nop
 801043c:	3708      	adds	r7, #8
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}

08010442 <_ZN6CTimer12startAlignedEm>:

/*-------------------------------------------------------*/
void CTimer::startAligned(uint32_t time)
{
 8010442:	b580      	push	{r7, lr}
 8010444:	b084      	sub	sp, #16
 8010446:	af00      	add	r7, sp, #0
 8010448:	6078      	str	r0, [r7, #4]
 801044a:	6039      	str	r1, [r7, #0]
    uint32_t timeSinceStart;
    uint32_t totalDuration;

    if (timState == TS_ELAPSED)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	7a5b      	ldrb	r3, [r3, #9]
 8010450:	2b02      	cmp	r3, #2
 8010452:	d124      	bne.n	801049e <_ZN6CTimer12startAlignedEm+0x5c>
    {
        timeSinceStart = _getTimeSinceStart();
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f000 f8c3 	bl	80105e0 <_ZN6CTimer18_getTimeSinceStartEv>
 801045a:	60f8      	str	r0, [r7, #12]
        totalDuration = duration + time;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	685a      	ldr	r2, [r3, #4]
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	4413      	add	r3, r2
 8010464:	60bb      	str	r3, [r7, #8]

        if (timeSinceStart >= totalDuration)
 8010466:	68fa      	ldr	r2, [r7, #12]
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	429a      	cmp	r2, r3
 801046c:	d304      	bcc.n	8010478 <_ZN6CTimer12startAlignedEm+0x36>
        {
            //ustawiany czas juz minal
            start(time);
 801046e:	6839      	ldr	r1, [r7, #0]
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f7ff ffd2 	bl	801041a <_ZN6CTimer5startEm>
    }
    else
    {
        start(time);
    }
}
 8010476:	e016      	b.n	80104a6 <_ZN6CTimer12startAlignedEm+0x64>
            timState = TS_DOWNCOUNTING;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2201      	movs	r2, #1
 801047c:	725a      	strb	r2, [r3, #9]
            startTick += _timerUnits2ticks(duration);    //poprzednia wartosc m_duration
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	685b      	ldr	r3, [r3, #4]
 8010482:	4619      	mov	r1, r3
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f000 f957 	bl	8010738 <_ZN6CTimer17_timerUnits2ticksEm>
 801048a:	4602      	mov	r2, r0
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	441a      	add	r2, r3
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	601a      	str	r2, [r3, #0]
            duration = time;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	683a      	ldr	r2, [r7, #0]
 801049a:	605a      	str	r2, [r3, #4]
}
 801049c:	e003      	b.n	80104a6 <_ZN6CTimer12startAlignedEm+0x64>
        start(time);
 801049e:	6839      	ldr	r1, [r7, #0]
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f7ff ffba 	bl	801041a <_ZN6CTimer5startEm>
}
 80104a6:	bf00      	nop
 80104a8:	3710      	adds	r7, #16
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}

080104ae <_ZN6CTimer12startFreeRunEv>:
    }
}

/*-------------------------------------------------------*/
void CTimer::startFreeRun()
{
 80104ae:	b580      	push	{r7, lr}
 80104b0:	b082      	sub	sp, #8
 80104b2:	af00      	add	r7, sp, #0
 80104b4:	6078      	str	r0, [r7, #4]
    timState = TS_FREE_RUN;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2203      	movs	r2, #3
 80104ba:	725a      	strb	r2, [r3, #9]
    duration = 0;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2200      	movs	r2, #0
 80104c0:	605a      	str	r2, [r3, #4]
    startTick = getTick();
 80104c2:	f7ff ff71 	bl	80103a8 <_ZN6CTimer7getTickEv>
 80104c6:	4602      	mov	r2, r0
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	601a      	str	r2, [r3, #0]
}
 80104cc:	bf00      	nop
 80104ce:	3708      	adds	r7, #8
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}

080104d4 <_ZN6CTimer14getOverallTimeEv>:

/*-------------------------------------------------------*/
uint32_t CTimer::getOverallTime()
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b084      	sub	sp, #16
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
    uint32_t result = 0;
 80104dc:	2300      	movs	r3, #0
 80104de:	60fb      	str	r3, [r7, #12]

    //nie potrzebny _updateState
    if(_isInDowncounterMode())
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f000 f8bd 	bl	8010660 <_ZN6CTimer20_isInDowncounterModeEv>
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d002      	beq.n	80104f2 <_ZN6CTimer14getOverallTimeEv+0x1e>
    {
        result = duration;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	60fb      	str	r3, [r7, #12]
    }
    return result;
 80104f2:	68fb      	ldr	r3, [r7, #12]
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3710      	adds	r7, #16
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <_ZN6CTimer7turnOffEv>:

/*-------------------------------------------------------*/
void CTimer::turnOff()
{
 80104fc:	b480      	push	{r7}
 80104fe:	b083      	sub	sp, #12
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
    timState = TS_OFF;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2200      	movs	r2, #0
 8010508:	725a      	strb	r2, [r3, #9]
}
 801050a:	bf00      	nop
 801050c:	370c      	adds	r7, #12
 801050e:	46bd      	mov	sp, r7
 8010510:	bc80      	pop	{r7}
 8010512:	4770      	bx	lr

08010514 <_ZN6CTimer6isZeroEv>:
    return (timState != TS_OFF);
}

/*-------------------------------------------------------*/
bool CTimer::isZero()
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b084      	sub	sp, #16
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
	bool isZeroFlag = false;
 801051c:	2300      	movs	r3, #0
 801051e:	73fb      	strb	r3, [r7, #15]

	_updateDowncounter();
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f000 f873 	bl	801060c <_ZN6CTimer18_updateDowncounterEv>
	switch(timState)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	7a5b      	ldrb	r3, [r3, #9]
 801052a:	2b03      	cmp	r3, #3
 801052c:	d80d      	bhi.n	801054a <_ZN6CTimer6isZeroEv+0x36>
 801052e:	a201      	add	r2, pc, #4	; (adr r2, 8010534 <_ZN6CTimer6isZeroEv+0x20>)
 8010530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010534:	08010545 	.word	0x08010545
 8010538:	0801054b 	.word	0x0801054b
 801053c:	08010545 	.word	0x08010545
 8010540:	0801054b 	.word	0x0801054b
	{
    case TS_ELAPSED:
    case TS_OFF:
        isZeroFlag = true;
 8010544:	2301      	movs	r3, #1
 8010546:	73fb      	strb	r3, [r7, #15]
        break;
 8010548:	bf00      	nop
    case TS_DOWNCOUNTING:
    case TS_FREE_RUN:
        break;
	}
	return isZeroFlag;
 801054a:	7bfb      	ldrb	r3, [r7, #15]
}
 801054c:	4618      	mov	r0, r3
 801054e:	3710      	adds	r7, #16
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <_ZN6CTimer9isElapsedEv>:
    return !isZero();
}

/*-------------------------------------------------------*/
bool CTimer::isElapsed()
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b084      	sub	sp, #16
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
    bool elapsedFlag = false;
 801055c:	2300      	movs	r3, #0
 801055e:	73fb      	strb	r3, [r7, #15]

    _updateDowncounter();
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f000 f853 	bl	801060c <_ZN6CTimer18_updateDowncounterEv>
    switch(timState)
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	7a5b      	ldrb	r3, [r3, #9]
 801056a:	2b03      	cmp	r3, #3
 801056c:	d80d      	bhi.n	801058a <_ZN6CTimer9isElapsedEv+0x36>
 801056e:	a201      	add	r2, pc, #4	; (adr r2, 8010574 <_ZN6CTimer9isElapsedEv+0x20>)
 8010570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010574:	0801058b 	.word	0x0801058b
 8010578:	0801058b 	.word	0x0801058b
 801057c:	08010585 	.word	0x08010585
 8010580:	0801058b 	.word	0x0801058b
    {
    case TS_ELAPSED:
        elapsedFlag = true;
 8010584:	2301      	movs	r3, #1
 8010586:	73fb      	strb	r3, [r7, #15]
        break;
 8010588:	bf00      	nop
    case TS_OFF:
    case TS_DOWNCOUNTING:
    case TS_FREE_RUN:
        break;
    }
    return elapsedFlag;
 801058a:	7bfb      	ldrb	r3, [r7, #15]
}
 801058c:	4618      	mov	r0, r3
 801058e:	3710      	adds	r7, #16
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}

08010594 <_ZN6CTimer14getElapsedTimeEv>:

/*-------------------------------------------------------*/
uint32_t CTimer::getElapsedTime()
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b084      	sub	sp, #16
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime;

    elapsedTime = _updateDowncounter();
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f000 f835 	bl	801060c <_ZN6CTimer18_updateDowncounterEv>
 80105a2:	60f8      	str	r0, [r7, #12]
    switch(timState)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	7a5b      	ldrb	r3, [r3, #9]
 80105a8:	2b03      	cmp	r3, #3
 80105aa:	d814      	bhi.n	80105d6 <_ZN6CTimer14getElapsedTimeEv+0x42>
 80105ac:	a201      	add	r2, pc, #4	; (adr r2, 80105b4 <_ZN6CTimer14getElapsedTimeEv+0x20>)
 80105ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105b2:	bf00      	nop
 80105b4:	080105d7 	.word	0x080105d7
 80105b8:	080105d7 	.word	0x080105d7
 80105bc:	080105c5 	.word	0x080105c5
 80105c0:	080105cd 	.word	0x080105cd
    {
    case TS_DOWNCOUNTING:
        //elapsedTime ma juz wartosc
        break;
    case TS_ELAPSED:
        elapsedTime = duration;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	685b      	ldr	r3, [r3, #4]
 80105c8:	60fb      	str	r3, [r7, #12]
        break;
 80105ca:	e004      	b.n	80105d6 <_ZN6CTimer14getElapsedTimeEv+0x42>
    case TS_FREE_RUN:
        elapsedTime = _getTimeSinceStart();
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f000 f807 	bl	80105e0 <_ZN6CTimer18_getTimeSinceStartEv>
 80105d2:	60f8      	str	r0, [r7, #12]
        break;
 80105d4:	bf00      	nop
    case TS_OFF:
        //elapsedTime ma juz wartosc
        break;
    }
    return elapsedTime;
 80105d6:	68fb      	ldr	r3, [r7, #12]
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3710      	adds	r7, #16
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <_ZN6CTimer18_getTimeSinceStartEv>:
}

//--------PRIVATE----------------------------------------------------
/*-------------------------------------------------------*/
uint32_t CTimer::_getTimeSinceStart()
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b084      	sub	sp, #16
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
    uint32_t ticksDuration;
    uint32_t unitsDuration;

    ticksDuration = getTick() - startTick;
 80105e8:	f7ff fede 	bl	80103a8 <_ZN6CTimer7getTickEv>
 80105ec:	4602      	mov	r2, r0
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	1ad3      	subs	r3, r2, r3
 80105f4:	60fb      	str	r3, [r7, #12]
    unitsDuration = _ticks2timerUnits(ticksDuration);
 80105f6:	68f9      	ldr	r1, [r7, #12]
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f000 f8af 	bl	801075c <_ZN6CTimer17_ticks2timerUnitsEm>
 80105fe:	60b8      	str	r0, [r7, #8]

    return unitsDuration;
 8010600:	68bb      	ldr	r3, [r7, #8]
}
 8010602:	4618      	mov	r0, r3
 8010604:	3710      	adds	r7, #16
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
	...

0801060c <_ZN6CTimer18_updateDowncounterEv>:

/*-------------------------------------------------------*/
uint32_t CTimer::_updateDowncounter()
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b084      	sub	sp, #16
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
    uint32_t timeSinceStart = 0;
 8010614:	2300      	movs	r3, #0
 8010616:	60fb      	str	r3, [r7, #12]

    switch(timState)
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	7a5b      	ldrb	r3, [r3, #9]
 801061c:	2b03      	cmp	r3, #3
 801061e:	d81a      	bhi.n	8010656 <_ZN6CTimer18_updateDowncounterEv+0x4a>
 8010620:	a201      	add	r2, pc, #4	; (adr r2, 8010628 <_ZN6CTimer18_updateDowncounterEv+0x1c>)
 8010622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010626:	bf00      	nop
 8010628:	08010657 	.word	0x08010657
 801062c:	08010639 	.word	0x08010639
 8010630:	08010657 	.word	0x08010657
 8010634:	08010657 	.word	0x08010657
    {
    case TS_OFF:
        break;
    case TS_DOWNCOUNTING:
        timeSinceStart = _getTimeSinceStart();
 8010638:	6878      	ldr	r0, [r7, #4]
 801063a:	f7ff ffd1 	bl	80105e0 <_ZN6CTimer18_getTimeSinceStartEv>
 801063e:	60f8      	str	r0, [r7, #12]
        if (_isTimeElapsed(timeSinceStart))
 8010640:	68f9      	ldr	r1, [r7, #12]
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f000 f82e 	bl	80106a4 <_ZN6CTimer14_isTimeElapsedEm>
 8010648:	4603      	mov	r3, r0
 801064a:	2b00      	cmp	r3, #0
 801064c:	d002      	beq.n	8010654 <_ZN6CTimer18_updateDowncounterEv+0x48>
        {
            timState = TS_ELAPSED;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2202      	movs	r2, #2
 8010652:	725a      	strb	r2, [r3, #9]
        }
        break;
 8010654:	bf00      	nop
    case TS_ELAPSED:
    case TS_FREE_RUN:
        break;
    }

    return timeSinceStart;
 8010656:	68fb      	ldr	r3, [r7, #12]
}
 8010658:	4618      	mov	r0, r3
 801065a:	3710      	adds	r7, #16
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <_ZN6CTimer20_isInDowncounterModeEv>:

/*-------------------------------------------------------*/
bool CTimer::_isInDowncounterMode()
{
 8010660:	b480      	push	{r7}
 8010662:	b085      	sub	sp, #20
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
    bool result = false;
 8010668:	2300      	movs	r3, #0
 801066a:	73fb      	strb	r3, [r7, #15]

    switch(timState)
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	7a5b      	ldrb	r3, [r3, #9]
 8010670:	2b03      	cmp	r3, #3
 8010672:	d811      	bhi.n	8010698 <_ZN6CTimer20_isInDowncounterModeEv+0x38>
 8010674:	a201      	add	r2, pc, #4	; (adr r2, 801067c <_ZN6CTimer20_isInDowncounterModeEv+0x1c>)
 8010676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801067a:	bf00      	nop
 801067c:	08010693 	.word	0x08010693
 8010680:	0801068d 	.word	0x0801068d
 8010684:	0801068d 	.word	0x0801068d
 8010688:	08010693 	.word	0x08010693
    {
    case TS_DOWNCOUNTING:
    case TS_ELAPSED:
        result = true;
 801068c:	2301      	movs	r3, #1
 801068e:	73fb      	strb	r3, [r7, #15]
        break;
 8010690:	e002      	b.n	8010698 <_ZN6CTimer20_isInDowncounterModeEv+0x38>
    case TS_FREE_RUN:
    case TS_OFF:
        result = false;
 8010692:	2300      	movs	r3, #0
 8010694:	73fb      	strb	r3, [r7, #15]
        break;
 8010696:	bf00      	nop
    }
    return result;
 8010698:	7bfb      	ldrb	r3, [r7, #15]
}
 801069a:	4618      	mov	r0, r3
 801069c:	3714      	adds	r7, #20
 801069e:	46bd      	mov	sp, r7
 80106a0:	bc80      	pop	{r7}
 80106a2:	4770      	bx	lr

080106a4 <_ZN6CTimer14_isTimeElapsedEm>:

/*-------------------------------------------------------*/
bool CTimer::_isTimeElapsed(uint32_t _timeSinceStart)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b083      	sub	sp, #12
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	6039      	str	r1, [r7, #0]
    return _timeSinceStart >= duration;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	685a      	ldr	r2, [r3, #4]
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	429a      	cmp	r2, r3
 80106b6:	bf94      	ite	ls
 80106b8:	2301      	movls	r3, #1
 80106ba:	2300      	movhi	r3, #0
 80106bc:	b2db      	uxtb	r3, r3
}
 80106be:	4618      	mov	r0, r3
 80106c0:	370c      	adds	r7, #12
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bc80      	pop	{r7}
 80106c6:	4770      	bx	lr

080106c8 <_ZN6CTimer13getFactor1000ENS_4UnitE>:

/*-------------------------------------------------------*/
uint32_t CTimer::getFactor1000(Unit unit)
{
 80106c8:	b480      	push	{r7}
 80106ca:	b085      	sub	sp, #20
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	4603      	mov	r3, r0
 80106d0:	71fb      	strb	r3, [r7, #7]
    uint32_t factor;

    switch (unit)
 80106d2:	79fb      	ldrb	r3, [r7, #7]
 80106d4:	2b05      	cmp	r3, #5
 80106d6:	d823      	bhi.n	8010720 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x58>
 80106d8:	a201      	add	r2, pc, #4	; (adr r2, 80106e0 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x18>)
 80106da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106de:	bf00      	nop
 80106e0:	080106f9 	.word	0x080106f9
 80106e4:	080106ff 	.word	0x080106ff
 80106e8:	08010705 	.word	0x08010705
 80106ec:	0801070b 	.word	0x0801070b
 80106f0:	08010713 	.word	0x08010713
 80106f4:	0801071b 	.word	0x0801071b
    {
        case UNIT_MILISEC:
            //0.001s <-> 0.001s
            factor = 1U;
 80106f8:	2301      	movs	r3, #1
 80106fa:	60fb      	str	r3, [r7, #12]
            break;
 80106fc:	e013      	b.n	8010726 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x5e>
        case UNIT_HUNDRETHS_SEC:
            //0.001s <-> 0.01s
            factor = 10U;
 80106fe:	230a      	movs	r3, #10
 8010700:	60fb      	str	r3, [r7, #12]
            break;
 8010702:	e010      	b.n	8010726 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x5e>
        case UNIT_TENTHS_SEC:
            //0.001s <-> 0.1s
            factor = 100U;
 8010704:	2364      	movs	r3, #100	; 0x64
 8010706:	60fb      	str	r3, [r7, #12]
            break;
 8010708:	e00d      	b.n	8010726 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x5e>
        case UNIT_SEC:
            //0.001s <-> 1s
            factor = 1000U;
 801070a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801070e:	60fb      	str	r3, [r7, #12]
            break;
 8010710:	e009      	b.n	8010726 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x5e>
        case UNIT_MIN:
            //0.001s <-> 1min
            factor = 60000U;
 8010712:	f64e 2360 	movw	r3, #60000	; 0xea60
 8010716:	60fb      	str	r3, [r7, #12]
            break;
 8010718:	e005      	b.n	8010726 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x5e>
        case UNIT_HOUR:
            //0.001s <-> 1hour
            factor = 3600000U;
 801071a:	4b06      	ldr	r3, [pc, #24]	; (8010734 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x6c>)
 801071c:	60fb      	str	r3, [r7, #12]
            break;
 801071e:	e002      	b.n	8010726 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x5e>
        default:
            factor = 1U;
 8010720:	2301      	movs	r3, #1
 8010722:	60fb      	str	r3, [r7, #12]
            break;
 8010724:	bf00      	nop
    }
    return factor;
 8010726:	68fb      	ldr	r3, [r7, #12]
}
 8010728:	4618      	mov	r0, r3
 801072a:	3714      	adds	r7, #20
 801072c:	46bd      	mov	sp, r7
 801072e:	bc80      	pop	{r7}
 8010730:	4770      	bx	lr
 8010732:	bf00      	nop
 8010734:	0036ee80 	.word	0x0036ee80

08010738 <_ZN6CTimer17_timerUnits2ticksEm>:

/*-------------------------------------------------------*/
uint32_t CTimer::_timerUnits2ticks(uint32_t timerUnits)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b082      	sub	sp, #8
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	6039      	str	r1, [r7, #0]
    return timerUnits * getFactor1000(unit);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	7a1b      	ldrb	r3, [r3, #8]
 8010746:	4618      	mov	r0, r3
 8010748:	f7ff ffbe 	bl	80106c8 <_ZN6CTimer13getFactor1000ENS_4UnitE>
 801074c:	4602      	mov	r2, r0
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	fb03 f302 	mul.w	r3, r3, r2
}
 8010754:	4618      	mov	r0, r3
 8010756:	3708      	adds	r7, #8
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}

0801075c <_ZN6CTimer17_ticks2timerUnitsEm>:

/*-------------------------------------------------------*/
uint32_t CTimer::_ticks2timerUnits(uint32_t ticks)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b082      	sub	sp, #8
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	6039      	str	r1, [r7, #0]
    return ticks / getFactor1000(unit);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	7a1b      	ldrb	r3, [r3, #8]
 801076a:	4618      	mov	r0, r3
 801076c:	f7ff ffac 	bl	80106c8 <_ZN6CTimer13getFactor1000ENS_4UnitE>
 8010770:	4602      	mov	r2, r0
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8010778:	4618      	mov	r0, r3
 801077a:	3708      	adds	r7, #8
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}

08010780 <_ZN16CScreenEnterCodeD1Ev>:
{
public:
	CScreenEnterCode(uint8_t num_digit): NUM_OF_EDIT_NUMBER(num_digit){
		m_widgetEditNumber = new CWidgetEditNumber[NUM_OF_EDIT_NUMBER];
	}
	virtual ~CScreenEnterCode(){
 8010780:	b580      	push	{r7, lr}
 8010782:	b082      	sub	sp, #8
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	4a07      	ldr	r2, [pc, #28]	; (80107a8 <_ZN16CScreenEnterCodeD1Ev+0x28>)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	601a      	str	r2, [r3, #0]
 801078e:	4a07      	ldr	r2, [pc, #28]	; (80107ac <_ZN16CScreenEnterCodeD1Ev+0x2c>)
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	605a      	str	r2, [r3, #4]
		delete m_widgetEditNumber;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010798:	4618      	mov	r0, r3
 801079a:	f004 ff1f 	bl	80155dc <_ZdlPv>
	}
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	4618      	mov	r0, r3
 80107a2:	3708      	adds	r7, #8
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}
 80107a8:	0801cc3c 	.word	0x0801cc3c
 80107ac:	0801cc64 	.word	0x0801cc64

080107b0 <_ZN16CScreenEnterCodeD0Ev>:
	virtual ~CScreenEnterCode(){
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b082      	sub	sp, #8
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
	}
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f7ff ffe1 	bl	8010780 <_ZN16CScreenEnterCodeD1Ev>
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f004 ff0c 	bl	80155dc <_ZdlPv>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	4618      	mov	r0, r3
 80107c8:	3708      	adds	r7, #8
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}

080107ce <_ZN16CScreenEnterCode4initEm>:
 */

#include "CScreenEnterCode.h"

void CScreenEnterCode::init(uint32_t title)
{
 80107ce:	b480      	push	{r7}
 80107d0:	b083      	sub	sp, #12
 80107d2:	af00      	add	r7, sp, #0
 80107d4:	6078      	str	r0, [r7, #4]
 80107d6:	6039      	str	r1, [r7, #0]
    m_title = title;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	683a      	ldr	r2, [r7, #0]
 80107dc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80107de:	bf00      	nop
 80107e0:	370c      	adds	r7, #12
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bc80      	pop	{r7}
 80107e6:	4770      	bx	lr

080107e8 <_ZN16CScreenEnterCode9getResultEPl>:

bool CScreenEnterCode::getResult(int32_t *result)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b084      	sub	sp, #16
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	6039      	str	r1, [r7, #0]
    if (m_result)
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d02e      	beq.n	801085a <_ZN16CScreenEnterCode9getResultEPl+0x72>
    {
        *result = 0;
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	2200      	movs	r2, #0
 8010800:	601a      	str	r2, [r3, #0]
        for (int8_t i = 0; i < NUM_OF_EDIT_NUMBER; i++)
 8010802:	2300      	movs	r3, #0
 8010804:	73fb      	strb	r3, [r7, #15]
 8010806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	7e12      	ldrb	r2, [r2, #24]
 801080e:	4293      	cmp	r3, r2
 8010810:	da21      	bge.n	8010856 <_ZN16CScreenEnterCode9getResultEPl+0x6e>
        {
            *result *= 10;
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	681a      	ldr	r2, [r3, #0]
 8010816:	4613      	mov	r3, r2
 8010818:	009b      	lsls	r3, r3, #2
 801081a:	4413      	add	r3, r2
 801081c:	005b      	lsls	r3, r3, #1
 801081e:	461a      	mov	r2, r3
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	601a      	str	r2, [r3, #0]
            *result += m_widgetEditNumber[i].getValue();
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010828:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801082c:	4613      	mov	r3, r2
 801082e:	005b      	lsls	r3, r3, #1
 8010830:	4413      	add	r3, r2
 8010832:	00db      	lsls	r3, r3, #3
 8010834:	440b      	add	r3, r1
 8010836:	4618      	mov	r0, r3
 8010838:	f001 fe7a 	bl	8012530 <_ZN17CWidgetEditNumber8getValueEv>
 801083c:	4602      	mov	r2, r0
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	441a      	add	r2, r3
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	601a      	str	r2, [r3, #0]
        for (int8_t i = 0; i < NUM_OF_EDIT_NUMBER; i++)
 8010848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801084c:	b2db      	uxtb	r3, r3
 801084e:	3301      	adds	r3, #1
 8010850:	b2db      	uxtb	r3, r3
 8010852:	73fb      	strb	r3, [r7, #15]
 8010854:	e7d7      	b.n	8010806 <_ZN16CScreenEnterCode9getResultEPl+0x1e>
        }
        return true;
 8010856:	2301      	movs	r3, #1
 8010858:	e000      	b.n	801085c <_ZN16CScreenEnterCode9getResultEPl+0x74>
    }
    else
    {
        return false;
 801085a:	2300      	movs	r3, #0
    }
}
 801085c:	4618      	mov	r0, r3
 801085e:	3710      	adds	r7, #16
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <_ZN16CScreenEnterCode7onStartEv>:

void CScreenEnterCode::onStart()
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b088      	sub	sp, #32
 8010868:	af04      	add	r7, sp, #16
 801086a:	6078      	str	r0, [r7, #4]
    m_widgetButtonsBar.init(1, 54, CWidgetButtonsBar::ITEMS_CONFIRM_CANCEL, 2);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f103 001c 	add.w	r0, r3, #28
 8010872:	2300      	movs	r3, #0
 8010874:	9301      	str	r3, [sp, #4]
 8010876:	2302      	movs	r3, #2
 8010878:	9300      	str	r3, [sp, #0]
 801087a:	4b22      	ldr	r3, [pc, #136]	; (8010904 <_ZN16CScreenEnterCode7onStartEv+0xa0>)
 801087c:	2236      	movs	r2, #54	; 0x36
 801087e:	2101      	movs	r1, #1
 8010880:	f001 fc40 	bl	8012104 <_ZN17CWidgetButtonsBar4initEhhPKmab>
    for (int8_t i = 0; i < NUM_OF_EDIT_NUMBER; i++)
 8010884:	2300      	movs	r3, #0
 8010886:	73fb      	strb	r3, [r7, #15]
 8010888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801088c:	687a      	ldr	r2, [r7, #4]
 801088e:	7e12      	ldrb	r2, [r2, #24]
 8010890:	4293      	cmp	r3, r2
 8010892:	da2f      	bge.n	80108f4 <_ZN16CScreenEnterCode7onStartEv+0x90>
    {
        m_widgetEditNumber[i].init((128 - 14 * NUM_OF_EDIT_NUMBER) / 2 + 14 * i, 21, 0, 0, 9, 1, 0);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010898:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801089c:	4613      	mov	r3, r2
 801089e:	005b      	lsls	r3, r3, #1
 80108a0:	4413      	add	r3, r2
 80108a2:	00db      	lsls	r3, r3, #3
 80108a4:	18c8      	adds	r0, r1, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	7e1b      	ldrb	r3, [r3, #24]
 80108aa:	461a      	mov	r2, r3
 80108ac:	4613      	mov	r3, r2
 80108ae:	00d2      	lsls	r2, r2, #3
 80108b0:	1a9b      	subs	r3, r3, r2
 80108b2:	005b      	lsls	r3, r3, #1
 80108b4:	3380      	adds	r3, #128	; 0x80
 80108b6:	0fda      	lsrs	r2, r3, #31
 80108b8:	4413      	add	r3, r2
 80108ba:	105b      	asrs	r3, r3, #1
 80108bc:	b2da      	uxtb	r2, r3
 80108be:	7bfb      	ldrb	r3, [r7, #15]
 80108c0:	4619      	mov	r1, r3
 80108c2:	00c9      	lsls	r1, r1, #3
 80108c4:	1acb      	subs	r3, r1, r3
 80108c6:	005b      	lsls	r3, r3, #1
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	4413      	add	r3, r2
 80108cc:	b2d9      	uxtb	r1, r3
 80108ce:	2300      	movs	r3, #0
 80108d0:	9303      	str	r3, [sp, #12]
 80108d2:	2301      	movs	r3, #1
 80108d4:	9302      	str	r3, [sp, #8]
 80108d6:	2309      	movs	r3, #9
 80108d8:	9301      	str	r3, [sp, #4]
 80108da:	2300      	movs	r3, #0
 80108dc:	9300      	str	r3, [sp, #0]
 80108de:	2300      	movs	r3, #0
 80108e0:	2215      	movs	r2, #21
 80108e2:	f001 fdd9 	bl	8012498 <_ZN17CWidgetEditNumber4initEhhlllaa>
    for (int8_t i = 0; i < NUM_OF_EDIT_NUMBER; i++)
 80108e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108ea:	b2db      	uxtb	r3, r3
 80108ec:	3301      	adds	r3, #1
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	73fb      	strb	r3, [r7, #15]
 80108f2:	e7c9      	b.n	8010888 <_ZN16CScreenEnterCode7onStartEv+0x24>
    }
    m_pointer = 0;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2200      	movs	r2, #0
 80108f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80108fc:	bf00      	nop
 80108fe:	3710      	adds	r7, #16
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}
 8010904:	080222f8 	.word	0x080222f8

08010908 <_ZN16CScreenEnterCode8onResumeEv>:

void CScreenEnterCode::onResume()
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b086      	sub	sp, #24
 801090c:	af02      	add	r7, sp, #8
 801090e:	6078      	str	r0, [r7, #4]
    CScreen::onResume();
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	4618      	mov	r0, r3
 8010914:	f7fe fe9a 	bl	800f64c <_ZN7CScreen8onResumeEv>
    CContext::registerOnKeyListener(&m_widgetButtonsBar);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	331c      	adds	r3, #28
 801091c:	4618      	mov	r0, r3
 801091e:	f7fa ff0d 	bl	800b73c <_ZN8CContext21registerOnKeyListenerEP14IOnKeyListener>
    for (int8_t i = 0; i < NUM_OF_EDIT_NUMBER; i++)
 8010922:	2300      	movs	r3, #0
 8010924:	73fb      	strb	r3, [r7, #15]
 8010926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801092a:	687a      	ldr	r2, [r7, #4]
 801092c:	7e12      	ldrb	r2, [r2, #24]
 801092e:	4293      	cmp	r3, r2
 8010930:	da12      	bge.n	8010958 <_ZN16CScreenEnterCode8onResumeEv+0x50>
    {
        CContext::registerOnKeyListener(&m_widgetEditNumber[i]);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010936:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801093a:	4613      	mov	r3, r2
 801093c:	005b      	lsls	r3, r3, #1
 801093e:	4413      	add	r3, r2
 8010940:	00db      	lsls	r3, r3, #3
 8010942:	440b      	add	r3, r1
 8010944:	4618      	mov	r0, r3
 8010946:	f7fa fef9 	bl	800b73c <_ZN8CContext21registerOnKeyListenerEP14IOnKeyListener>
    for (int8_t i = 0; i < NUM_OF_EDIT_NUMBER; i++)
 801094a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801094e:	b2db      	uxtb	r3, r3
 8010950:	3301      	adds	r3, #1
 8010952:	b2db      	uxtb	r3, r3
 8010954:	73fb      	strb	r3, [r7, #15]
 8010956:	e7e6      	b.n	8010926 <_ZN16CScreenEnterCode8onResumeEv+0x1e>
    }

    CST7565Driver::suspendDrawing();
 8010958:	f7fe fe62 	bl	800f620 <_ZN13CST7565Driver14suspendDrawingEv>
    CST7565Driver::clear();
 801095c:	f7fe f97e 	bl	800ec5c <_ZN13CST7565Driver5clearEv>

    drawHeader(m_title);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010964:	2100      	movs	r1, #0
 8010966:	4618      	mov	r0, r3
 8010968:	f7fe fec0 	bl	800f6ec <_ZN7CScreen10drawHeaderEmb>

    CST7565Driver::fill(0, 52, 127, 52, CST7565Driver::FILL_OPERATION_FILL);
 801096c:	2300      	movs	r3, #0
 801096e:	9300      	str	r3, [sp, #0]
 8010970:	2334      	movs	r3, #52	; 0x34
 8010972:	227f      	movs	r2, #127	; 0x7f
 8010974:	2134      	movs	r1, #52	; 0x34
 8010976:	2000      	movs	r0, #0
 8010978:	f7fd ffde 	bl	800e938 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE>

    m_widgetButtonsBar.redraw();
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	331c      	adds	r3, #28
 8010980:	4618      	mov	r0, r3
 8010982:	f001 fc53 	bl	801222c <_ZN17CWidgetButtonsBar6redrawEv>
    m_widgetButtonsBar.update();
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	331c      	adds	r3, #28
 801098a:	4618      	mov	r0, r3
 801098c:	f001 fc3c 	bl	8012208 <_ZN17CWidgetButtonsBar6updateEv>

    for (int8_t i = 0; i < NUM_OF_EDIT_NUMBER; i++)
 8010990:	2300      	movs	r3, #0
 8010992:	73bb      	strb	r3, [r7, #14]
 8010994:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	7e12      	ldrb	r2, [r2, #24]
 801099c:	4293      	cmp	r3, r2
 801099e:	da1e      	bge.n	80109de <_ZN16CScreenEnterCode8onResumeEv+0xd6>
    {
        m_widgetEditNumber[i].redraw();
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80109a4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80109a8:	4613      	mov	r3, r2
 80109aa:	005b      	lsls	r3, r3, #1
 80109ac:	4413      	add	r3, r2
 80109ae:	00db      	lsls	r3, r3, #3
 80109b0:	440b      	add	r3, r1
 80109b2:	4618      	mov	r0, r3
 80109b4:	f001 fdd9 	bl	801256a <_ZN17CWidgetEditNumber6redrawEv>
        m_widgetEditNumber[i].update();
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80109bc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80109c0:	4613      	mov	r3, r2
 80109c2:	005b      	lsls	r3, r3, #1
 80109c4:	4413      	add	r3, r2
 80109c6:	00db      	lsls	r3, r3, #3
 80109c8:	440b      	add	r3, r1
 80109ca:	4618      	mov	r0, r3
 80109cc:	f001 fdbb 	bl	8012546 <_ZN17CWidgetEditNumber6updateEv>
    for (int8_t i = 0; i < NUM_OF_EDIT_NUMBER; i++)
 80109d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80109d4:	b2db      	uxtb	r3, r3
 80109d6:	3301      	adds	r3, #1
 80109d8:	b2db      	uxtb	r3, r3
 80109da:	73bb      	strb	r3, [r7, #14]
 80109dc:	e7da      	b.n	8010994 <_ZN16CScreenEnterCode8onResumeEv+0x8c>
    }

    CST7565Driver::resumeDrawing();
 80109de:	f7fe fc65 	bl	800f2ac <_ZN13CST7565Driver13resumeDrawingEv>
}
 80109e2:	bf00      	nop
 80109e4:	3710      	adds	r7, #16
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}

080109ea <_ZN16CScreenEnterCode6updateEv>:

void CScreenEnterCode::update()
{
 80109ea:	b590      	push	{r4, r7, lr}
 80109ec:	b085      	sub	sp, #20
 80109ee:	af00      	add	r7, sp, #0
 80109f0:	6078      	str	r0, [r7, #4]
    CScreen::update();
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	4618      	mov	r0, r3
 80109f6:	f7fe fe3c 	bl	800f672 <_ZN7CScreen6updateEv>

    m_widgetButtonsBar.update();
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	331c      	adds	r3, #28
 80109fe:	4618      	mov	r0, r3
 8010a00:	f001 fc02 	bl	8012208 <_ZN17CWidgetButtonsBar6updateEv>

    for (int8_t i = 0; i < NUM_OF_EDIT_NUMBER; i++)
 8010a04:	2300      	movs	r3, #0
 8010a06:	73fb      	strb	r3, [r7, #15]
 8010a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	7e12      	ldrb	r2, [r2, #24]
 8010a10:	4293      	cmp	r3, r2
 8010a12:	da31      	bge.n	8010a78 <_ZN16CScreenEnterCode6updateEv+0x8e>
    {
        m_widgetEditNumber[i].setFocus((m_pointer == i) && (m_widgetButtonsBar.getFocus() == false));
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010a18:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010a1c:	4613      	mov	r3, r2
 8010a1e:	005b      	lsls	r3, r3, #1
 8010a20:	4413      	add	r3, r2
 8010a22:	00db      	lsls	r3, r3, #3
 8010a24:	18cc      	adds	r4, r1, r3
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010a2c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010a30:	429a      	cmp	r2, r3
 8010a32:	d109      	bne.n	8010a48 <_ZN16CScreenEnterCode6updateEv+0x5e>
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	331c      	adds	r3, #28
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f001 fbbe 	bl	80121ba <_ZN17CWidgetButtonsBar8getFocusEv>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d101      	bne.n	8010a48 <_ZN16CScreenEnterCode6updateEv+0x5e>
 8010a44:	2301      	movs	r3, #1
 8010a46:	e000      	b.n	8010a4a <_ZN16CScreenEnterCode6updateEv+0x60>
 8010a48:	2300      	movs	r3, #0
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	4620      	mov	r0, r4
 8010a4e:	f001 fd4e 	bl	80124ee <_ZN17CWidgetEditNumber8setFocusEb>
        m_widgetEditNumber[i].update();
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010a56:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010a5a:	4613      	mov	r3, r2
 8010a5c:	005b      	lsls	r3, r3, #1
 8010a5e:	4413      	add	r3, r2
 8010a60:	00db      	lsls	r3, r3, #3
 8010a62:	440b      	add	r3, r1
 8010a64:	4618      	mov	r0, r3
 8010a66:	f001 fd6e 	bl	8012546 <_ZN17CWidgetEditNumber6updateEv>
    for (int8_t i = 0; i < NUM_OF_EDIT_NUMBER; i++)
 8010a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a6e:	b2db      	uxtb	r3, r3
 8010a70:	3301      	adds	r3, #1
 8010a72:	b2db      	uxtb	r3, r3
 8010a74:	73fb      	strb	r3, [r7, #15]
 8010a76:	e7c7      	b.n	8010a08 <_ZN16CScreenEnterCode6updateEv+0x1e>
    }

    int8_t result;
    if (m_widgetButtonsBar.getResult(&result))
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	331c      	adds	r3, #28
 8010a7c:	f107 020e 	add.w	r2, r7, #14
 8010a80:	4611      	mov	r1, r2
 8010a82:	4618      	mov	r0, r3
 8010a84:	f001 fba4 	bl	80121d0 <_ZN17CWidgetButtonsBar9getResultEPa>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d00d      	beq.n	8010aaa <_ZN16CScreenEnterCode6updateEv+0xc0>
    {
        m_result = (result == 0);
 8010a8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	bf0c      	ite	eq
 8010a96:	2301      	moveq	r3, #1
 8010a98:	2300      	movne	r3, #0
 8010a9a:	b2da      	uxtb	r2, r3
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        finish();
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f7fa f81c 	bl	800aae2 <_ZN7AScreen6finishEv>
    }
}
 8010aaa:	bf00      	nop
 8010aac:	3714      	adds	r7, #20
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd90      	pop	{r4, r7, pc}

08010ab2 <_ZN16CScreenEnterCode7onPauseEv>:

void CScreenEnterCode::onPause()
{
 8010ab2:	b580      	push	{r7, lr}
 8010ab4:	b084      	sub	sp, #16
 8010ab6:	af00      	add	r7, sp, #0
 8010ab8:	6078      	str	r0, [r7, #4]
    CScreen::onPause();
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7fe fe08 	bl	800f6d2 <_ZN7CScreen7onPauseEv>
    CContext::unregisterOnKeyListener(&m_widgetButtonsBar);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	331c      	adds	r3, #28
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7fa fe64 	bl	800b794 <_ZN8CContext23unregisterOnKeyListenerEP14IOnKeyListener>
    for (int8_t i = 0; i < NUM_OF_EDIT_NUMBER; i++)
 8010acc:	2300      	movs	r3, #0
 8010ace:	73fb      	strb	r3, [r7, #15]
 8010ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ad4:	687a      	ldr	r2, [r7, #4]
 8010ad6:	7e12      	ldrb	r2, [r2, #24]
 8010ad8:	4293      	cmp	r3, r2
 8010ada:	da12      	bge.n	8010b02 <_ZN16CScreenEnterCode7onPauseEv+0x50>
    {
        CContext::unregisterOnKeyListener(&m_widgetEditNumber[i]);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010ae0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010ae4:	4613      	mov	r3, r2
 8010ae6:	005b      	lsls	r3, r3, #1
 8010ae8:	4413      	add	r3, r2
 8010aea:	00db      	lsls	r3, r3, #3
 8010aec:	440b      	add	r3, r1
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7fa fe50 	bl	800b794 <_ZN8CContext23unregisterOnKeyListenerEP14IOnKeyListener>
    for (int8_t i = 0; i < NUM_OF_EDIT_NUMBER; i++)
 8010af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010af8:	b2db      	uxtb	r3, r3
 8010afa:	3301      	adds	r3, #1
 8010afc:	b2db      	uxtb	r3, r3
 8010afe:	73fb      	strb	r3, [r7, #15]
 8010b00:	e7e6      	b.n	8010ad0 <_ZN16CScreenEnterCode7onPauseEv+0x1e>
    }
}
 8010b02:	bf00      	nop
 8010b04:	3710      	adds	r7, #16
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}

08010b0a <_ZN16CScreenEnterCode5onKeyEaa>:

bool CScreenEnterCode::onKey(int8_t keyCode, int8_t keyEvent)
{
 8010b0a:	b590      	push	{r4, r7, lr}
 8010b0c:	b083      	sub	sp, #12
 8010b0e:	af00      	add	r7, sp, #0
 8010b10:	6078      	str	r0, [r7, #4]
 8010b12:	460b      	mov	r3, r1
 8010b14:	70fb      	strb	r3, [r7, #3]
 8010b16:	4613      	mov	r3, r2
 8010b18:	70bb      	strb	r3, [r7, #2]
    if (keyEvent == KEY_EVENT_UP)
 8010b1a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010b1e:	2b02      	cmp	r3, #2
 8010b20:	d101      	bne.n	8010b26 <_ZN16CScreenEnterCode5onKeyEaa+0x1c>
    {
        return false;
 8010b22:	2300      	movs	r3, #0
 8010b24:	e03d      	b.n	8010ba2 <_ZN16CScreenEnterCode5onKeyEaa+0x98>
    }

    switch (keyCode)
 8010b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010b2a:	2b01      	cmp	r3, #1
 8010b2c:	d002      	beq.n	8010b34 <_ZN16CScreenEnterCode5onKeyEaa+0x2a>
 8010b2e:	2b02      	cmp	r3, #2
 8010b30:	d020      	beq.n	8010b74 <_ZN16CScreenEnterCode5onKeyEaa+0x6a>
 8010b32:	e035      	b.n	8010ba0 <_ZN16CScreenEnterCode5onKeyEaa+0x96>
    {
        case KEY_CODE_MENU:
            if (m_pointer == NUM_OF_EDIT_NUMBER - 1)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010b3a:	461a      	mov	r2, r3
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	7e1b      	ldrb	r3, [r3, #24]
 8010b40:	3b01      	subs	r3, #1
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d10a      	bne.n	8010b5c <_ZN16CScreenEnterCode5onKeyEaa+0x52>
            {
                m_pointer = 0;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                m_widgetButtonsBar.setFocus(true);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	331c      	adds	r3, #28
 8010b52:	2101      	movs	r1, #1
 8010b54:	4618      	mov	r0, r3
 8010b56:	f001 fb0f 	bl	8012178 <_ZN17CWidgetButtonsBar8setFocusEb>
 8010b5a:	e009      	b.n	8010b70 <_ZN16CScreenEnterCode5onKeyEaa+0x66>
            }
            else
            {
                m_pointer++;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010b62:	b2db      	uxtb	r3, r3
 8010b64:	3301      	adds	r3, #1
 8010b66:	b2db      	uxtb	r3, r3
 8010b68:	b25a      	sxtb	r2, r3
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            return true;
 8010b70:	2301      	movs	r3, #1
 8010b72:	e016      	b.n	8010ba2 <_ZN16CScreenEnterCode5onKeyEaa+0x98>

        case KEY_CODE_EXIT:
            m_widgetButtonsBar.setFocus(!m_widgetButtonsBar.getFocus());
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f103 041c 	add.w	r4, r3, #28
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	331c      	adds	r3, #28
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f001 fb1b 	bl	80121ba <_ZN17CWidgetButtonsBar8getFocusEv>
 8010b84:	4603      	mov	r3, r0
 8010b86:	f083 0301 	eor.w	r3, r3, #1
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	4620      	mov	r0, r4
 8010b90:	f001 faf2 	bl	8012178 <_ZN17CWidgetButtonsBar8setFocusEb>
            resume();
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7f9 ffae 	bl	800aaf8 <_ZN7AScreen6resumeEv>
            return true;
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	e000      	b.n	8010ba2 <_ZN16CScreenEnterCode5onKeyEaa+0x98>

        default:
            return false;
 8010ba0:	2300      	movs	r3, #0
    }
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	370c      	adds	r7, #12
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd90      	pop	{r4, r7, pc}

08010baa <_ZThn4_N16CScreenEnterCode5onKeyEaa>:
    void onResume();
    void update();
    void onPause();

public:
    bool onKey(int8_t keyCode, int8_t keyEvent);
 8010baa:	f1a0 0004 	sub.w	r0, r0, #4
 8010bae:	f7ff bfac 	b.w	8010b0a <_ZN16CScreenEnterCode5onKeyEaa>
	...

08010bb4 <_ZN16INoneVolatileMemD1Ev>:
     * \param data wskaźnik na zmienną w RAMie, w której zostanie umiszczona odczytana dana
     * \return status operacji
     */
    virtual uint32_t readByte(void* address, uint8_t* data ) = 0;

    virtual ~INoneVolatileMem() {}
 8010bb4:	b480      	push	{r7}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	4a04      	ldr	r2, [pc, #16]	; (8010bd0 <_ZN16INoneVolatileMemD1Ev+0x1c>)
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	601a      	str	r2, [r3, #0]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	370c      	adds	r7, #12
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bc80      	pop	{r7}
 8010bcc:	4770      	bx	lr
 8010bce:	bf00      	nop
 8010bd0:	0801cc90 	.word	0x0801cc90

08010bd4 <_ZN16INoneVolatileMemD0Ev>:
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b082      	sub	sp, #8
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f7ff ffe9 	bl	8010bb4 <_ZN16INoneVolatileMemD1Ev>
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f004 fcfa 	bl	80155dc <_ZdlPv>
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	4618      	mov	r0, r3
 8010bec:	3708      	adds	r7, #8
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}
	...

08010bf4 <_ZN16INoneVolatileMemC1Ev>:
class INoneVolatileMem
 8010bf4:	b480      	push	{r7}
 8010bf6:	b083      	sub	sp, #12
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	4a04      	ldr	r2, [pc, #16]	; (8010c10 <_ZN16INoneVolatileMemC1Ev+0x1c>)
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	601a      	str	r2, [r3, #0]
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	4618      	mov	r0, r3
 8010c06:	370c      	adds	r7, #12
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bc80      	pop	{r7}
 8010c0c:	4770      	bx	lr
 8010c0e:	bf00      	nop
 8010c10:	0801cc90 	.word	0x0801cc90

08010c14 <_ZN7CeepromC1Ev>:
 *      Author: moonwolf
 */

#include "eeprom.h"

Ceeprom::Ceeprom()
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b082      	sub	sp, #8
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7ff ffe8 	bl	8010bf4 <_ZN16INoneVolatileMemC1Ev>
 8010c24:	4a06      	ldr	r2, [pc, #24]	; (8010c40 <_ZN7CeepromC1Ev+0x2c>)
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	601a      	str	r2, [r3, #0]
{
    i2c = NULL;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	605a      	str	r2, [r3, #4]
    deviceAddress = 0;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2200      	movs	r2, #0
 8010c34:	721a      	strb	r2, [r3, #8]
}
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3708      	adds	r7, #8
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}
 8010c40:	0801cc70 	.word	0x0801cc70

08010c44 <_ZN7Ceeprom4initEP10CDriverI2Ch>:

void Ceeprom::init(CDriverI2C* i2c, uint8_t deviceAddress)
{
 8010c44:	b480      	push	{r7}
 8010c46:	b085      	sub	sp, #20
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	60f8      	str	r0, [r7, #12]
 8010c4c:	60b9      	str	r1, [r7, #8]
 8010c4e:	4613      	mov	r3, r2
 8010c50:	71fb      	strb	r3, [r7, #7]
    this -> i2c = i2c;
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	68ba      	ldr	r2, [r7, #8]
 8010c56:	605a      	str	r2, [r3, #4]
    this -> deviceAddress = deviceAddress;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	79fa      	ldrb	r2, [r7, #7]
 8010c5c:	721a      	strb	r2, [r3, #8]
}
 8010c5e:	bf00      	nop
 8010c60:	3714      	adds	r7, #20
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bc80      	pop	{r7}
 8010c66:	4770      	bx	lr

08010c68 <_ZN7Ceeprom10writeBlockEPvS0_t>:

uint32_t Ceeprom::writeBlock(void* eepromAddress, void *dataBuffer, uint16_t dataLength)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b086      	sub	sp, #24
 8010c6c:	af02      	add	r7, sp, #8
 8010c6e:	60f8      	str	r0, [r7, #12]
 8010c70:	60b9      	str	r1, [r7, #8]
 8010c72:	607a      	str	r2, [r7, #4]
 8010c74:	807b      	strh	r3, [r7, #2]
    i2c -> setAddrLen(2);
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	685b      	ldr	r3, [r3, #4]
 8010c7a:	2102      	movs	r1, #2
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f7fb f8f3 	bl	800be68 <_ZN10CDriverI2C10setAddrLenEh>
    return i2c -> writeBlock(deviceAddress, (uint16_t)(uint32_t) eepromAddress, dataBuffer, dataLength);
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	6858      	ldr	r0, [r3, #4]
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	7a19      	ldrb	r1, [r3, #8]
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	b29a      	uxth	r2, r3
 8010c8e:	887b      	ldrh	r3, [r7, #2]
 8010c90:	9300      	str	r3, [sp, #0]
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f7fb f979 	bl	800bf8a <_ZN10CDriverI2C10writeBlockEhtPvt>
 8010c98:	4603      	mov	r3, r0
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3710      	adds	r7, #16
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}

08010ca2 <_ZN7Ceeprom9readBlockEPvS0_t>:

uint32_t Ceeprom::readBlock(void *eepromAddress, void *dataBuffer, uint16_t dataLength)
{
 8010ca2:	b580      	push	{r7, lr}
 8010ca4:	b086      	sub	sp, #24
 8010ca6:	af02      	add	r7, sp, #8
 8010ca8:	60f8      	str	r0, [r7, #12]
 8010caa:	60b9      	str	r1, [r7, #8]
 8010cac:	607a      	str	r2, [r7, #4]
 8010cae:	807b      	strh	r3, [r7, #2]
    i2c -> setAddrLen(2);
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	685b      	ldr	r3, [r3, #4]
 8010cb4:	2102      	movs	r1, #2
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7fb f8d6 	bl	800be68 <_ZN10CDriverI2C10setAddrLenEh>
    return i2c -> readBlock(deviceAddress, (uint16_t)(uint32_t) eepromAddress, dataBuffer, dataLength);
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	6858      	ldr	r0, [r3, #4]
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	7a19      	ldrb	r1, [r3, #8]
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	887b      	ldrh	r3, [r7, #2]
 8010cca:	9300      	str	r3, [sp, #0]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f7fb f9c6 	bl	800c05e <_ZN10CDriverI2C9readBlockEhtPvt>
 8010cd2:	4603      	mov	r3, r0
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3710      	adds	r7, #16
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <_ZN7Ceeprom9writeByteEPvh>:

uint32_t Ceeprom::writeByte(void* eepromAddress, uint8_t data)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b084      	sub	sp, #16
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	60f8      	str	r0, [r7, #12]
 8010ce4:	60b9      	str	r1, [r7, #8]
 8010ce6:	4613      	mov	r3, r2
 8010ce8:	71fb      	strb	r3, [r7, #7]
    i2c -> setAddrLen(2);
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	2102      	movs	r1, #2
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7fb f8b9 	bl	800be68 <_ZN10CDriverI2C10setAddrLenEh>
    return i2c -> writeByte(deviceAddress, (uint16_t) (uint32_t) eepromAddress, data);
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	6858      	ldr	r0, [r3, #4]
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	7a19      	ldrb	r1, [r3, #8]
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	b29a      	uxth	r2, r3
 8010d02:	79fb      	ldrb	r3, [r7, #7]
 8010d04:	f7fb f8c7 	bl	800be96 <_ZN10CDriverI2C9writeByteEhth>
 8010d08:	4603      	mov	r3, r0
}
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	3710      	adds	r7, #16
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}

08010d12 <_ZN7Ceeprom8readByteEPvPh>:

uint32_t Ceeprom::readByte(void* eepromAddress, uint8_t* data)
{
 8010d12:	b580      	push	{r7, lr}
 8010d14:	b084      	sub	sp, #16
 8010d16:	af00      	add	r7, sp, #0
 8010d18:	60f8      	str	r0, [r7, #12]
 8010d1a:	60b9      	str	r1, [r7, #8]
 8010d1c:	607a      	str	r2, [r7, #4]
    i2c -> setAddrLen(2);
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	2102      	movs	r1, #2
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7fb f89f 	bl	800be68 <_ZN10CDriverI2C10setAddrLenEh>
    return i2c -> readByte(deviceAddress, (uint16_t) (uint32_t) eepromAddress, data);
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	6858      	ldr	r0, [r3, #4]
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	7a19      	ldrb	r1, [r3, #8]
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	b29a      	uxth	r2, r3
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f7fb f8ec 	bl	800bf14 <_ZN10CDriverI2C8readByteEhtPh>
 8010d3c:	4603      	mov	r3, r0
}
 8010d3e:	4618      	mov	r0, r3
 8010d40:	3710      	adds	r7, #16
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}
	...

08010d48 <_ZN7CeepromD1Ev>:

/**
 * \brief Klasa służąca do odczytu i zapisu zewnętrznej pamięci eeprom
 */

class Ceeprom : public INoneVolatileMem
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
 8010d50:	4a05      	ldr	r2, [pc, #20]	; (8010d68 <_ZN7CeepromD1Ev+0x20>)
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	601a      	str	r2, [r3, #0]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7ff ff2b 	bl	8010bb4 <_ZN16INoneVolatileMemD1Ev>
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	4618      	mov	r0, r3
 8010d62:	3708      	adds	r7, #8
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	0801cc70 	.word	0x0801cc70

08010d6c <_ZN7CeepromD0Ev>:
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f7ff ffe7 	bl	8010d48 <_ZN7CeepromD1Ev>
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f004 fc2e 	bl	80155dc <_ZdlPv>
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	4618      	mov	r0, r3
 8010d84:	3708      	adds	r7, #8
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
	...

08010d8c <_ZN17CWidgetButtonsBarC1Ev>:
#ifndef CWIDGETBUTTONSBAR_H_
#define CWIDGETBUTTONSBAR_H_

#include "IOnKeyListener.h"

class CWidgetButtonsBar: public IOnKeyListener
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7fb fa36 	bl	800c208 <_ZN14IOnKeyListenerC1Ev>
 8010d9c:	4a03      	ldr	r2, [pc, #12]	; (8010dac <_ZN17CWidgetButtonsBarC1Ev+0x20>)
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	601a      	str	r2, [r3, #0]
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	4618      	mov	r0, r3
 8010da6:	3708      	adds	r7, #8
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}
 8010dac:	08022310 	.word	0x08022310

08010db0 <_ZN17CWidgetEditNumberC1Ev>:
#ifndef CWIDGETEDITNUMBER_H_
#define CWIDGETEDITNUMBER_H_

#include "IOnKeyListener.h"

class CWidgetEditNumber: public IOnKeyListener
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b082      	sub	sp, #8
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7fb fa24 	bl	800c208 <_ZN14IOnKeyListenerC1Ev>
 8010dc0:	4a03      	ldr	r2, [pc, #12]	; (8010dd0 <_ZN17CWidgetEditNumberC1Ev+0x20>)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	601a      	str	r2, [r3, #0]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3708      	adds	r7, #8
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	0802231c 	.word	0x0802231c

08010dd4 <_ZN16CScreenEnterCodeC1Eh>:
	CScreenEnterCode(uint8_t num_digit): NUM_OF_EDIT_NUMBER(num_digit){
 8010dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dd6:	b083      	sub	sp, #12
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	460b      	mov	r3, r1
 8010dde:	70fb      	strb	r3, [r7, #3]
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	4618      	mov	r0, r3
 8010de4:	f7fb fb94 	bl	800c510 <_ZN7CScreenC1Ev>
 8010de8:	4a17      	ldr	r2, [pc, #92]	; (8010e48 <_ZN16CScreenEnterCodeC1Eh+0x74>)
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	601a      	str	r2, [r3, #0]
 8010dee:	4a17      	ldr	r2, [pc, #92]	; (8010e4c <_ZN16CScreenEnterCodeC1Eh+0x78>)
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	605a      	str	r2, [r3, #4]
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	78fa      	ldrb	r2, [r7, #3]
 8010df8:	761a      	strb	r2, [r3, #24]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	331c      	adds	r3, #28
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7ff ffc4 	bl	8010d8c <_ZN17CWidgetButtonsBarC1Ev>
		m_widgetEditNumber = new CWidgetEditNumber[NUM_OF_EDIT_NUMBER];
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	7e1b      	ldrb	r3, [r3, #24]
 8010e08:	461a      	mov	r2, r3
 8010e0a:	4613      	mov	r3, r2
 8010e0c:	005b      	lsls	r3, r3, #1
 8010e0e:	4413      	add	r3, r2
 8010e10:	00db      	lsls	r3, r3, #3
 8010e12:	4618      	mov	r0, r3
 8010e14:	f004 fd96 	bl	8015944 <_Znaj>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	461e      	mov	r6, r3
 8010e1c:	4632      	mov	r2, r6
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	7e1b      	ldrb	r3, [r3, #24]
 8010e22:	3b01      	subs	r3, #1
 8010e24:	461c      	mov	r4, r3
 8010e26:	4615      	mov	r5, r2
 8010e28:	2c00      	cmp	r4, #0
 8010e2a:	db05      	blt.n	8010e38 <_ZN16CScreenEnterCodeC1Eh+0x64>
 8010e2c:	4628      	mov	r0, r5
 8010e2e:	f7ff ffbf 	bl	8010db0 <_ZN17CWidgetEditNumberC1Ev>
 8010e32:	3518      	adds	r5, #24
 8010e34:	3c01      	subs	r4, #1
 8010e36:	e7f7      	b.n	8010e28 <_ZN16CScreenEnterCodeC1Eh+0x54>
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	631e      	str	r6, [r3, #48]	; 0x30
	}
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	4618      	mov	r0, r3
 8010e40:	370c      	adds	r7, #12
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e46:	bf00      	nop
 8010e48:	0801cc3c 	.word	0x0801cc3c
 8010e4c:	0801cc64 	.word	0x0801cc64

08010e50 <_ZN19DriverCommunication20getMotoCounterSetterEv>:
public:
	DriverCommunication(): address(1){}
	virtual ~DriverCommunication(){}
	void init();
	void update();
	MotoCounterSetter* getMotoCounterSetter()
 8010e50:	b480      	push	{r7}
 8010e52:	b083      	sub	sp, #12
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
	{
		return &motoCounterSetter;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	3308      	adds	r3, #8
	}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	370c      	adds	r7, #12
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bc80      	pop	{r7}
 8010e64:	4770      	bx	lr

08010e66 <_ZN6Driver22getDriverCommunicationEv>:
	}
	CSystem::CDelayFunctions* getDelayFunctions(void)
	{
		return &delayFunctions;
	}
	DriverCommunication* getDriverCommunication()
 8010e66:	b480      	push	{r7}
 8010e68:	b083      	sub	sp, #12
 8010e6a:	af00      	add	r7, sp, #0
 8010e6c:	6078      	str	r0, [r7, #4]
	{
		return &driverCommunication;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f503 730d 	add.w	r3, r3, #564	; 0x234
	}
 8010e74:	4618      	mov	r0, r3
 8010e76:	370c      	adds	r7, #12
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bc80      	pop	{r7}
 8010e7c:	4770      	bx	lr
	...

08010e80 <_ZN11CMenuGlowneC1Ev>:
		{CNapisy::IDT_PAROWANIE},
		{CNapisy::IDT_KOLEJNY_SERWIS},
		{CNapisy::IDT_EDYTUJ_LICZNIK},
};

CMenuGlowne::CMenuGlowne() :
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
        AMenuList(CNapisy::IDT_MENU, MENU_ITEMS, sizeof(MENU_ITEMS) / sizeof(MENU_ITEMS[0]))
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	2303      	movs	r3, #3
 8010e8c:	4a0a      	ldr	r2, [pc, #40]	; (8010eb8 <_ZN11CMenuGlowneC1Ev+0x38>)
 8010e8e:	2129      	movs	r1, #41	; 0x29
 8010e90:	f7f9 fc84 	bl	800a79c <_ZN9AMenuListC1EmPKNS_9SMenuItemEh>
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7fb f9c4 	bl	800c228 <_ZN10IUpdatableC1Ev>
 8010ea0:	4a06      	ldr	r2, [pc, #24]	; (8010ebc <_ZN11CMenuGlowneC1Ev+0x3c>)
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	601a      	str	r2, [r3, #0]
 8010ea6:	4a06      	ldr	r2, [pc, #24]	; (8010ec0 <_ZN11CMenuGlowneC1Ev+0x40>)
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
{
}
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3708      	adds	r7, #8
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}
 8010eb8:	0801cca8 	.word	0x0801cca8
 8010ebc:	0801ccd4 	.word	0x0801ccd4
 8010ec0:	0801cce8 	.word	0x0801cce8

08010ec4 <_ZN11CMenuGlowne10updateItemEPN9AMenuList9SMenuItemE>:

void CMenuGlowne::updateItem(SMenuItem *menuItem)
{
 8010ec4:	b480      	push	{r7}
 8010ec6:	b083      	sub	sp, #12
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	6039      	str	r1, [r7, #0]
	switch (menuItem->text)
	{
		default:
			break;
 8010ece:	bf00      	nop
	}
}
 8010ed0:	bf00      	nop
 8010ed2:	370c      	adds	r7, #12
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bc80      	pop	{r7}
 8010ed8:	4770      	bx	lr

08010eda <_ZN11CMenuGlowne14onItemSelectedEPN9AMenuList9SMenuItemE>:

void CMenuGlowne::onItemSelected(SMenuItem* menuItem)
{
 8010eda:	b590      	push	{r4, r7, lr}
 8010edc:	b08b      	sub	sp, #44	; 0x2c
 8010ede:	af00      	add	r7, sp, #0
 8010ee0:	6078      	str	r0, [r7, #4]
 8010ee2:	6039      	str	r1, [r7, #0]
	MotoCounterSetter* motoCounterSetter = Driver::getInstance().getDriverCommunication()->getMotoCounterSetter();
 8010ee4:	f003 fe16 	bl	8014b14 <_ZN6Driver11getInstanceEv>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7ff ffbb 	bl	8010e66 <_ZN6Driver22getDriverCommunicationEv>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7ff ffac 	bl	8010e50 <_ZN19DriverCommunication20getMotoCounterSetterEv>
 8010ef8:	6278      	str	r0, [r7, #36]	; 0x24
	switch (menuItem->text)
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	2b0b      	cmp	r3, #11
 8010f00:	d030      	beq.n	8010f64 <_ZN11CMenuGlowne14onItemSelectedEPN9AMenuList9SMenuItemE+0x8a>
 8010f02:	2b1a      	cmp	r3, #26
 8010f04:	d05a      	beq.n	8010fbc <_ZN11CMenuGlowne14onItemSelectedEPN9AMenuList9SMenuItemE+0xe2>
 8010f06:	2b01      	cmp	r3, #1
 8010f08:	d000      	beq.n	8010f0c <_ZN11CMenuGlowne14onItemSelectedEPN9AMenuList9SMenuItemE+0x32>
		}
		delete screen;
		break;
	}
	default:
			break;
 8010f0a:	e088      	b.n	801101e <_ZN11CMenuGlowne14onItemSelectedEPN9AMenuList9SMenuItemE+0x144>
		CScreenEnterCode* screen = new CScreenEnterCode(9);
 8010f0c:	203c      	movs	r0, #60	; 0x3c
 8010f0e:	f004 fbb3 	bl	8015678 <_Znwj>
 8010f12:	4603      	mov	r3, r0
 8010f14:	461c      	mov	r4, r3
 8010f16:	2109      	movs	r1, #9
 8010f18:	4620      	mov	r0, r4
 8010f1a:	f7ff ff5b 	bl	8010dd4 <_ZN16CScreenEnterCodeC1Eh>
 8010f1e:	623c      	str	r4, [r7, #32]
		screen->init(CNapisy::IDT_ADRES);
 8010f20:	2146      	movs	r1, #70	; 0x46
 8010f22:	6a38      	ldr	r0, [r7, #32]
 8010f24:	f7ff fc53 	bl	80107ce <_ZN16CScreenEnterCode4initEm>
		CContext::showScreen(screen);
 8010f28:	6a38      	ldr	r0, [r7, #32]
 8010f2a:	f7fa fa97 	bl	800b45c <_ZN8CContext10showScreenEP7AScreen>
		int32_t result = 0;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	617b      	str	r3, [r7, #20]
		if(screen->getResult(&result))
 8010f32:	f107 0314 	add.w	r3, r7, #20
 8010f36:	4619      	mov	r1, r3
 8010f38:	6a38      	ldr	r0, [r7, #32]
 8010f3a:	f7ff fc55 	bl	80107e8 <_ZN16CScreenEnterCode9getResultEPl>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d004      	beq.n	8010f4e <_ZN11CMenuGlowne14onItemSelectedEPN9AMenuList9SMenuItemE+0x74>
			motoCounterSetter->setCounterAddress(result);
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	4619      	mov	r1, r3
 8010f48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f4a:	f000 f90d 	bl	8011168 <_ZN17MotoCounterSetter17setCounterAddressEm>
		delete screen;
 8010f4e:	6a3b      	ldr	r3, [r7, #32]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d05f      	beq.n	8011014 <_ZN11CMenuGlowne14onItemSelectedEPN9AMenuList9SMenuItemE+0x13a>
 8010f54:	6a3b      	ldr	r3, [r7, #32]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	3318      	adds	r3, #24
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	6a38      	ldr	r0, [r7, #32]
 8010f5e:	4798      	blx	r3
		break;
 8010f60:	bf00      	nop
 8010f62:	e057      	b.n	8011014 <_ZN11CMenuGlowne14onItemSelectedEPN9AMenuList9SMenuItemE+0x13a>
		CScreenEnterCode* screen = new CScreenEnterCode(8);
 8010f64:	203c      	movs	r0, #60	; 0x3c
 8010f66:	f004 fb87 	bl	8015678 <_Znwj>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	461c      	mov	r4, r3
 8010f6e:	2108      	movs	r1, #8
 8010f70:	4620      	mov	r0, r4
 8010f72:	f7ff ff2f 	bl	8010dd4 <_ZN16CScreenEnterCodeC1Eh>
 8010f76:	61fc      	str	r4, [r7, #28]
		screen->init(CNapisy::IDT_KOLEJNY_SERWIS);
 8010f78:	210b      	movs	r1, #11
 8010f7a:	69f8      	ldr	r0, [r7, #28]
 8010f7c:	f7ff fc27 	bl	80107ce <_ZN16CScreenEnterCode4initEm>
		CContext::showScreen(screen);
 8010f80:	69f8      	ldr	r0, [r7, #28]
 8010f82:	f7fa fa6b 	bl	800b45c <_ZN8CContext10showScreenEP7AScreen>
		int32_t result = 0;
 8010f86:	2300      	movs	r3, #0
 8010f88:	613b      	str	r3, [r7, #16]
		if(screen->getResult(&result))
 8010f8a:	f107 0310 	add.w	r3, r7, #16
 8010f8e:	4619      	mov	r1, r3
 8010f90:	69f8      	ldr	r0, [r7, #28]
 8010f92:	f7ff fc29 	bl	80107e8 <_ZN16CScreenEnterCode9getResultEPl>
 8010f96:	4603      	mov	r3, r0
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d004      	beq.n	8010fa6 <_ZN11CMenuGlowne14onItemSelectedEPN9AMenuList9SMenuItemE+0xcc>
			motoCounterSetter->setNextInspection(result);
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	4619      	mov	r1, r3
 8010fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fa2:	f000 f96e 	bl	8011282 <_ZN17MotoCounterSetter17setNextInspectionEm>
		delete screen;
 8010fa6:	69fb      	ldr	r3, [r7, #28]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d035      	beq.n	8011018 <_ZN11CMenuGlowne14onItemSelectedEPN9AMenuList9SMenuItemE+0x13e>
 8010fac:	69fb      	ldr	r3, [r7, #28]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	3318      	adds	r3, #24
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	69f8      	ldr	r0, [r7, #28]
 8010fb6:	4798      	blx	r3
		break;
 8010fb8:	bf00      	nop
 8010fba:	e02d      	b.n	8011018 <_ZN11CMenuGlowne14onItemSelectedEPN9AMenuList9SMenuItemE+0x13e>
		CScreenEnterCode* screen = new CScreenEnterCode(8);
 8010fbc:	203c      	movs	r0, #60	; 0x3c
 8010fbe:	f004 fb5b 	bl	8015678 <_Znwj>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	461c      	mov	r4, r3
 8010fc6:	2108      	movs	r1, #8
 8010fc8:	4620      	mov	r0, r4
 8010fca:	f7ff ff03 	bl	8010dd4 <_ZN16CScreenEnterCodeC1Eh>
 8010fce:	61bc      	str	r4, [r7, #24]
		screen->init(CNapisy::IDT_EDYTUJ_LICZNIK);
 8010fd0:	211a      	movs	r1, #26
 8010fd2:	69b8      	ldr	r0, [r7, #24]
 8010fd4:	f7ff fbfb 	bl	80107ce <_ZN16CScreenEnterCode4initEm>
		CContext::showScreen(screen);
 8010fd8:	69b8      	ldr	r0, [r7, #24]
 8010fda:	f7fa fa3f 	bl	800b45c <_ZN8CContext10showScreenEP7AScreen>
		int32_t result = 0;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	60fb      	str	r3, [r7, #12]
		if(screen->getResult(&result))
 8010fe2:	f107 030c 	add.w	r3, r7, #12
 8010fe6:	4619      	mov	r1, r3
 8010fe8:	69b8      	ldr	r0, [r7, #24]
 8010fea:	f7ff fbfd 	bl	80107e8 <_ZN16CScreenEnterCode9getResultEPl>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d004      	beq.n	8010ffe <_ZN11CMenuGlowne14onItemSelectedEPN9AMenuList9SMenuItemE+0x124>
			motoCounterSetter->setCurrentCounter(result);
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	4619      	mov	r1, r3
 8010ff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ffa:	f000 f951 	bl	80112a0 <_ZN17MotoCounterSetter17setCurrentCounterEm>
		delete screen;
 8010ffe:	69bb      	ldr	r3, [r7, #24]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d00b      	beq.n	801101c <_ZN11CMenuGlowne14onItemSelectedEPN9AMenuList9SMenuItemE+0x142>
 8011004:	69bb      	ldr	r3, [r7, #24]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	3318      	adds	r3, #24
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	69b8      	ldr	r0, [r7, #24]
 801100e:	4798      	blx	r3
		break;
 8011010:	bf00      	nop
 8011012:	e003      	b.n	801101c <_ZN11CMenuGlowne14onItemSelectedEPN9AMenuList9SMenuItemE+0x142>
		break;
 8011014:	bf00      	nop
 8011016:	e002      	b.n	801101e <_ZN11CMenuGlowne14onItemSelectedEPN9AMenuList9SMenuItemE+0x144>
		break;
 8011018:	bf00      	nop
 801101a:	e000      	b.n	801101e <_ZN11CMenuGlowne14onItemSelectedEPN9AMenuList9SMenuItemE+0x144>
		break;
 801101c:	bf00      	nop
	}
}
 801101e:	bf00      	nop
 8011020:	372c      	adds	r7, #44	; 0x2c
 8011022:	46bd      	mov	sp, r7
 8011024:	bd90      	pop	{r4, r7, pc}

08011026 <_ZN11CMenuGlowne6updateEv>:

void CMenuGlowne::update()
{
 8011026:	b480      	push	{r7}
 8011028:	b083      	sub	sp, #12
 801102a:	af00      	add	r7, sp, #0
 801102c:	6078      	str	r0, [r7, #4]
//	if (repeater->getRegistration() != m_prevState)
//	{
//		m_prevState = repeater->getRegistration();
//	    CContext::finishScreen();
//	}
}
 801102e:	bf00      	nop
 8011030:	370c      	adds	r7, #12
 8011032:	46bd      	mov	sp, r7
 8011034:	bc80      	pop	{r7}
 8011036:	4770      	bx	lr

08011038 <_ZThn396_N11CMenuGlowne6updateEv>:
    CMenuGlowne();
    void updateItem(SMenuItem *menuItem);
    void onItemSelected(SMenuItem *menuItem);

public:
    void update();
 8011038:	f5a0 70c6 	sub.w	r0, r0, #396	; 0x18c
 801103c:	f7ff bff3 	b.w	8011026 <_ZN11CMenuGlowne6updateEv>

08011040 <_ZN8ICommVarD1Ev>:
{
public:
	ICommVar()
	{
	}
	virtual ~ICommVar()
 8011040:	b480      	push	{r7}
 8011042:	b083      	sub	sp, #12
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
	{
 8011048:	4a04      	ldr	r2, [pc, #16]	; (801105c <_ZN8ICommVarD1Ev+0x1c>)
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	601a      	str	r2, [r3, #0]
	}
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	4618      	mov	r0, r3
 8011052:	370c      	adds	r7, #12
 8011054:	46bd      	mov	sp, r7
 8011056:	bc80      	pop	{r7}
 8011058:	4770      	bx	lr
 801105a:	bf00      	nop
 801105c:	0801cd40 	.word	0x0801cd40

08011060 <_ZN8ICommVarD0Ev>:
	virtual ~ICommVar()
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
	}
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f7ff ffe9 	bl	8011040 <_ZN8ICommVarD1Ev>
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f004 fab4 	bl	80155dc <_ZdlPv>
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	4618      	mov	r0, r3
 8011078:	3708      	adds	r7, #8
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}
	...

08011080 <_ZN17MotoCounterSetterD1Ev>:
		nextInspection.setCommand(CounterCommand::NEXT_INSPECTION);
		currentCounter.setCommand(CounterCommand::SET_CURRENT_COUNTER);
		parameters[0] = &nextInspection;
		parameters[1] = &currentCounter;
	}
	virtual ~MotoCounterSetter()
 8011080:	b580      	push	{r7, lr}
 8011082:	b082      	sub	sp, #8
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
	{
 8011088:	4a08      	ldr	r2, [pc, #32]	; (80110ac <_ZN17MotoCounterSetterD1Ev+0x2c>)
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	601a      	str	r2, [r3, #0]
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	3320      	adds	r3, #32
 8011092:	4618      	mov	r0, r3
 8011094:	f000 f914 	bl	80112c0 <_ZN7CommVarImED1Ev>
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	3310      	adds	r3, #16
 801109c:	4618      	mov	r0, r3
 801109e:	f000 f90f 	bl	80112c0 <_ZN7CommVarImED1Ev>
	}
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	4618      	mov	r0, r3
 80110a6:	3708      	adds	r7, #8
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}
 80110ac:	0801ccf4 	.word	0x0801ccf4

080110b0 <_ZN17MotoCounterSetterD0Ev>:
	virtual ~MotoCounterSetter()
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b082      	sub	sp, #8
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
	}
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f7ff ffe1 	bl	8011080 <_ZN17MotoCounterSetterD1Ev>
 80110be:	6878      	ldr	r0, [r7, #4]
 80110c0:	f004 fa8c 	bl	80155dc <_ZdlPv>
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	4618      	mov	r0, r3
 80110c8:	3708      	adds	r7, #8
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}

080110ce <_ZN17MotoCounterSetter4initEv>:
	void init()
 80110ce:	b480      	push	{r7}
 80110d0:	b083      	sub	sp, #12
 80110d2:	af00      	add	r7, sp, #0
 80110d4:	6078      	str	r0, [r7, #4]
	{
	}
 80110d6:	bf00      	nop
 80110d8:	370c      	adds	r7, #12
 80110da:	46bd      	mov	sp, r7
 80110dc:	bc80      	pop	{r7}
 80110de:	4770      	bx	lr

080110e0 <_ZN17MotoCounterSetter6updateEv>:
	void update()
 80110e0:	b480      	push	{r7}
 80110e2:	b083      	sub	sp, #12
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
	{
	}
 80110e8:	bf00      	nop
 80110ea:	370c      	adds	r7, #12
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bc80      	pop	{r7}
 80110f0:	4770      	bx	lr

080110f2 <_ZN17MotoCounterSetter15getDeviceNumberEv>:
	uint16_t getDeviceNumber()
 80110f2:	b480      	push	{r7}
 80110f4:	b083      	sub	sp, #12
 80110f6:	af00      	add	r7, sp, #0
 80110f8:	6078      	str	r0, [r7, #4]
	{
		return 1;
 80110fa:	2301      	movs	r3, #1
	}
 80110fc:	4618      	mov	r0, r3
 80110fe:	370c      	adds	r7, #12
 8011100:	46bd      	mov	sp, r7
 8011102:	bc80      	pop	{r7}
 8011104:	4770      	bx	lr

08011106 <_ZN17MotoCounterSetter10sendNeededEv>:
	bool sendNeeded()
 8011106:	b580      	push	{r7, lr}
 8011108:	b084      	sub	sp, #16
 801110a:	af00      	add	r7, sp, #0
 801110c:	6078      	str	r0, [r7, #4]
	{
		for(uint8_t i =0; i<NUM_OF_PARAMS; i++)
 801110e:	2300      	movs	r3, #0
 8011110:	73fb      	strb	r3, [r7, #15]
 8011112:	7bfb      	ldrb	r3, [r7, #15]
 8011114:	2b01      	cmp	r3, #1
 8011116:	dc17      	bgt.n	8011148 <_ZN17MotoCounterSetter10sendNeededEv+0x42>
		{
			if(parameters[i]->isNewValue())
 8011118:	7bfa      	ldrb	r2, [r7, #15]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	3202      	adds	r2, #2
 801111e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	3308      	adds	r3, #8
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	7bf9      	ldrb	r1, [r7, #15]
 801112a:	687a      	ldr	r2, [r7, #4]
 801112c:	3102      	adds	r1, #2
 801112e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8011132:	4610      	mov	r0, r2
 8011134:	4798      	blx	r3
 8011136:	4603      	mov	r3, r0
 8011138:	2b00      	cmp	r3, #0
 801113a:	d001      	beq.n	8011140 <_ZN17MotoCounterSetter10sendNeededEv+0x3a>
			{
				return true;
 801113c:	2301      	movs	r3, #1
 801113e:	e004      	b.n	801114a <_ZN17MotoCounterSetter10sendNeededEv+0x44>
		for(uint8_t i =0; i<NUM_OF_PARAMS; i++)
 8011140:	7bfb      	ldrb	r3, [r7, #15]
 8011142:	3301      	adds	r3, #1
 8011144:	73fb      	strb	r3, [r7, #15]
 8011146:	e7e4      	b.n	8011112 <_ZN17MotoCounterSetter10sendNeededEv+0xc>
			}
		}
		return false;
 8011148:	2300      	movs	r3, #0
	}
 801114a:	4618      	mov	r0, r3
 801114c:	3710      	adds	r7, #16
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}

08011152 <_ZN17MotoCounterSetter12receiveFrameEP10Wtp3Driver>:
	void createFrame(Wtp3Driver* driver);
	ERecFrameResult receiveFrame(Wtp3Driver* driver)
 8011152:	b480      	push	{r7}
 8011154:	b083      	sub	sp, #12
 8011156:	af00      	add	r7, sp, #0
 8011158:	6078      	str	r0, [r7, #4]
 801115a:	6039      	str	r1, [r7, #0]
	{
		return REC_FRAME_NO_ANSWER;
 801115c:	2300      	movs	r3, #0
	}
 801115e:	4618      	mov	r0, r3
 8011160:	370c      	adds	r7, #12
 8011162:	46bd      	mov	sp, r7
 8011164:	bc80      	pop	{r7}
 8011166:	4770      	bx	lr

08011168 <_ZN17MotoCounterSetter17setCounterAddressEm>:
 */

#include "MotoCounterSetter.h"

void MotoCounterSetter::setCounterAddress(uint32_t adr)
{
 8011168:	b480      	push	{r7}
 801116a:	b083      	sub	sp, #12
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	6039      	str	r1, [r7, #0]
	counterAddress = adr;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	683a      	ldr	r2, [r7, #0]
 8011176:	605a      	str	r2, [r3, #4]
}
 8011178:	bf00      	nop
 801117a:	370c      	adds	r7, #12
 801117c:	46bd      	mov	sp, r7
 801117e:	bc80      	pop	{r7}
 8011180:	4770      	bx	lr

08011182 <_ZN17MotoCounterSetter17getCounterAddressEv>:

uint32_t MotoCounterSetter::getCounterAddress()
{
 8011182:	b480      	push	{r7}
 8011184:	b083      	sub	sp, #12
 8011186:	af00      	add	r7, sp, #0
 8011188:	6078      	str	r0, [r7, #4]
	return counterAddress;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	685b      	ldr	r3, [r3, #4]
}
 801118e:	4618      	mov	r0, r3
 8011190:	370c      	adds	r7, #12
 8011192:	46bd      	mov	sp, r7
 8011194:	bc80      	pop	{r7}
 8011196:	4770      	bx	lr

08011198 <_ZN17MotoCounterSetter11createFrameEP10Wtp3Driver>:

void MotoCounterSetter::createFrame(Wtp3Driver* driver)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b084      	sub	sp, #16
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	6039      	str	r1, [r7, #0]
	driver->startFrame(counterAddress, 0x01, 0x01);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6859      	ldr	r1, [r3, #4]
 80111a6:	2301      	movs	r3, #1
 80111a8:	2201      	movs	r2, #1
 80111aa:	6838      	ldr	r0, [r7, #0]
 80111ac:	f002 ffe8 	bl	8014180 <_ZN10Wtp3Driver10startFrameEmhh>
	for (uint8_t i = 0; i < NUM_OF_PARAMS; i++)
 80111b0:	2300      	movs	r3, #0
 80111b2:	73fb      	strb	r3, [r7, #15]
 80111b4:	7bfb      	ldrb	r3, [r7, #15]
 80111b6:	2b01      	cmp	r3, #1
 80111b8:	dc5c      	bgt.n	8011274 <_ZN17MotoCounterSetter11createFrameEP10Wtp3Driver+0xdc>
	{
		if (parameters[i]->isNewValue())
 80111ba:	7bfa      	ldrb	r2, [r7, #15]
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	3202      	adds	r2, #2
 80111c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	3308      	adds	r3, #8
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	7bf9      	ldrb	r1, [r7, #15]
 80111cc:	687a      	ldr	r2, [r7, #4]
 80111ce:	3102      	adds	r1, #2
 80111d0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80111d4:	4610      	mov	r0, r2
 80111d6:	4798      	blx	r3
 80111d8:	4603      	mov	r3, r0
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d046      	beq.n	801126c <_ZN17MotoCounterSetter11createFrameEP10Wtp3Driver+0xd4>
		{
			uint8_t command = parameters[i]->getCommand();
 80111de:	7bfa      	ldrb	r2, [r7, #15]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	3202      	adds	r2, #2
 80111e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	3310      	adds	r3, #16
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	7bf9      	ldrb	r1, [r7, #15]
 80111f0:	687a      	ldr	r2, [r7, #4]
 80111f2:	3102      	adds	r1, #2
 80111f4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80111f8:	4610      	mov	r0, r2
 80111fa:	4798      	blx	r3
 80111fc:	4603      	mov	r3, r0
 80111fe:	73bb      	strb	r3, [r7, #14]
			uint8_t size = parameters[i]->getSize();
 8011200:	7bfa      	ldrb	r2, [r7, #15]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	3202      	adds	r2, #2
 8011206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	330c      	adds	r3, #12
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	7bf9      	ldrb	r1, [r7, #15]
 8011212:	687a      	ldr	r2, [r7, #4]
 8011214:	3102      	adds	r1, #2
 8011216:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801121a:	4610      	mov	r0, r2
 801121c:	4798      	blx	r3
 801121e:	4603      	mov	r3, r0
 8011220:	737b      	strb	r3, [r7, #13]
			uint8_t* dataPtr = parameters[i]->getData();
 8011222:	7bfa      	ldrb	r2, [r7, #15]
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	3202      	adds	r2, #2
 8011228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	3314      	adds	r3, #20
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	7bf9      	ldrb	r1, [r7, #15]
 8011234:	687a      	ldr	r2, [r7, #4]
 8011236:	3102      	adds	r1, #2
 8011238:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801123c:	4610      	mov	r0, r2
 801123e:	4798      	blx	r3
 8011240:	60b8      	str	r0, [r7, #8]
			driver->addLongCommand(command, size, dataPtr);
 8011242:	7b7a      	ldrb	r2, [r7, #13]
 8011244:	7bb9      	ldrb	r1, [r7, #14]
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	6838      	ldr	r0, [r7, #0]
 801124a:	f003 f804 	bl	8014256 <_ZN10Wtp3Driver14addLongCommandEhhPh>
			parameters[i]->clear();
 801124e:	7bfa      	ldrb	r2, [r7, #15]
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	3202      	adds	r2, #2
 8011254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	3318      	adds	r3, #24
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	7bf9      	ldrb	r1, [r7, #15]
 8011260:	687a      	ldr	r2, [r7, #4]
 8011262:	3102      	adds	r1, #2
 8011264:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8011268:	4610      	mov	r0, r2
 801126a:	4798      	blx	r3
	for (uint8_t i = 0; i < NUM_OF_PARAMS; i++)
 801126c:	7bfb      	ldrb	r3, [r7, #15]
 801126e:	3301      	adds	r3, #1
 8011270:	73fb      	strb	r3, [r7, #15]
 8011272:	e79f      	b.n	80111b4 <_ZN17MotoCounterSetter11createFrameEP10Wtp3Driver+0x1c>
		}
	}
	driver->endFrame();
 8011274:	6838      	ldr	r0, [r7, #0]
 8011276:	f003 f815 	bl	80142a4 <_ZN10Wtp3Driver8endFrameEv>
}
 801127a:	bf00      	nop
 801127c:	3710      	adds	r7, #16
 801127e:	46bd      	mov	sp, r7
 8011280:	bd80      	pop	{r7, pc}

08011282 <_ZN17MotoCounterSetter17setNextInspectionEm>:

void MotoCounterSetter::setNextInspection(uint32_t value)
{
 8011282:	b580      	push	{r7, lr}
 8011284:	b082      	sub	sp, #8
 8011286:	af00      	add	r7, sp, #0
 8011288:	6078      	str	r0, [r7, #4]
 801128a:	6039      	str	r1, [r7, #0]
	nextInspection.setData(value);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	3310      	adds	r3, #16
 8011290:	6839      	ldr	r1, [r7, #0]
 8011292:	4618      	mov	r0, r3
 8011294:	f000 f835 	bl	8011302 <_ZN7CommVarImE7setDataEm>
}
 8011298:	bf00      	nop
 801129a:	3708      	adds	r7, #8
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <_ZN17MotoCounterSetter17setCurrentCounterEm>:

void MotoCounterSetter::setCurrentCounter(uint32_t value)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b082      	sub	sp, #8
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	6039      	str	r1, [r7, #0]
	currentCounter.setData(value);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	3320      	adds	r3, #32
 80112ae:	6839      	ldr	r1, [r7, #0]
 80112b0:	4618      	mov	r0, r3
 80112b2:	f000 f826 	bl	8011302 <_ZN7CommVarImE7setDataEm>
}
 80112b6:	bf00      	nop
 80112b8:	3708      	adds	r7, #8
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
	...

080112c0 <_ZN7CommVarImED1Ev>:
	}
	CommVar(uint8_t _comm, T _data) :
			command(_comm), data(_data), newValue(false)
	{
	}
	virtual ~CommVar()
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b082      	sub	sp, #8
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
	{
	}
 80112c8:	4a05      	ldr	r2, [pc, #20]	; (80112e0 <_ZN7CommVarImED1Ev+0x20>)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	601a      	str	r2, [r3, #0]
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7ff feb5 	bl	8011040 <_ZN8ICommVarD1Ev>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	4618      	mov	r0, r3
 80112da:	3708      	adds	r7, #8
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}
 80112e0:	0801cd1c 	.word	0x0801cd1c

080112e4 <_ZN7CommVarImED0Ev>:
	virtual ~CommVar()
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b082      	sub	sp, #8
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
	}
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f7ff ffe7 	bl	80112c0 <_ZN7CommVarImED1Ev>
 80112f2:	6878      	ldr	r0, [r7, #4]
 80112f4:	f004 f972 	bl	80155dc <_ZdlPv>
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	4618      	mov	r0, r3
 80112fc:	3708      	adds	r7, #8
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}

08011302 <_ZN7CommVarImE7setDataEm>:
	}
	uint8_t* getData()
	{
		return (uint8_t*) &data;
	}
	void setData(T _data)
 8011302:	b480      	push	{r7}
 8011304:	b083      	sub	sp, #12
 8011306:	af00      	add	r7, sp, #0
 8011308:	6078      	str	r0, [r7, #4]
 801130a:	6039      	str	r1, [r7, #0]
	{
		data = _data;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	683a      	ldr	r2, [r7, #0]
 8011310:	609a      	str	r2, [r3, #8]
		newValue = true;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2201      	movs	r2, #1
 8011316:	731a      	strb	r2, [r3, #12]
	}
 8011318:	bf00      	nop
 801131a:	370c      	adds	r7, #12
 801131c:	46bd      	mov	sp, r7
 801131e:	bc80      	pop	{r7}
 8011320:	4770      	bx	lr

08011322 <_ZN7CommVarImE10isNewValueEv>:
	bool isNewValue()
 8011322:	b480      	push	{r7}
 8011324:	b083      	sub	sp, #12
 8011326:	af00      	add	r7, sp, #0
 8011328:	6078      	str	r0, [r7, #4]
		return newValue;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	7b1b      	ldrb	r3, [r3, #12]
	}
 801132e:	4618      	mov	r0, r3
 8011330:	370c      	adds	r7, #12
 8011332:	46bd      	mov	sp, r7
 8011334:	bc80      	pop	{r7}
 8011336:	4770      	bx	lr

08011338 <_ZN7CommVarImE7getSizeEv>:
	uint8_t getSize()
 8011338:	b480      	push	{r7}
 801133a:	b083      	sub	sp, #12
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
		return sizeof(T);
 8011340:	2304      	movs	r3, #4
	}
 8011342:	4618      	mov	r0, r3
 8011344:	370c      	adds	r7, #12
 8011346:	46bd      	mov	sp, r7
 8011348:	bc80      	pop	{r7}
 801134a:	4770      	bx	lr

0801134c <_ZN7CommVarImE10getCommandEv>:
	uint8_t getCommand()
 801134c:	b480      	push	{r7}
 801134e:	b083      	sub	sp, #12
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
		return command;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	791b      	ldrb	r3, [r3, #4]
	}
 8011358:	4618      	mov	r0, r3
 801135a:	370c      	adds	r7, #12
 801135c:	46bd      	mov	sp, r7
 801135e:	bc80      	pop	{r7}
 8011360:	4770      	bx	lr

08011362 <_ZN7CommVarImE7getDataEv>:
	uint8_t* getData()
 8011362:	b480      	push	{r7}
 8011364:	b083      	sub	sp, #12
 8011366:	af00      	add	r7, sp, #0
 8011368:	6078      	str	r0, [r7, #4]
		return (uint8_t*) &data;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	3308      	adds	r3, #8
	}
 801136e:	4618      	mov	r0, r3
 8011370:	370c      	adds	r7, #12
 8011372:	46bd      	mov	sp, r7
 8011374:	bc80      	pop	{r7}
 8011376:	4770      	bx	lr

08011378 <_ZN7CommVarImE5clearEv>:
	void clear()
 8011378:	b480      	push	{r7}
 801137a:	b083      	sub	sp, #12
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
	{
		newValue = false;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2200      	movs	r2, #0
 8011384:	731a      	strb	r2, [r3, #12]
	}
 8011386:	bf00      	nop
 8011388:	370c      	adds	r7, #12
 801138a:	46bd      	mov	sp, r7
 801138c:	bc80      	pop	{r7}
 801138e:	4770      	bx	lr

08011390 <_ZN5CFont4initEv>:
{'|', CImgData::IMG_FONT_ASCII_KRESKA_PIONOWA},
{'}', CImgData::IMG_FONT_ASCII_NAWIAS_KLAMROWY_PRAWY},
{'~', CImgData::IMG_FONT_ASCII_TYLDA}};

void CFont::init()
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b082      	sub	sp, #8
 8011394:	af02      	add	r7, sp, #8
    CGraphicFont::addFont( //
            CFont::FONT_1,
            CFont::CHAR_MAP_FONT_1,
            sizeof(CHAR_MAP_FONT_1) / sizeof(CHAR_MAP_FONT_1[0]),
            10,
            1);
 8011396:	2301      	movs	r3, #1
 8011398:	9300      	str	r3, [sp, #0]
 801139a:	230a      	movs	r3, #10
 801139c:	f44f 72b0 	mov.w	r2, #352	; 0x160
 80113a0:	4917      	ldr	r1, [pc, #92]	; (8011400 <_ZN5CFont4initEv+0x70>)
 80113a2:	2001      	movs	r0, #1
 80113a4:	f7fb f9be 	bl	800c724 <_ZN12CGraphicFont7addFontEtPKNS_11TImgCharMapEtth>
    CGraphicFont::addFont( //
            CFont::FONT_2,
            CFont::CHAR_MAP_FONT_2,
            sizeof(CHAR_MAP_FONT_2) / sizeof(CHAR_MAP_FONT_2[0]),
            9,
            1);
 80113a8:	2301      	movs	r3, #1
 80113aa:	9300      	str	r3, [sp, #0]
 80113ac:	2309      	movs	r3, #9
 80113ae:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80113b2:	4914      	ldr	r1, [pc, #80]	; (8011404 <_ZN5CFont4initEv+0x74>)
 80113b4:	2002      	movs	r0, #2
 80113b6:	f7fb f9b5 	bl	800c724 <_ZN12CGraphicFont7addFontEtPKNS_11TImgCharMapEtth>
    CGraphicFont::addFont( //
            CFont::FONT_3,
            CFont::CHAR_MAP_FONT_3,
            sizeof(CHAR_MAP_FONT_3) / sizeof(CHAR_MAP_FONT_3[0]),
            14,
            1);
 80113ba:	2301      	movs	r3, #1
 80113bc:	9300      	str	r3, [sp, #0]
 80113be:	230e      	movs	r3, #14
 80113c0:	2210      	movs	r2, #16
 80113c2:	4911      	ldr	r1, [pc, #68]	; (8011408 <_ZN5CFont4initEv+0x78>)
 80113c4:	2003      	movs	r0, #3
 80113c6:	f7fb f9ad 	bl	800c724 <_ZN12CGraphicFont7addFontEtPKNS_11TImgCharMapEtth>
    CGraphicFont::addFont( //
            CFont::FONT_4,
            CFont::CHAR_MAP_FONT_4,
            sizeof(CHAR_MAP_FONT_4) / sizeof(CHAR_MAP_FONT_4[0]),
            11,
            1);
 80113ca:	2301      	movs	r3, #1
 80113cc:	9300      	str	r3, [sp, #0]
 80113ce:	230b      	movs	r3, #11
 80113d0:	2217      	movs	r2, #23
 80113d2:	490e      	ldr	r1, [pc, #56]	; (801140c <_ZN5CFont4initEv+0x7c>)
 80113d4:	2004      	movs	r0, #4
 80113d6:	f7fb f9a5 	bl	800c724 <_ZN12CGraphicFont7addFontEtPKNS_11TImgCharMapEtth>
    CGraphicFont::addFont( //
            CFont::FONT_5,
            CFont::CHAR_MAP_FONT_5,
            sizeof(CHAR_MAP_FONT_5) / sizeof(CHAR_MAP_FONT_5[0]),
            18,
            1);
 80113da:	2301      	movs	r3, #1
 80113dc:	9300      	str	r3, [sp, #0]
 80113de:	2312      	movs	r3, #18
 80113e0:	220c      	movs	r2, #12
 80113e2:	490b      	ldr	r1, [pc, #44]	; (8011410 <_ZN5CFont4initEv+0x80>)
 80113e4:	2005      	movs	r0, #5
 80113e6:	f7fb f99d 	bl	800c724 <_ZN12CGraphicFont7addFontEtPKNS_11TImgCharMapEtth>
    CGraphicFont::addFont( //
            CFont::FONT_ASCII,
            CFont::CHAR_MAP_FONT_ASCII,
            sizeof(CHAR_MAP_FONT_ASCII) / sizeof(CHAR_MAP_FONT_ASCII[0]),
            21,
            1);
 80113ea:	2301      	movs	r3, #1
 80113ec:	9300      	str	r3, [sp, #0]
 80113ee:	2315      	movs	r3, #21
 80113f0:	225f      	movs	r2, #95	; 0x5f
 80113f2:	4908      	ldr	r1, [pc, #32]	; (8011414 <_ZN5CFont4initEv+0x84>)
 80113f4:	200a      	movs	r0, #10
 80113f6:	f7fb f995 	bl	800c724 <_ZN12CGraphicFont7addFontEtPKNS_11TImgCharMapEtth>
}
 80113fa:	bf00      	nop
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}
 8011400:	0801cd5c 	.word	0x0801cd5c
 8011404:	0801d85c 	.word	0x0801d85c
 8011408:	0801e23c 	.word	0x0801e23c
 801140c:	0801e2bc 	.word	0x0801e2bc
 8011410:	0801e374 	.word	0x0801e374
 8011414:	0801e3d4 	.word	0x0801e3d4

08011418 <_ZN15CGraphicFontHAL9drawImageEmssRK10TColorDesc>:
#include "CGraphicFontHAL.h"
#include "st7565Driver.h"
#include "CImgData.h"

void CGraphicFontHAL::drawImage(uint32_t address, int16_t x1, int16_t y1, const TColorDesc& COLOR)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b084      	sub	sp, #16
 801141c:	af00      	add	r7, sp, #0
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	607b      	str	r3, [r7, #4]
 8011422:	460b      	mov	r3, r1
 8011424:	817b      	strh	r3, [r7, #10]
 8011426:	4613      	mov	r3, r2
 8011428:	813b      	strh	r3, [r7, #8]
    CST7565Driver::imgBitBlt(x1, y1, address, (CST7565Driver::TBitOperation) COLOR.RGBA);
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	b29a      	uxth	r2, r3
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	b2db      	uxtb	r3, r3
 8011434:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8011438:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 801143c:	f7fd fea6 	bl	800f18c <_ZN13CST7565Driver9imgBitBltEsstNS_13TBitOperationE>
}
 8011440:	bf00      	nop
 8011442:	3710      	adds	r7, #16
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}

08011448 <_ZN15CGraphicFontHAL13getImageWidthEm>:

uint16_t CGraphicFontHAL::getImageWidth(uint32_t address)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
    return CImgData::getImgWidth(address);
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f000 f805 	bl	8011460 <_ZN8CImgData11getImgWidthEm>
 8011456:	4603      	mov	r3, r0
}
 8011458:	4618      	mov	r0, r3
 801145a:	3708      	adds	r7, #8
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}

08011460 <_ZN8CImgData11getImgWidthEm>:
const uint8_t CImgData::FLASH_DATA[] = {
#include "flashGraphics.h"
        };

uint16_t CImgData::getImgWidth(uint32_t address)
{
 8011460:	b480      	push	{r7}
 8011462:	b083      	sub	sp, #12
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
    return CImgData::FLASH_DATA[address];
 8011468:	4a04      	ldr	r2, [pc, #16]	; (801147c <_ZN8CImgData11getImgWidthEm+0x1c>)
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	4413      	add	r3, r2
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	b29b      	uxth	r3, r3
}
 8011472:	4618      	mov	r0, r3
 8011474:	370c      	adds	r7, #12
 8011476:	46bd      	mov	sp, r7
 8011478:	bc80      	pop	{r7}
 801147a:	4770      	bx	lr
 801147c:	0801e6cc 	.word	0x0801e6cc

08011480 <_ZN7CNapisy18getLanguageVersionEt>:
const uint8_t CNapisy::FLASH_DATA[] = {
#include "flashCPU.h"
        };

int8_t CNapisy::getLanguageVersion(uint16_t language)
{
 8011480:	b480      	push	{r7}
 8011482:	b083      	sub	sp, #12
 8011484:	af00      	add	r7, sp, #0
 8011486:	4603      	mov	r3, r0
 8011488:	80fb      	strh	r3, [r7, #6]
    typedef enum
    {
#include "languageIdEnum.h"
    } TWersjaJezykowa;

    switch (language)
 801148a:	88fb      	ldrh	r3, [r7, #6]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d101      	bne.n	8011494 <_ZN7CNapisy18getLanguageVersionEt+0x14>
    {
        case JEZYK_POLSKI:
            return pl;
 8011490:	2300      	movs	r3, #0
 8011492:	e7ff      	b.n	8011494 <_ZN7CNapisy18getLanguageVersionEt+0x14>
//            return mda;

//        default:
//            return gbr;
    }
}
 8011494:	4618      	mov	r0, r3
 8011496:	370c      	adds	r7, #12
 8011498:	46bd      	mov	sp, r7
 801149a:	bc80      	pop	{r7}
 801149c:	4770      	bx	lr
	...

080114a0 <_ZN17CTextResourcesHAL8readDataEmPvs>:

#include "CTextResourcesHAL.h"
#include "CNapisy.h"

void CTextResourcesHAL::readData(uint32_t address, void *buffer, int16_t size)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b084      	sub	sp, #16
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	60f8      	str	r0, [r7, #12]
 80114a8:	60b9      	str	r1, [r7, #8]
 80114aa:	4613      	mov	r3, r2
 80114ac:	80fb      	strh	r3, [r7, #6]
    memcpy(buffer, CNapisy::FLASH_DATA + address, size);
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	4a05      	ldr	r2, [pc, #20]	; (80114c8 <_ZN17CTextResourcesHAL8readDataEmPvs+0x28>)
 80114b2:	4413      	add	r3, r2
 80114b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80114b8:	4619      	mov	r1, r3
 80114ba:	68b8      	ldr	r0, [r7, #8]
 80114bc:	f005 fef9 	bl	80172b2 <memcpy>
}
 80114c0:	bf00      	nop
 80114c2:	3710      	adds	r7, #16
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}
 80114c8:	080221d8 	.word	0x080221d8

080114cc <_ZN17CST7565_Hal_Flash29flashStartReadSequentialBytesEm>:
#include "CImgData.h"

uint32_t CST7565_Hal_Flash::m_address;

void CST7565_Hal_Flash::flashStartReadSequentialBytes(uint32_t address)
{
 80114cc:	b480      	push	{r7}
 80114ce:	b083      	sub	sp, #12
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
    m_address = address;
 80114d4:	4a03      	ldr	r2, [pc, #12]	; (80114e4 <_ZN17CST7565_Hal_Flash29flashStartReadSequentialBytesEm+0x18>)
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	6013      	str	r3, [r2, #0]
}
 80114da:	bf00      	nop
 80114dc:	370c      	adds	r7, #12
 80114de:	46bd      	mov	sp, r7
 80114e0:	bc80      	pop	{r7}
 80114e2:	4770      	bx	lr
 80114e4:	20000e8c 	.word	0x20000e8c

080114e8 <_ZN17CST7565_Hal_Flash24flashReadSequentialBytesEPht>:

void CST7565_Hal_Flash::flashReadSequentialBytes(uint8_t* outData, uint16_t dataSize)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b082      	sub	sp, #8
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
 80114f0:	460b      	mov	r3, r1
 80114f2:	807b      	strh	r3, [r7, #2]
    memcpy(outData, CImgData::FLASH_DATA + m_address, dataSize);
 80114f4:	4b09      	ldr	r3, [pc, #36]	; (801151c <_ZN17CST7565_Hal_Flash24flashReadSequentialBytesEPht+0x34>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	4a09      	ldr	r2, [pc, #36]	; (8011520 <_ZN17CST7565_Hal_Flash24flashReadSequentialBytesEPht+0x38>)
 80114fa:	4413      	add	r3, r2
 80114fc:	887a      	ldrh	r2, [r7, #2]
 80114fe:	4619      	mov	r1, r3
 8011500:	6878      	ldr	r0, [r7, #4]
 8011502:	f005 fed6 	bl	80172b2 <memcpy>
    m_address += dataSize;
 8011506:	887a      	ldrh	r2, [r7, #2]
 8011508:	4b04      	ldr	r3, [pc, #16]	; (801151c <_ZN17CST7565_Hal_Flash24flashReadSequentialBytesEPht+0x34>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	4413      	add	r3, r2
 801150e:	4a03      	ldr	r2, [pc, #12]	; (801151c <_ZN17CST7565_Hal_Flash24flashReadSequentialBytesEPht+0x34>)
 8011510:	6013      	str	r3, [r2, #0]
}
 8011512:	bf00      	nop
 8011514:	3708      	adds	r7, #8
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}
 801151a:	bf00      	nop
 801151c:	20000e8c 	.word	0x20000e8c
 8011520:	0801e6cc 	.word	0x0801e6cc

08011524 <_ZN17CST7565_Hal_Flash27flashEndReadSequentialBytesEv>:

void CST7565_Hal_Flash::flashEndReadSequentialBytes()
{
 8011524:	b480      	push	{r7}
 8011526:	af00      	add	r7, sp, #0
}
 8011528:	bf00      	nop
 801152a:	46bd      	mov	sp, r7
 801152c:	bc80      	pop	{r7}
 801152e:	4770      	bx	lr

08011530 <_ZN8SVersionC1Ettt>:
SVersion::SVersion(uint16_t value)
{
    init(value);
}

SVersion::SVersion(uint16_t major, uint16_t minor, uint16_t revision) :
 8011530:	b480      	push	{r7}
 8011532:	b085      	sub	sp, #20
 8011534:	af00      	add	r7, sp, #0
 8011536:	60f8      	str	r0, [r7, #12]
 8011538:	4608      	mov	r0, r1
 801153a:	4611      	mov	r1, r2
 801153c:	461a      	mov	r2, r3
 801153e:	4603      	mov	r3, r0
 8011540:	817b      	strh	r3, [r7, #10]
 8011542:	460b      	mov	r3, r1
 8011544:	813b      	strh	r3, [r7, #8]
 8011546:	4613      	mov	r3, r2
 8011548:	80fb      	strh	r3, [r7, #6]
        major(major), minor(minor), revision(revision)
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	897a      	ldrh	r2, [r7, #10]
 801154e:	801a      	strh	r2, [r3, #0]
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	893a      	ldrh	r2, [r7, #8]
 8011554:	805a      	strh	r2, [r3, #2]
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	88fa      	ldrh	r2, [r7, #6]
 801155a:	809a      	strh	r2, [r3, #4]
{
}
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	4618      	mov	r0, r3
 8011560:	3714      	adds	r7, #20
 8011562:	46bd      	mov	sp, r7
 8011564:	bc80      	pop	{r7}
 8011566:	4770      	bx	lr

08011568 <_ZN13CScreenDeviceC1Ev>:
#include "CScreenMenu.h"
#include "CGUI.h"
#include "CTextResources.h"
#include "Driver.h"

CScreenDevice::CScreenDevice() : m_timer(CTimer::UNIT_MILISEC)
 8011568:	b580      	push	{r7, lr}
 801156a:	b082      	sub	sp, #8
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	4618      	mov	r0, r3
 8011574:	f7fa ffcc 	bl	800c510 <_ZN7CScreenC1Ev>
 8011578:	4a0a      	ldr	r2, [pc, #40]	; (80115a4 <_ZN13CScreenDeviceC1Ev+0x3c>)
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	601a      	str	r2, [r3, #0]
 801157e:	4a0a      	ldr	r2, [pc, #40]	; (80115a8 <_ZN13CScreenDeviceC1Ev+0x40>)
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	605a      	str	r2, [r3, #4]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	3318      	adds	r3, #24
 8011588:	2100      	movs	r1, #0
 801158a:	4618      	mov	r0, r3
 801158c:	f7fe ff16 	bl	80103bc <_ZN6CTimerC1ENS_4UnitE>
{
	m_currentPage = 0;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2200      	movs	r2, #0
 8011594:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	4618      	mov	r0, r3
 801159c:	3708      	adds	r7, #8
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	08022278 	.word	0x08022278
 80115a8:	08022298 	.word	0x08022298

080115ac <_ZN13CScreenDevice7onStartEv>:

void CScreenDevice::onStart()
{
 80115ac:	b480      	push	{r7}
 80115ae:	b083      	sub	sp, #12
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
	m_linkStatus = 0;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2200      	movs	r2, #0
 80115b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80115ba:	bf00      	nop
 80115bc:	370c      	adds	r7, #12
 80115be:	46bd      	mov	sp, r7
 80115c0:	bc80      	pop	{r7}
 80115c2:	4770      	bx	lr

080115c4 <_ZN13CScreenDevice8onResumeEv>:

void CScreenDevice::onResume()
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b082      	sub	sp, #8
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
    CScreen::onResume();
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7fe f83c 	bl	800f64c <_ZN7CScreen8onResumeEv>

    draw();
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f000 f8bf 	bl	8011758 <_ZN13CScreenDevice4drawEv>
    m_timer.startAligned(2000);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	3318      	adds	r3, #24
 80115de:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7fe ff2d 	bl	8010442 <_ZN6CTimer12startAlignedEm>
}
 80115e8:	bf00      	nop
 80115ea:	3708      	adds	r7, #8
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <_ZN13CScreenDevice6updateEv>:

void CScreenDevice::update()
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b082      	sub	sp, #8
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
    if (m_timer.isElapsed())
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	3318      	adds	r3, #24
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7fe ffa9 	bl	8010554 <_ZN6CTimer9isElapsedEv>
 8011602:	4603      	mov	r3, r0
 8011604:	2b00      	cmp	r3, #0
 8011606:	d003      	beq.n	8011610 <_ZN13CScreenDevice6updateEv+0x20>
    {
        resume();
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	4618      	mov	r0, r3
 801160c:	f7f9 fa74 	bl	800aaf8 <_ZN7AScreen6resumeEv>
    }

//    CScreenAlarm::updateShow(CGUI::getAlarmController()->getDriver());
}
 8011610:	bf00      	nop
 8011612:	3708      	adds	r7, #8
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}

08011618 <_ZN13CScreenDevice7onPauseEv>:

void CScreenDevice::onPause()
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b082      	sub	sp, #8
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
    CScreen::onPause();
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	4618      	mov	r0, r3
 8011624:	f7fe f855 	bl	800f6d2 <_ZN7CScreen7onPauseEv>
    finish();
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	4618      	mov	r0, r3
 801162c:	f7f9 fa59 	bl	800aae2 <_ZN7AScreen6finishEv>
}
 8011630:	bf00      	nop
 8011632:	3708      	adds	r7, #8
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}

08011638 <_ZN13CScreenDevice6onStopEv>:

void CScreenDevice::onStop()
{
 8011638:	b480      	push	{r7}
 801163a:	b083      	sub	sp, #12
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
}
 8011640:	bf00      	nop
 8011642:	370c      	adds	r7, #12
 8011644:	46bd      	mov	sp, r7
 8011646:	bc80      	pop	{r7}
 8011648:	4770      	bx	lr
	...

0801164c <_ZN13CScreenDevice5onKeyEaa>:

bool CScreenDevice::onKey(int8_t keyCode, int8_t keyEvent)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b0ee      	sub	sp, #440	; 0x1b8
 8011650:	af00      	add	r7, sp, #0
 8011652:	1d3b      	adds	r3, r7, #4
 8011654:	6018      	str	r0, [r3, #0]
 8011656:	4608      	mov	r0, r1
 8011658:	4611      	mov	r1, r2
 801165a:	1cfb      	adds	r3, r7, #3
 801165c:	4602      	mov	r2, r0
 801165e:	701a      	strb	r2, [r3, #0]
 8011660:	1cbb      	adds	r3, r7, #2
 8011662:	460a      	mov	r2, r1
 8011664:	701a      	strb	r2, [r3, #0]
    if (keyEvent == KEY_EVENT_UP)
 8011666:	1cbb      	adds	r3, r7, #2
 8011668:	f993 3000 	ldrsb.w	r3, [r3]
 801166c:	2b02      	cmp	r3, #2
 801166e:	d101      	bne.n	8011674 <_ZN13CScreenDevice5onKeyEaa+0x28>
    {
        return false;
 8011670:	2300      	movs	r3, #0
 8011672:	e068      	b.n	8011746 <_ZN13CScreenDevice5onKeyEaa+0xfa>
    }

    switch (keyCode)
 8011674:	1cfb      	adds	r3, r7, #3
 8011676:	f993 3000 	ldrsb.w	r3, [r3]
 801167a:	3b01      	subs	r3, #1
 801167c:	2b03      	cmp	r3, #3
 801167e:	d861      	bhi.n	8011744 <_ZN13CScreenDevice5onKeyEaa+0xf8>
 8011680:	a201      	add	r2, pc, #4	; (adr r2, 8011688 <_ZN13CScreenDevice5onKeyEaa+0x3c>)
 8011682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011686:	bf00      	nop
 8011688:	08011699 	.word	0x08011699
 801168c:	080116c1 	.word	0x080116c1
 8011690:	080116c5 	.word	0x080116c5
 8011694:	08011705 	.word	0x08011705
    {
        case KEY_CODE_MENU:
        {
            CMenuGlowne menuList;
 8011698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801169c:	4618      	mov	r0, r3
 801169e:	f7ff fbef 	bl	8010e80 <_ZN11CMenuGlowneC1Ev>
            CScreenMenu screenMenu(&menuList);
 80116a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80116a6:	f107 0308 	add.w	r3, r7, #8
 80116aa:	4611      	mov	r1, r2
 80116ac:	4618      	mov	r0, r3
 80116ae:	f000 fa49 	bl	8011b44 <_ZN11CScreenMenuC1EP9AMenuList>
            CContext::showScreen(&screenMenu);
 80116b2:	f107 0308 	add.w	r3, r7, #8
 80116b6:	4618      	mov	r0, r3
 80116b8:	f7f9 fed0 	bl	800b45c <_ZN8CContext10showScreenEP7AScreen>
        }
		return true;
 80116bc:	2301      	movs	r3, #1
 80116be:	e042      	b.n	8011746 <_ZN13CScreenDevice5onKeyEaa+0xfa>

        case KEY_CODE_EXIT:
        {
        }
		return true;
 80116c0:	2301      	movs	r3, #1
 80116c2:	e040      	b.n	8011746 <_ZN13CScreenDevice5onKeyEaa+0xfa>

        case KEY_CODE_UP:
		{
			if(m_currentPage==39)
 80116c4:	1d3b      	adds	r3, r7, #4
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80116cc:	2b27      	cmp	r3, #39	; 0x27
 80116ce:	d105      	bne.n	80116dc <_ZN13CScreenDevice5onKeyEaa+0x90>
			{
				m_currentPage=0;
 80116d0:	1d3b      	adds	r3, r7, #4
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	2200      	movs	r2, #0
 80116d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80116da:	e009      	b.n	80116f0 <_ZN13CScreenDevice5onKeyEaa+0xa4>
			}
			else
			{
				m_currentPage++;
 80116dc:	1d3b      	adds	r3, r7, #4
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80116e4:	3301      	adds	r3, #1
 80116e6:	b2da      	uxtb	r2, r3
 80116e8:	1d3b      	adds	r3, r7, #4
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			onResume();
 80116f0:	1d3b      	adds	r3, r7, #4
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	3308      	adds	r3, #8
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	1d3a      	adds	r2, r7, #4
 80116fc:	6810      	ldr	r0, [r2, #0]
 80116fe:	4798      	blx	r3

		}
        return true;
 8011700:	2301      	movs	r3, #1
 8011702:	e020      	b.n	8011746 <_ZN13CScreenDevice5onKeyEaa+0xfa>

        case KEY_CODE_DOWN:
		{
			if(m_currentPage==0)
 8011704:	1d3b      	adds	r3, r7, #4
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801170c:	2b00      	cmp	r3, #0
 801170e:	d105      	bne.n	801171c <_ZN13CScreenDevice5onKeyEaa+0xd0>
			{
				m_currentPage=39;
 8011710:	1d3b      	adds	r3, r7, #4
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	2227      	movs	r2, #39	; 0x27
 8011716:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801171a:	e009      	b.n	8011730 <_ZN13CScreenDevice5onKeyEaa+0xe4>
			}
			else
			{
				m_currentPage--;
 801171c:	1d3b      	adds	r3, r7, #4
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011724:	3b01      	subs	r3, #1
 8011726:	b2da      	uxtb	r2, r3
 8011728:	1d3b      	adds	r3, r7, #4
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}

			onResume();
 8011730:	1d3b      	adds	r3, r7, #4
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	3308      	adds	r3, #8
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	1d3a      	adds	r2, r7, #4
 801173c:	6810      	ldr	r0, [r2, #0]
 801173e:	4798      	blx	r3
		}
        return true;
 8011740:	2301      	movs	r3, #1
 8011742:	e000      	b.n	8011746 <_ZN13CScreenDevice5onKeyEaa+0xfa>

        default:
            return false;
 8011744:	2300      	movs	r3, #0
    }
}
 8011746:	4618      	mov	r0, r3
 8011748:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}

08011750 <_ZThn4_N13CScreenDevice5onKeyEaa>:
	    void update();
	    void onPause();
	    void onStop();

	public:
	    bool onKey(int8_t keyCode, int8_t keyEvent);
 8011750:	f1a0 0004 	sub.w	r0, r0, #4
 8011754:	f7ff bf7a 	b.w	801164c <_ZN13CScreenDevice5onKeyEaa>

08011758 <_ZN13CScreenDevice4drawEv>:

void CScreenDevice::draw()
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b0a0      	sub	sp, #128	; 0x80
 801175c:	af08      	add	r7, sp, #32
 801175e:	6078      	str	r0, [r7, #4]
    CST7565Driver::suspendDrawing();
 8011760:	f7fd ff5e 	bl	800f620 <_ZN13CST7565Driver14suspendDrawingEv>
    CST7565Driver::clear();
 8011764:	f7fd fa7a 	bl	800ec5c <_ZN13CST7565Driver5clearEv>
    char buffer1[32];
    char m_buffer[32];
    int counterAddress = Driver::getInstance().getDriverCommunication()->getMotoCounterSetter()->getCounterAddress();
 8011768:	f003 f9d4 	bl	8014b14 <_ZN6Driver11getInstanceEv>
 801176c:	4603      	mov	r3, r0
 801176e:	4618      	mov	r0, r3
 8011770:	f7ff fb79 	bl	8010e66 <_ZN6Driver22getDriverCommunicationEv>
 8011774:	4603      	mov	r3, r0
 8011776:	4618      	mov	r0, r3
 8011778:	f7ff fb6a 	bl	8010e50 <_ZN19DriverCommunication20getMotoCounterSetterEv>
 801177c:	4603      	mov	r3, r0
 801177e:	4618      	mov	r0, r3
 8011780:	f7ff fcff 	bl	8011182 <_ZN17MotoCounterSetter17getCounterAddressEv>
 8011784:	4603      	mov	r3, r0
 8011786:	65fb      	str	r3, [r7, #92]	; 0x5c

    if(counterAddress > 0)
 8011788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801178a:	2b00      	cmp	r3, #0
 801178c:	f340 8096 	ble.w	80118bc <_ZN13CScreenDevice4drawEv+0x164>
    {
    	CTextResources::copyTextToBuffer(buffer1, CNapisy::IDT_ADRES, 32);
 8011790:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011794:	2220      	movs	r2, #32
 8011796:	2146      	movs	r1, #70	; 0x46
 8011798:	4618      	mov	r0, r3
 801179a:	f7fe fc89 	bl	80100b0 <_ZN14CTextResources16copyTextToBufferEPcms>
		snprintf(m_buffer, sizeof(m_buffer), "%s %d", buffer1, counterAddress);
 801179e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80117a2:	f107 000c 	add.w	r0, r7, #12
 80117a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117a8:	9300      	str	r3, [sp, #0]
 80117aa:	4613      	mov	r3, r2
 80117ac:	4a58      	ldr	r2, [pc, #352]	; (8011910 <_ZN13CScreenDevice4drawEv+0x1b8>)
 80117ae:	2120      	movs	r1, #32
 80117b0:	f006 fa3a 	bl	8017c28 <snprintf>

		CGraphicFont::drawText( //
 80117b4:	2300      	movs	r3, #0
 80117b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117b8:	2301      	movs	r3, #1
 80117ba:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
				m_buffer,
				CFont::FONT_1,
				CGraphicFont::PR_NORMAL,
				CGraphicFont::AT_CENTER,
				CGraphicFont::MULTILINE_OFF,
				{CST7565Driver::BIT_OPERATION_OR});
 80117be:	2300      	movs	r3, #0
 80117c0:	9307      	str	r3, [sp, #28]
 80117c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80117c6:	9306      	str	r3, [sp, #24]
 80117c8:	2300      	movs	r3, #0
 80117ca:	9305      	str	r3, [sp, #20]
 80117cc:	2302      	movs	r3, #2
 80117ce:	9304      	str	r3, [sp, #16]
 80117d0:	2300      	movs	r3, #0
 80117d2:	9303      	str	r3, [sp, #12]
 80117d4:	2301      	movs	r3, #1
 80117d6:	9302      	str	r3, [sp, #8]
 80117d8:	f107 030c 	add.w	r3, r7, #12
 80117dc:	9301      	str	r3, [sp, #4]
 80117de:	2300      	movs	r3, #0
 80117e0:	9300      	str	r3, [sp, #0]
 80117e2:	230a      	movs	r3, #10
 80117e4:	227f      	movs	r2, #127	; 0x7f
 80117e6:	2100      	movs	r1, #0
 80117e8:	2000      	movs	r0, #0
 80117ea:	f7fa fff5 	bl	800c7d8 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb>

		CST7565Driver::fill(1, 11, 126, 11, CST7565Driver::FILL_OPERATION_FILL);
 80117ee:	2300      	movs	r3, #0
 80117f0:	9300      	str	r3, [sp, #0]
 80117f2:	230b      	movs	r3, #11
 80117f4:	227e      	movs	r2, #126	; 0x7e
 80117f6:	210b      	movs	r1, #11
 80117f8:	2001      	movs	r0, #1
 80117fa:	f7fd f89d 	bl	800e938 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE>

		CTextResources::copyTextToBuffer(buffer1, CNapisy::IDT_AKTUALNY_STAN, 32);
 80117fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011802:	2220      	movs	r2, #32
 8011804:	2171      	movs	r1, #113	; 0x71
 8011806:	4618      	mov	r0, r3
 8011808:	f7fe fc52 	bl	80100b0 <_ZN14CTextResources16copyTextToBufferEPcms>
		snprintf(m_buffer, sizeof(m_buffer), "%s %d", buffer1, 99999999);
 801180c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011810:	f107 000c 	add.w	r0, r7, #12
 8011814:	4b3f      	ldr	r3, [pc, #252]	; (8011914 <_ZN13CScreenDevice4drawEv+0x1bc>)
 8011816:	9300      	str	r3, [sp, #0]
 8011818:	4613      	mov	r3, r2
 801181a:	4a3d      	ldr	r2, [pc, #244]	; (8011910 <_ZN13CScreenDevice4drawEv+0x1b8>)
 801181c:	2120      	movs	r1, #32
 801181e:	f006 fa03 	bl	8017c28 <snprintf>

		CGraphicFont::drawText( //
 8011822:	2300      	movs	r3, #0
 8011824:	653b      	str	r3, [r7, #80]	; 0x50
 8011826:	2301      	movs	r3, #1
 8011828:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
				m_buffer,
				CFont::FONT_1,
				CGraphicFont::PR_NORMAL,
				CGraphicFont::AT_LEFT,
				CGraphicFont::MULTILINE_OFF,
				{CST7565Driver::BIT_OPERATION_OR});
 801182c:	2300      	movs	r3, #0
 801182e:	9307      	str	r3, [sp, #28]
 8011830:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011834:	9306      	str	r3, [sp, #24]
 8011836:	2300      	movs	r3, #0
 8011838:	9305      	str	r3, [sp, #20]
 801183a:	2300      	movs	r3, #0
 801183c:	9304      	str	r3, [sp, #16]
 801183e:	2300      	movs	r3, #0
 8011840:	9303      	str	r3, [sp, #12]
 8011842:	2301      	movs	r3, #1
 8011844:	9302      	str	r3, [sp, #8]
 8011846:	f107 030c 	add.w	r3, r7, #12
 801184a:	9301      	str	r3, [sp, #4]
 801184c:	2300      	movs	r3, #0
 801184e:	9300      	str	r3, [sp, #0]
 8011850:	231e      	movs	r3, #30
 8011852:	227f      	movs	r2, #127	; 0x7f
 8011854:	2114      	movs	r1, #20
 8011856:	2000      	movs	r0, #0
 8011858:	f7fa ffbe 	bl	800c7d8 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb>

		CTextResources::copyTextToBuffer(buffer1, CNapisy::IDT_KOLEJNY_SERWIS, 32);
 801185c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011860:	2220      	movs	r2, #32
 8011862:	210b      	movs	r1, #11
 8011864:	4618      	mov	r0, r3
 8011866:	f7fe fc23 	bl	80100b0 <_ZN14CTextResources16copyTextToBufferEPcms>
		snprintf(m_buffer, sizeof(m_buffer), "%s %d", buffer1, 99999999);
 801186a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801186e:	f107 000c 	add.w	r0, r7, #12
 8011872:	4b28      	ldr	r3, [pc, #160]	; (8011914 <_ZN13CScreenDevice4drawEv+0x1bc>)
 8011874:	9300      	str	r3, [sp, #0]
 8011876:	4613      	mov	r3, r2
 8011878:	4a25      	ldr	r2, [pc, #148]	; (8011910 <_ZN13CScreenDevice4drawEv+0x1b8>)
 801187a:	2120      	movs	r1, #32
 801187c:	f006 f9d4 	bl	8017c28 <snprintf>

		CGraphicFont::drawText( //
 8011880:	2300      	movs	r3, #0
 8011882:	657b      	str	r3, [r7, #84]	; 0x54
 8011884:	2301      	movs	r3, #1
 8011886:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
				m_buffer,
				CFont::FONT_1,
				CGraphicFont::PR_NORMAL,
				CGraphicFont::AT_LEFT,
				CGraphicFont::MULTILINE_OFF,
				{CST7565Driver::BIT_OPERATION_OR});
 801188a:	2300      	movs	r3, #0
 801188c:	9307      	str	r3, [sp, #28]
 801188e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011892:	9306      	str	r3, [sp, #24]
 8011894:	2300      	movs	r3, #0
 8011896:	9305      	str	r3, [sp, #20]
 8011898:	2300      	movs	r3, #0
 801189a:	9304      	str	r3, [sp, #16]
 801189c:	2300      	movs	r3, #0
 801189e:	9303      	str	r3, [sp, #12]
 80118a0:	2301      	movs	r3, #1
 80118a2:	9302      	str	r3, [sp, #8]
 80118a4:	f107 030c 	add.w	r3, r7, #12
 80118a8:	9301      	str	r3, [sp, #4]
 80118aa:	2300      	movs	r3, #0
 80118ac:	9300      	str	r3, [sp, #0]
 80118ae:	2332      	movs	r3, #50	; 0x32
 80118b0:	227f      	movs	r2, #127	; 0x7f
 80118b2:	2128      	movs	r1, #40	; 0x28
 80118b4:	2000      	movs	r0, #0
 80118b6:	f7fa ff8f 	bl	800c7d8 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb>
 80118ba:	e023      	b.n	8011904 <_ZN13CScreenDevice4drawEv+0x1ac>
    }
    else
    {
    	CTextResources::copyTextToBuffer(m_buffer, CNapisy::IDT_BRAK_WYBRANEGO_LICZNIKA, 32);
 80118bc:	f107 030c 	add.w	r3, r7, #12
 80118c0:	2220      	movs	r2, #32
 80118c2:	217f      	movs	r1, #127	; 0x7f
 80118c4:	4618      	mov	r0, r3
 80118c6:	f7fe fbf3 	bl	80100b0 <_ZN14CTextResources16copyTextToBufferEPcms>
//		snprintf(m_buffer, sizeof(m_buffer), "%s %d", buffer1, counterAddress);

		CGraphicFont::drawText( //
 80118ca:	2300      	movs	r3, #0
 80118cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80118ce:	2301      	movs	r3, #1
 80118d0:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				m_buffer,
				CFont::FONT_1,
				CGraphicFont::PR_NORMAL,
				CGraphicFont::AT_CENTER,
				CGraphicFont::MULTILINE_OFF,
				{CST7565Driver::BIT_OPERATION_OR});
 80118d4:	2300      	movs	r3, #0
 80118d6:	9307      	str	r3, [sp, #28]
 80118d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80118dc:	9306      	str	r3, [sp, #24]
 80118de:	2300      	movs	r3, #0
 80118e0:	9305      	str	r3, [sp, #20]
 80118e2:	2302      	movs	r3, #2
 80118e4:	9304      	str	r3, [sp, #16]
 80118e6:	2300      	movs	r3, #0
 80118e8:	9303      	str	r3, [sp, #12]
 80118ea:	2301      	movs	r3, #1
 80118ec:	9302      	str	r3, [sp, #8]
 80118ee:	f107 030c 	add.w	r3, r7, #12
 80118f2:	9301      	str	r3, [sp, #4]
 80118f4:	2300      	movs	r3, #0
 80118f6:	9300      	str	r3, [sp, #0]
 80118f8:	2328      	movs	r3, #40	; 0x28
 80118fa:	227f      	movs	r2, #127	; 0x7f
 80118fc:	211e      	movs	r1, #30
 80118fe:	2000      	movs	r0, #0
 8011900:	f7fa ff6a 	bl	800c7d8 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb>
//    {
//    	CST7565Driver::imgBitBlt(30, 35, CImgData::IMG_COMMUNICATION, CST7565Driver::BIT_OPERATION_OR);
//    }


    CST7565Driver::resumeDrawing();
 8011904:	f7fd fcd2 	bl	800f2ac <_ZN13CST7565Driver13resumeDrawingEv>
}
 8011908:	bf00      	nop
 801190a:	3760      	adds	r7, #96	; 0x60
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}
 8011910:	0801c280 	.word	0x0801c280
 8011914:	05f5e0ff 	.word	0x05f5e0ff

08011918 <_ZN11CScreenLogo4initEb>:
#include "CScreenLogo.h"
#include "common.h"
//#include "CScreenTest.h"

void CScreenLogo::init(bool timeout)
{
 8011918:	b480      	push	{r7}
 801191a:	b083      	sub	sp, #12
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	460b      	mov	r3, r1
 8011922:	70fb      	strb	r3, [r7, #3]
    m_timeout = timeout;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	78fa      	ldrb	r2, [r7, #3]
 8011928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 801192c:	bf00      	nop
 801192e:	370c      	adds	r7, #12
 8011930:	46bd      	mov	sp, r7
 8011932:	bc80      	pop	{r7}
 8011934:	4770      	bx	lr

08011936 <_ZN11CScreenLogo7onStartEv>:

void CScreenLogo::onStart()
{
 8011936:	b580      	push	{r7, lr}
 8011938:	b082      	sub	sp, #8
 801193a:	af00      	add	r7, sp, #0
 801193c:	6078      	str	r0, [r7, #4]
    if (m_timeout)
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011944:	2b00      	cmp	r3, #0
 8011946:	d005      	beq.n	8011954 <_ZN11CScreenLogo7onStartEv+0x1e>
    {
        m_timer.start(10);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	3318      	adds	r3, #24
 801194c:	210a      	movs	r1, #10
 801194e:	4618      	mov	r0, r3
 8011950:	f7fe fd63 	bl	801041a <_ZN6CTimer5startEm>
    }
    m_easterEggCounter = 0;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2200      	movs	r2, #0
 8011958:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 801195c:	bf00      	nop
 801195e:	3708      	adds	r7, #8
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}

08011964 <_ZN11CScreenLogo8onResumeEv>:

void CScreenLogo::onResume()
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b082      	sub	sp, #8
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
    CScreen::onResume();
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	4618      	mov	r0, r3
 8011970:	f7fd fe6c 	bl	800f64c <_ZN7CScreen8onResumeEv>

    draw();
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f000 f86f 	bl	8011a58 <_ZN11CScreenLogo4drawEv>
}
 801197a:	bf00      	nop
 801197c:	3708      	adds	r7, #8
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}

08011982 <_ZN11CScreenLogo6updateEv>:

void CScreenLogo::update()
{
 8011982:	b580      	push	{r7, lr}
 8011984:	b082      	sub	sp, #8
 8011986:	af00      	add	r7, sp, #0
 8011988:	6078      	str	r0, [r7, #4]
    if (m_timer.isElapsed())
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	3318      	adds	r3, #24
 801198e:	4618      	mov	r0, r3
 8011990:	f7fe fde0 	bl	8010554 <_ZN6CTimer9isElapsedEv>
 8011994:	4603      	mov	r3, r0
 8011996:	2b00      	cmp	r3, #0
 8011998:	d003      	beq.n	80119a2 <_ZN11CScreenLogo6updateEv+0x20>
    {
        finish();
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	4618      	mov	r0, r3
 801199e:	f7f9 f8a0 	bl	800aae2 <_ZN7AScreen6finishEv>
    }
}
 80119a2:	bf00      	nop
 80119a4:	3708      	adds	r7, #8
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bd80      	pop	{r7, pc}

080119aa <_ZN11CScreenLogo7onPauseEv>:

void CScreenLogo::onPause()
{
 80119aa:	b580      	push	{r7, lr}
 80119ac:	b082      	sub	sp, #8
 80119ae:	af00      	add	r7, sp, #0
 80119b0:	6078      	str	r0, [r7, #4]
    CScreen::onPause();
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	4618      	mov	r0, r3
 80119b6:	f7fd fe8c 	bl	800f6d2 <_ZN7CScreen7onPauseEv>
}
 80119ba:	bf00      	nop
 80119bc:	3708      	adds	r7, #8
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}

080119c2 <_ZN11CScreenLogo6onStopEv>:

void CScreenLogo::onStop()
{
 80119c2:	b480      	push	{r7}
 80119c4:	b083      	sub	sp, #12
 80119c6:	af00      	add	r7, sp, #0
 80119c8:	6078      	str	r0, [r7, #4]
}
 80119ca:	bf00      	nop
 80119cc:	370c      	adds	r7, #12
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bc80      	pop	{r7}
 80119d2:	4770      	bx	lr

080119d4 <_ZN11CScreenLogo5onKeyEaa>:

bool CScreenLogo::onKey(int8_t keyCode, int8_t keyEvent)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	460b      	mov	r3, r1
 80119de:	70fb      	strb	r3, [r7, #3]
 80119e0:	4613      	mov	r3, r2
 80119e2:	70bb      	strb	r3, [r7, #2]
    if (keyEvent == KEY_EVENT_UP)
 80119e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80119e8:	2b02      	cmp	r3, #2
 80119ea:	d101      	bne.n	80119f0 <_ZN11CScreenLogo5onKeyEaa+0x1c>
    {
        return false;
 80119ec:	2300      	movs	r3, #0
 80119ee:	e02a      	b.n	8011a46 <_ZN11CScreenLogo5onKeyEaa+0x72>
    }

    switch (keyCode)
 80119f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80119f4:	3b01      	subs	r3, #1
 80119f6:	2b03      	cmp	r3, #3
 80119f8:	d824      	bhi.n	8011a44 <_ZN11CScreenLogo5onKeyEaa+0x70>
 80119fa:	a201      	add	r2, pc, #4	; (adr r2, 8011a00 <_ZN11CScreenLogo5onKeyEaa+0x2c>)
 80119fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a00:	08011a11 	.word	0x08011a11
 8011a04:	08011a11 	.word	0x08011a11
 8011a08:	08011a31 	.word	0x08011a31
 8011a0c:	08011a25 	.word	0x08011a25
    {
        case KEY_CODE_MENU:
        case KEY_CODE_EXIT:
    		m_easterEggCounter = 0;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2200      	movs	r2, #0
 8011a14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
            finish();
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f7f9 f861 	bl	800aae2 <_ZN7AScreen6finishEv>
            return true;
 8011a20:	2301      	movs	r3, #1
 8011a22:	e010      	b.n	8011a46 <_ZN11CScreenLogo5onKeyEaa+0x72>
//        	}
//        	else if(m_easterEggCounter == 12)
//        	{
//        		CGUI::getMelodyPlayer()->play(CMelodyPlayer::MARIO_BROS_UNDERWORLD, sizeof(CMelodyPlayer::MARIO_BROS_UNDERWORLD)/sizeof(CMelodyPlayer::MARIO_BROS_UNDERWORLD[0]));
//        	}
    		m_easterEggCounter = 0;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2200      	movs	r2, #0
 8011a28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        }
        return true;
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	e00a      	b.n	8011a46 <_ZN11CScreenLogo5onKeyEaa+0x72>

        case KEY_CODE_UP:
        {
        	m_easterEggCounter++;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8011a36:	3301      	adds	r3, #1
 8011a38:	b2da      	uxtb	r2, r3
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        }
        return true;
 8011a40:	2301      	movs	r3, #1
 8011a42:	e000      	b.n	8011a46 <_ZN11CScreenLogo5onKeyEaa+0x72>

        default:
            return false;
 8011a44:	2300      	movs	r3, #0
    }
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	3708      	adds	r7, #8
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
 8011a4e:	bf00      	nop

08011a50 <_ZThn4_N11CScreenLogo5onKeyEaa>:
    void update();
    void onPause();
    void onStop();

public:
    bool onKey(int8_t keyCode, int8_t keyEvent);
 8011a50:	f1a0 0004 	sub.w	r0, r0, #4
 8011a54:	f7ff bfbe 	b.w	80119d4 <_ZN11CScreenLogo5onKeyEaa>

08011a58 <_ZN11CScreenLogo4drawEv>:

void CScreenLogo::draw()
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b092      	sub	sp, #72	; 0x48
 8011a5c:	af08      	add	r7, sp, #32
 8011a5e:	6078      	str	r0, [r7, #4]
    CST7565Driver::suspendDrawing();
 8011a60:	f7fd fdde 	bl	800f620 <_ZN13CST7565Driver14suspendDrawingEv>
    CST7565Driver::clear();
 8011a64:	f7fd f8fa 	bl	800ec5c <_ZN13CST7565Driver5clearEv>

    char buffer[16];

    CImgData::TImgAddress logo = CImgData::IMG_LOGO_LEMARPOL;
 8011a68:	f643 1365 	movw	r3, #14693	; 0x3965
 8011a6c:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t posY = 5;
 8011a6e:	2305      	movs	r3, #5
 8011a70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


	CST7565Driver::imgBitBltCenterBox(0, posY, 127, 0, logo, CST7565Driver::BIT_OPERATION_OR);
 8011a74:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011a78:	b219      	sxth	r1, r3
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	9301      	str	r3, [sp, #4]
 8011a7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011a80:	9300      	str	r3, [sp, #0]
 8011a82:	2300      	movs	r3, #0
 8011a84:	227f      	movs	r2, #127	; 0x7f
 8011a86:	2000      	movs	r0, #0
 8011a88:	f7fd f8f6 	bl	800ec78 <_ZN13CST7565Driver18imgBitBltCenterBoxEsssstNS_13TBitOperationE>

	CST7565Driver::fill(0, 47, 127, 47, CST7565Driver::FILL_OPERATION_FILL);
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	9300      	str	r3, [sp, #0]
 8011a90:	232f      	movs	r3, #47	; 0x2f
 8011a92:	227f      	movs	r2, #127	; 0x7f
 8011a94:	212f      	movs	r1, #47	; 0x2f
 8011a96:	2000      	movs	r0, #0
 8011a98:	f7fc ff4e 	bl	800e938 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE>

    snprintf(buffer, sizeof(buffer), "CC-1");
 8011a9c:	f107 030c 	add.w	r3, r7, #12
 8011aa0:	4a26      	ldr	r2, [pc, #152]	; (8011b3c <_ZN11CScreenLogo4drawEv+0xe4>)
 8011aa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011aa6:	6018      	str	r0, [r3, #0]
 8011aa8:	3304      	adds	r3, #4
 8011aaa:	7019      	strb	r1, [r3, #0]

	CGraphicFont::drawText( //
 8011aac:	2300      	movs	r3, #0
 8011aae:	61fb      	str	r3, [r7, #28]
 8011ab0:	2301      	movs	r3, #1
 8011ab2:	773b      	strb	r3, [r7, #28]
			buffer,
			CFont::FONT_1,
			CGraphicFont::PR_NORMAL,
			CGraphicFont::AT_CENTER,
			CGraphicFont::MULTILINE_OFF,
			{CST7565Driver::BIT_OPERATION_OR});
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	9307      	str	r3, [sp, #28]
 8011ab8:	f107 031c 	add.w	r3, r7, #28
 8011abc:	9306      	str	r3, [sp, #24]
 8011abe:	2300      	movs	r3, #0
 8011ac0:	9305      	str	r3, [sp, #20]
 8011ac2:	2302      	movs	r3, #2
 8011ac4:	9304      	str	r3, [sp, #16]
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	9303      	str	r3, [sp, #12]
 8011aca:	2301      	movs	r3, #1
 8011acc:	9302      	str	r3, [sp, #8]
 8011ace:	f107 030c 	add.w	r3, r7, #12
 8011ad2:	9301      	str	r3, [sp, #4]
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	9300      	str	r3, [sp, #0]
 8011ad8:	233c      	movs	r3, #60	; 0x3c
 8011ada:	2232      	movs	r2, #50	; 0x32
 8011adc:	2133      	movs	r1, #51	; 0x33
 8011ade:	2014      	movs	r0, #20
 8011ae0:	f7fa fe7a 	bl	800c7d8 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb>

	sprintf(buffer, "%d.%d.%d",1, 0, 0);
 8011ae4:	f107 000c 	add.w	r0, r7, #12
 8011ae8:	2300      	movs	r3, #0
 8011aea:	9300      	str	r3, [sp, #0]
 8011aec:	2300      	movs	r3, #0
 8011aee:	2201      	movs	r2, #1
 8011af0:	4913      	ldr	r1, [pc, #76]	; (8011b40 <_ZN11CScreenLogo4drawEv+0xe8>)
 8011af2:	f006 f8cd 	bl	8017c90 <sprintf>

	CGraphicFont::drawText(
 8011af6:	2300      	movs	r3, #0
 8011af8:	623b      	str	r3, [r7, #32]
 8011afa:	2301      	movs	r3, #1
 8011afc:	f887 3020 	strb.w	r3, [r7, #32]
			buffer,
			CFont::FONT_1,
			CGraphicFont::PR_NORMAL,
			CGraphicFont::AT_CENTER,
			CGraphicFont::MULTILINE_OFF,
			{CST7565Driver::BIT_OPERATION_OR});
 8011b00:	2300      	movs	r3, #0
 8011b02:	9307      	str	r3, [sp, #28]
 8011b04:	f107 0320 	add.w	r3, r7, #32
 8011b08:	9306      	str	r3, [sp, #24]
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	9305      	str	r3, [sp, #20]
 8011b0e:	2302      	movs	r3, #2
 8011b10:	9304      	str	r3, [sp, #16]
 8011b12:	2300      	movs	r3, #0
 8011b14:	9303      	str	r3, [sp, #12]
 8011b16:	2301      	movs	r3, #1
 8011b18:	9302      	str	r3, [sp, #8]
 8011b1a:	f107 030c 	add.w	r3, r7, #12
 8011b1e:	9301      	str	r3, [sp, #4]
 8011b20:	2300      	movs	r3, #0
 8011b22:	9300      	str	r3, [sp, #0]
 8011b24:	233c      	movs	r3, #60	; 0x3c
 8011b26:	227f      	movs	r2, #127	; 0x7f
 8011b28:	2133      	movs	r1, #51	; 0x33
 8011b2a:	2037      	movs	r0, #55	; 0x37
 8011b2c:	f7fa fe54 	bl	800c7d8 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb>

    CST7565Driver::resumeDrawing();
 8011b30:	f7fd fbbc 	bl	800f2ac <_ZN13CST7565Driver13resumeDrawingEv>
}
 8011b34:	bf00      	nop
 8011b36:	3728      	adds	r7, #40	; 0x28
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd80      	pop	{r7, pc}
 8011b3c:	0801c288 	.word	0x0801c288
 8011b40:	0801c290 	.word	0x0801c290

08011b44 <_ZN11CScreenMenuC1EP9AMenuList>:
 *      Author: krzysiek
 */

#include "CScreenMenu.h"

CScreenMenu::CScreenMenu(AMenuList *menuList) :
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b082      	sub	sp, #8
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
 8011b4c:	6039      	str	r1, [r7, #0]
        AMenuScreen(menuList, PAGE_SIZE), m_timeout(true)
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	4618      	mov	r0, r3
 8011b52:	f7fa fcdd 	bl	800c510 <_ZN7CScreenC1Ev>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	3318      	adds	r3, #24
 8011b5a:	2204      	movs	r2, #4
 8011b5c:	6839      	ldr	r1, [r7, #0]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7f8 fe95 	bl	800a88e <_ZN11AMenuScreenC1EP9AMenuLista>
 8011b64:	4a06      	ldr	r2, [pc, #24]	; (8011b80 <_ZN11CScreenMenuC1EP9AMenuList+0x3c>)
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	601a      	str	r2, [r3, #0]
 8011b6a:	4a06      	ldr	r2, [pc, #24]	; (8011b84 <_ZN11CScreenMenuC1EP9AMenuList+0x40>)
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	605a      	str	r2, [r3, #4]
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2201      	movs	r2, #1
 8011b74:	779a      	strb	r2, [r3, #30]
{
}
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3708      	adds	r7, #8
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}
 8011b80:	080222d0 	.word	0x080222d0
 8011b84:	080222f0 	.word	0x080222f0

08011b88 <_ZN11CScreenMenu7onStartEv>:
{
    m_timeout = timeout;
}

void CScreenMenu::onStart()
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b083      	sub	sp, #12
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
    m_slot = 0;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2200      	movs	r2, #0
 8011b94:	77da      	strb	r2, [r3, #31]
}
 8011b96:	bf00      	nop
 8011b98:	370c      	adds	r7, #12
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bc80      	pop	{r7}
 8011b9e:	4770      	bx	lr

08011ba0 <_ZN11CScreenMenu8onResumeEv>:

void CScreenMenu::onResume()
{
 8011ba0:	b590      	push	{r4, r7, lr}
 8011ba2:	b09f      	sub	sp, #124	; 0x7c
 8011ba4:	af08      	add	r7, sp, #32
 8011ba6:	6078      	str	r0, [r7, #4]
    char buffer[32];

    CScreen::onResume();
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7fd fd4e 	bl	800f64c <_ZN7CScreen8onResumeEv>

    CST7565Driver::suspendDrawing();
 8011bb0:	f7fd fd36 	bl	800f620 <_ZN13CST7565Driver14suspendDrawingEv>
    CST7565Driver::clear();
 8011bb4:	f7fd f852 	bl	800ec5c <_ZN13CST7565Driver5clearEv>

    drawHeader(getTitle());
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	3318      	adds	r3, #24
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f7f8 fe8f 	bl	800a8e0 <_ZN11AMenuScreen8getTitleEv>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	2100      	movs	r1, #0
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f7fd fd90 	bl	800f6ec <_ZN7CScreen10drawHeaderEmb>

//  SCROLL
    int16_t scrollFieldX = 118;
 8011bcc:	2376      	movs	r3, #118	; 0x76
 8011bce:	87fb      	strh	r3, [r7, #62]	; 0x3e
    int16_t scrollFieldY = 17;
 8011bd0:	2311      	movs	r3, #17
 8011bd2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    int16_t currSliderOffsetY = (28 * (getOffset() + m_slot)) / (getItemsCount() - 1);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	3318      	adds	r3, #24
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f7f8 fe9d 	bl	800a918 <_ZN11AMenuScreen9getOffsetEv>
 8011bde:	4603      	mov	r3, r0
 8011be0:	461a      	mov	r2, r3
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8011be8:	441a      	add	r2, r3
 8011bea:	4613      	mov	r3, r2
 8011bec:	00db      	lsls	r3, r3, #3
 8011bee:	1a9b      	subs	r3, r3, r2
 8011bf0:	009b      	lsls	r3, r3, #2
 8011bf2:	461c      	mov	r4, r3
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	3318      	adds	r3, #24
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f7f8 fe99 	bl	800a930 <_ZN11AMenuScreen13getItemsCountEv>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	3b01      	subs	r3, #1
 8011c02:	fb94 f3f3 	sdiv	r3, r4, r3
 8011c06:	877b      	strh	r3, [r7, #58]	; 0x3a
    CST7565Driver::imgBitBlt(
            scrollFieldX + 3,
 8011c08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011c0a:	3303      	adds	r3, #3
 8011c0c:	b29b      	uxth	r3, r3
    CST7565Driver::imgBitBlt(
 8011c0e:	b218      	sxth	r0, r3
            scrollFieldY,
            CImgData::IMG_MALY_TROJKAT_GORA,
            CST7565Driver::BIT_OPERATION_OR);
 8011c10:	f9b7 103c 	ldrsh.w	r1, [r7, #60]	; 0x3c
 8011c14:	2301      	movs	r3, #1
 8011c16:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011c1a:	f7fd fab7 	bl	800f18c <_ZN13CST7565Driver9imgBitBltEsstNS_13TBitOperationE>
    CST7565Driver::imgBitBlt(
            scrollFieldX + 3,
 8011c1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011c20:	3303      	adds	r3, #3
 8011c22:	b29b      	uxth	r3, r3
    CST7565Driver::imgBitBlt(
 8011c24:	b218      	sxth	r0, r3
            scrollFieldY + 31 + 7,
 8011c26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c28:	3326      	adds	r3, #38	; 0x26
 8011c2a:	b29b      	uxth	r3, r3
    CST7565Driver::imgBitBlt(
 8011c2c:	b219      	sxth	r1, r3
            CImgData::IMG_MALY_TROJKAT_DOL,
            CST7565Driver::BIT_OPERATION_OR);
 8011c2e:	2301      	movs	r3, #1
 8011c30:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
 8011c34:	f7fd faaa 	bl	800f18c <_ZN13CST7565Driver9imgBitBltEsstNS_13TBitOperationE>
    CST7565Driver::fill(
            scrollFieldX + 4,
 8011c38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011c3a:	3304      	adds	r3, #4
 8011c3c:	b29b      	uxth	r3, r3
    CST7565Driver::fill(
 8011c3e:	b218      	sxth	r0, r3
            scrollFieldY + 4,
 8011c40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c42:	3304      	adds	r3, #4
 8011c44:	b29b      	uxth	r3, r3
    CST7565Driver::fill(
 8011c46:	b219      	sxth	r1, r3
            scrollFieldX + 6,
 8011c48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011c4a:	3306      	adds	r3, #6
 8011c4c:	b29b      	uxth	r3, r3
    CST7565Driver::fill(
 8011c4e:	b21a      	sxth	r2, r3
            scrollFieldY + 5 + 31,
 8011c50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c52:	3324      	adds	r3, #36	; 0x24
 8011c54:	b29b      	uxth	r3, r3
    CST7565Driver::fill(
 8011c56:	b21c      	sxth	r4, r3
            CST7565Driver::FILL_OPERATION_ERASE);
 8011c58:	2301      	movs	r3, #1
 8011c5a:	9300      	str	r3, [sp, #0]
 8011c5c:	4623      	mov	r3, r4
 8011c5e:	f7fc fe6b 	bl	800e938 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE>
    CST7565Driver::imgBitBlt(
            scrollFieldX + 5,
 8011c62:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011c64:	3305      	adds	r3, #5
 8011c66:	b29b      	uxth	r3, r3
    CST7565Driver::imgBitBlt(
 8011c68:	b218      	sxth	r0, r3
            scrollFieldY + 5,
 8011c6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c6c:	3305      	adds	r3, #5
 8011c6e:	b29b      	uxth	r3, r3
    CST7565Driver::imgBitBlt(
 8011c70:	b219      	sxth	r1, r3
            CImgData::IMG_SCROLL_DOT_LINE,
            CST7565Driver::BIT_OPERATION_OR);
 8011c72:	2301      	movs	r3, #1
 8011c74:	f240 4243 	movw	r2, #1091	; 0x443
 8011c78:	f7fd fa88 	bl	800f18c <_ZN13CST7565Driver9imgBitBltEsstNS_13TBitOperationE>
    CST7565Driver::imgBitBlt(
            scrollFieldX + 4,
 8011c7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011c7e:	3304      	adds	r3, #4
 8011c80:	b29b      	uxth	r3, r3
    CST7565Driver::imgBitBlt(
 8011c82:	b218      	sxth	r0, r3
            currSliderOffsetY + scrollFieldY + 5,
 8011c84:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011c86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c88:	4413      	add	r3, r2
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	3305      	adds	r3, #5
 8011c8e:	b29b      	uxth	r3, r3
    CST7565Driver::imgBitBlt(
 8011c90:	b219      	sxth	r1, r3
            CImgData::IMG_SCROLL_SLIDER,
            CST7565Driver::BIT_OPERATION_OR);
 8011c92:	2301      	movs	r3, #1
 8011c94:	f240 4249 	movw	r2, #1097	; 0x449
 8011c98:	f7fd fa78 	bl	800f18c <_ZN13CST7565Driver9imgBitBltEsstNS_13TBitOperationE>

//  ROWS
    int16_t rowPosX = 0;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	873b      	strh	r3, [r7, #56]	; 0x38
    int16_t rowPosY = 12;
 8011ca0:	230c      	movs	r3, #12
 8011ca2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    int16_t iconPosX = 0;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    int16_t iconPosY = 0;
 8011cac:	2300      	movs	r3, #0
 8011cae:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    int16_t iconFieldWidth = 0;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

    for (int8_t i = 0; i < getItemsCount(); i++)
 8011cb8:	2300      	movs	r3, #0
 8011cba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	3318      	adds	r3, #24
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f7f8 fe34 	bl	800a930 <_ZN11AMenuScreen13getItemsCountEv>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	461a      	mov	r2, r3
 8011ccc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8011cd0:	4293      	cmp	r3, r2
 8011cd2:	bfb4      	ite	lt
 8011cd4:	2301      	movlt	r3, #1
 8011cd6:	2300      	movge	r3, #0
 8011cd8:	b2db      	uxtb	r3, r3
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d02b      	beq.n	8011d36 <_ZN11CScreenMenu8onResumeEv+0x196>
    {
        if (getItemAtIndex(i)->selectable || (getItemAtIndex(i)->icon != 0))
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	3318      	adds	r3, #24
 8011ce2:	f997 204f 	ldrsb.w	r2, [r7, #79]	; 0x4f
 8011ce6:	4611      	mov	r1, r2
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f7f8 feaa 	bl	800aa42 <_ZN11AMenuScreen14getItemAtIndexEa>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	7a1b      	ldrb	r3, [r3, #8]
 8011cf2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8011cf6:	b2db      	uxtb	r3, r3
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d10b      	bne.n	8011d14 <_ZN11CScreenMenu8onResumeEv+0x174>
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	3318      	adds	r3, #24
 8011d00:	f997 204f 	ldrsb.w	r2, [r7, #79]	; 0x4f
 8011d04:	4611      	mov	r1, r2
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7f8 fe9b 	bl	800aa42 <_ZN11AMenuScreen14getItemAtIndexEa>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	685b      	ldr	r3, [r3, #4]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d001      	beq.n	8011d18 <_ZN11CScreenMenu8onResumeEv+0x178>
 8011d14:	2301      	movs	r3, #1
 8011d16:	e000      	b.n	8011d1a <_ZN11CScreenMenu8onResumeEv+0x17a>
 8011d18:	2300      	movs	r3, #0
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d003      	beq.n	8011d26 <_ZN11CScreenMenu8onResumeEv+0x186>
        {
            iconFieldWidth = 12;
 8011d1e:	230c      	movs	r3, #12
 8011d20:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            break;
 8011d24:	e007      	b.n	8011d36 <_ZN11CScreenMenu8onResumeEv+0x196>
    for (int8_t i = 0; i < getItemsCount(); i++)
 8011d26:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8011d2a:	b2db      	uxtb	r3, r3
 8011d2c:	3301      	adds	r3, #1
 8011d2e:	b2db      	uxtb	r3, r3
 8011d30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8011d34:	e7c3      	b.n	8011cbe <_ZN11CScreenMenu8onResumeEv+0x11e>
        }
    }

    for (int8_t i = 0; i < getSlotsCount(); i++)
 8011d36:	2300      	movs	r3, #0
 8011d38:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	3318      	adds	r3, #24
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7f8 fe41 	bl	800a9c8 <_ZN11AMenuScreen13getSlotsCountEv>
 8011d46:	4603      	mov	r3, r0
 8011d48:	461a      	mov	r2, r3
 8011d4a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8011d4e:	4293      	cmp	r3, r2
 8011d50:	bfb4      	ite	lt
 8011d52:	2301      	movlt	r3, #1
 8011d54:	2300      	movge	r3, #0
 8011d56:	b2db      	uxtb	r3, r3
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	f000 80de 	beq.w	8011f1a <_ZN11CScreenMenu8onResumeEv+0x37a>
    {
        AMenuList::SMenuItem *menuItem = getItemAtSlot(i);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	3318      	adds	r3, #24
 8011d62:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8011d66:	4611      	mov	r1, r2
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f7f8 fe4e 	bl	800aa0a <_ZN11AMenuScreen13getItemAtSlotEa>
 8011d6e:	6378      	str	r0, [r7, #52]	; 0x34
        if (iconFieldWidth > 0)
 8011d70:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	dd0f      	ble.n	8011d98 <_ZN11CScreenMenu8onResumeEv+0x1f8>
        {
            iconPosX = rowPosX + ((iconFieldWidth - 6) >> 1);
 8011d78:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8011d7c:	3b06      	subs	r3, #6
 8011d7e:	105b      	asrs	r3, r3, #1
 8011d80:	b29a      	uxth	r2, r3
 8011d82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011d84:	4413      	add	r3, r2
 8011d86:	b29b      	uxth	r3, r3
 8011d88:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            iconPosY = rowPosY + 1;
 8011d8c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8011d90:	3301      	adds	r3, #1
 8011d92:	b29b      	uxth	r3, r3
 8011d94:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        }

        if (i == m_slot)
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8011d9e:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d11a      	bne.n	8011ddc <_ZN11CScreenMenu8onResumeEv+0x23c>
        {
            drawRoundedRectangle(0, 12 + i * 12, (128 - 10 - 1), 12 + (i + 1) * 12);
 8011da6:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8011daa:	3301      	adds	r3, #1
 8011dac:	b29b      	uxth	r3, r3
 8011dae:	461a      	mov	r2, r3
 8011db0:	0052      	lsls	r2, r2, #1
 8011db2:	4413      	add	r3, r2
 8011db4:	009b      	lsls	r3, r3, #2
 8011db6:	b29b      	uxth	r3, r3
 8011db8:	b219      	sxth	r1, r3
 8011dba:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8011dbe:	3302      	adds	r3, #2
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	0052      	lsls	r2, r2, #1
 8011dc6:	4413      	add	r3, r2
 8011dc8:	009b      	lsls	r3, r3, #2
 8011dca:	b29b      	uxth	r3, r3
 8011dcc:	b21a      	sxth	r2, r3
 8011dce:	2300      	movs	r3, #0
 8011dd0:	9300      	str	r3, [sp, #0]
 8011dd2:	4613      	mov	r3, r2
 8011dd4:	2275      	movs	r2, #117	; 0x75
 8011dd6:	2000      	movs	r0, #0
 8011dd8:	f7fd fccf 	bl	800f77a <_ZN7CScreen20drawRoundedRectangleEssssN13CST7565Driver14TFillOperationE>
        }

        uint32_t icon = 0;
 8011ddc:	2300      	movs	r3, #0
 8011dde:	64bb      	str	r3, [r7, #72]	; 0x48

        if (menuItem->selectable)
 8011de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011de2:	7a1b      	ldrb	r3, [r3, #8]
 8011de4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8011de8:	b2db      	uxtb	r3, r3
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d00d      	beq.n	8011e0a <_ZN11CScreenMenu8onResumeEv+0x26a>
        {
            icon = menuItem->selected ? CImgData::IMG_SELECT_FULL : CImgData::IMG_SELECT_EMPTY;
 8011dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011df0:	7a1b      	ldrb	r3, [r3, #8]
 8011df2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8011df6:	b2db      	uxtb	r3, r3
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d002      	beq.n	8011e02 <_ZN11CScreenMenu8onResumeEv+0x262>
 8011dfc:	f44f 7365 	mov.w	r3, #916	; 0x394
 8011e00:	e001      	b.n	8011e06 <_ZN11CScreenMenu8onResumeEv+0x266>
 8011e02:	f44f 7361 	mov.w	r3, #900	; 0x384
 8011e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e08:	e002      	b.n	8011e10 <_ZN11CScreenMenu8onResumeEv+0x270>
        }
        else
        {
            icon = menuItem->icon;
 8011e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e0c:	685b      	ldr	r3, [r3, #4]
 8011e0e:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        if (icon != 0)
 8011e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d008      	beq.n	8011e28 <_ZN11CScreenMenu8onResumeEv+0x288>
        {
            CST7565Driver::imgBitBlt(iconPosX, iconPosY, icon, CST7565Driver::BIT_OPERATION_XOR);
 8011e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e18:	b29a      	uxth	r2, r3
 8011e1a:	f9b7 1052 	ldrsh.w	r1, [r7, #82]	; 0x52
 8011e1e:	f9b7 0054 	ldrsh.w	r0, [r7, #84]	; 0x54
 8011e22:	2302      	movs	r3, #2
 8011e24:	f7fd f9b2 	bl	800f18c <_ZN13CST7565Driver9imgBitBltEsstNS_13TBitOperationE>
        }

        uint32_t stringAddress = 0;
 8011e28:	2300      	movs	r3, #0
 8011e2a:	647b      	str	r3, [r7, #68]	; 0x44
        const char* stringPtr = NULL;
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	643b      	str	r3, [r7, #64]	; 0x40
        if (menuItem->text < 0x10000)
 8011e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e38:	d203      	bcs.n	8011e42 <_ZN11CScreenMenu8onResumeEv+0x2a2>
        {
            stringAddress = menuItem->text;
 8011e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8011e40:	e031      	b.n	8011ea6 <_ZN11CScreenMenu8onResumeEv+0x306>
        }
        else
        {
            strncpy(buffer, (const char*) menuItem->text, sizeof(buffer));
 8011e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	4619      	mov	r1, r3
 8011e48:	f107 030c 	add.w	r3, r7, #12
 8011e4c:	2220      	movs	r2, #32
 8011e4e:	4618      	mov	r0, r3
 8011e50:	f005 ff99 	bl	8017d86 <strncpy>
            buffer[sizeof(buffer) - 1] = 0;
 8011e54:	2300      	movs	r3, #0
 8011e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            while (true)
            {
                int16_t width = CGraphicFont::getTextWidth(0, buffer, CFont::FONT_1, CGraphicFont::PR_NORMAL);
 8011e5a:	f107 010c 	add.w	r1, r7, #12
 8011e5e:	2300      	movs	r3, #0
 8011e60:	2201      	movs	r2, #1
 8011e62:	2000      	movs	r0, #0
 8011e64:	f7fa fda4 	bl	800c9b0 <_ZN12CGraphicFont12getTextWidthEmPKctNS_10TPrintCaseE>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	867b      	strh	r3, [r7, #50]	; 0x32
                if (width <= (116 - (rowPosX + iconFieldWidth + 2)))
 8011e6c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8011e70:	f9b7 1038 	ldrsh.w	r1, [r7, #56]	; 0x38
 8011e74:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8011e78:	440b      	add	r3, r1
 8011e7a:	f1c3 0372 	rsb	r3, r3, #114	; 0x72
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	dd0d      	ble.n	8011e9e <_ZN11CScreenMenu8onResumeEv+0x2fe>
                    break;
                buffer[strlen(buffer) - 1] = 0;
 8011e82:	f107 030c 	add.w	r3, r7, #12
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7f4 fd26 	bl	80068d8 <strlen>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	3b01      	subs	r3, #1
 8011e90:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011e94:	4413      	add	r3, r2
 8011e96:	2200      	movs	r2, #0
 8011e98:	f803 2c4c 	strb.w	r2, [r3, #-76]
            }
 8011e9c:	e7dd      	b.n	8011e5a <_ZN11CScreenMenu8onResumeEv+0x2ba>
                    break;
 8011e9e:	bf00      	nop

            stringPtr = buffer;
 8011ea0:	f107 030c 	add.w	r3, r7, #12
 8011ea4:	643b      	str	r3, [r7, #64]	; 0x40
        }
        CGraphicFont::drawText(
                rowPosX + iconFieldWidth + 2,
 8011ea6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8011ea8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8011eac:	4413      	add	r3, r2
 8011eae:	b29b      	uxth	r3, r3
 8011eb0:	3302      	adds	r3, #2
 8011eb2:	b29b      	uxth	r3, r3
        CGraphicFont::drawText(
 8011eb4:	b218      	sxth	r0, r3
                rowPosY + 1,
 8011eb6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8011eba:	3301      	adds	r3, #1
 8011ebc:	b29b      	uxth	r3, r3
        CGraphicFont::drawText(
 8011ebe:	b219      	sxth	r1, r3
                105,
                rowPosY + 12,
 8011ec0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8011ec4:	330c      	adds	r3, #12
 8011ec6:	b29b      	uxth	r3, r3
        CGraphicFont::drawText(
 8011ec8:	b21a      	sxth	r2, r3
 8011eca:	2300      	movs	r3, #0
 8011ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011ece:	2302      	movs	r3, #2
 8011ed0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                stringPtr,
                CFont::FONT_1,
                CGraphicFont::PR_NORMAL,
                CGraphicFont::AT_LEFT,
                CGraphicFont::MULTILINE_OFF,
                {CST7565Driver::BIT_OPERATION_XOR});
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	9307      	str	r3, [sp, #28]
 8011ed8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011edc:	9306      	str	r3, [sp, #24]
 8011ede:	2300      	movs	r3, #0
 8011ee0:	9305      	str	r3, [sp, #20]
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	9304      	str	r3, [sp, #16]
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	9303      	str	r3, [sp, #12]
 8011eea:	2301      	movs	r3, #1
 8011eec:	9302      	str	r3, [sp, #8]
 8011eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ef0:	9301      	str	r3, [sp, #4]
 8011ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ef4:	9300      	str	r3, [sp, #0]
 8011ef6:	4613      	mov	r3, r2
 8011ef8:	2269      	movs	r2, #105	; 0x69
 8011efa:	f7fa fc6d 	bl	800c7d8 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb>

        rowPosY += 12;
 8011efe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8011f02:	330c      	adds	r3, #12
 8011f04:	b29b      	uxth	r3, r3
 8011f06:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    for (int8_t i = 0; i < getSlotsCount(); i++)
 8011f0a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8011f0e:	b2db      	uxtb	r3, r3
 8011f10:	3301      	adds	r3, #1
 8011f12:	b2db      	uxtb	r3, r3
 8011f14:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8011f18:	e710      	b.n	8011d3c <_ZN11CScreenMenu8onResumeEv+0x19c>
    }

    CST7565Driver::resumeDrawing();
 8011f1a:	f7fd f9c7 	bl	800f2ac <_ZN13CST7565Driver13resumeDrawingEv>
}
 8011f1e:	bf00      	nop
 8011f20:	375c      	adds	r7, #92	; 0x5c
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd90      	pop	{r4, r7, pc}

08011f26 <_ZN11CScreenMenu6updateEv>:

void CScreenMenu::update()
{
 8011f26:	b580      	push	{r7, lr}
 8011f28:	b082      	sub	sp, #8
 8011f2a:	af00      	add	r7, sp, #0
 8011f2c:	6078      	str	r0, [r7, #4]
    if (m_timeout)
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	7f9b      	ldrb	r3, [r3, #30]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d003      	beq.n	8011f3e <_ZN11CScreenMenu6updateEv+0x18>
    {
        CScreen::update();
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7fd fb9a 	bl	800f672 <_ZN7CScreen6updateEv>
    }
}
 8011f3e:	bf00      	nop
 8011f40:	3708      	adds	r7, #8
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}

08011f46 <_ZN11CScreenMenu7onPauseEv>:

void CScreenMenu::onPause()
{
 8011f46:	b580      	push	{r7, lr}
 8011f48:	b082      	sub	sp, #8
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	6078      	str	r0, [r7, #4]
    CScreen::onPause();
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7fd fbbe 	bl	800f6d2 <_ZN7CScreen7onPauseEv>
}
 8011f56:	bf00      	nop
 8011f58:	3708      	adds	r7, #8
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}
	...

08011f60 <_ZN11CScreenMenu5onKeyEaa>:

bool CScreenMenu::onKey(int8_t keyCode, int8_t keyEvent)
{
 8011f60:	b590      	push	{r4, r7, lr}
 8011f62:	b085      	sub	sp, #20
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	460b      	mov	r3, r1
 8011f6a:	70fb      	strb	r3, [r7, #3]
 8011f6c:	4613      	mov	r3, r2
 8011f6e:	70bb      	strb	r3, [r7, #2]
    if (keyEvent == KEY_EVENT_UP)
 8011f70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011f74:	2b02      	cmp	r3, #2
 8011f76:	d101      	bne.n	8011f7c <_ZN11CScreenMenu5onKeyEaa+0x1c>
    {
        return false;
 8011f78:	2300      	movs	r3, #0
 8011f7a:	e0ba      	b.n	80120f2 <_ZN11CScreenMenu5onKeyEaa+0x192>
    }

    switch (keyCode)
 8011f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011f80:	3b01      	subs	r3, #1
 8011f82:	2b03      	cmp	r3, #3
 8011f84:	f200 80b4 	bhi.w	80120f0 <_ZN11CScreenMenu5onKeyEaa+0x190>
 8011f88:	a201      	add	r2, pc, #4	; (adr r2, 8011f90 <_ZN11CScreenMenu5onKeyEaa+0x30>)
 8011f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f8e:	bf00      	nop
 8011f90:	08011fa1 	.word	0x08011fa1
 8011f94:	08011fd1 	.word	0x08011fd1
 8011f98:	08011fdd 	.word	0x08011fdd
 8011f9c:	08012053 	.word	0x08012053
    {
        case KEY_CODE_MENU:
            selectItem(getItemAtSlot(m_slot));
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f103 0418 	add.w	r4, r3, #24
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f103 0218 	add.w	r2, r3, #24
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8011fb2:	4619      	mov	r1, r3
 8011fb4:	4610      	mov	r0, r2
 8011fb6:	f7f8 fd28 	bl	800aa0a <_ZN11AMenuScreen13getItemAtSlotEa>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	4619      	mov	r1, r3
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	f7f8 fc7b 	bl	800a8ba <_ZN11AMenuScreen10selectItemEPN9AMenuList9SMenuItemE>
            resume();
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f7f8 fd96 	bl	800aaf8 <_ZN7AScreen6resumeEv>
            return true;
 8011fcc:	2301      	movs	r3, #1
 8011fce:	e090      	b.n	80120f2 <_ZN11CScreenMenu5onKeyEaa+0x192>

        case KEY_CODE_EXIT:
            finish();
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7f8 fd85 	bl	800aae2 <_ZN7AScreen6finishEv>
            return true;
 8011fd8:	2301      	movs	r3, #1
 8011fda:	e08a      	b.n	80120f2 <_ZN11CScreenMenu5onKeyEaa+0x192>

        case KEY_CODE_UP:
            if (m_slot > 0)
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	dd0d      	ble.n	8012002 <_ZN11CScreenMenu5onKeyEaa+0xa2>
            {
                m_slot--;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8011fec:	b2db      	uxtb	r3, r3
 8011fee:	3b01      	subs	r3, #1
 8011ff0:	b2db      	uxtb	r3, r3
 8011ff2:	b25a      	sxtb	r2, r3
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	77da      	strb	r2, [r3, #31]
                resume();
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7f8 fd7c 	bl	800aaf8 <_ZN7AScreen6resumeEv>
 8012000:	e025      	b.n	801204e <_ZN11CScreenMenu5onKeyEaa+0xee>
            }
            else
            {
                int8_t offset = getOffset();
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	3318      	adds	r3, #24
 8012006:	4618      	mov	r0, r3
 8012008:	f7f8 fc86 	bl	800a918 <_ZN11AMenuScreen9getOffsetEv>
 801200c:	4603      	mov	r3, r0
 801200e:	73fb      	strb	r3, [r7, #15]
                if (offset > 0)
 8012010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012014:	2b00      	cmp	r3, #0
 8012016:	dd1a      	ble.n	801204e <_ZN11CScreenMenu5onKeyEaa+0xee>
                {
                    setOffset(offset - PAGE_SIZE);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f103 0218 	add.w	r2, r3, #24
 801201e:	7bfb      	ldrb	r3, [r7, #15]
 8012020:	3b04      	subs	r3, #4
 8012022:	b2db      	uxtb	r3, r3
 8012024:	b25b      	sxtb	r3, r3
 8012026:	4619      	mov	r1, r3
 8012028:	4610      	mov	r0, r2
 801202a:	f7f8 fc67 	bl	800a8fc <_ZN11AMenuScreen9setOffsetEa>
                    m_slot = getSlotsCount() - 1;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	3318      	adds	r3, #24
 8012032:	4618      	mov	r0, r3
 8012034:	f7f8 fcc8 	bl	800a9c8 <_ZN11AMenuScreen13getSlotsCountEv>
 8012038:	4603      	mov	r3, r0
 801203a:	b2db      	uxtb	r3, r3
 801203c:	3b01      	subs	r3, #1
 801203e:	b2db      	uxtb	r3, r3
 8012040:	b25a      	sxtb	r2, r3
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	77da      	strb	r2, [r3, #31]
                    resume();
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	4618      	mov	r0, r3
 801204a:	f7f8 fd55 	bl	800aaf8 <_ZN7AScreen6resumeEv>
                }
            }
            return true;
 801204e:	2301      	movs	r3, #1
 8012050:	e04f      	b.n	80120f2 <_ZN11CScreenMenu5onKeyEaa+0x192>

        case KEY_CODE_DOWN:
            if (m_slot + 1 < getSlotsCount())
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8012058:	1c5c      	adds	r4, r3, #1
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	3318      	adds	r3, #24
 801205e:	4618      	mov	r0, r3
 8012060:	f7f8 fcb2 	bl	800a9c8 <_ZN11AMenuScreen13getSlotsCountEv>
 8012064:	4603      	mov	r3, r0
 8012066:	429c      	cmp	r4, r3
 8012068:	bfb4      	ite	lt
 801206a:	2301      	movlt	r3, #1
 801206c:	2300      	movge	r3, #0
 801206e:	b2db      	uxtb	r3, r3
 8012070:	2b00      	cmp	r3, #0
 8012072:	d00d      	beq.n	8012090 <_ZN11CScreenMenu5onKeyEaa+0x130>
            {
                m_slot++;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	f993 301f 	ldrsb.w	r3, [r3, #31]
 801207a:	b2db      	uxtb	r3, r3
 801207c:	3301      	adds	r3, #1
 801207e:	b2db      	uxtb	r3, r3
 8012080:	b25a      	sxtb	r2, r3
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	77da      	strb	r2, [r3, #31]
                resume();
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	4618      	mov	r0, r3
 801208a:	f7f8 fd35 	bl	800aaf8 <_ZN7AScreen6resumeEv>
 801208e:	e02d      	b.n	80120ec <_ZN11CScreenMenu5onKeyEaa+0x18c>
            }
            else
            {
                int8_t offset = getOffset();
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	3318      	adds	r3, #24
 8012094:	4618      	mov	r0, r3
 8012096:	f7f8 fc3f 	bl	800a918 <_ZN11AMenuScreen9getOffsetEv>
 801209a:	4603      	mov	r3, r0
 801209c:	73bb      	strb	r3, [r7, #14]
                if ((offset / PAGE_SIZE) + 1 < getPagesCount())
 801209e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	da00      	bge.n	80120a8 <_ZN11CScreenMenu5onKeyEaa+0x148>
 80120a6:	3303      	adds	r3, #3
 80120a8:	109b      	asrs	r3, r3, #2
 80120aa:	b25b      	sxtb	r3, r3
 80120ac:	1c5c      	adds	r4, r3, #1
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	3318      	adds	r3, #24
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7f8 fc70 	bl	800a998 <_ZN11AMenuScreen13getPagesCountEv>
 80120b8:	4603      	mov	r3, r0
 80120ba:	429c      	cmp	r4, r3
 80120bc:	bfb4      	ite	lt
 80120be:	2301      	movlt	r3, #1
 80120c0:	2300      	movge	r3, #0
 80120c2:	b2db      	uxtb	r3, r3
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d011      	beq.n	80120ec <_ZN11CScreenMenu5onKeyEaa+0x18c>
                {
                    setOffset(offset + PAGE_SIZE);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f103 0218 	add.w	r2, r3, #24
 80120ce:	7bbb      	ldrb	r3, [r7, #14]
 80120d0:	3304      	adds	r3, #4
 80120d2:	b2db      	uxtb	r3, r3
 80120d4:	b25b      	sxtb	r3, r3
 80120d6:	4619      	mov	r1, r3
 80120d8:	4610      	mov	r0, r2
 80120da:	f7f8 fc0f 	bl	800a8fc <_ZN11AMenuScreen9setOffsetEa>
                    m_slot = 0;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	2200      	movs	r2, #0
 80120e2:	77da      	strb	r2, [r3, #31]
                    resume();
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	4618      	mov	r0, r3
 80120e8:	f7f8 fd06 	bl	800aaf8 <_ZN7AScreen6resumeEv>
                }
            }
            return true;
 80120ec:	2301      	movs	r3, #1
 80120ee:	e000      	b.n	80120f2 <_ZN11CScreenMenu5onKeyEaa+0x192>

        default:
            return false;
 80120f0:	2300      	movs	r3, #0
    }
}
 80120f2:	4618      	mov	r0, r3
 80120f4:	3714      	adds	r7, #20
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd90      	pop	{r4, r7, pc}
 80120fa:	bf00      	nop

080120fc <_ZThn4_N11CScreenMenu5onKeyEaa>:
    void onResume();
    void update();
    void onPause();

public:
    bool onKey(int8_t keyCode, int8_t keyEvent);
 80120fc:	f1a0 0004 	sub.w	r0, r0, #4
 8012100:	f7ff bf2e 	b.w	8011f60 <_ZN11CScreenMenu5onKeyEaa>

08012104 <_ZN17CWidgetButtonsBar4initEhhPKmab>:
const uint32_t CWidgetButtonsBar::ITEMS_EXIT_MORE_DELETE[] =
{CNapisy::IDT_WYJSCIE, CNapisy::IDT_DALEJ, CNapisy::IDT_USUN};


void CWidgetButtonsBar::init(uint8_t x, uint8_t y, const uint32_t *items, int8_t itemsNumber, bool focus)
{
 8012104:	b480      	push	{r7}
 8012106:	b085      	sub	sp, #20
 8012108:	af00      	add	r7, sp, #0
 801210a:	60f8      	str	r0, [r7, #12]
 801210c:	607b      	str	r3, [r7, #4]
 801210e:	460b      	mov	r3, r1
 8012110:	72fb      	strb	r3, [r7, #11]
 8012112:	4613      	mov	r3, r2
 8012114:	72bb      	strb	r3, [r7, #10]
    m_x = x;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	7afa      	ldrb	r2, [r7, #11]
 801211a:	711a      	strb	r2, [r3, #4]
    m_y = y;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	7aba      	ldrb	r2, [r7, #10]
 8012120:	715a      	strb	r2, [r3, #5]
    m_items = items;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	687a      	ldr	r2, [r7, #4]
 8012126:	609a      	str	r2, [r3, #8]
    m_itemsNumber = itemsNumber;
 8012128:	7e3a      	ldrb	r2, [r7, #24]
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	71da      	strb	r2, [r3, #7]

    m_distance = 5;
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	2205      	movs	r2, #5
 8012132:	719a      	strb	r2, [r3, #6]
    m_center = false;
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	2200      	movs	r2, #0
 8012138:	735a      	strb	r2, [r3, #13]

    m_focus = focus;
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	7f3a      	ldrb	r2, [r7, #28]
 801213e:	739a      	strb	r2, [r3, #14]
    m_result = false;
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	2200      	movs	r2, #0
 8012144:	73da      	strb	r2, [r3, #15]
    m_redraw = true;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	2201      	movs	r2, #1
 801214a:	741a      	strb	r2, [r3, #16]
    m_topLine = false;
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	2200      	movs	r2, #0
 8012150:	745a      	strb	r2, [r3, #17]
    m_selectedItem = 0;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	2200      	movs	r2, #0
 8012156:	731a      	strb	r2, [r3, #12]

    if(m_items == ITEMS_DELETE_CANCEL)
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	689b      	ldr	r3, [r3, #8]
 801215c:	4a05      	ldr	r2, [pc, #20]	; (8012174 <_ZN17CWidgetButtonsBar4initEhhPKmab+0x70>)
 801215e:	4293      	cmp	r3, r2
 8012160:	d102      	bne.n	8012168 <_ZN17CWidgetButtonsBar4initEhhPKmab+0x64>
    {
    	m_selectedItem = 1;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	2201      	movs	r2, #1
 8012166:	731a      	strb	r2, [r3, #12]
    }
}
 8012168:	bf00      	nop
 801216a:	3714      	adds	r7, #20
 801216c:	46bd      	mov	sp, r7
 801216e:	bc80      	pop	{r7}
 8012170:	4770      	bx	lr
 8012172:	bf00      	nop
 8012174:	08022300 	.word	0x08022300

08012178 <_ZN17CWidgetButtonsBar8setFocusEb>:

void CWidgetButtonsBar::setFocus(bool focus)
{
 8012178:	b480      	push	{r7}
 801217a:	b083      	sub	sp, #12
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	460b      	mov	r3, r1
 8012182:	70fb      	strb	r3, [r7, #3]
    if (m_focus != focus)
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	7b9b      	ldrb	r3, [r3, #14]
 8012188:	78fa      	ldrb	r2, [r7, #3]
 801218a:	429a      	cmp	r2, r3
 801218c:	d010      	beq.n	80121b0 <_ZN17CWidgetButtonsBar8setFocusEb+0x38>
    {
        m_focus = focus;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	78fa      	ldrb	r2, [r7, #3]
 8012192:	739a      	strb	r2, [r3, #14]
        m_selectedItem = focus ? 0 : -1;
 8012194:	78fb      	ldrb	r3, [r7, #3]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d001      	beq.n	801219e <_ZN17CWidgetButtonsBar8setFocusEb+0x26>
 801219a:	2200      	movs	r2, #0
 801219c:	e000      	b.n	80121a0 <_ZN17CWidgetButtonsBar8setFocusEb+0x28>
 801219e:	22ff      	movs	r2, #255	; 0xff
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	731a      	strb	r2, [r3, #12]
        m_result = false;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2200      	movs	r2, #0
 80121a8:	73da      	strb	r2, [r3, #15]
        m_redraw = true;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	2201      	movs	r2, #1
 80121ae:	741a      	strb	r2, [r3, #16]
    }
}
 80121b0:	bf00      	nop
 80121b2:	370c      	adds	r7, #12
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bc80      	pop	{r7}
 80121b8:	4770      	bx	lr

080121ba <_ZN17CWidgetButtonsBar8getFocusEv>:

bool CWidgetButtonsBar::getFocus()
{
 80121ba:	b480      	push	{r7}
 80121bc:	b083      	sub	sp, #12
 80121be:	af00      	add	r7, sp, #0
 80121c0:	6078      	str	r0, [r7, #4]
    return m_focus;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	7b9b      	ldrb	r3, [r3, #14]
}
 80121c6:	4618      	mov	r0, r3
 80121c8:	370c      	adds	r7, #12
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bc80      	pop	{r7}
 80121ce:	4770      	bx	lr

080121d0 <_ZN17CWidgetButtonsBar9getResultEPa>:

bool CWidgetButtonsBar::getResult(int8_t *result)
{
 80121d0:	b480      	push	{r7}
 80121d2:	b083      	sub	sp, #12
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	6039      	str	r1, [r7, #0]
    if (m_result == false)
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	7bdb      	ldrb	r3, [r3, #15]
 80121de:	f083 0301 	eor.w	r3, r3, #1
 80121e2:	b2db      	uxtb	r3, r3
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d001      	beq.n	80121ec <_ZN17CWidgetButtonsBar9getResultEPa+0x1c>
    {
        return false;
 80121e8:	2300      	movs	r3, #0
 80121ea:	e008      	b.n	80121fe <_ZN17CWidgetButtonsBar9getResultEPa+0x2e>
    }
    else
    {
        *result = m_selectedItem;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	7b1b      	ldrb	r3, [r3, #12]
 80121f0:	b25a      	sxtb	r2, r3
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	701a      	strb	r2, [r3, #0]
        m_result = false;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2200      	movs	r2, #0
 80121fa:	73da      	strb	r2, [r3, #15]
        return true;
 80121fc:	2301      	movs	r3, #1
    }
}
 80121fe:	4618      	mov	r0, r3
 8012200:	370c      	adds	r7, #12
 8012202:	46bd      	mov	sp, r7
 8012204:	bc80      	pop	{r7}
 8012206:	4770      	bx	lr

08012208 <_ZN17CWidgetButtonsBar6updateEv>:

void CWidgetButtonsBar::update()
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b082      	sub	sp, #8
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
    if (m_redraw)
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	7c1b      	ldrb	r3, [r3, #16]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d005      	beq.n	8012224 <_ZN17CWidgetButtonsBar6updateEv+0x1c>
    {
        m_redraw = false;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2200      	movs	r2, #0
 801221c:	741a      	strb	r2, [r3, #16]
        draw();
 801221e:	6878      	ldr	r0, [r7, #4]
 8012220:	f000 f85c 	bl	80122dc <_ZN17CWidgetButtonsBar4drawEv>
    }
}
 8012224:	bf00      	nop
 8012226:	3708      	adds	r7, #8
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}

0801222c <_ZN17CWidgetButtonsBar6redrawEv>:

void CWidgetButtonsBar::redraw()
{
 801222c:	b480      	push	{r7}
 801222e:	b083      	sub	sp, #12
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
    m_redraw = true;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2201      	movs	r2, #1
 8012238:	741a      	strb	r2, [r3, #16]
}
 801223a:	bf00      	nop
 801223c:	370c      	adds	r7, #12
 801223e:	46bd      	mov	sp, r7
 8012240:	bc80      	pop	{r7}
 8012242:	4770      	bx	lr

08012244 <_ZN17CWidgetButtonsBar5onKeyEaa>:
	m_x = x;
	m_y = y;
}

bool CWidgetButtonsBar::onKey(int8_t keyCode, int8_t keyEvent)
{
 8012244:	b480      	push	{r7}
 8012246:	b083      	sub	sp, #12
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	460b      	mov	r3, r1
 801224e:	70fb      	strb	r3, [r7, #3]
 8012250:	4613      	mov	r3, r2
 8012252:	70bb      	strb	r3, [r7, #2]
    if (keyEvent == KEY_EVENT_UP)
 8012254:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012258:	2b02      	cmp	r3, #2
 801225a:	d101      	bne.n	8012260 <_ZN17CWidgetButtonsBar5onKeyEaa+0x1c>
    {
        return false;
 801225c:	2300      	movs	r3, #0
 801225e:	e038      	b.n	80122d2 <_ZN17CWidgetButtonsBar5onKeyEaa+0x8e>
    }

    if (m_focus == false)
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	7b9b      	ldrb	r3, [r3, #14]
 8012264:	f083 0301 	eor.w	r3, r3, #1
 8012268:	b2db      	uxtb	r3, r3
 801226a:	2b00      	cmp	r3, #0
 801226c:	d001      	beq.n	8012272 <_ZN17CWidgetButtonsBar5onKeyEaa+0x2e>
    {
        return false;
 801226e:	2300      	movs	r3, #0
 8012270:	e02f      	b.n	80122d2 <_ZN17CWidgetButtonsBar5onKeyEaa+0x8e>
    }

    switch (keyCode)
 8012272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012276:	2b03      	cmp	r3, #3
 8012278:	d008      	beq.n	801228c <_ZN17CWidgetButtonsBar5onKeyEaa+0x48>
 801227a:	2b04      	cmp	r3, #4
 801227c:	d019      	beq.n	80122b2 <_ZN17CWidgetButtonsBar5onKeyEaa+0x6e>
 801227e:	2b01      	cmp	r3, #1
 8012280:	d126      	bne.n	80122d0 <_ZN17CWidgetButtonsBar5onKeyEaa+0x8c>
    {
        case KEY_CODE_MENU:
            m_result = true;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2201      	movs	r2, #1
 8012286:	73da      	strb	r2, [r3, #15]
            return true;
 8012288:	2301      	movs	r3, #1
 801228a:	e022      	b.n	80122d2 <_ZN17CWidgetButtonsBar5onKeyEaa+0x8e>

        case KEY_CODE_UP:
            if (m_selectedItem < (m_itemsNumber - 1))
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	7b1b      	ldrb	r3, [r3, #12]
 8012290:	461a      	mov	r2, r3
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	79db      	ldrb	r3, [r3, #7]
 8012296:	3b01      	subs	r3, #1
 8012298:	429a      	cmp	r2, r3
 801229a:	da08      	bge.n	80122ae <_ZN17CWidgetButtonsBar5onKeyEaa+0x6a>
            {
                m_selectedItem++;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	7b1b      	ldrb	r3, [r3, #12]
 80122a0:	3301      	adds	r3, #1
 80122a2:	b2da      	uxtb	r2, r3
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	731a      	strb	r2, [r3, #12]
                m_redraw = true;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2201      	movs	r2, #1
 80122ac:	741a      	strb	r2, [r3, #16]
            }
            return true;
 80122ae:	2301      	movs	r3, #1
 80122b0:	e00f      	b.n	80122d2 <_ZN17CWidgetButtonsBar5onKeyEaa+0x8e>

        case KEY_CODE_DOWN:

            if (m_selectedItem > 0)
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	7b1b      	ldrb	r3, [r3, #12]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	dd08      	ble.n	80122cc <_ZN17CWidgetButtonsBar5onKeyEaa+0x88>
            {
                m_selectedItem--;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	7b1b      	ldrb	r3, [r3, #12]
 80122be:	3b01      	subs	r3, #1
 80122c0:	b2da      	uxtb	r2, r3
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	731a      	strb	r2, [r3, #12]
                m_redraw = true;
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	2201      	movs	r2, #1
 80122ca:	741a      	strb	r2, [r3, #16]
            }
            return true;
 80122cc:	2301      	movs	r3, #1
 80122ce:	e000      	b.n	80122d2 <_ZN17CWidgetButtonsBar5onKeyEaa+0x8e>

        default:
            return false;
 80122d0:	2300      	movs	r3, #0
    }
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	370c      	adds	r7, #12
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bc80      	pop	{r7}
 80122da:	4770      	bx	lr

080122dc <_ZN17CWidgetButtonsBar4drawEv>:

void CWidgetButtonsBar::draw()
{
 80122dc:	b590      	push	{r4, r7, lr}
 80122de:	b08f      	sub	sp, #60	; 0x3c
 80122e0:	af08      	add	r7, sp, #32
 80122e2:	6078      	str	r0, [r7, #4]
    CST7565Driver::suspendDrawing();
 80122e4:	f7fd f99c 	bl	800f620 <_ZN13CST7565Driver14suspendDrawingEv>

    int16_t x = m_x;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	791b      	ldrb	r3, [r3, #4]
 80122ec:	82fb      	strh	r3, [r7, #22]
    CST7565Driver::fill(0, 53, 127, 63, CST7565Driver::FILL_OPERATION_ERASE);
 80122ee:	2301      	movs	r3, #1
 80122f0:	9300      	str	r3, [sp, #0]
 80122f2:	233f      	movs	r3, #63	; 0x3f
 80122f4:	227f      	movs	r2, #127	; 0x7f
 80122f6:	2135      	movs	r1, #53	; 0x35
 80122f8:	2000      	movs	r0, #0
 80122fa:	f7fc fb1d 	bl	800e938 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE>

    if(m_topLine)
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	7c5b      	ldrb	r3, [r3, #17]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d007      	beq.n	8012316 <_ZN17CWidgetButtonsBar4drawEv+0x3a>
    {
        CST7565Driver::fill(0, 52, 127, 52, CST7565Driver::FILL_OPERATION_FILL);
 8012306:	2300      	movs	r3, #0
 8012308:	9300      	str	r3, [sp, #0]
 801230a:	2334      	movs	r3, #52	; 0x34
 801230c:	227f      	movs	r2, #127	; 0x7f
 801230e:	2134      	movs	r1, #52	; 0x34
 8012310:	2000      	movs	r0, #0
 8012312:	f7fc fb11 	bl	800e938 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE>
    }

    if (m_center)
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	7b5b      	ldrb	r3, [r3, #13]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d033      	beq.n	8012386 <_ZN17CWidgetButtonsBar4drawEv+0xaa>
    {
        int16_t itemsWidth = 0;
 801231e:	2300      	movs	r3, #0
 8012320:	82bb      	strh	r3, [r7, #20]
        for (int8_t i = 0; i < m_itemsNumber; i++)
 8012322:	2300      	movs	r3, #0
 8012324:	74fb      	strb	r3, [r7, #19]
 8012326:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801232a:	687a      	ldr	r2, [r7, #4]
 801232c:	79d2      	ldrb	r2, [r2, #7]
 801232e:	4293      	cmp	r3, r2
 8012330:	da21      	bge.n	8012376 <_ZN17CWidgetButtonsBar4drawEv+0x9a>
        {
            itemsWidth += getTextWidth(i) + 2;
 8012332:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012336:	4619      	mov	r1, r3
 8012338:	6878      	ldr	r0, [r7, #4]
 801233a:	f000 f896 	bl	801246a <_ZN17CWidgetButtonsBar12getTextWidthEa>
 801233e:	4603      	mov	r3, r0
 8012340:	3302      	adds	r3, #2
 8012342:	b29a      	uxth	r2, r3
 8012344:	8abb      	ldrh	r3, [r7, #20]
 8012346:	4413      	add	r3, r2
 8012348:	b29b      	uxth	r3, r3
 801234a:	82bb      	strh	r3, [r7, #20]
            if (i < (m_itemsNumber - 1))
 801234c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	79db      	ldrb	r3, [r3, #7]
 8012354:	3b01      	subs	r3, #1
 8012356:	429a      	cmp	r2, r3
 8012358:	da06      	bge.n	8012368 <_ZN17CWidgetButtonsBar4drawEv+0x8c>
            {
                itemsWidth += m_distance;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	799b      	ldrb	r3, [r3, #6]
 801235e:	b29a      	uxth	r2, r3
 8012360:	8abb      	ldrh	r3, [r7, #20]
 8012362:	4413      	add	r3, r2
 8012364:	b29b      	uxth	r3, r3
 8012366:	82bb      	strh	r3, [r7, #20]
        for (int8_t i = 0; i < m_itemsNumber; i++)
 8012368:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801236c:	b2db      	uxtb	r3, r3
 801236e:	3301      	adds	r3, #1
 8012370:	b2db      	uxtb	r3, r3
 8012372:	74fb      	strb	r3, [r7, #19]
 8012374:	e7d7      	b.n	8012326 <_ZN17CWidgetButtonsBar4drawEv+0x4a>
            }
        }
        x = (128 - itemsWidth) / 2;
 8012376:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801237a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 801237e:	0fda      	lsrs	r2, r3, #31
 8012380:	4413      	add	r3, r2
 8012382:	105b      	asrs	r3, r3, #1
 8012384:	82fb      	strh	r3, [r7, #22]
    }

    for (int8_t i = 0; i < m_itemsNumber; i++)
 8012386:	2300      	movs	r3, #0
 8012388:	74bb      	strb	r3, [r7, #18]
 801238a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 801238e:	687a      	ldr	r2, [r7, #4]
 8012390:	79d2      	ldrb	r2, [r2, #7]
 8012392:	4293      	cmp	r3, r2
 8012394:	da63      	bge.n	801245e <_ZN17CWidgetButtonsBar4drawEv+0x182>
    {
        int16_t textWidth = getTextWidth(i) + 2;
 8012396:	f997 3012 	ldrsb.w	r3, [r7, #18]
 801239a:	4619      	mov	r1, r3
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f000 f864 	bl	801246a <_ZN17CWidgetButtonsBar12getTextWidthEa>
 80123a2:	4603      	mov	r3, r0
 80123a4:	b29b      	uxth	r3, r3
 80123a6:	3302      	adds	r3, #2
 80123a8:	b29b      	uxth	r3, r3
 80123aa:	823b      	strh	r3, [r7, #16]

        if (m_focus && (m_selectedItem == i))
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	7b9b      	ldrb	r3, [r3, #14]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d01d      	beq.n	80123f0 <_ZN17CWidgetButtonsBar4drawEv+0x114>
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	7b1b      	ldrb	r3, [r3, #12]
 80123b8:	461a      	mov	r2, r3
 80123ba:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80123be:	429a      	cmp	r2, r3
 80123c0:	d116      	bne.n	80123f0 <_ZN17CWidgetButtonsBar4drawEv+0x114>
        {
            CScreen::drawRoundedRectangle(
                    x - 1,
 80123c2:	8afb      	ldrh	r3, [r7, #22]
 80123c4:	3b01      	subs	r3, #1
 80123c6:	b29b      	uxth	r3, r3
            CScreen::drawRoundedRectangle(
 80123c8:	b218      	sxth	r0, r3
                    m_y,
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	795b      	ldrb	r3, [r3, #5]
            CScreen::drawRoundedRectangle(
 80123ce:	b219      	sxth	r1, r3
                    x - 1 + textWidth + 1,
 80123d0:	8afa      	ldrh	r2, [r7, #22]
 80123d2:	8a3b      	ldrh	r3, [r7, #16]
 80123d4:	4413      	add	r3, r2
 80123d6:	b29b      	uxth	r3, r3
            CScreen::drawRoundedRectangle(
 80123d8:	b21a      	sxth	r2, r3
                    m_y + 8,
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	795b      	ldrb	r3, [r3, #5]
 80123de:	b29b      	uxth	r3, r3
 80123e0:	3308      	adds	r3, #8
 80123e2:	b29b      	uxth	r3, r3
            CScreen::drawRoundedRectangle(
 80123e4:	b21c      	sxth	r4, r3
                    CST7565Driver::FILL_OPERATION_FILL);
 80123e6:	2300      	movs	r3, #0
 80123e8:	9300      	str	r3, [sp, #0]
 80123ea:	4623      	mov	r3, r4
 80123ec:	f7fd f9c5 	bl	800f77a <_ZN7CScreen20drawRoundedRectangleEssssN13CST7565Driver14TFillOperationE>
        }

        CGraphicFont::drawText( //
                x + 1,
 80123f0:	8afb      	ldrh	r3, [r7, #22]
 80123f2:	3301      	adds	r3, #1
 80123f4:	b29b      	uxth	r3, r3
        CGraphicFont::drawText( //
 80123f6:	b218      	sxth	r0, r3
                m_y,
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	795b      	ldrb	r3, [r3, #5]
        CGraphicFont::drawText( //
 80123fc:	b219      	sxth	r1, r3
                0,
                0,
                m_items[i],
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	689a      	ldr	r2, [r3, #8]
 8012402:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8012406:	009b      	lsls	r3, r3, #2
 8012408:	4413      	add	r3, r2
        CGraphicFont::drawText( //
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	2200      	movs	r2, #0
 801240e:	60fa      	str	r2, [r7, #12]
 8012410:	2202      	movs	r2, #2
 8012412:	733a      	strb	r2, [r7, #12]
                NULL,
                CFont::FONT_2,
                CGraphicFont::PR_NORMAL,
                CGraphicFont::AT_LEFT,
                CGraphicFont::MULTILINE_OFF,
                {CST7565Driver::BIT_OPERATION_XOR});
 8012414:	2200      	movs	r2, #0
 8012416:	9207      	str	r2, [sp, #28]
 8012418:	f107 020c 	add.w	r2, r7, #12
 801241c:	9206      	str	r2, [sp, #24]
 801241e:	2200      	movs	r2, #0
 8012420:	9205      	str	r2, [sp, #20]
 8012422:	2200      	movs	r2, #0
 8012424:	9204      	str	r2, [sp, #16]
 8012426:	2200      	movs	r2, #0
 8012428:	9203      	str	r2, [sp, #12]
 801242a:	2202      	movs	r2, #2
 801242c:	9202      	str	r2, [sp, #8]
 801242e:	2200      	movs	r2, #0
 8012430:	9201      	str	r2, [sp, #4]
 8012432:	9300      	str	r3, [sp, #0]
 8012434:	2300      	movs	r3, #0
 8012436:	2200      	movs	r2, #0
 8012438:	f7fa f9ce 	bl	800c7d8 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb>

        x += textWidth + m_distance;
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	799b      	ldrb	r3, [r3, #6]
 8012440:	b29a      	uxth	r2, r3
 8012442:	8a3b      	ldrh	r3, [r7, #16]
 8012444:	4413      	add	r3, r2
 8012446:	b29a      	uxth	r2, r3
 8012448:	8afb      	ldrh	r3, [r7, #22]
 801244a:	4413      	add	r3, r2
 801244c:	b29b      	uxth	r3, r3
 801244e:	82fb      	strh	r3, [r7, #22]
    for (int8_t i = 0; i < m_itemsNumber; i++)
 8012450:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8012454:	b2db      	uxtb	r3, r3
 8012456:	3301      	adds	r3, #1
 8012458:	b2db      	uxtb	r3, r3
 801245a:	74bb      	strb	r3, [r7, #18]
 801245c:	e795      	b.n	801238a <_ZN17CWidgetButtonsBar4drawEv+0xae>
    }

    CST7565Driver::resumeDrawing();
 801245e:	f7fc ff25 	bl	800f2ac <_ZN13CST7565Driver13resumeDrawingEv>
}
 8012462:	bf00      	nop
 8012464:	371c      	adds	r7, #28
 8012466:	46bd      	mov	sp, r7
 8012468:	bd90      	pop	{r4, r7, pc}

0801246a <_ZN17CWidgetButtonsBar12getTextWidthEa>:

int16_t CWidgetButtonsBar::getTextWidth(int8_t item)
{
 801246a:	b580      	push	{r7, lr}
 801246c:	b082      	sub	sp, #8
 801246e:	af00      	add	r7, sp, #0
 8012470:	6078      	str	r0, [r7, #4]
 8012472:	460b      	mov	r3, r1
 8012474:	70fb      	strb	r3, [r7, #3]
    return CGraphicFont::getTextWidth(m_items[item], NULL, CFont::FONT_2, CGraphicFont::PR_NORMAL);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	689a      	ldr	r2, [r3, #8]
 801247a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801247e:	009b      	lsls	r3, r3, #2
 8012480:	4413      	add	r3, r2
 8012482:	6818      	ldr	r0, [r3, #0]
 8012484:	2300      	movs	r3, #0
 8012486:	2202      	movs	r2, #2
 8012488:	2100      	movs	r1, #0
 801248a:	f7fa fa91 	bl	800c9b0 <_ZN12CGraphicFont12getTextWidthEmPKctNS_10TPrintCaseE>
 801248e:	4603      	mov	r3, r0
}
 8012490:	4618      	mov	r0, r3
 8012492:	3708      	adds	r7, #8
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}

08012498 <_ZN17CWidgetEditNumber4initEhhlllaa>:

#include <stdio.h>

void CWidgetEditNumber::init(uint8_t x, uint8_t y, int32_t value, int32_t min, int32_t max, int8_t digitsNumber,
        int8_t flags)
{
 8012498:	b480      	push	{r7}
 801249a:	b085      	sub	sp, #20
 801249c:	af00      	add	r7, sp, #0
 801249e:	60f8      	str	r0, [r7, #12]
 80124a0:	607b      	str	r3, [r7, #4]
 80124a2:	460b      	mov	r3, r1
 80124a4:	72fb      	strb	r3, [r7, #11]
 80124a6:	4613      	mov	r3, r2
 80124a8:	72bb      	strb	r3, [r7, #10]
    m_x = x;
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	7afa      	ldrb	r2, [r7, #11]
 80124ae:	711a      	strb	r2, [r3, #4]
    m_y = y;
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	7aba      	ldrb	r2, [r7, #10]
 80124b4:	715a      	strb	r2, [r3, #5]
    m_value = value;
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	687a      	ldr	r2, [r7, #4]
 80124ba:	609a      	str	r2, [r3, #8]
    m_min = min;
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	69ba      	ldr	r2, [r7, #24]
 80124c0:	60da      	str	r2, [r3, #12]
    m_max = max;
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	69fa      	ldr	r2, [r7, #28]
 80124c6:	611a      	str	r2, [r3, #16]
    m_digitsNumber = digitsNumber;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	f897 2020 	ldrb.w	r2, [r7, #32]
 80124ce:	751a      	strb	r2, [r3, #20]
    m_flags = flags;
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80124d6:	755a      	strb	r2, [r3, #21]
    m_focus = false;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	2200      	movs	r2, #0
 80124dc:	759a      	strb	r2, [r3, #22]
    m_redraw = true;
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	2201      	movs	r2, #1
 80124e2:	75da      	strb	r2, [r3, #23]
}
 80124e4:	bf00      	nop
 80124e6:	3714      	adds	r7, #20
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bc80      	pop	{r7}
 80124ec:	4770      	bx	lr

080124ee <_ZN17CWidgetEditNumber8setFocusEb>:

void CWidgetEditNumber::setFocus(bool focus)
{
 80124ee:	b480      	push	{r7}
 80124f0:	b083      	sub	sp, #12
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
 80124f6:	460b      	mov	r3, r1
 80124f8:	70fb      	strb	r3, [r7, #3]
    if (m_focus != focus)
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	7d9b      	ldrb	r3, [r3, #22]
 80124fe:	78fa      	ldrb	r2, [r7, #3]
 8012500:	429a      	cmp	r2, r3
 8012502:	d005      	beq.n	8012510 <_ZN17CWidgetEditNumber8setFocusEb+0x22>
    {
        m_focus = focus;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	78fa      	ldrb	r2, [r7, #3]
 8012508:	759a      	strb	r2, [r3, #22]
        m_redraw = true;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	2201      	movs	r2, #1
 801250e:	75da      	strb	r2, [r3, #23]
    }
}
 8012510:	bf00      	nop
 8012512:	370c      	adds	r7, #12
 8012514:	46bd      	mov	sp, r7
 8012516:	bc80      	pop	{r7}
 8012518:	4770      	bx	lr

0801251a <_ZN17CWidgetEditNumber8getFocusEv>:

bool CWidgetEditNumber::getFocus()
{
 801251a:	b480      	push	{r7}
 801251c:	b083      	sub	sp, #12
 801251e:	af00      	add	r7, sp, #0
 8012520:	6078      	str	r0, [r7, #4]
    return m_focus;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	7d9b      	ldrb	r3, [r3, #22]
}
 8012526:	4618      	mov	r0, r3
 8012528:	370c      	adds	r7, #12
 801252a:	46bd      	mov	sp, r7
 801252c:	bc80      	pop	{r7}
 801252e:	4770      	bx	lr

08012530 <_ZN17CWidgetEditNumber8getValueEv>:

int32_t CWidgetEditNumber::getValue()
{
 8012530:	b480      	push	{r7}
 8012532:	b083      	sub	sp, #12
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
    return m_value;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	689b      	ldr	r3, [r3, #8]
}
 801253c:	4618      	mov	r0, r3
 801253e:	370c      	adds	r7, #12
 8012540:	46bd      	mov	sp, r7
 8012542:	bc80      	pop	{r7}
 8012544:	4770      	bx	lr

08012546 <_ZN17CWidgetEditNumber6updateEv>:

void CWidgetEditNumber::update()
{
 8012546:	b580      	push	{r7, lr}
 8012548:	b082      	sub	sp, #8
 801254a:	af00      	add	r7, sp, #0
 801254c:	6078      	str	r0, [r7, #4]
    if (m_redraw)
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	7ddb      	ldrb	r3, [r3, #23]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d005      	beq.n	8012562 <_ZN17CWidgetEditNumber6updateEv+0x1c>
    {
        m_redraw = false;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	2200      	movs	r2, #0
 801255a:	75da      	strb	r2, [r3, #23]
        draw();
 801255c:	6878      	ldr	r0, [r7, #4]
 801255e:	f000 f855 	bl	801260c <_ZN17CWidgetEditNumber4drawEv>
    }
}
 8012562:	bf00      	nop
 8012564:	3708      	adds	r7, #8
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}

0801256a <_ZN17CWidgetEditNumber6redrawEv>:

void CWidgetEditNumber::redraw()
{
 801256a:	b480      	push	{r7}
 801256c:	b083      	sub	sp, #12
 801256e:	af00      	add	r7, sp, #0
 8012570:	6078      	str	r0, [r7, #4]
    m_redraw = true;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2201      	movs	r2, #1
 8012576:	75da      	strb	r2, [r3, #23]
}
 8012578:	bf00      	nop
 801257a:	370c      	adds	r7, #12
 801257c:	46bd      	mov	sp, r7
 801257e:	bc80      	pop	{r7}
 8012580:	4770      	bx	lr

08012582 <_ZN17CWidgetEditNumber5onKeyEaa>:

bool CWidgetEditNumber::onKey(int8_t keyCode, int8_t keyEvent)
{
 8012582:	b480      	push	{r7}
 8012584:	b083      	sub	sp, #12
 8012586:	af00      	add	r7, sp, #0
 8012588:	6078      	str	r0, [r7, #4]
 801258a:	460b      	mov	r3, r1
 801258c:	70fb      	strb	r3, [r7, #3]
 801258e:	4613      	mov	r3, r2
 8012590:	70bb      	strb	r3, [r7, #2]
    if (keyEvent == KEY_EVENT_UP)
 8012592:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012596:	2b02      	cmp	r3, #2
 8012598:	d101      	bne.n	801259e <_ZN17CWidgetEditNumber5onKeyEaa+0x1c>
    {
        return false;
 801259a:	2300      	movs	r3, #0
 801259c:	e030      	b.n	8012600 <_ZN17CWidgetEditNumber5onKeyEaa+0x7e>
    }

    if (m_focus == false)
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	7d9b      	ldrb	r3, [r3, #22]
 80125a2:	f083 0301 	eor.w	r3, r3, #1
 80125a6:	b2db      	uxtb	r3, r3
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d001      	beq.n	80125b0 <_ZN17CWidgetEditNumber5onKeyEaa+0x2e>
    {
        return false;
 80125ac:	2300      	movs	r3, #0
 80125ae:	e027      	b.n	8012600 <_ZN17CWidgetEditNumber5onKeyEaa+0x7e>
    }

    switch (keyCode)
 80125b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80125b4:	2b03      	cmp	r3, #3
 80125b6:	d002      	beq.n	80125be <_ZN17CWidgetEditNumber5onKeyEaa+0x3c>
 80125b8:	2b04      	cmp	r3, #4
 80125ba:	d010      	beq.n	80125de <_ZN17CWidgetEditNumber5onKeyEaa+0x5c>
 80125bc:	e01f      	b.n	80125fe <_ZN17CWidgetEditNumber5onKeyEaa+0x7c>
    {
        case KEY_CODE_UP:
            if (m_value < m_max)
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	689a      	ldr	r2, [r3, #8]
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	691b      	ldr	r3, [r3, #16]
 80125c6:	429a      	cmp	r2, r3
 80125c8:	da07      	bge.n	80125da <_ZN17CWidgetEditNumber5onKeyEaa+0x58>
            {
                m_value++;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	689b      	ldr	r3, [r3, #8]
 80125ce:	1c5a      	adds	r2, r3, #1
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	609a      	str	r2, [r3, #8]
                m_redraw = true;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2201      	movs	r2, #1
 80125d8:	75da      	strb	r2, [r3, #23]
            }
            return true;
 80125da:	2301      	movs	r3, #1
 80125dc:	e010      	b.n	8012600 <_ZN17CWidgetEditNumber5onKeyEaa+0x7e>

        case KEY_CODE_DOWN:
            if (m_value > m_min)
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	689a      	ldr	r2, [r3, #8]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	68db      	ldr	r3, [r3, #12]
 80125e6:	429a      	cmp	r2, r3
 80125e8:	dd07      	ble.n	80125fa <_ZN17CWidgetEditNumber5onKeyEaa+0x78>
            {
                m_value--;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	689b      	ldr	r3, [r3, #8]
 80125ee:	1e5a      	subs	r2, r3, #1
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	609a      	str	r2, [r3, #8]
                m_redraw = true;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2201      	movs	r2, #1
 80125f8:	75da      	strb	r2, [r3, #23]
            }
            return true;
 80125fa:	2301      	movs	r3, #1
 80125fc:	e000      	b.n	8012600 <_ZN17CWidgetEditNumber5onKeyEaa+0x7e>

        default:
            return false;
 80125fe:	2300      	movs	r3, #0
    }
}
 8012600:	4618      	mov	r0, r3
 8012602:	370c      	adds	r7, #12
 8012604:	46bd      	mov	sp, r7
 8012606:	bc80      	pop	{r7}
 8012608:	4770      	bx	lr
	...

0801260c <_ZN17CWidgetEditNumber4drawEv>:

void CWidgetEditNumber::draw()
{
 801260c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012610:	b09a      	sub	sp, #104	; 0x68
 8012612:	af08      	add	r7, sp, #32
 8012614:	6078      	str	r0, [r7, #4]
    char buffer[16];
    char format[16];
    char tmp[16];
    bool showZeros = (m_flags & FLAG_SHOW_ZEROS);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801261c:	b2db      	uxtb	r3, r3
 801261e:	f003 0301 	and.w	r3, r3, #1
 8012622:	2b00      	cmp	r3, #0
 8012624:	bf14      	ite	ne
 8012626:	2301      	movne	r3, #1
 8012628:	2300      	moveq	r3, #0
 801262a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    bool showSign = (m_flags & FLAG_SHOW_SIGN);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8012634:	b2db      	uxtb	r3, r3
 8012636:	f003 0302 	and.w	r3, r3, #2
 801263a:	2b00      	cmp	r3, #0
 801263c:	bf14      	ite	ne
 801263e:	2301      	movne	r3, #1
 8012640:	2300      	moveq	r3, #0
 8012642:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

    uint8_t posX2 = m_x + (13 * m_digitsNumber);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	791a      	ldrb	r2, [r3, #4]
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8012650:	b2db      	uxtb	r3, r3
 8012652:	4619      	mov	r1, r3
 8012654:	0049      	lsls	r1, r1, #1
 8012656:	4419      	add	r1, r3
 8012658:	0089      	lsls	r1, r1, #2
 801265a:	440b      	add	r3, r1
 801265c:	b2db      	uxtb	r3, r3
 801265e:	4413      	add	r3, r2
 8012660:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t posY2 = m_y + 17;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	795b      	ldrb	r3, [r3, #5]
 8012668:	3311      	adds	r3, #17
 801266a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    int16_t tempY = ((m_y + posY2 + 1) / 2) - (CGraphicFont::getFontHeight(CFont::FONT_3) / 2);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	795b      	ldrb	r3, [r3, #5]
 8012672:	461a      	mov	r2, r3
 8012674:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8012678:	4413      	add	r3, r2
 801267a:	3301      	adds	r3, #1
 801267c:	0fda      	lsrs	r2, r3, #31
 801267e:	4413      	add	r3, r2
 8012680:	105b      	asrs	r3, r3, #1
 8012682:	b29c      	uxth	r4, r3
 8012684:	2003      	movs	r0, #3
 8012686:	f7fa f981 	bl	800c98c <_ZN12CGraphicFont13getFontHeightEt>
 801268a:	4603      	mov	r3, r0
 801268c:	0fda      	lsrs	r2, r3, #31
 801268e:	4413      	add	r3, r2
 8012690:	105b      	asrs	r3, r3, #1
 8012692:	b21b      	sxth	r3, r3
 8012694:	b29b      	uxth	r3, r3
 8012696:	1ae3      	subs	r3, r4, r3
 8012698:	b29b      	uxth	r3, r3
 801269a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    snprintf(tmp, sizeof(tmp), "%d", m_digitsNumber);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80126a4:	f107 000c 	add.w	r0, r7, #12
 80126a8:	4a37      	ldr	r2, [pc, #220]	; (8012788 <_ZN17CWidgetEditNumber4drawEv+0x17c>)
 80126aa:	2110      	movs	r1, #16
 80126ac:	f005 fabc 	bl	8017c28 <snprintf>
    snprintf(format, sizeof(format), "%%%s%s%sd", showSign ? "+" : "", showZeros ? "0" : "", tmp);
 80126b0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d001      	beq.n	80126bc <_ZN17CWidgetEditNumber4drawEv+0xb0>
 80126b8:	4934      	ldr	r1, [pc, #208]	; (801278c <_ZN17CWidgetEditNumber4drawEv+0x180>)
 80126ba:	e000      	b.n	80126be <_ZN17CWidgetEditNumber4drawEv+0xb2>
 80126bc:	4934      	ldr	r1, [pc, #208]	; (8012790 <_ZN17CWidgetEditNumber4drawEv+0x184>)
 80126be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d001      	beq.n	80126ca <_ZN17CWidgetEditNumber4drawEv+0xbe>
 80126c6:	4b33      	ldr	r3, [pc, #204]	; (8012794 <_ZN17CWidgetEditNumber4drawEv+0x188>)
 80126c8:	e000      	b.n	80126cc <_ZN17CWidgetEditNumber4drawEv+0xc0>
 80126ca:	4b31      	ldr	r3, [pc, #196]	; (8012790 <_ZN17CWidgetEditNumber4drawEv+0x184>)
 80126cc:	f107 001c 	add.w	r0, r7, #28
 80126d0:	f107 020c 	add.w	r2, r7, #12
 80126d4:	9201      	str	r2, [sp, #4]
 80126d6:	9300      	str	r3, [sp, #0]
 80126d8:	460b      	mov	r3, r1
 80126da:	4a2f      	ldr	r2, [pc, #188]	; (8012798 <_ZN17CWidgetEditNumber4drawEv+0x18c>)
 80126dc:	2110      	movs	r1, #16
 80126de:	f005 faa3 	bl	8017c28 <snprintf>
    snprintf(buffer, sizeof(buffer), format, m_value);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	689b      	ldr	r3, [r3, #8]
 80126e6:	f107 021c 	add.w	r2, r7, #28
 80126ea:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80126ee:	2110      	movs	r1, #16
 80126f0:	f005 fa9a 	bl	8017c28 <snprintf>

    CST7565Driver::fill( //
            m_x,
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	791b      	ldrb	r3, [r3, #4]
    CST7565Driver::fill( //
 80126f8:	b21c      	sxth	r4, r3
            m_y,
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	795b      	ldrb	r3, [r3, #5]
    CST7565Driver::fill( //
 80126fe:	b21d      	sxth	r5, r3
 8012700:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8012704:	b21e      	sxth	r6, r3
 8012706:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801270a:	fa0f f883 	sxth.w	r8, r3
            posX2,
            posY2,
            getFocus() ? CST7565Driver::FILL_OPERATION_FILL : CST7565Driver::FILL_OPERATION_ERASE);
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	f7ff ff03 	bl	801251a <_ZN17CWidgetEditNumber8getFocusEv>
 8012714:	4603      	mov	r3, r0
    CST7565Driver::fill( //
 8012716:	2b00      	cmp	r3, #0
 8012718:	d001      	beq.n	801271e <_ZN17CWidgetEditNumber4drawEv+0x112>
 801271a:	2300      	movs	r3, #0
 801271c:	e000      	b.n	8012720 <_ZN17CWidgetEditNumber4drawEv+0x114>
 801271e:	2301      	movs	r3, #1
            getFocus() ? CST7565Driver::FILL_OPERATION_FILL : CST7565Driver::FILL_OPERATION_ERASE);
 8012720:	9300      	str	r3, [sp, #0]
 8012722:	4643      	mov	r3, r8
 8012724:	4632      	mov	r2, r6
 8012726:	4629      	mov	r1, r5
 8012728:	4620      	mov	r0, r4
 801272a:	f7fc f905 	bl	800e938 <_ZN13CST7565Driver4fillEssssNS_14TFillOperationE>

    CGraphicFont::drawText( //
            m_x,
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	791b      	ldrb	r3, [r3, #4]
    CGraphicFont::drawText( //
 8012732:	b218      	sxth	r0, r3
 8012734:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8012738:	b21a      	sxth	r2, r3
            tempY,
            posX2,
            tempY + 17,
 801273a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801273e:	3311      	adds	r3, #17
 8012740:	b29b      	uxth	r3, r3
    CGraphicFont::drawText( //
 8012742:	b21c      	sxth	r4, r3
 8012744:	2300      	movs	r3, #0
 8012746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012748:	2302      	movs	r3, #2
 801274a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
            buffer,
            CFont::FONT_3,
            CGraphicFont::PR_NORMAL,
            CGraphicFont::AT_CENTER,
            CGraphicFont::MULTILINE_OFF,
            {CST7565Driver::BIT_OPERATION_XOR});
 801274e:	f9b7 1042 	ldrsh.w	r1, [r7, #66]	; 0x42
 8012752:	2300      	movs	r3, #0
 8012754:	9307      	str	r3, [sp, #28]
 8012756:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801275a:	9306      	str	r3, [sp, #24]
 801275c:	2300      	movs	r3, #0
 801275e:	9305      	str	r3, [sp, #20]
 8012760:	2302      	movs	r3, #2
 8012762:	9304      	str	r3, [sp, #16]
 8012764:	2300      	movs	r3, #0
 8012766:	9303      	str	r3, [sp, #12]
 8012768:	2303      	movs	r3, #3
 801276a:	9302      	str	r3, [sp, #8]
 801276c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012770:	9301      	str	r3, [sp, #4]
 8012772:	2300      	movs	r3, #0
 8012774:	9300      	str	r3, [sp, #0]
 8012776:	4623      	mov	r3, r4
 8012778:	f7fa f82e 	bl	800c7d8 <_ZN12CGraphicFont8drawTextEssssmPKctNS_10TPrintCaseENS_10TAlignTextENS_10TMultilineERK10TColorDescb>

}
 801277c:	bf00      	nop
 801277e:	3748      	adds	r7, #72	; 0x48
 8012780:	46bd      	mov	sp, r7
 8012782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012786:	bf00      	nop
 8012788:	0801c29c 	.word	0x0801c29c
 801278c:	0801c2a0 	.word	0x0801c2a0
 8012790:	0801c2a4 	.word	0x0801c2a4
 8012794:	0801c2a8 	.word	0x0801c2a8
 8012798:	0801c2ac 	.word	0x0801c2ac

0801279c <_Z18crc32_basic_updatemh>:
        0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
        0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D,
};

uint32_t crc32_basic_update(uint32_t crc, uint8_t byte)
{
 801279c:	b480      	push	{r7}
 801279e:	b083      	sub	sp, #12
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
 80127a4:	460b      	mov	r3, r1
 80127a6:	70fb      	strb	r3, [r7, #3]
    return (crc >> 8) ^ crc32_basic_table_table[(uint8_t)(crc ^ byte) /*& 0xFF*/];
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	0a1a      	lsrs	r2, r3, #8
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	b2d9      	uxtb	r1, r3
 80127b0:	78fb      	ldrb	r3, [r7, #3]
 80127b2:	404b      	eors	r3, r1
 80127b4:	b2db      	uxtb	r3, r3
 80127b6:	4619      	mov	r1, r3
 80127b8:	4b04      	ldr	r3, [pc, #16]	; (80127cc <_Z18crc32_basic_updatemh+0x30>)
 80127ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80127be:	4053      	eors	r3, r2
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	370c      	adds	r7, #12
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bc80      	pop	{r7}
 80127c8:	4770      	bx	lr
 80127ca:	bf00      	nop
 80127cc:	08022320 	.word	0x08022320

080127d0 <_Z30crc_tools_32_get_initial_valuev>:
#include "stdint.h"
#include "crc_tools.h"
#include "crc32_basic.h"

uint32_t crc_tools_32_get_initial_value()
{
 80127d0:	b480      	push	{r7}
 80127d2:	af00      	add	r7, sp, #0
    return 0xFFFFFFFF;
 80127d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80127d8:	4618      	mov	r0, r3
 80127da:	46bd      	mov	sp, r7
 80127dc:	bc80      	pop	{r7}
 80127de:	4770      	bx	lr

080127e0 <_Z24crc_tools_ibutton_updatehh>:
    }
    return crc;
}

uint8_t crc_tools_ibutton_update(uint8_t crc, uint8_t byte)
{
 80127e0:	b480      	push	{r7}
 80127e2:	b085      	sub	sp, #20
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	4603      	mov	r3, r0
 80127e8:	460a      	mov	r2, r1
 80127ea:	71fb      	strb	r3, [r7, #7]
 80127ec:	4613      	mov	r3, r2
 80127ee:	71bb      	strb	r3, [r7, #6]
    uint8_t i;

    crc = crc ^ byte;
 80127f0:	79fa      	ldrb	r2, [r7, #7]
 80127f2:	79bb      	ldrb	r3, [r7, #6]
 80127f4:	4053      	eors	r3, r2
 80127f6:	71fb      	strb	r3, [r7, #7]
    for (i = 0; i < 8; i++)
 80127f8:	2300      	movs	r3, #0
 80127fa:	73fb      	strb	r3, [r7, #15]
 80127fc:	7bfb      	ldrb	r3, [r7, #15]
 80127fe:	2b07      	cmp	r3, #7
 8012800:	dc14      	bgt.n	801282c <_Z24crc_tools_ibutton_updatehh+0x4c>
    {
        if (crc & 0x01)
 8012802:	79fb      	ldrb	r3, [r7, #7]
 8012804:	f003 0301 	and.w	r3, r3, #1
 8012808:	2b00      	cmp	r3, #0
 801280a:	d008      	beq.n	801281e <_Z24crc_tools_ibutton_updatehh+0x3e>
            crc = (crc >> 1) ^ 0x8C;
 801280c:	79fb      	ldrb	r3, [r7, #7]
 801280e:	105b      	asrs	r3, r3, #1
 8012810:	b25b      	sxtb	r3, r3
 8012812:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8012816:	43db      	mvns	r3, r3
 8012818:	b25b      	sxtb	r3, r3
 801281a:	71fb      	strb	r3, [r7, #7]
 801281c:	e002      	b.n	8012824 <_Z24crc_tools_ibutton_updatehh+0x44>
        else
            crc >>= 1;
 801281e:	79fb      	ldrb	r3, [r7, #7]
 8012820:	105b      	asrs	r3, r3, #1
 8012822:	71fb      	strb	r3, [r7, #7]
    for (i = 0; i < 8; i++)
 8012824:	7bfb      	ldrb	r3, [r7, #15]
 8012826:	3301      	adds	r3, #1
 8012828:	73fb      	strb	r3, [r7, #15]
 801282a:	e7e7      	b.n	80127fc <_Z24crc_tools_ibutton_updatehh+0x1c>
    }

    return crc;
 801282c:	79fb      	ldrb	r3, [r7, #7]
}
 801282e:	4618      	mov	r0, r3
 8012830:	3714      	adds	r7, #20
 8012832:	46bd      	mov	sp, r7
 8012834:	bc80      	pop	{r7}
 8012836:	4770      	bx	lr

08012838 <_Z35crc_tools_ibutton_get_initial_valuev>:

uint8_t crc_tools_ibutton_get_initial_value()
{
 8012838:	b480      	push	{r7}
 801283a:	af00      	add	r7, sp, #0
    return 0;
 801283c:	2300      	movs	r3, #0
}
 801283e:	4618      	mov	r0, r3
 8012840:	46bd      	mov	sp, r7
 8012842:	bc80      	pop	{r7}
 8012844:	4770      	bx	lr

08012846 <_Z27crc_tools_ibutton_calculatePhh>:

uint8_t crc_tools_ibutton_calculate(uint8_t bytes[], uint8_t size)
{
 8012846:	b580      	push	{r7, lr}
 8012848:	b084      	sub	sp, #16
 801284a:	af00      	add	r7, sp, #0
 801284c:	6078      	str	r0, [r7, #4]
 801284e:	460b      	mov	r3, r1
 8012850:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = crc_tools_ibutton_get_initial_value();
 8012852:	f7ff fff1 	bl	8012838 <_Z35crc_tools_ibutton_get_initial_valuev>
 8012856:	4603      	mov	r3, r0
 8012858:	73fb      	strb	r3, [r7, #15]
    uint8_t i;

    for (i = 0; i < size; i++)
 801285a:	2300      	movs	r3, #0
 801285c:	73bb      	strb	r3, [r7, #14]
 801285e:	7bba      	ldrb	r2, [r7, #14]
 8012860:	78fb      	ldrb	r3, [r7, #3]
 8012862:	429a      	cmp	r2, r3
 8012864:	da0e      	bge.n	8012884 <_Z27crc_tools_ibutton_calculatePhh+0x3e>
    {
        crc = crc_tools_ibutton_update(crc, bytes[i]);
 8012866:	7bbb      	ldrb	r3, [r7, #14]
 8012868:	687a      	ldr	r2, [r7, #4]
 801286a:	4413      	add	r3, r2
 801286c:	781a      	ldrb	r2, [r3, #0]
 801286e:	7bfb      	ldrb	r3, [r7, #15]
 8012870:	4611      	mov	r1, r2
 8012872:	4618      	mov	r0, r3
 8012874:	f7ff ffb4 	bl	80127e0 <_Z24crc_tools_ibutton_updatehh>
 8012878:	4603      	mov	r3, r0
 801287a:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < size; i++)
 801287c:	7bbb      	ldrb	r3, [r7, #14]
 801287e:	3301      	adds	r3, #1
 8012880:	73bb      	strb	r3, [r7, #14]
 8012882:	e7ec      	b.n	801285e <_Z27crc_tools_ibutton_calculatePhh+0x18>
    }

    return crc;
 8012884:	7bfb      	ldrb	r3, [r7, #15]
}
 8012886:	4618      	mov	r0, r3
 8012888:	3710      	adds	r7, #16
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}

0801288e <_Z31frame_tools_uint32_to_bytes_LSBmPh>:
#include "frame_tools.h"


void frame_tools_uint32_to_bytes_LSB(uint32_t value, uint8_t bytes[])
{
 801288e:	b480      	push	{r7}
 8012890:	b085      	sub	sp, #20
 8012892:	af00      	add	r7, sp, #0
 8012894:	6078      	str	r0, [r7, #4]
 8012896:	6039      	str	r1, [r7, #0]
    int8_t i;

    for(i = 0; i < 4; i++)
 8012898:	2300      	movs	r3, #0
 801289a:	73fb      	strb	r3, [r7, #15]
 801289c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128a0:	2b03      	cmp	r3, #3
 80128a2:	dc10      	bgt.n	80128c6 <_Z31frame_tools_uint32_to_bytes_LSBmPh+0x38>
    {
        bytes[i] = (uint8_t)value;
 80128a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128a8:	683a      	ldr	r2, [r7, #0]
 80128aa:	4413      	add	r3, r2
 80128ac:	687a      	ldr	r2, [r7, #4]
 80128ae:	b2d2      	uxtb	r2, r2
 80128b0:	701a      	strb	r2, [r3, #0]
        value >>= 8;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	0a1b      	lsrs	r3, r3, #8
 80128b6:	607b      	str	r3, [r7, #4]
    for(i = 0; i < 4; i++)
 80128b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128bc:	b2db      	uxtb	r3, r3
 80128be:	3301      	adds	r3, #1
 80128c0:	b2db      	uxtb	r3, r3
 80128c2:	73fb      	strb	r3, [r7, #15]
 80128c4:	e7ea      	b.n	801289c <_Z31frame_tools_uint32_to_bytes_LSBmPh+0xe>
    }
}
 80128c6:	bf00      	nop
 80128c8:	3714      	adds	r7, #20
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bc80      	pop	{r7}
 80128ce:	4770      	bx	lr

080128d0 <_Z31frame_tools_bytes_LSB_to_uint32Ph>:

uint32_t frame_tools_bytes_LSB_to_uint32(uint8_t bytes[])
{
 80128d0:	b480      	push	{r7}
 80128d2:	b085      	sub	sp, #20
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
    int8_t i;
    uint32_t result = 0;
 80128d8:	2300      	movs	r3, #0
 80128da:	60bb      	str	r3, [r7, #8]

    for(i = 3; i >= 0; i--)
 80128dc:	2303      	movs	r3, #3
 80128de:	73fb      	strb	r3, [r7, #15]
 80128e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	db12      	blt.n	801290e <_Z31frame_tools_bytes_LSB_to_uint32Ph+0x3e>
    {
        result <<= 8;
 80128e8:	68bb      	ldr	r3, [r7, #8]
 80128ea:	021b      	lsls	r3, r3, #8
 80128ec:	60bb      	str	r3, [r7, #8]
        result |= bytes[i];
 80128ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128f2:	687a      	ldr	r2, [r7, #4]
 80128f4:	4413      	add	r3, r2
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	461a      	mov	r2, r3
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	4313      	orrs	r3, r2
 80128fe:	60bb      	str	r3, [r7, #8]
    for(i = 3; i >= 0; i--)
 8012900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012904:	b2db      	uxtb	r3, r3
 8012906:	3b01      	subs	r3, #1
 8012908:	b2db      	uxtb	r3, r3
 801290a:	73fb      	strb	r3, [r7, #15]
 801290c:	e7e8      	b.n	80128e0 <_Z31frame_tools_bytes_LSB_to_uint32Ph+0x10>
    }
    return result;
 801290e:	68bb      	ldr	r3, [r7, #8]
}
 8012910:	4618      	mov	r0, r3
 8012912:	3714      	adds	r7, #20
 8012914:	46bd      	mov	sp, r7
 8012916:	bc80      	pop	{r7}
 8012918:	4770      	bx	lr

0801291a <_Z14prot3buff_initP11prot3buff_tPht>:
#include "prot3buff.h"
#include <stdlib.h>

void prot3buff_init(prot3buff_t *ob, uint8_t *buffer, uint16_t buffer_len)
{
 801291a:	b480      	push	{r7}
 801291c:	b085      	sub	sp, #20
 801291e:	af00      	add	r7, sp, #0
 8012920:	60f8      	str	r0, [r7, #12]
 8012922:	60b9      	str	r1, [r7, #8]
 8012924:	4613      	mov	r3, r2
 8012926:	80fb      	strh	r3, [r7, #6]
    ob->buffer = buffer;
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	68ba      	ldr	r2, [r7, #8]
 801292c:	605a      	str	r2, [r3, #4]
    ob->capacity = buffer_len;
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	88fa      	ldrh	r2, [r7, #6]
 8012932:	801a      	strh	r2, [r3, #0]
    ob->writer_pos = 0;
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	2200      	movs	r2, #0
 8012938:	811a      	strh	r2, [r3, #8]
    ob->reader_pos = 0;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	2200      	movs	r2, #0
 801293e:	815a      	strh	r2, [r3, #10]
}
 8012940:	bf00      	nop
 8012942:	3714      	adds	r7, #20
 8012944:	46bd      	mov	sp, r7
 8012946:	bc80      	pop	{r7}
 8012948:	4770      	bx	lr

0801294a <_Z22prot3buff_getWriterPosP11prot3buff_t>:

uint16_t prot3buff_getWriterPos(prot3buff_t *ob)
{
 801294a:	b480      	push	{r7}
 801294c:	b083      	sub	sp, #12
 801294e:	af00      	add	r7, sp, #0
 8012950:	6078      	str	r0, [r7, #4]
    return ob->writer_pos;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	891b      	ldrh	r3, [r3, #8]
}
 8012956:	4618      	mov	r0, r3
 8012958:	370c      	adds	r7, #12
 801295a:	46bd      	mov	sp, r7
 801295c:	bc80      	pop	{r7}
 801295e:	4770      	bx	lr

08012960 <_Z22prot3buff_getReaderPosP11prot3buff_t>:

uint16_t prot3buff_getReaderPos(prot3buff_t *ob)
{
 8012960:	b480      	push	{r7}
 8012962:	b083      	sub	sp, #12
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
    return ob->reader_pos;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	895b      	ldrh	r3, [r3, #10]
}
 801296c:	4618      	mov	r0, r3
 801296e:	370c      	adds	r7, #12
 8012970:	46bd      	mov	sp, r7
 8012972:	bc80      	pop	{r7}
 8012974:	4770      	bx	lr

08012976 <_Z24prot3buff_setWriterToPosP11prot3buff_tt>:

void prot3buff_setWriterToPos(prot3buff_t *ob, uint16_t pos)
{
 8012976:	b480      	push	{r7}
 8012978:	b083      	sub	sp, #12
 801297a:	af00      	add	r7, sp, #0
 801297c:	6078      	str	r0, [r7, #4]
 801297e:	460b      	mov	r3, r1
 8012980:	807b      	strh	r3, [r7, #2]
    if(pos < ob->capacity)
 8012982:	887b      	ldrh	r3, [r7, #2]
 8012984:	687a      	ldr	r2, [r7, #4]
 8012986:	8812      	ldrh	r2, [r2, #0]
 8012988:	4293      	cmp	r3, r2
 801298a:	da02      	bge.n	8012992 <_Z24prot3buff_setWriterToPosP11prot3buff_tt+0x1c>
    {
        ob->writer_pos = pos;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	887a      	ldrh	r2, [r7, #2]
 8012990:	811a      	strh	r2, [r3, #8]
    }
}
 8012992:	bf00      	nop
 8012994:	370c      	adds	r7, #12
 8012996:	46bd      	mov	sp, r7
 8012998:	bc80      	pop	{r7}
 801299a:	4770      	bx	lr

0801299c <_Z24prot3buff_setReaderToPosP11prot3buff_tt>:

void prot3buff_setReaderToPos(prot3buff_t *ob, uint16_t pos)
{
 801299c:	b480      	push	{r7}
 801299e:	b083      	sub	sp, #12
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
 80129a4:	460b      	mov	r3, r1
 80129a6:	807b      	strh	r3, [r7, #2]
    if(pos < ob->capacity)
 80129a8:	887b      	ldrh	r3, [r7, #2]
 80129aa:	687a      	ldr	r2, [r7, #4]
 80129ac:	8812      	ldrh	r2, [r2, #0]
 80129ae:	4293      	cmp	r3, r2
 80129b0:	da02      	bge.n	80129b8 <_Z24prot3buff_setReaderToPosP11prot3buff_tt+0x1c>
    {
        ob->reader_pos = pos;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	887a      	ldrh	r2, [r7, #2]
 80129b6:	815a      	strh	r2, [r3, #10]
    }
}
 80129b8:	bf00      	nop
 80129ba:	370c      	adds	r7, #12
 80129bc:	46bd      	mov	sp, r7
 80129be:	bc80      	pop	{r7}
 80129c0:	4770      	bx	lr

080129c2 <_Z15prot3buff_clearP11prot3buff_t>:

void prot3buff_clear(prot3buff_t *ob)
{
 80129c2:	b580      	push	{r7, lr}
 80129c4:	b082      	sub	sp, #8
 80129c6:	af00      	add	r7, sp, #0
 80129c8:	6078      	str	r0, [r7, #4]
    prot3buff_setWriterToPos(ob, 0);
 80129ca:	2100      	movs	r1, #0
 80129cc:	6878      	ldr	r0, [r7, #4]
 80129ce:	f7ff ffd2 	bl	8012976 <_Z24prot3buff_setWriterToPosP11prot3buff_tt>
    prot3buff_setReaderToPos(ob, 0);
 80129d2:	2100      	movs	r1, #0
 80129d4:	6878      	ldr	r0, [r7, #4]
 80129d6:	f7ff ffe1 	bl	801299c <_Z24prot3buff_setReaderToPosP11prot3buff_tt>
}
 80129da:	bf00      	nop
 80129dc:	3708      	adds	r7, #8
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}

080129e2 <_Z26prot3buff_getCapacityAvailP11prot3buff_t>:

uint16_t prot3buff_getCapacityAvail(prot3buff_t *ob)
{
 80129e2:	b480      	push	{r7}
 80129e4:	b083      	sub	sp, #12
 80129e6:	af00      	add	r7, sp, #0
 80129e8:	6078      	str	r0, [r7, #4]
    return ob->capacity - ob->writer_pos;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	881a      	ldrh	r2, [r3, #0]
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	891b      	ldrh	r3, [r3, #8]
 80129f2:	1ad3      	subs	r3, r2, r3
 80129f4:	b29b      	uxth	r3, r3
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	370c      	adds	r7, #12
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bc80      	pop	{r7}
 80129fe:	4770      	bx	lr

08012a00 <_Z17prot3buff_putByteP11prot3buff_th>:

uint16_t prot3buff_putByte(prot3buff_t *ob, uint8_t byte)
{
 8012a00:	b480      	push	{r7}
 8012a02:	b083      	sub	sp, #12
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
 8012a08:	460b      	mov	r3, r1
 8012a0a:	70fb      	strb	r3, [r7, #3]
    if(ob->writer_pos < ob->capacity)
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	891b      	ldrh	r3, [r3, #8]
 8012a10:	461a      	mov	r2, r3
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	881b      	ldrh	r3, [r3, #0]
 8012a16:	429a      	cmp	r2, r3
 8012a18:	da0e      	bge.n	8012a38 <_Z17prot3buff_putByteP11prot3buff_th+0x38>
    {
        ob->buffer[ob->writer_pos] = byte;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	685b      	ldr	r3, [r3, #4]
 8012a1e:	687a      	ldr	r2, [r7, #4]
 8012a20:	8912      	ldrh	r2, [r2, #8]
 8012a22:	4413      	add	r3, r2
 8012a24:	78fa      	ldrb	r2, [r7, #3]
 8012a26:	701a      	strb	r2, [r3, #0]
        ob->writer_pos++;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	891b      	ldrh	r3, [r3, #8]
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	b29a      	uxth	r2, r3
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	811a      	strh	r2, [r3, #8]
        return 1;
 8012a34:	2301      	movs	r3, #1
 8012a36:	e000      	b.n	8012a3a <_Z17prot3buff_putByteP11prot3buff_th+0x3a>
    }
    return 0;
 8012a38:	2300      	movs	r3, #0
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	370c      	adds	r7, #12
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bc80      	pop	{r7}
 8012a42:	4770      	bx	lr

08012a44 <_Z18prot3buff_putBytesP11prot3buff_tPht>:

uint16_t prot3buff_putBytes(prot3buff_t *ob, uint8_t *array, uint16_t size)
{
 8012a44:	b480      	push	{r7}
 8012a46:	b087      	sub	sp, #28
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	60f8      	str	r0, [r7, #12]
 8012a4c:	60b9      	str	r1, [r7, #8]
 8012a4e:	4613      	mov	r3, r2
 8012a50:	80fb      	strh	r3, [r7, #6]
    uint16_t put = 0;
 8012a52:	2300      	movs	r3, #0
 8012a54:	82fb      	strh	r3, [r7, #22]

    while((ob->writer_pos < ob->capacity) && (put < size))
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	891b      	ldrh	r3, [r3, #8]
 8012a5a:	461a      	mov	r2, r3
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	881b      	ldrh	r3, [r3, #0]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	da18      	bge.n	8012a96 <_Z18prot3buff_putBytesP11prot3buff_tPht+0x52>
 8012a64:	8afa      	ldrh	r2, [r7, #22]
 8012a66:	88fb      	ldrh	r3, [r7, #6]
 8012a68:	429a      	cmp	r2, r3
 8012a6a:	da14      	bge.n	8012a96 <_Z18prot3buff_putBytesP11prot3buff_tPht+0x52>
    {
        ob->buffer[ob->writer_pos] = *array;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	685b      	ldr	r3, [r3, #4]
 8012a70:	68fa      	ldr	r2, [r7, #12]
 8012a72:	8912      	ldrh	r2, [r2, #8]
 8012a74:	4413      	add	r3, r2
 8012a76:	68ba      	ldr	r2, [r7, #8]
 8012a78:	7812      	ldrb	r2, [r2, #0]
 8012a7a:	701a      	strb	r2, [r3, #0]
        ob->writer_pos++;
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	891b      	ldrh	r3, [r3, #8]
 8012a80:	3301      	adds	r3, #1
 8012a82:	b29a      	uxth	r2, r3
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	811a      	strh	r2, [r3, #8]
        array++;
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	3301      	adds	r3, #1
 8012a8c:	60bb      	str	r3, [r7, #8]
        put++;
 8012a8e:	8afb      	ldrh	r3, [r7, #22]
 8012a90:	3301      	adds	r3, #1
 8012a92:	82fb      	strh	r3, [r7, #22]
    while((ob->writer_pos < ob->capacity) && (put < size))
 8012a94:	e7df      	b.n	8012a56 <_Z18prot3buff_putBytesP11prot3buff_tPht+0x12>
    }
    return put;
 8012a96:	8afb      	ldrh	r3, [r7, #22]
}
 8012a98:	4618      	mov	r0, r3
 8012a9a:	371c      	adds	r7, #28
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bc80      	pop	{r7}
 8012aa0:	4770      	bx	lr

08012aa2 <_Z23prot3buff_getBytesAvailP11prot3buff_t>:

uint16_t prot3buff_getBytesAvail(prot3buff_t *ob)
{
 8012aa2:	b480      	push	{r7}
 8012aa4:	b083      	sub	sp, #12
 8012aa6:	af00      	add	r7, sp, #0
 8012aa8:	6078      	str	r0, [r7, #4]
    return ob->writer_pos - ob->reader_pos;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	891a      	ldrh	r2, [r3, #8]
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	895b      	ldrh	r3, [r3, #10]
 8012ab2:	1ad3      	subs	r3, r2, r3
 8012ab4:	b29b      	uxth	r3, r3
}
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	370c      	adds	r7, #12
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bc80      	pop	{r7}
 8012abe:	4770      	bx	lr

08012ac0 <_Z25prot3buff_isByteAvailableP11prot3buff_t>:

uint16_t prot3buff_isByteAvailable(prot3buff_t *ob)
{
 8012ac0:	b480      	push	{r7}
 8012ac2:	b083      	sub	sp, #12
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
    return ob->reader_pos < ob->writer_pos;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	895b      	ldrh	r3, [r3, #10]
 8012acc:	461a      	mov	r2, r3
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	891b      	ldrh	r3, [r3, #8]
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	bfb4      	ite	lt
 8012ad6:	2301      	movlt	r3, #1
 8012ad8:	2300      	movge	r3, #0
 8012ada:	b2db      	uxtb	r3, r3
 8012adc:	b29b      	uxth	r3, r3
}
 8012ade:	4618      	mov	r0, r3
 8012ae0:	370c      	adds	r7, #12
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	bc80      	pop	{r7}
 8012ae6:	4770      	bx	lr

08012ae8 <_Z18prot3buff_readByteP11prot3buff_t>:

int16_t prot3buff_readByte(prot3buff_t *ob)
{
 8012ae8:	b480      	push	{r7}
 8012aea:	b085      	sub	sp, #20
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
    if(ob->reader_pos < ob->writer_pos)
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	895b      	ldrh	r3, [r3, #10]
 8012af4:	461a      	mov	r2, r3
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	891b      	ldrh	r3, [r3, #8]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	da0f      	bge.n	8012b1e <_Z18prot3buff_readByteP11prot3buff_t+0x36>
    {
        uint8_t byte = ob->buffer[ob->reader_pos];
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	685b      	ldr	r3, [r3, #4]
 8012b02:	687a      	ldr	r2, [r7, #4]
 8012b04:	8952      	ldrh	r2, [r2, #10]
 8012b06:	4413      	add	r3, r2
 8012b08:	781b      	ldrb	r3, [r3, #0]
 8012b0a:	73fb      	strb	r3, [r7, #15]

        ob->reader_pos++;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	895b      	ldrh	r3, [r3, #10]
 8012b10:	3301      	adds	r3, #1
 8012b12:	b29a      	uxth	r2, r3
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	815a      	strh	r2, [r3, #10]
        return byte;
 8012b18:	7bfb      	ldrb	r3, [r7, #15]
 8012b1a:	b21b      	sxth	r3, r3
 8012b1c:	e001      	b.n	8012b22 <_Z18prot3buff_readByteP11prot3buff_t+0x3a>
    }
    return -1;
 8012b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	3714      	adds	r7, #20
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bc80      	pop	{r7}
 8012b2a:	4770      	bx	lr

08012b2c <_Z19prot3buff_readBytesP11prot3buff_tPht>:

uint16_t prot3buff_readBytes(prot3buff_t *ob, uint8_t *array, uint16_t size)
{
 8012b2c:	b480      	push	{r7}
 8012b2e:	b087      	sub	sp, #28
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	60f8      	str	r0, [r7, #12]
 8012b34:	60b9      	str	r1, [r7, #8]
 8012b36:	4613      	mov	r3, r2
 8012b38:	80fb      	strh	r3, [r7, #6]
    uint16_t read = 0;
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	82fb      	strh	r3, [r7, #22]

    if(array != NULL)
 8012b3e:	68bb      	ldr	r3, [r7, #8]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d01f      	beq.n	8012b84 <_Z19prot3buff_readBytesP11prot3buff_tPht+0x58>
    {
        while((ob->reader_pos < ob->writer_pos) && (read < size))
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	895b      	ldrh	r3, [r3, #10]
 8012b48:	461a      	mov	r2, r3
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	891b      	ldrh	r3, [r3, #8]
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	da2d      	bge.n	8012bae <_Z19prot3buff_readBytesP11prot3buff_tPht+0x82>
 8012b52:	8afa      	ldrh	r2, [r7, #22]
 8012b54:	88fb      	ldrh	r3, [r7, #6]
 8012b56:	429a      	cmp	r2, r3
 8012b58:	da29      	bge.n	8012bae <_Z19prot3buff_readBytesP11prot3buff_tPht+0x82>
        {
            *array = ob->buffer[ob->reader_pos];
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	685b      	ldr	r3, [r3, #4]
 8012b5e:	68fa      	ldr	r2, [r7, #12]
 8012b60:	8952      	ldrh	r2, [r2, #10]
 8012b62:	4413      	add	r3, r2
 8012b64:	781a      	ldrb	r2, [r3, #0]
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	701a      	strb	r2, [r3, #0]
            ob->reader_pos++;
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	895b      	ldrh	r3, [r3, #10]
 8012b6e:	3301      	adds	r3, #1
 8012b70:	b29a      	uxth	r2, r3
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	815a      	strh	r2, [r3, #10]
            array++;
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	3301      	adds	r3, #1
 8012b7a:	60bb      	str	r3, [r7, #8]
            read++;
 8012b7c:	8afb      	ldrh	r3, [r7, #22]
 8012b7e:	3301      	adds	r3, #1
 8012b80:	82fb      	strh	r3, [r7, #22]
        while((ob->reader_pos < ob->writer_pos) && (read < size))
 8012b82:	e7df      	b.n	8012b44 <_Z19prot3buff_readBytesP11prot3buff_tPht+0x18>
        }
    }
    else
    {
        uint16_t available = ob->writer_pos - ob->reader_pos;
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	891a      	ldrh	r2, [r3, #8]
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	895b      	ldrh	r3, [r3, #10]
 8012b8c:	1ad3      	subs	r3, r2, r3
 8012b8e:	82bb      	strh	r3, [r7, #20]

        read = (available < size) ? available : size;
 8012b90:	8aba      	ldrh	r2, [r7, #20]
 8012b92:	88fb      	ldrh	r3, [r7, #6]
 8012b94:	429a      	cmp	r2, r3
 8012b96:	da01      	bge.n	8012b9c <_Z19prot3buff_readBytesP11prot3buff_tPht+0x70>
 8012b98:	8abb      	ldrh	r3, [r7, #20]
 8012b9a:	e000      	b.n	8012b9e <_Z19prot3buff_readBytesP11prot3buff_tPht+0x72>
 8012b9c:	88fb      	ldrh	r3, [r7, #6]
 8012b9e:	82fb      	strh	r3, [r7, #22]
        ob->reader_pos += read;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	895a      	ldrh	r2, [r3, #10]
 8012ba4:	8afb      	ldrh	r3, [r7, #22]
 8012ba6:	4413      	add	r3, r2
 8012ba8:	b29a      	uxth	r2, r3
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	815a      	strh	r2, [r3, #10]
    }
    return read;
 8012bae:	8afb      	ldrh	r3, [r7, #22]
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	371c      	adds	r7, #28
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bc80      	pop	{r7}
 8012bb8:	4770      	bx	lr

08012bba <_Z29prot3buff_replaceLastReadByteP11prot3buff_th>:

uint16_t prot3buff_replaceLastReadByte(prot3buff_t *ob, uint8_t byte)
{
 8012bba:	b480      	push	{r7}
 8012bbc:	b083      	sub	sp, #12
 8012bbe:	af00      	add	r7, sp, #0
 8012bc0:	6078      	str	r0, [r7, #4]
 8012bc2:	460b      	mov	r3, r1
 8012bc4:	70fb      	strb	r3, [r7, #3]
    if(ob->reader_pos >= 1)
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	895b      	ldrh	r3, [r3, #10]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	dd09      	ble.n	8012be2 <_Z29prot3buff_replaceLastReadByteP11prot3buff_th+0x28>
    {
        ob->buffer[ob->reader_pos - 1] = byte;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	685a      	ldr	r2, [r3, #4]
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	895b      	ldrh	r3, [r3, #10]
 8012bd6:	3b01      	subs	r3, #1
 8012bd8:	4413      	add	r3, r2
 8012bda:	78fa      	ldrb	r2, [r7, #3]
 8012bdc:	701a      	strb	r2, [r3, #0]
        return 1;
 8012bde:	2301      	movs	r3, #1
 8012be0:	e000      	b.n	8012be4 <_Z29prot3buff_replaceLastReadByteP11prot3buff_th+0x2a>
    }
    return 0;
 8012be2:	2300      	movs	r3, #0
}
 8012be4:	4618      	mov	r0, r3
 8012be6:	370c      	adds	r7, #12
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bc80      	pop	{r7}
 8012bec:	4770      	bx	lr

08012bee <_Z31prot3buff_replaceLastNReadBytesP11prot3buff_tPht>:

uint16_t prot3buff_replaceLastNReadBytes(prot3buff_t *ob, uint8_t *array, uint16_t size)
{
 8012bee:	b480      	push	{r7}
 8012bf0:	b087      	sub	sp, #28
 8012bf2:	af00      	add	r7, sp, #0
 8012bf4:	60f8      	str	r0, [r7, #12]
 8012bf6:	60b9      	str	r1, [r7, #8]
 8012bf8:	4613      	mov	r3, r2
 8012bfa:	80fb      	strh	r3, [r7, #6]
    uint16_t i;

    if(ob->reader_pos >= size)
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	895b      	ldrh	r3, [r3, #10]
 8012c00:	461a      	mov	r2, r3
 8012c02:	88fb      	ldrh	r3, [r7, #6]
 8012c04:	429a      	cmp	r2, r3
 8012c06:	db19      	blt.n	8012c3c <_Z31prot3buff_replaceLastNReadBytesP11prot3buff_tPht+0x4e>
    {
        for(i = ob->reader_pos - size; i < ob->reader_pos; i++)
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	895a      	ldrh	r2, [r3, #10]
 8012c0c:	88fb      	ldrh	r3, [r7, #6]
 8012c0e:	1ad3      	subs	r3, r2, r3
 8012c10:	82fb      	strh	r3, [r7, #22]
 8012c12:	8afb      	ldrh	r3, [r7, #22]
 8012c14:	68fa      	ldr	r2, [r7, #12]
 8012c16:	8952      	ldrh	r2, [r2, #10]
 8012c18:	4293      	cmp	r3, r2
 8012c1a:	da0d      	bge.n	8012c38 <_Z31prot3buff_replaceLastNReadBytesP11prot3buff_tPht+0x4a>
        {
            ob->buffer[i] = *array;
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	685a      	ldr	r2, [r3, #4]
 8012c20:	8afb      	ldrh	r3, [r7, #22]
 8012c22:	4413      	add	r3, r2
 8012c24:	68ba      	ldr	r2, [r7, #8]
 8012c26:	7812      	ldrb	r2, [r2, #0]
 8012c28:	701a      	strb	r2, [r3, #0]
            array++;
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	60bb      	str	r3, [r7, #8]
        for(i = ob->reader_pos - size; i < ob->reader_pos; i++)
 8012c30:	8afb      	ldrh	r3, [r7, #22]
 8012c32:	3301      	adds	r3, #1
 8012c34:	82fb      	strh	r3, [r7, #22]
 8012c36:	e7ec      	b.n	8012c12 <_Z31prot3buff_replaceLastNReadBytesP11prot3buff_tPht+0x24>
        }
        return 1;
 8012c38:	2301      	movs	r3, #1
 8012c3a:	e000      	b.n	8012c3e <_Z31prot3buff_replaceLastNReadBytesP11prot3buff_tPht+0x50>
    }
    return 0;
 8012c3c:	2300      	movs	r3, #0
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	371c      	adds	r7, #28
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bc80      	pop	{r7}
 8012c46:	4770      	bx	lr

08012c48 <_Z15rfm22bands_initv>:
void rfm2bands_send_power_spi(uint8_t power);                                   //power is RFM22_TX_POWER_xx_DBM constant

/**PUBLIC FUNCTIONS**/
/*---------------------------------------------------------------------------*/
void rfm22bands_init()
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
    uint8_t abs_channel = rfm22callbacks_get_channel();
 8012c4e:	f002 fab4 	bl	80151ba <_Z26rfm22callbacks_get_channelv>
 8012c52:	4603      	mov	r3, r0
 8012c54:	71fb      	strb	r3, [r7, #7]
    uint8_t power = rfm22callbacks_get_power();
 8012c56:	f002 fac1 	bl	80151dc <_Z24rfm22callbacks_get_powerv>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	71bb      	strb	r3, [r7, #6]

    //channel validation
    if(!rfm22bands_validate_abs_channel(abs_channel))
 8012c5e:	79fb      	ldrb	r3, [r7, #7]
 8012c60:	4618      	mov	r0, r3
 8012c62:	f000 f8f8 	bl	8012e56 <_Z31rfm22bands_validate_abs_channelh>
 8012c66:	4603      	mov	r3, r0
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	bf0c      	ite	eq
 8012c6c:	2301      	moveq	r3, #1
 8012c6e:	2300      	movne	r3, #0
 8012c70:	b2db      	uxtb	r3, r3
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d005      	beq.n	8012c82 <_Z15rfm22bands_initv+0x3a>
    {
        abs_channel = RFM22BANDS_DEFAULT_CHANNEL;
 8012c76:	2331      	movs	r3, #49	; 0x31
 8012c78:	71fb      	strb	r3, [r7, #7]
        rfm22callbacks_set_channel(abs_channel);
 8012c7a:	79fb      	ldrb	r3, [r7, #7]
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f002 fa92 	bl	80151a6 <_Z26rfm22callbacks_set_channelh>
    }

    //power validation
    if(!rfm22bands_validate_power(power))
 8012c82:	79bb      	ldrb	r3, [r7, #6]
 8012c84:	4618      	mov	r0, r3
 8012c86:	f000 f8f6 	bl	8012e76 <_Z25rfm22bands_validate_powerh>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	bf0c      	ite	eq
 8012c90:	2301      	moveq	r3, #1
 8012c92:	2300      	movne	r3, #0
 8012c94:	b2db      	uxtb	r3, r3
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d005      	beq.n	8012ca6 <_Z15rfm22bands_initv+0x5e>
    {
        power = RFM22BANDS_DEFAULT_POWER;
 8012c9a:	2306      	movs	r3, #6
 8012c9c:	71bb      	strb	r3, [r7, #6]
        rfm22callbacks_set_power(power);
 8012c9e:	79bb      	ldrb	r3, [r7, #6]
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f002 fa91 	bl	80151c8 <_Z24rfm22callbacks_set_powerh>
    }

    rfm22bands_update_profile(1);
 8012ca6:	2001      	movs	r0, #1
 8012ca8:	f000 f829 	bl	8012cfe <_Z25rfm22bands_update_profileh>
    rfm2bands_send_power_spi(power);
 8012cac:	79bb      	ldrb	r3, [r7, #6]
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f000 f97e 	bl	8012fb0 <_Z24rfm2bands_send_power_spih>
    rfm22bands_set_abs_channel_carrier_frequency(abs_channel);
 8012cb4:	79fb      	ldrb	r3, [r7, #7]
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f000 f8ed 	bl	8012e96 <_Z44rfm22bands_set_abs_channel_carrier_frequencyh>
}
 8012cbc:	bf00      	nop
 8012cbe:	3708      	adds	r7, #8
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd80      	pop	{r7, pc}

08012cc4 <_Z37rfm22bands_update_profile_for_channelhs>:
/**PRIVATE FUNCTIONS**/

//main profile updaterers
/*---------------------------------------------------------------------------*/
void rfm22bands_update_profile_for_channel(uint8_t force_full_loading, int16_t channel)
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b08a      	sub	sp, #40	; 0x28
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	4603      	mov	r3, r0
 8012ccc:	460a      	mov	r2, r1
 8012cce:	71fb      	strb	r3, [r7, #7]
 8012cd0:	4613      	mov	r3, r2
 8012cd2:	80bb      	strh	r3, [r7, #4]
    uint8_t load = force_full_loading;
 8012cd4:	79fb      	ldrb	r3, [r7, #7]
 8012cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    //channel == -1 means channel has been set in pernament memory and have to be read by callback
//    uint8_t new_channel = (channel == -1) ? rfm22callbacks_get_channel() : channel;
    rfm22profiles_regs_t regs;

    //when force_full_loading==0 profile is loaded only if necessary
    if(load)
 8012cda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d009      	beq.n	8012cf6 <_Z37rfm22bands_update_profile_for_channelhs+0x32>
    {
        rfm22bands_fill_profile_regs(&regs);
 8012ce2:	f107 030c 	add.w	r3, r7, #12
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f000 f818 	bl	8012d1c <_Z28rfm22bands_fill_profile_regsP20rfm22profiles_regs_t>
        rfm22bands_send_profile_regs_spi(&regs);
 8012cec:	f107 030c 	add.w	r3, r7, #12
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f000 f81e 	bl	8012d32 <_Z32rfm22bands_send_profile_regs_spiPK20rfm22profiles_regs_t>
    }
}
 8012cf6:	bf00      	nop
 8012cf8:	3728      	adds	r7, #40	; 0x28
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}

08012cfe <_Z25rfm22bands_update_profileh>:

/*---------------------------------------------------------------------------*/
void rfm22bands_update_profile(uint8_t force_full_loading)
{
 8012cfe:	b580      	push	{r7, lr}
 8012d00:	b082      	sub	sp, #8
 8012d02:	af00      	add	r7, sp, #0
 8012d04:	4603      	mov	r3, r0
 8012d06:	71fb      	strb	r3, [r7, #7]
    rfm22bands_update_profile_for_channel(force_full_loading, -1);
 8012d08:	79fb      	ldrb	r3, [r7, #7]
 8012d0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f7ff ffd8 	bl	8012cc4 <_Z37rfm22bands_update_profile_for_channelhs>
}
 8012d14:	bf00      	nop
 8012d16:	3708      	adds	r7, #8
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}

08012d1c <_Z28rfm22bands_fill_profile_regsP20rfm22profiles_regs_t>:

//helpers for rfm22bands_update_profile()
/*---------------------------------------------------------------------------*/
void rfm22bands_fill_profile_regs(rfm22profiles_regs_t *regs)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
    rfm22profiles_fill_standard_profile(regs);
 8012d24:	6878      	ldr	r0, [r7, #4]
 8012d26:	f002 fbb1 	bl	801548c <_Z35rfm22profiles_fill_standard_profileP20rfm22profiles_regs_t>
}
 8012d2a:	bf00      	nop
 8012d2c:	3708      	adds	r7, #8
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd80      	pop	{r7, pc}

08012d32 <_Z32rfm22bands_send_profile_regs_spiPK20rfm22profiles_regs_t>:

/*---------------------------------------------------------------------------*/
void rfm22bands_send_profile_regs_spi(const rfm22profiles_regs_t *regs)
{
 8012d32:	b580      	push	{r7, lr}
 8012d34:	b082      	sub	sp, #8
 8012d36:	af00      	add	r7, sp, #0
 8012d38:	6078      	str	r0, [r7, #4]
    //carrier freqency
    rfm22ports_trans_write(RFM22_ADDR_FREQUENCY_BAND_SELECT, regs->reg75);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	781b      	ldrb	r3, [r3, #0]
 8012d3e:	4619      	mov	r1, r3
 8012d40:	20f5      	movs	r0, #245	; 0xf5
 8012d42:	f002 fb35 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_NOMINAL_CARRIER_FREQ_1, regs->reg76);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	785b      	ldrb	r3, [r3, #1]
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	20f6      	movs	r0, #246	; 0xf6
 8012d4e:	f002 fb2f 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_NOMINAL_CARRIER_FREQ_0, regs->reg77);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	789b      	ldrb	r3, [r3, #2]
 8012d56:	4619      	mov	r1, r3
 8012d58:	20f7      	movs	r0, #247	; 0xf7
 8012d5a:	f002 fb29 	bl	80153b0 <_Z16rfm22ports_transhh>

    //tx data rate
    rfm22ports_trans_write(RFM22_ADDR_TX_DATARATE1, regs->reg6E);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	78db      	ldrb	r3, [r3, #3]
 8012d62:	4619      	mov	r1, r3
 8012d64:	20ee      	movs	r0, #238	; 0xee
 8012d66:	f002 fb23 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_TX_DATARATE0, regs->reg6F);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	791b      	ldrb	r3, [r3, #4]
 8012d6e:	4619      	mov	r1, r3
 8012d70:	20ef      	movs	r0, #239	; 0xef
 8012d72:	f002 fb1d 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_MODULATION_MODE_CONTROL_1, regs->reg70);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	795b      	ldrb	r3, [r3, #5]
 8012d7a:	4619      	mov	r1, r3
 8012d7c:	20f0      	movs	r0, #240	; 0xf0
 8012d7e:	f002 fb17 	bl	80153b0 <_Z16rfm22ports_transhh>

    //tx frequency deviation
    rfm22ports_trans_write(RFM22_ADDR_FREQUENCY_DEVIATION, regs->reg72);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	79db      	ldrb	r3, [r3, #7]
 8012d86:	4619      	mov	r1, r3
 8012d88:	20f2      	movs	r0, #242	; 0xf2
 8012d8a:	f002 fb11 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_MODULATION_MODE_CONTROL_2, regs->reg71);
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	7a1b      	ldrb	r3, [r3, #8]
 8012d92:	4619      	mov	r1, r3
 8012d94:	20f1      	movs	r0, #241	; 0xf1
 8012d96:	f002 fb0b 	bl	80153b0 <_Z16rfm22ports_transhh>

    //rx (G)FSK and OOK
    rfm22ports_trans_write(RFM22_ADDR_IF_FILTER_BANDWIDTH, regs->reg1C);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	7a5b      	ldrb	r3, [r3, #9]
 8012d9e:	4619      	mov	r1, r3
 8012da0:	209c      	movs	r0, #156	; 0x9c
 8012da2:	f002 fb05 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_CLOCK_RECOV_OVERSAM_RATIO, regs->reg20);
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	7a9b      	ldrb	r3, [r3, #10]
 8012daa:	4619      	mov	r1, r3
 8012dac:	20a0      	movs	r0, #160	; 0xa0
 8012dae:	f002 faff 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_CLOCK_RECOV_OFFSET_2, regs->reg21);
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	7adb      	ldrb	r3, [r3, #11]
 8012db6:	4619      	mov	r1, r3
 8012db8:	20a1      	movs	r0, #161	; 0xa1
 8012dba:	f002 faf9 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_CLOCK_RECOV_OFFSET_1, regs->reg22);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	7b1b      	ldrb	r3, [r3, #12]
 8012dc2:	4619      	mov	r1, r3
 8012dc4:	20a2      	movs	r0, #162	; 0xa2
 8012dc6:	f002 faf3 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_CLOCK_RECOV_OFFSET_0, regs->reg23);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	7b5b      	ldrb	r3, [r3, #13]
 8012dce:	4619      	mov	r1, r3
 8012dd0:	20a3      	movs	r0, #163	; 0xa3
 8012dd2:	f002 faed 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_CLOCK_RECOV_TIMING_LOOP_1, regs->reg24);
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	7b9b      	ldrb	r3, [r3, #14]
 8012dda:	4619      	mov	r1, r3
 8012ddc:	20a4      	movs	r0, #164	; 0xa4
 8012dde:	f002 fae7 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_CLOCK_RECOV_TIMING_LOOP_0, regs->reg25);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	7bdb      	ldrb	r3, [r3, #15]
 8012de6:	4619      	mov	r1, r3
 8012de8:	20a5      	movs	r0, #165	; 0xa5
 8012dea:	f002 fae1 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_CLOCK_RECOV_GEARSHIFT_OVERR, regs->reg1F);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	7c1b      	ldrb	r3, [r3, #16]
 8012df2:	4619      	mov	r1, r3
 8012df4:	209f      	movs	r0, #159	; 0x9f
 8012df6:	f002 fadb 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_AGC_OVERRIDE_1, regs->reg69);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	7c5b      	ldrb	r3, [r3, #17]
 8012dfe:	4619      	mov	r1, r3
 8012e00:	20e9      	movs	r0, #233	; 0xe9
 8012e02:	f002 fad5 	bl	80153b0 <_Z16rfm22ports_transhh>

    //rx (G)FSK
    rfm22ports_trans_write(RFM22_ADDR_AFC_LOOP_GEARSHIFT_OVERR, regs->reg1D);
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	7c9b      	ldrb	r3, [r3, #18]
 8012e0a:	4619      	mov	r1, r3
 8012e0c:	209d      	movs	r0, #157	; 0x9d
 8012e0e:	f002 facf 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_AFC_TIMING_CONTROL, regs->reg1E);
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	7cdb      	ldrb	r3, [r3, #19]
 8012e16:	4619      	mov	r1, r3
 8012e18:	209e      	movs	r0, #158	; 0x9e
 8012e1a:	f002 fac9 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_AFC_LIMITER, regs->reg2A);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	7d1b      	ldrb	r3, [r3, #20]
 8012e22:	4619      	mov	r1, r3
 8012e24:	20aa      	movs	r0, #170	; 0xaa
 8012e26:	f002 fac3 	bl	80153b0 <_Z16rfm22ports_transhh>

    //rx OOK
    rfm22ports_trans_write(RFM22_ADDR_OOK_COUNTER_VALUE_1, regs->reg2C);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	7d5b      	ldrb	r3, [r3, #21]
 8012e2e:	4619      	mov	r1, r3
 8012e30:	20ac      	movs	r0, #172	; 0xac
 8012e32:	f002 fabd 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_OOK_COUNTER_VALUE_2, regs->reg2D);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	7d9b      	ldrb	r3, [r3, #22]
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	20ad      	movs	r0, #173	; 0xad
 8012e3e:	f002 fab7 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_SLICER_PEAK_HOLD, regs->reg2E);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	7ddb      	ldrb	r3, [r3, #23]
 8012e46:	4619      	mov	r1, r3
 8012e48:	20ae      	movs	r0, #174	; 0xae
 8012e4a:	f002 fab1 	bl	80153b0 <_Z16rfm22ports_transhh>
}
 8012e4e:	bf00      	nop
 8012e50:	3708      	adds	r7, #8
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}

08012e56 <_Z31rfm22bands_validate_abs_channelh>:

/*---------------------------------------------------------------------------*/
uint8_t rfm22bands_validate_abs_channel(uint8_t channel)
{
 8012e56:	b480      	push	{r7}
 8012e58:	b083      	sub	sp, #12
 8012e5a:	af00      	add	r7, sp, #0
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	71fb      	strb	r3, [r7, #7]
    return (RFM22BANDS_FIRST_ABSOLUTE_CHANNEL <= channel) && (channel <= RFM22BANDS_LAST_ABSOLUTE_CHANNEL);
 8012e60:	79fb      	ldrb	r3, [r7, #7]
 8012e62:	2b42      	cmp	r3, #66	; 0x42
 8012e64:	bf94      	ite	ls
 8012e66:	2301      	movls	r3, #1
 8012e68:	2300      	movhi	r3, #0
 8012e6a:	b2db      	uxtb	r3, r3
}
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	370c      	adds	r7, #12
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bc80      	pop	{r7}
 8012e74:	4770      	bx	lr

08012e76 <_Z25rfm22bands_validate_powerh>:
    return (RFM22BANDS_FIRST_DEVELOPER_CHANNEL <= channel) && (channel <= RFM22BANDS_LAST_DEVELOPER_CHANNEL);
}

/*---------------------------------------------------------------------------*/
uint8_t rfm22bands_validate_power(uint8_t power)
{
 8012e76:	b480      	push	{r7}
 8012e78:	b083      	sub	sp, #12
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	71fb      	strb	r3, [r7, #7]
    return (RFM22_TX_POWER_1_DBM <= power) && (power <= RFM22_TX_POWER_20_DBM);
 8012e80:	79fb      	ldrb	r3, [r7, #7]
 8012e82:	2b07      	cmp	r3, #7
 8012e84:	bfd4      	ite	le
 8012e86:	2301      	movle	r3, #1
 8012e88:	2300      	movgt	r3, #0
 8012e8a:	b2db      	uxtb	r3, r3
}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	370c      	adds	r7, #12
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bc80      	pop	{r7}
 8012e94:	4770      	bx	lr

08012e96 <_Z44rfm22bands_set_abs_channel_carrier_frequencyh>:

//main channel carrier frequency setter
/*---------------------------------------------------------------------------*/
void rfm22bands_set_abs_channel_carrier_frequency(uint8_t abs_channel)
{
 8012e96:	b580      	push	{r7, lr}
 8012e98:	b084      	sub	sp, #16
 8012e9a:	af00      	add	r7, sp, #0
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	71fb      	strb	r3, [r7, #7]
    uint32_t frequency;
    uint16_t regs;

    if (rfm22bands_validate_abs_channel(abs_channel))
 8012ea0:	79fb      	ldrb	r3, [r7, #7]
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f7ff ffd7 	bl	8012e56 <_Z31rfm22bands_validate_abs_channelh>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	bf14      	ite	ne
 8012eae:	2301      	movne	r3, #1
 8012eb0:	2300      	moveq	r3, #0
 8012eb2:	b2db      	uxtb	r3, r3
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d00d      	beq.n	8012ed4 <_Z44rfm22bands_set_abs_channel_carrier_frequencyh+0x3e>
    {
        frequency = rfm22bands_frequency_of_abs_channel(abs_channel);
 8012eb8:	79fb      	ldrb	r3, [r7, #7]
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f000 f83a 	bl	8012f34 <_Z35rfm22bands_frequency_of_abs_channelh>
 8012ec0:	60f8      	str	r0, [r7, #12]
        regs = rfm22bands_freq2regs(frequency);
 8012ec2:	68f8      	ldr	r0, [r7, #12]
 8012ec4:	f000 f80a 	bl	8012edc <_Z20rfm22bands_freq2regsm>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	817b      	strh	r3, [r7, #10]
        rfm22bands_send_freq_spi(regs);
 8012ecc:	897b      	ldrh	r3, [r7, #10]
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f000 f818 	bl	8012f04 <_Z24rfm22bands_send_freq_spit>
    }
}
 8012ed4:	bf00      	nop
 8012ed6:	3710      	adds	r7, #16
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}

08012edc <_Z20rfm22bands_freq2regsm>:

//center frequency selection
/*---------------------------------------------------------------------------*/
uint16_t rfm22bands_freq2regs(uint32_t freq)
{
 8012edc:	b480      	push	{r7}
 8012ede:	b085      	sub	sp, #20
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
    //arg. "freq" - center freq. (increment over 860MHz only) in Hz
    //center frequency cannot exceed 870MHz. It means "freq" can't exceed 10 mln
    //freq should be multiplicity of 625Hz

    uint16_t fc = (uint16_t) (freq * 2UL / 625UL);           //division by 312,5Hz
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	005b      	lsls	r3, r3, #1
 8012ee8:	4a05      	ldr	r2, [pc, #20]	; (8012f00 <_Z20rfm22bands_freq2regsm+0x24>)
 8012eea:	fba2 2303 	umull	r2, r3, r2, r3
 8012eee:	0a5b      	lsrs	r3, r3, #9
 8012ef0:	81fb      	strh	r3, [r7, #14]

    return fc;
 8012ef2:	89fb      	ldrh	r3, [r7, #14]
}
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	3714      	adds	r7, #20
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bc80      	pop	{r7}
 8012efc:	4770      	bx	lr
 8012efe:	bf00      	nop
 8012f00:	d1b71759 	.word	0xd1b71759

08012f04 <_Z24rfm22bands_send_freq_spit>:

/*---------------------------------------------------------------------------*/
void rfm22bands_send_freq_spi(uint16_t fc_regs)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b084      	sub	sp, #16
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	80fb      	strh	r3, [r7, #6]
    uint8_t frequencyMSB = (fc_regs >> 8);
 8012f0e:	88fb      	ldrh	r3, [r7, #6]
 8012f10:	121b      	asrs	r3, r3, #8
 8012f12:	73fb      	strb	r3, [r7, #15]
    uint8_t frequencyLSB = (fc_regs & 0xFF);
 8012f14:	88fb      	ldrh	r3, [r7, #6]
 8012f16:	73bb      	strb	r3, [r7, #14]

    rfm22ports_trans_write(RFM22_ADDR_NOMINAL_CARRIER_FREQ_1, frequencyMSB);
 8012f18:	7bfb      	ldrb	r3, [r7, #15]
 8012f1a:	4619      	mov	r1, r3
 8012f1c:	20f6      	movs	r0, #246	; 0xf6
 8012f1e:	f002 fa47 	bl	80153b0 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_NOMINAL_CARRIER_FREQ_0, frequencyLSB);
 8012f22:	7bbb      	ldrb	r3, [r7, #14]
 8012f24:	4619      	mov	r1, r3
 8012f26:	20f7      	movs	r0, #247	; 0xf7
 8012f28:	f002 fa42 	bl	80153b0 <_Z16rfm22ports_transhh>
}
 8012f2c:	bf00      	nop
 8012f2e:	3710      	adds	r7, #16
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}

08012f34 <_Z35rfm22bands_frequency_of_abs_channelh>:

//channel->frequency conversion
/*---------------------------------------------------------------------------*/
uint32_t rfm22bands_frequency_of_abs_channel(uint8_t abs_channel)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b084      	sub	sp, #16
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	71fb      	strb	r3, [r7, #7]
    uint32_t frequency = RFM22BANDS_25mW_BAND1_FIRST_CHANNEL_FREQ;
 8012f3e:	4b19      	ldr	r3, [pc, #100]	; (8012fa4 <_Z35rfm22bands_frequency_of_abs_channelh+0x70>)
 8012f40:	60fb      	str	r3, [r7, #12]

    if (rfm22bands_validate_abs_channel(abs_channel))
 8012f42:	79fb      	ldrb	r3, [r7, #7]
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7ff ff86 	bl	8012e56 <_Z31rfm22bands_validate_abs_channelh>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	bf14      	ite	ne
 8012f50:	2301      	movne	r3, #1
 8012f52:	2300      	moveq	r3, #0
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d01f      	beq.n	8012f9a <_Z35rfm22bands_frequency_of_abs_channelh+0x66>
    {
        if ((RFM22BANDS_25mW_BAND1_FIRST_CHANNEL <= abs_channel) && (abs_channel <= RFM22BANDS_25mW_BAND1_LAST_CHANNEL))
 8012f5a:	79fb      	ldrb	r3, [r7, #7]
 8012f5c:	2b3f      	cmp	r3, #63	; 0x3f
 8012f5e:	d809      	bhi.n	8012f74 <_Z35rfm22bands_frequency_of_abs_channelh+0x40>
        {
            frequency = RFM22BANDS_25mW_BAND1_FIRST_CHANNEL_FREQ;
 8012f60:	4b10      	ldr	r3, [pc, #64]	; (8012fa4 <_Z35rfm22bands_frequency_of_abs_channelh+0x70>)
 8012f62:	60fb      	str	r3, [r7, #12]
            frequency += (abs_channel - RFM22BANDS_25mW_BAND1_FIRST_CHANNEL) * RFM22BANDS_25mW_BANDS_1_2_CH_SPACING;
 8012f64:	79fb      	ldrb	r3, [r7, #7]
 8012f66:	4a10      	ldr	r2, [pc, #64]	; (8012fa8 <_Z35rfm22bands_frequency_of_abs_channelh+0x74>)
 8012f68:	fb02 f303 	mul.w	r3, r2, r3
 8012f6c:	68fa      	ldr	r2, [r7, #12]
 8012f6e:	4413      	add	r3, r2
 8012f70:	60fb      	str	r3, [r7, #12]
 8012f72:	e012      	b.n	8012f9a <_Z35rfm22bands_frequency_of_abs_channelh+0x66>
        }
        else if ((RFM22BANDS_25mW_BAND2_FIRST_CHANNEL <= abs_channel) && (abs_channel <= RFM22BANDS_25mW_BAND2_LAST_CHANNEL))
 8012f74:	79fb      	ldrb	r3, [r7, #7]
 8012f76:	2b3f      	cmp	r3, #63	; 0x3f
 8012f78:	d90f      	bls.n	8012f9a <_Z35rfm22bands_frequency_of_abs_channelh+0x66>
 8012f7a:	79fb      	ldrb	r3, [r7, #7]
 8012f7c:	2b42      	cmp	r3, #66	; 0x42
 8012f7e:	d80c      	bhi.n	8012f9a <_Z35rfm22bands_frequency_of_abs_channelh+0x66>
        {
            frequency = RFM22BANDS_25mW_BAND2_FIRST_CHANNEL_FREQ;
 8012f80:	4b0a      	ldr	r3, [pc, #40]	; (8012fac <_Z35rfm22bands_frequency_of_abs_channelh+0x78>)
 8012f82:	60fb      	str	r3, [r7, #12]
            frequency += (abs_channel - RFM22BANDS_25mW_BAND2_FIRST_CHANNEL) * RFM22BANDS_25mW_BANDS_1_2_CH_SPACING;
 8012f84:	79fb      	ldrb	r3, [r7, #7]
 8012f86:	4a08      	ldr	r2, [pc, #32]	; (8012fa8 <_Z35rfm22bands_frequency_of_abs_channelh+0x74>)
 8012f88:	fb02 f203 	mul.w	r2, r2, r3
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	4413      	add	r3, r2
 8012f90:	f5a3 03c3 	sub.w	r3, r3, #6389760	; 0x618000
 8012f94:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
 8012f98:	60fb      	str	r3, [r7, #12]
        }
    }

    return frequency;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
}
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	3710      	adds	r7, #16
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}
 8012fa4:	002e8a10 	.word	0x002e8a10
 8012fa8:	000186a0 	.word	0x000186a0
 8012fac:	0094c5f0 	.word	0x0094c5f0

08012fb0 <_Z24rfm2bands_send_power_spih>:
    return power;
}

/*---------------------------------------------------------------------------*/
void rfm2bands_send_power_spi(uint8_t power)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b082      	sub	sp, #8
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	71fb      	strb	r3, [r7, #7]
    if (rfm22bands_validate_power(power))
 8012fba:	79fb      	ldrb	r3, [r7, #7]
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7ff ff5a 	bl	8012e76 <_Z25rfm22bands_validate_powerh>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	bf14      	ite	ne
 8012fc8:	2301      	movne	r3, #1
 8012fca:	2300      	moveq	r3, #0
 8012fcc:	b2db      	uxtb	r3, r3
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d007      	beq.n	8012fe2 <_Z24rfm2bands_send_power_spih+0x32>
    {
        rfm22ports_trans_write(RFM22_ADDR_TX_POWER, RFM22_TX_POWER_LNA_SW | power);
 8012fd2:	79fb      	ldrb	r3, [r7, #7]
 8012fd4:	f043 0308 	orr.w	r3, r3, #8
 8012fd8:	b2db      	uxtb	r3, r3
 8012fda:	4619      	mov	r1, r3
 8012fdc:	20ed      	movs	r0, #237	; 0xed
 8012fde:	f002 f9e7 	bl	80153b0 <_Z16rfm22ports_transhh>
    }
}
 8012fe2:	bf00      	nop
 8012fe4:	3708      	adds	r7, #8
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bd80      	pop	{r7, pc}

08012fea <_Z22rfm22driver_trans_readh>:

//do drivera wtp3
void rfm22driver_clear_fifo();

uint8_t rfm22driver_trans_read(uint8_t address)
{
 8012fea:	b580      	push	{r7, lr}
 8012fec:	b082      	sub	sp, #8
 8012fee:	af00      	add	r7, sp, #0
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	71fb      	strb	r3, [r7, #7]
    return rfm22ports_trans(RFM22_READ_FLAG | address, 0);
 8012ff4:	79fb      	ldrb	r3, [r7, #7]
 8012ff6:	2100      	movs	r1, #0
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f002 f9d9 	bl	80153b0 <_Z16rfm22ports_transhh>
 8012ffe:	4603      	mov	r3, r0
}
 8013000:	4618      	mov	r0, r3
 8013002:	3708      	adds	r7, #8
 8013004:	46bd      	mov	sp, r7
 8013006:	bd80      	pop	{r7, pc}

08013008 <_Z23rfm22driver_trans_writehh>:

void rfm22driver_trans_write(uint8_t address, uint8_t value)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b082      	sub	sp, #8
 801300c:	af00      	add	r7, sp, #0
 801300e:	4603      	mov	r3, r0
 8013010:	460a      	mov	r2, r1
 8013012:	71fb      	strb	r3, [r7, #7]
 8013014:	4613      	mov	r3, r2
 8013016:	71bb      	strb	r3, [r7, #6]
    rfm22ports_trans(RFM22_WRITE_FLAG | (address), value);
 8013018:	79fb      	ldrb	r3, [r7, #7]
 801301a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801301e:	b2db      	uxtb	r3, r3
 8013020:	79ba      	ldrb	r2, [r7, #6]
 8013022:	4611      	mov	r1, r2
 8013024:	4618      	mov	r0, r3
 8013026:	f002 f9c3 	bl	80153b0 <_Z16rfm22ports_transhh>
}
 801302a:	bf00      	nop
 801302c:	3708      	adds	r7, #8
 801302e:	46bd      	mov	sp, r7
 8013030:	bd80      	pop	{r7, pc}

08013032 <_Z22rfm22driver_burst_readhhPh>:

void rfm22driver_burst_read(uint8_t address, uint8_t length, uint8_t *values)
{
 8013032:	b580      	push	{r7, lr}
 8013034:	b082      	sub	sp, #8
 8013036:	af00      	add	r7, sp, #0
 8013038:	4603      	mov	r3, r0
 801303a:	603a      	str	r2, [r7, #0]
 801303c:	71fb      	strb	r3, [r7, #7]
 801303e:	460b      	mov	r3, r1
 8013040:	71bb      	strb	r3, [r7, #6]
    rfm22ports_burst(RFM22_READ_FLAG | (address), length, values);
 8013042:	79b9      	ldrb	r1, [r7, #6]
 8013044:	79fb      	ldrb	r3, [r7, #7]
 8013046:	683a      	ldr	r2, [r7, #0]
 8013048:	4618      	mov	r0, r3
 801304a:	f002 f9e1 	bl	8015410 <_Z16rfm22ports_bursthhPh>
}
 801304e:	bf00      	nop
 8013050:	3708      	adds	r7, #8
 8013052:	46bd      	mov	sp, r7
 8013054:	bd80      	pop	{r7, pc}

08013056 <_Z23rfm22driver_burst_writehhPh>:

void rfm22driver_burst_write(uint8_t address, uint8_t length, uint8_t *values)
{
 8013056:	b580      	push	{r7, lr}
 8013058:	b082      	sub	sp, #8
 801305a:	af00      	add	r7, sp, #0
 801305c:	4603      	mov	r3, r0
 801305e:	603a      	str	r2, [r7, #0]
 8013060:	71fb      	strb	r3, [r7, #7]
 8013062:	460b      	mov	r3, r1
 8013064:	71bb      	strb	r3, [r7, #6]
    rfm22ports_burst(RFM22_WRITE_FLAG | (address), length, values);
 8013066:	79fb      	ldrb	r3, [r7, #7]
 8013068:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801306c:	b2db      	uxtb	r3, r3
 801306e:	79b9      	ldrb	r1, [r7, #6]
 8013070:	683a      	ldr	r2, [r7, #0]
 8013072:	4618      	mov	r0, r3
 8013074:	f002 f9cc 	bl	8015410 <_Z16rfm22ports_bursthhPh>
}
 8013078:	bf00      	nop
 801307a:	3708      	adds	r7, #8
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}

08013080 <_Z16rfm22driver_inith>:

//setup spi i modulu rfm22
void rfm22driver_init(uint8_t long_delay)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b082      	sub	sp, #8
 8013084:	af00      	add	r7, sp, #0
 8013086:	4603      	mov	r3, r0
 8013088:	71fb      	strb	r3, [r7, #7]
    //uC setup
    rfm22ports_initVccPort();
 801308a:	f002 f901 	bl	8015290 <_Z22rfm22ports_initVccPortv>
    rfm22ports_initSDNPort();
 801308e:	f002 f90f 	bl	80152b0 <_Z22rfm22ports_initSDNPortv>
    rfm22ports_initIntPort();
 8013092:	f002 f8cf 	bl	8015234 <_Z22rfm22ports_initIntPortv>
    //rfm22ports_activateInt();

    //rfm22 reset
    rfm22driver_reset_on();
 8013096:	f000 f814 	bl	80130c2 <_Z20rfm22driver_reset_onv>
    rfm22callbacks_delay_ms(32);
 801309a:	2020      	movs	r0, #32
 801309c:	f002 f8a5 	bl	80151ea <_Z23rfm22callbacks_delay_mst>

    //uC setup
    rfm22ports_initSPI();
 80130a0:	f002 f94a 	bl	8015338 <_Z18rfm22ports_initSPIv>
    rfm22ports_activateInt();
 80130a4:	f002 f8bc 	bl	8015220 <_Z22rfm22ports_activateIntv>

    //rfm22 init
    //POR 16ms
    rfm22driver_reset_off();
 80130a8:	f000 f830 	bl	801310c <_Z21rfm22driver_reset_offv>
    rfm22callbacks_delay_ms(32);
 80130ac:	2020      	movs	r0, #32
 80130ae:	f002 f89c 	bl	80151ea <_Z23rfm22callbacks_delay_mst>
    rfm22driver_module_setup();
 80130b2:	f000 f842 	bl	801313a <_Z24rfm22driver_module_setupv>

    //frequency & channel init
    rfm22bands_init();
 80130b6:	f7ff fdc7 	bl	8012c48 <_Z15rfm22bands_initv>
}
 80130ba:	bf00      	nop
 80130bc:	3708      	adds	r7, #8
 80130be:	46bd      	mov	sp, r7
 80130c0:	bd80      	pop	{r7, pc}

080130c2 <_Z20rfm22driver_reset_onv>:

void rfm22driver_reset_on()
{
 80130c2:	b580      	push	{r7, lr}
 80130c4:	af00      	add	r7, sp, #0
    switch(rfm22ports_getResetMethod())
 80130c6:	f002 f92f 	bl	8015328 <_Z25rfm22ports_getResetMethodv>
 80130ca:	4603      	mov	r3, r0
 80130cc:	2b02      	cmp	r3, #2
 80130ce:	d004      	beq.n	80130da <_Z20rfm22driver_reset_onv+0x18>
 80130d0:	2b03      	cmp	r3, #3
 80130d2:	d012      	beq.n	80130fa <_Z20rfm22driver_reset_onv+0x38>
 80130d4:	2b01      	cmp	r3, #1
 80130d6:	d009      	beq.n	80130ec <_Z20rfm22driver_reset_onv+0x2a>
        case RFM22PORTS_RESET_SOFT:
            rfm22ports_setVcc(0);
            rfm22ports_setSDN(0);
            break;
    }
}
 80130d8:	e016      	b.n	8013108 <_Z20rfm22driver_reset_onv+0x46>
            rfm22ports_setSDN(0);
 80130da:	2000      	movs	r0, #0
 80130dc:	f002 f90e 	bl	80152fc <_Z17rfm22ports_setSDNh>
            rfm22ports_deinitSPI();
 80130e0:	f002 f95c 	bl	801539c <_Z20rfm22ports_deinitSPIv>
            rfm22ports_setVcc(1);
 80130e4:	2001      	movs	r0, #1
 80130e6:	f002 f8d9 	bl	801529c <_Z17rfm22ports_setVcch>
            break;
 80130ea:	e00d      	b.n	8013108 <_Z20rfm22driver_reset_onv+0x46>
            rfm22ports_setVcc(0);
 80130ec:	2000      	movs	r0, #0
 80130ee:	f002 f8d5 	bl	801529c <_Z17rfm22ports_setVcch>
            rfm22ports_setSDN(1);
 80130f2:	2001      	movs	r0, #1
 80130f4:	f002 f902 	bl	80152fc <_Z17rfm22ports_setSDNh>
            break;
 80130f8:	e006      	b.n	8013108 <_Z20rfm22driver_reset_onv+0x46>
            rfm22ports_setVcc(0);
 80130fa:	2000      	movs	r0, #0
 80130fc:	f002 f8ce 	bl	801529c <_Z17rfm22ports_setVcch>
            rfm22ports_setSDN(0);
 8013100:	2000      	movs	r0, #0
 8013102:	f002 f8fb 	bl	80152fc <_Z17rfm22ports_setSDNh>
            break;
 8013106:	bf00      	nop
}
 8013108:	bf00      	nop
 801310a:	bd80      	pop	{r7, pc}

0801310c <_Z21rfm22driver_reset_offv>:

void rfm22driver_reset_off()
{
 801310c:	b580      	push	{r7, lr}
 801310e:	af00      	add	r7, sp, #0
    switch(rfm22ports_getResetMethod())
 8013110:	f002 f90a 	bl	8015328 <_Z25rfm22ports_getResetMethodv>
 8013114:	4603      	mov	r3, r0
 8013116:	2b02      	cmp	r3, #2
 8013118:	d004      	beq.n	8013124 <_Z21rfm22driver_reset_offv+0x18>
 801311a:	2b03      	cmp	r3, #3
 801311c:	d00a      	beq.n	8013134 <_Z21rfm22driver_reset_offv+0x28>
 801311e:	2b01      	cmp	r3, #1
 8013120:	d004      	beq.n	801312c <_Z21rfm22driver_reset_offv+0x20>
            rfm22ports_setSDN(0);
            break;
        case RFM22PORTS_RESET_SOFT:
            break;
    }
}
 8013122:	e008      	b.n	8013136 <_Z21rfm22driver_reset_offv+0x2a>
            rfm22ports_setVcc(0);
 8013124:	2000      	movs	r0, #0
 8013126:	f002 f8b9 	bl	801529c <_Z17rfm22ports_setVcch>
            break;
 801312a:	e004      	b.n	8013136 <_Z21rfm22driver_reset_offv+0x2a>
            rfm22ports_setSDN(0);
 801312c:	2000      	movs	r0, #0
 801312e:	f002 f8e5 	bl	80152fc <_Z17rfm22ports_setSDNh>
            break;
 8013132:	e000      	b.n	8013136 <_Z21rfm22driver_reset_offv+0x2a>
            break;
 8013134:	bf00      	nop
}
 8013136:	bf00      	nop
 8013138:	bd80      	pop	{r7, pc}

0801313a <_Z24rfm22driver_module_setupv>:

void rfm22driver_module_setup()
{
 801313a:	b580      	push	{r7, lr}
 801313c:	af00      	add	r7, sp, #0
    rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, 0b10000000);
 801313e:	2180      	movs	r1, #128	; 0x80
 8013140:	2007      	movs	r0, #7
 8013142:	f7ff ff61 	bl	8013008 <_Z23rfm22driver_trans_writehh>
    rfm22callbacks_delay_ms(3);
 8013146:	2003      	movs	r0, #3
 8013148:	f002 f84f 	bl	80151ea <_Z23rfm22callbacks_delay_mst>

    //standby
    rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, 0x00);
 801314c:	2100      	movs	r1, #0
 801314e:	2007      	movs	r0, #7
 8013150:	f7ff ff5a 	bl	8013008 <_Z23rfm22driver_trans_writehh>

    rfm22driver_trans_read(RFM22_ADDR_INTERRUPT_STATUS_1);
 8013154:	2003      	movs	r0, #3
 8013156:	f7ff ff48 	bl	8012fea <_Z22rfm22driver_trans_readh>
    rfm22driver_trans_read(RFM22_ADDR_INTERRUPT_STATUS_2);
 801315a:	2004      	movs	r0, #4
 801315c:	f7ff ff45 	bl	8012fea <_Z22rfm22driver_trans_readh>

    //interrupt enable
    rfm22driver_trans_write(RFM22_ADDR_INTERRUPT_ENABLE_1, 0);
 8013160:	2100      	movs	r1, #0
 8013162:	2005      	movs	r0, #5
 8013164:	f7ff ff50 	bl	8013008 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_INTERRUPT_ENABLE_2, 0);
 8013168:	2100      	movs	r1, #0
 801316a:	2006      	movs	r0, #6
 801316c:	f7ff ff4c 	bl	8013008 <_Z23rfm22driver_trans_writehh>

    //gpio
    rfm22driver_trans_write(RFM22_ADDR_GPIO_0_CONFIG, 0b11110010);
 8013170:	21f2      	movs	r1, #242	; 0xf2
 8013172:	200b      	movs	r0, #11
 8013174:	f7ff ff48 	bl	8013008 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_GPIO_1_CONFIG, 0b11110101);
 8013178:	21f5      	movs	r1, #245	; 0xf5
 801317a:	200c      	movs	r0, #12
 801317c:	f7ff ff44 	bl	8013008 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_GPIO_2_CONFIG, 0b00100011);
 8013180:	2123      	movs	r1, #35	; 0x23
 8013182:	200d      	movs	r0, #13
 8013184:	f7ff ff40 	bl	8013008 <_Z23rfm22driver_trans_writehh>
    //rfm22driver_trans_write(RFM22_ADDR_CLOCK_RECOV_TIMING_LOOP_0, 0x06);
    //rfm22driver_trans_write(RFM22_ADDR_AFC_LIMITER, 0x1E);

    //packet format
    //rfm22driver_trans_write(RFM22_ADDR_MODULATION_MODE_CONTROL_1, 0x20);
    rfm22driver_trans_write(RFM22_ADDR_DATA_ACCESS_CONTROL, 0x00);
 8013188:	2100      	movs	r1, #0
 801318a:	2030      	movs	r0, #48	; 0x30
 801318c:	f7ff ff3c 	bl	8013008 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_HEADER_CONTROL_1, 0x00);
 8013190:	2100      	movs	r1, #0
 8013192:	2032      	movs	r0, #50	; 0x32
 8013194:	f7ff ff38 	bl	8013008 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_HEADER_CONTROL_2, 0x02);
 8013198:	2102      	movs	r1, #2
 801319a:	2033      	movs	r0, #51	; 0x33
 801319c:	f7ff ff34 	bl	8013008 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_PREAMBLE_LENGTH, 0x0A);
 80131a0:	210a      	movs	r1, #10
 80131a2:	2034      	movs	r0, #52	; 0x34
 80131a4:	f7ff ff30 	bl	8013008 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_SYNC_WORD_3, 0x89);
 80131a8:	2189      	movs	r1, #137	; 0x89
 80131aa:	2036      	movs	r0, #54	; 0x36
 80131ac:	f7ff ff2c 	bl	8013008 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_SYNC_WORD_2, 0x6B);
 80131b0:	216b      	movs	r1, #107	; 0x6b
 80131b2:	2037      	movs	r0, #55	; 0x37
 80131b4:	f7ff ff28 	bl	8013008 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_TRANSMIT_PACKET_LENGTH, 0xFF);
 80131b8:	21ff      	movs	r1, #255	; 0xff
 80131ba:	203e      	movs	r0, #62	; 0x3e
 80131bc:	f7ff ff24 	bl	8013008 <_Z23rfm22driver_trans_writehh>
    //rfm22driver_trans_write(RFM22_ADDR_TX_POWER, (RFM22_TX_POWER_LNA_SW | RFM22_TX_POWER_14_DBM));
    //rfm22driver_trans_write(RFM22_ADDR_FREQUENCY_DEVIATION, 0x38);
    //rfm22driver_trans_write(RFM22_ADDR_MODULATION_MODE_CONTROL_2, 0x23);

    //rssi
    rfm22driver_trans_write(RFM22_ADDR_RSSI_THRESHOLD, RFM22DRIVER_RSSI_THRESHOLD);
 80131c0:	2141      	movs	r1, #65	; 0x41
 80131c2:	2027      	movs	r0, #39	; 0x27
 80131c4:	f7ff ff20 	bl	8013008 <_Z23rfm22driver_trans_writehh>

    //almost-empty, almost-full thresholds
    rfm22driver_trans_write(RFM22_ADDR_TX_FIFO_CONTROL_2, RFM22FRAME_TX_ALMOST_EMPTY_THRESHOLD);
 80131c8:	211f      	movs	r1, #31
 80131ca:	207d      	movs	r0, #125	; 0x7d
 80131cc:	f7ff ff1c 	bl	8013008 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_RX_FIFO_CONTROL, RFM22FRAME_RX_ALMOST_FULL_THRESHOLD);
 80131d0:	2120      	movs	r1, #32
 80131d2:	207e      	movs	r0, #126	; 0x7e
 80131d4:	f7ff ff18 	bl	8013008 <_Z23rfm22driver_trans_writehh>

    //standby
    //rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, 0x00);
}
 80131d8:	bf00      	nop
 80131da:	bd80      	pop	{r7, pc}

080131dc <_Z22rfm22driver_clear_fifov>:
    }
}
#endif

void rfm22driver_clear_fifo()
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	af00      	add	r7, sp, #0
    rfm22driver_trans_write(RFM22_ADDR_OPERATING_2, RFM22DRIVER_OP2_RX_FIFO_CLEAR | RFM22DRIVER_OP2_TX_FIFO_CLEAR);
 80131e0:	2103      	movs	r1, #3
 80131e2:	2008      	movs	r0, #8
 80131e4:	f7ff ff10 	bl	8013008 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_OPERATING_2, 0x00);
 80131e8:	2100      	movs	r1, #0
 80131ea:	2008      	movs	r0, #8
 80131ec:	f7ff ff0c 	bl	8013008 <_Z23rfm22driver_trans_writehh>
}
 80131f0:	bf00      	nop
 80131f2:	bd80      	pop	{r7, pc}

080131f4 <_Z28rfm22driver_interrupt_enablehh>:

void rfm22driver_interrupt_enable(uint8_t enable1, uint8_t enable2)
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b082      	sub	sp, #8
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	4603      	mov	r3, r0
 80131fc:	460a      	mov	r2, r1
 80131fe:	71fb      	strb	r3, [r7, #7]
 8013200:	4613      	mov	r3, r2
 8013202:	71bb      	strb	r3, [r7, #6]
    rfm22driver_trans_write(RFM22_ADDR_INTERRUPT_ENABLE_1, enable1);
 8013204:	79fb      	ldrb	r3, [r7, #7]
 8013206:	4619      	mov	r1, r3
 8013208:	2005      	movs	r0, #5
 801320a:	f7ff fefd 	bl	8013008 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_INTERRUPT_ENABLE_2, enable2);
 801320e:	79bb      	ldrb	r3, [r7, #6]
 8013210:	4619      	mov	r1, r3
 8013212:	2006      	movs	r0, #6
 8013214:	f7ff fef8 	bl	8013008 <_Z23rfm22driver_trans_writehh>
}
 8013218:	bf00      	nop
 801321a:	3708      	adds	r7, #8
 801321c:	46bd      	mov	sp, r7
 801321e:	bd80      	pop	{r7, pc}

08013220 <_Z15rfm22frame_inithPFtvEt>:

void rfm22frame_isr_tx();
void rfm22frame_isr_rx();

void rfm22frame_init(uint8_t long_delay, uint16_t (*package_size_getter)(), uint16_t package_size_threshold)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b082      	sub	sp, #8
 8013224:	af00      	add	r7, sp, #0
 8013226:	4603      	mov	r3, r0
 8013228:	6039      	str	r1, [r7, #0]
 801322a:	71fb      	strb	r3, [r7, #7]
 801322c:	4613      	mov	r3, r2
 801322e:	80bb      	strh	r3, [r7, #4]
    rfm22frame_state = FRS_IDLE;
 8013230:	4b11      	ldr	r3, [pc, #68]	; (8013278 <_Z15rfm22frame_inithPFtvEt+0x58>)
 8013232:	2200      	movs	r2, #0
 8013234:	701a      	strb	r2, [r3, #0]

    rfm22driver_init(long_delay);    //uC interrupt activated in rfm22driver_init()?
 8013236:	79fb      	ldrb	r3, [r7, #7]
 8013238:	4618      	mov	r0, r3
 801323a:	f7ff ff21 	bl	8013080 <_Z16rfm22driver_inith>

    prot3buff_init(&rfm22frame_tx_buff, rfm22frame_tx_buff_array, dim(rfm22frame_tx_buff_array));
 801323e:	22aa      	movs	r2, #170	; 0xaa
 8013240:	490e      	ldr	r1, [pc, #56]	; (801327c <_Z15rfm22frame_inithPFtvEt+0x5c>)
 8013242:	480f      	ldr	r0, [pc, #60]	; (8013280 <_Z15rfm22frame_inithPFtvEt+0x60>)
 8013244:	f7ff fb69 	bl	801291a <_Z14prot3buff_initP11prot3buff_tPht>
    prot3buff_init(&rfm22frame_rx_buff, rfm22frame_rx_buff_array, dim(rfm22frame_rx_buff_array));
 8013248:	22aa      	movs	r2, #170	; 0xaa
 801324a:	490e      	ldr	r1, [pc, #56]	; (8013284 <_Z15rfm22frame_inithPFtvEt+0x64>)
 801324c:	480e      	ldr	r0, [pc, #56]	; (8013288 <_Z15rfm22frame_inithPFtvEt+0x68>)
 801324e:	f7ff fb64 	bl	801291a <_Z14prot3buff_initP11prot3buff_tPht>
    rfm22frame_preamble_len = PREAMBLE_LEN_DEFAULT;
 8013252:	4b0e      	ldr	r3, [pc, #56]	; (801328c <_Z15rfm22frame_inithPFtvEt+0x6c>)
 8013254:	2205      	movs	r2, #5
 8013256:	801a      	strh	r2, [r3, #0]
    //error flags to be cleared?

    rfm22frame_rx_package_size_getter = package_size_getter;
 8013258:	4a0d      	ldr	r2, [pc, #52]	; (8013290 <_Z15rfm22frame_inithPFtvEt+0x70>)
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	6013      	str	r3, [r2, #0]
    rfm22frame_rx_package_size_threshold = package_size_threshold;
 801325e:	4a0d      	ldr	r2, [pc, #52]	; (8013294 <_Z15rfm22frame_inithPFtvEt+0x74>)
 8013260:	88bb      	ldrh	r3, [r7, #4]
 8013262:	8013      	strh	r3, [r2, #0]

    rfm22frame_clear_error_flags();
 8013264:	f000 f884 	bl	8013370 <_Z28rfm22frame_clear_error_flagsv>
    rfm22frame_signal_strength = 0;
 8013268:	4b0b      	ldr	r3, [pc, #44]	; (8013298 <_Z15rfm22frame_inithPFtvEt+0x78>)
 801326a:	2200      	movs	r2, #0
 801326c:	701a      	strb	r2, [r3, #0]
}
 801326e:	bf00      	nop
 8013270:	3708      	adds	r7, #8
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}
 8013276:	bf00      	nop
 8013278:	20001000 	.word	0x20001000
 801327c:	20000e9c 	.word	0x20000e9c
 8013280:	20000e90 	.word	0x20000e90
 8013284:	20000f54 	.word	0x20000f54
 8013288:	20000f48 	.word	0x20000f48
 801328c:	20000ffe 	.word	0x20000ffe
 8013290:	20001008 	.word	0x20001008
 8013294:	2000100c 	.word	0x2000100c
 8013298:	20001015 	.word	0x20001015

0801329c <_Z22rfm22frame_get_tx_buffv>:

prot3buff_t *rfm22frame_get_tx_buff()
{
 801329c:	b480      	push	{r7}
 801329e:	af00      	add	r7, sp, #0
    return &rfm22frame_tx_buff;
 80132a0:	4b02      	ldr	r3, [pc, #8]	; (80132ac <_Z22rfm22frame_get_tx_buffv+0x10>)
}
 80132a2:	4618      	mov	r0, r3
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bc80      	pop	{r7}
 80132a8:	4770      	bx	lr
 80132aa:	bf00      	nop
 80132ac:	20000e90 	.word	0x20000e90

080132b0 <_Z22rfm22frame_get_rx_buffv>:

prot3buff_t *rfm22frame_get_rx_buff()
{
 80132b0:	b480      	push	{r7}
 80132b2:	af00      	add	r7, sp, #0
    return &rfm22frame_rx_buff;
 80132b4:	4b02      	ldr	r3, [pc, #8]	; (80132c0 <_Z22rfm22frame_get_rx_buffv+0x10>)
}
 80132b6:	4618      	mov	r0, r3
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bc80      	pop	{r7}
 80132bc:	4770      	bx	lr
 80132be:	bf00      	nop
 80132c0:	20000f48 	.word	0x20000f48

080132c4 <_Z20rfm22frame_get_statev>:

rfm22frame_state_t rfm22frame_get_state()
{
 80132c4:	b480      	push	{r7}
 80132c6:	af00      	add	r7, sp, #0
    return rfm22frame_state;
 80132c8:	4b02      	ldr	r3, [pc, #8]	; (80132d4 <_Z20rfm22frame_get_statev+0x10>)
 80132ca:	781b      	ldrb	r3, [r3, #0]
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bc80      	pop	{r7}
 80132d2:	4770      	bx	lr
 80132d4:	20001000 	.word	0x20001000

080132d8 <_Z22rfm22frame_is_tx_errorv>:

uint8_t rfm22frame_is_tx_error()
{
 80132d8:	b480      	push	{r7}
 80132da:	af00      	add	r7, sp, #0
    return rfm22frame_tx_err_channel_occupied || rfm22frame_tx_err_no_almost_empty || rfm22frame_tx_err_underflow;
 80132dc:	4b09      	ldr	r3, [pc, #36]	; (8013304 <_Z22rfm22frame_is_tx_errorv+0x2c>)
 80132de:	781b      	ldrb	r3, [r3, #0]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d107      	bne.n	80132f4 <_Z22rfm22frame_is_tx_errorv+0x1c>
 80132e4:	4b08      	ldr	r3, [pc, #32]	; (8013308 <_Z22rfm22frame_is_tx_errorv+0x30>)
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d103      	bne.n	80132f4 <_Z22rfm22frame_is_tx_errorv+0x1c>
 80132ec:	4b07      	ldr	r3, [pc, #28]	; (801330c <_Z22rfm22frame_is_tx_errorv+0x34>)
 80132ee:	781b      	ldrb	r3, [r3, #0]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d001      	beq.n	80132f8 <_Z22rfm22frame_is_tx_errorv+0x20>
 80132f4:	2301      	movs	r3, #1
 80132f6:	e000      	b.n	80132fa <_Z22rfm22frame_is_tx_errorv+0x22>
 80132f8:	2300      	movs	r3, #0
}
 80132fa:	4618      	mov	r0, r3
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bc80      	pop	{r7}
 8013300:	4770      	bx	lr
 8013302:	bf00      	nop
 8013304:	20001004 	.word	0x20001004
 8013308:	20001003 	.word	0x20001003
 801330c:	20001002 	.word	0x20001002

08013310 <_Z22rfm22frame_is_rx_errorv>:

uint8_t rfm22frame_is_rx_error()
{
 8013310:	b480      	push	{r7}
 8013312:	af00      	add	r7, sp, #0
    return rfm22frame_rx_err_no_almost_full || rfm22frame_rx_err_no_sync || rfm22frame_rx_err_overflow;
 8013314:	4b09      	ldr	r3, [pc, #36]	; (801333c <_Z22rfm22frame_is_rx_errorv+0x2c>)
 8013316:	781b      	ldrb	r3, [r3, #0]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d107      	bne.n	801332c <_Z22rfm22frame_is_rx_errorv+0x1c>
 801331c:	4b08      	ldr	r3, [pc, #32]	; (8013340 <_Z22rfm22frame_is_rx_errorv+0x30>)
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d103      	bne.n	801332c <_Z22rfm22frame_is_rx_errorv+0x1c>
 8013324:	4b07      	ldr	r3, [pc, #28]	; (8013344 <_Z22rfm22frame_is_rx_errorv+0x34>)
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d001      	beq.n	8013330 <_Z22rfm22frame_is_rx_errorv+0x20>
 801332c:	2301      	movs	r3, #1
 801332e:	e000      	b.n	8013332 <_Z22rfm22frame_is_rx_errorv+0x22>
 8013330:	2300      	movs	r3, #0
}
 8013332:	4618      	mov	r0, r3
 8013334:	46bd      	mov	sp, r7
 8013336:	bc80      	pop	{r7}
 8013338:	4770      	bx	lr
 801333a:	bf00      	nop
 801333c:	20001012 	.word	0x20001012
 8013340:	20001010 	.word	0x20001010
 8013344:	20001011 	.word	0x20001011

08013348 <_Z31rfm22frame_is_rx_callback_errorv>:

uint8_t rfm22frame_is_rx_callback_error()
{
 8013348:	b480      	push	{r7}
 801334a:	af00      	add	r7, sp, #0
    return rfm22frame_rx_callback_err_size;
 801334c:	4b02      	ldr	r3, [pc, #8]	; (8013358 <_Z31rfm22frame_is_rx_callback_errorv+0x10>)
 801334e:	781b      	ldrb	r3, [r3, #0]
}
 8013350:	4618      	mov	r0, r3
 8013352:	46bd      	mov	sp, r7
 8013354:	bc80      	pop	{r7}
 8013356:	4770      	bx	lr
 8013358:	20001013 	.word	0x20001013

0801335c <_Z27rfm22frame_is_general_errorv>:

uint8_t rfm22frame_is_general_error()
{
 801335c:	b480      	push	{r7}
 801335e:	af00      	add	r7, sp, #0
    return rfm22frame_general_err_blowout;
 8013360:	4b02      	ldr	r3, [pc, #8]	; (801336c <_Z27rfm22frame_is_general_errorv+0x10>)
 8013362:	781b      	ldrb	r3, [r3, #0]
}
 8013364:	4618      	mov	r0, r3
 8013366:	46bd      	mov	sp, r7
 8013368:	bc80      	pop	{r7}
 801336a:	4770      	bx	lr
 801336c:	20001014 	.word	0x20001014

08013370 <_Z28rfm22frame_clear_error_flagsv>:

void rfm22frame_clear_error_flags()
{
 8013370:	b580      	push	{r7, lr}
 8013372:	af00      	add	r7, sp, #0
    rfm22frame_clear_tx_error_flags();
 8013374:	f000 f808 	bl	8013388 <_Z31rfm22frame_clear_tx_error_flagsv>
    rfm22frame_clear_rx_error_flags();
 8013378:	f000 f81c 	bl	80133b4 <_Z31rfm22frame_clear_rx_error_flagsv>
    rfm22frame_clear_rx_callback_error_flags();
 801337c:	f000 f830 	bl	80133e0 <_Z40rfm22frame_clear_rx_callback_error_flagsv>
    rfm22frame_clear_general_error_flags();
 8013380:	f000 f83a 	bl	80133f8 <_Z36rfm22frame_clear_general_error_flagsv>
}
 8013384:	bf00      	nop
 8013386:	bd80      	pop	{r7, pc}

08013388 <_Z31rfm22frame_clear_tx_error_flagsv>:

void rfm22frame_clear_tx_error_flags()
{
 8013388:	b480      	push	{r7}
 801338a:	af00      	add	r7, sp, #0
    rfm22frame_tx_err_underflow = 0;
 801338c:	4b06      	ldr	r3, [pc, #24]	; (80133a8 <_Z31rfm22frame_clear_tx_error_flagsv+0x20>)
 801338e:	2200      	movs	r2, #0
 8013390:	701a      	strb	r2, [r3, #0]
    rfm22frame_tx_err_no_almost_empty = 0;
 8013392:	4b06      	ldr	r3, [pc, #24]	; (80133ac <_Z31rfm22frame_clear_tx_error_flagsv+0x24>)
 8013394:	2200      	movs	r2, #0
 8013396:	701a      	strb	r2, [r3, #0]
    rfm22frame_tx_err_channel_occupied = 0;
 8013398:	4b05      	ldr	r3, [pc, #20]	; (80133b0 <_Z31rfm22frame_clear_tx_error_flagsv+0x28>)
 801339a:	2200      	movs	r2, #0
 801339c:	701a      	strb	r2, [r3, #0]
}
 801339e:	bf00      	nop
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bc80      	pop	{r7}
 80133a4:	4770      	bx	lr
 80133a6:	bf00      	nop
 80133a8:	20001002 	.word	0x20001002
 80133ac:	20001003 	.word	0x20001003
 80133b0:	20001004 	.word	0x20001004

080133b4 <_Z31rfm22frame_clear_rx_error_flagsv>:

void rfm22frame_clear_rx_error_flags()
{
 80133b4:	b480      	push	{r7}
 80133b6:	af00      	add	r7, sp, #0
    rfm22frame_rx_err_no_sync = 0;
 80133b8:	4b06      	ldr	r3, [pc, #24]	; (80133d4 <_Z31rfm22frame_clear_rx_error_flagsv+0x20>)
 80133ba:	2200      	movs	r2, #0
 80133bc:	701a      	strb	r2, [r3, #0]
    rfm22frame_rx_err_overflow = 0;
 80133be:	4b06      	ldr	r3, [pc, #24]	; (80133d8 <_Z31rfm22frame_clear_rx_error_flagsv+0x24>)
 80133c0:	2200      	movs	r2, #0
 80133c2:	701a      	strb	r2, [r3, #0]
    rfm22frame_rx_err_no_almost_full = 0;
 80133c4:	4b05      	ldr	r3, [pc, #20]	; (80133dc <_Z31rfm22frame_clear_rx_error_flagsv+0x28>)
 80133c6:	2200      	movs	r2, #0
 80133c8:	701a      	strb	r2, [r3, #0]
}
 80133ca:	bf00      	nop
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bc80      	pop	{r7}
 80133d0:	4770      	bx	lr
 80133d2:	bf00      	nop
 80133d4:	20001010 	.word	0x20001010
 80133d8:	20001011 	.word	0x20001011
 80133dc:	20001012 	.word	0x20001012

080133e0 <_Z40rfm22frame_clear_rx_callback_error_flagsv>:

void rfm22frame_clear_rx_callback_error_flags()
{
 80133e0:	b480      	push	{r7}
 80133e2:	af00      	add	r7, sp, #0
    rfm22frame_rx_callback_err_size = 0;
 80133e4:	4b03      	ldr	r3, [pc, #12]	; (80133f4 <_Z40rfm22frame_clear_rx_callback_error_flagsv+0x14>)
 80133e6:	2200      	movs	r2, #0
 80133e8:	701a      	strb	r2, [r3, #0]
}
 80133ea:	bf00      	nop
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bc80      	pop	{r7}
 80133f0:	4770      	bx	lr
 80133f2:	bf00      	nop
 80133f4:	20001013 	.word	0x20001013

080133f8 <_Z36rfm22frame_clear_general_error_flagsv>:

void rfm22frame_clear_general_error_flags()
{
 80133f8:	b480      	push	{r7}
 80133fa:	af00      	add	r7, sp, #0
    rfm22frame_general_err_blowout = 0;
 80133fc:	4b03      	ldr	r3, [pc, #12]	; (801340c <_Z36rfm22frame_clear_general_error_flagsv+0x14>)
 80133fe:	2200      	movs	r2, #0
 8013400:	701a      	strb	r2, [r3, #0]
}
 8013402:	bf00      	nop
 8013404:	46bd      	mov	sp, r7
 8013406:	bc80      	pop	{r7}
 8013408:	4770      	bx	lr
 801340a:	bf00      	nop
 801340c:	20001014 	.word	0x20001014

08013410 <_Z19rfm22frame_start_txv>:
{
    return rfm22frame_signal_strength;
}

void rfm22frame_start_tx()
{
 8013410:	b580      	push	{r7, lr}
 8013412:	b082      	sub	sp, #8
 8013414:	af00      	add	r7, sp, #0
    uint8_t put_bytes = 0;
 8013416:	2300      	movs	r3, #0
 8013418:	71bb      	strb	r3, [r7, #6]
    uint8_t en1;

    if((rfm22frame_state == FRS_IDLE) && (prot3buff_getReaderPos(&rfm22frame_tx_buff) == 0))
 801341a:	4b23      	ldr	r3, [pc, #140]	; (80134a8 <_Z19rfm22frame_start_txv+0x98>)
 801341c:	781b      	ldrb	r3, [r3, #0]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d107      	bne.n	8013432 <_Z19rfm22frame_start_txv+0x22>
 8013422:	4822      	ldr	r0, [pc, #136]	; (80134ac <_Z19rfm22frame_start_txv+0x9c>)
 8013424:	f7ff fa9c 	bl	8012960 <_Z22prot3buff_getReaderPosP11prot3buff_t>
 8013428:	4603      	mov	r3, r0
 801342a:	2b00      	cmp	r3, #0
 801342c:	d101      	bne.n	8013432 <_Z19rfm22frame_start_txv+0x22>
 801342e:	2301      	movs	r3, #1
 8013430:	e000      	b.n	8013434 <_Z19rfm22frame_start_txv+0x24>
 8013432:	2300      	movs	r3, #0
 8013434:	2b00      	cmp	r3, #0
 8013436:	d032      	beq.n	801349e <_Z19rfm22frame_start_txv+0x8e>
    {
        rfm22frame_clear_general_error_flags();
 8013438:	f7ff ffde 	bl	80133f8 <_Z36rfm22frame_clear_general_error_flagsv>
        rfm22frame_clear_tx_error_flags();
 801343c:	f7ff ffa4 	bl	8013388 <_Z31rfm22frame_clear_tx_error_flagsv>
        //rfm22driver_clear_fifo();
        rfm22frame_put_starting_bytes(PREAMBLE_LEN_DEFAULT);
 8013440:	2005      	movs	r0, #5
 8013442:	f000 faa5 	bl	8013990 <_Z29rfm22frame_put_starting_bytesh>
        put_bytes = PREAMBLE_LEN_DEFAULT + 2;
 8013446:	2307      	movs	r3, #7
 8013448:	71bb      	strb	r3, [r7, #6]
        rfm22frame_put_tx_bytes(put_bytes);
 801344a:	79bb      	ldrb	r3, [r7, #6]
 801344c:	4618      	mov	r0, r3
 801344e:	f000 fad7 	bl	8013a00 <_Z23rfm22frame_put_tx_bytesh>
        if(prot3buff_getBytesAvail(&rfm22frame_tx_buff) > 0)
 8013452:	4816      	ldr	r0, [pc, #88]	; (80134ac <_Z19rfm22frame_start_txv+0x9c>)
 8013454:	f7ff fb25 	bl	8012aa2 <_Z23prot3buff_getBytesAvailP11prot3buff_t>
 8013458:	4603      	mov	r3, r0
 801345a:	2b00      	cmp	r3, #0
 801345c:	bfcc      	ite	gt
 801345e:	2301      	movgt	r3, #1
 8013460:	2300      	movle	r3, #0
 8013462:	b2db      	uxtb	r3, r3
 8013464:	2b00      	cmp	r3, #0
 8013466:	d005      	beq.n	8013474 <_Z19rfm22frame_start_txv+0x64>
        {
            en1 = RFM22DRIVER_IN1_TX_FIFO_AL_EMPTY | RFM22DRIVER_IN1_PACKET_SENT;
 8013468:	2324      	movs	r3, #36	; 0x24
 801346a:	71fb      	strb	r3, [r7, #7]
            rfm22frame_tx_last_interrupt = 0;
 801346c:	4b10      	ldr	r3, [pc, #64]	; (80134b0 <_Z19rfm22frame_start_txv+0xa0>)
 801346e:	2200      	movs	r2, #0
 8013470:	701a      	strb	r2, [r3, #0]
 8013472:	e004      	b.n	801347e <_Z19rfm22frame_start_txv+0x6e>
        }
        else
        {
            en1 = RFM22DRIVER_IN1_PACKET_SENT;
 8013474:	2304      	movs	r3, #4
 8013476:	71fb      	strb	r3, [r7, #7]
            rfm22frame_tx_last_interrupt = 1;
 8013478:	4b0d      	ldr	r3, [pc, #52]	; (80134b0 <_Z19rfm22frame_start_txv+0xa0>)
 801347a:	2201      	movs	r2, #1
 801347c:	701a      	strb	r2, [r3, #0]
        }
        rfm22driver_interrupt_enable(en1, 0);
 801347e:	79fb      	ldrb	r3, [r7, #7]
 8013480:	2100      	movs	r1, #0
 8013482:	4618      	mov	r0, r3
 8013484:	f7ff feb6 	bl	80131f4 <_Z28rfm22driver_interrupt_enablehh>
        rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, RFM22DRIVER_OP1_TX_ON);
 8013488:	2108      	movs	r1, #8
 801348a:	2007      	movs	r0, #7
 801348c:	f7ff fdbc 	bl	8013008 <_Z23rfm22driver_trans_writehh>
        rfm22frame_state = FRS_TX;
 8013490:	4b05      	ldr	r3, [pc, #20]	; (80134a8 <_Z19rfm22frame_start_txv+0x98>)
 8013492:	2201      	movs	r2, #1
 8013494:	701a      	strb	r2, [r3, #0]
        wtp3drivercalls_setTimer(1, BLOW_OUT_TIMEOUT);
 8013496:	2164      	movs	r1, #100	; 0x64
 8013498:	2001      	movs	r0, #1
 801349a:	f002 f805 	bl	80154a8 <_Z24wtp3drivercalls_setTimerhm>
        //uC interrupt already on?
    }
}
 801349e:	bf00      	nop
 80134a0:	3708      	adds	r7, #8
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}
 80134a6:	bf00      	nop
 80134a8:	20001000 	.word	0x20001000
 80134ac:	20000e90 	.word	0x20000e90
 80134b0:	20001001 	.word	0x20001001

080134b4 <_Z27rfm22frame_start_rx_waitingh>:

void rfm22frame_start_rx_waiting(uint8_t low_duty_cycle_mode)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b084      	sub	sp, #16
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	4603      	mov	r3, r0
 80134bc:	71fb      	strb	r3, [r7, #7]
    //low_duty_cycle_mode not configured yet

    uint8_t op1, op2;

    if((rfm22frame_state == FRS_IDLE) && (prot3buff_getWriterPos(&rfm22frame_rx_buff) == 0))
 80134be:	4b1e      	ldr	r3, [pc, #120]	; (8013538 <_Z27rfm22frame_start_rx_waitingh+0x84>)
 80134c0:	781b      	ldrb	r3, [r3, #0]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d107      	bne.n	80134d6 <_Z27rfm22frame_start_rx_waitingh+0x22>
 80134c6:	481d      	ldr	r0, [pc, #116]	; (801353c <_Z27rfm22frame_start_rx_waitingh+0x88>)
 80134c8:	f7ff fa3f 	bl	801294a <_Z22prot3buff_getWriterPosP11prot3buff_t>
 80134cc:	4603      	mov	r3, r0
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d101      	bne.n	80134d6 <_Z27rfm22frame_start_rx_waitingh+0x22>
 80134d2:	2301      	movs	r3, #1
 80134d4:	e000      	b.n	80134d8 <_Z27rfm22frame_start_rx_waitingh+0x24>
 80134d6:	2300      	movs	r3, #0
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d028      	beq.n	801352e <_Z27rfm22frame_start_rx_waitingh+0x7a>
    {
        rfm22frame_clear_general_error_flags();
 80134dc:	f7ff ff8c 	bl	80133f8 <_Z36rfm22frame_clear_general_error_flagsv>
        rfm22frame_clear_rx_error_flags();
 80134e0:	f7ff ff68 	bl	80133b4 <_Z31rfm22frame_clear_rx_error_flagsv>
        rfm22frame_clear_rx_callback_error_flags();
 80134e4:	f7ff ff7c 	bl	80133e0 <_Z40rfm22frame_clear_rx_callback_error_flagsv>
        //rfm22driver_clear_fifo();
        rfm22frame_rx_package_size = 0;
 80134e8:	4b15      	ldr	r3, [pc, #84]	; (8013540 <_Z27rfm22frame_start_rx_waitingh+0x8c>)
 80134ea:	2200      	movs	r2, #0
 80134ec:	801a      	strh	r2, [r3, #0]
        rfm22frame_signal_strength = 0;
 80134ee:	4b15      	ldr	r3, [pc, #84]	; (8013544 <_Z27rfm22frame_start_rx_waitingh+0x90>)
 80134f0:	2200      	movs	r2, #0
 80134f2:	701a      	strb	r2, [r3, #0]
        rfm22driver_interrupt_enable(RFM22DRIVER_IN1_FIFO_FLOW | RFM22DRIVER_IN1_RX_FIFO_AL_FULL, RFM22DRIVER_IN2_SYNC_WORD_DET);
 80134f4:	2180      	movs	r1, #128	; 0x80
 80134f6:	2090      	movs	r0, #144	; 0x90
 80134f8:	f7ff fe7c 	bl	80131f4 <_Z28rfm22driver_interrupt_enablehh>
        if(low_duty_cycle_mode)
 80134fc:	79fb      	ldrb	r3, [r7, #7]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d004      	beq.n	801350c <_Z27rfm22frame_start_rx_waitingh+0x58>
        {
            op1 = 0;
 8013502:	2300      	movs	r3, #0
 8013504:	73fb      	strb	r3, [r7, #15]
            op2 = RFM22DRIVER_OP2_LOW_DUTY_MODE;
 8013506:	2304      	movs	r3, #4
 8013508:	73bb      	strb	r3, [r7, #14]
 801350a:	e003      	b.n	8013514 <_Z27rfm22frame_start_rx_waitingh+0x60>
        }
        else
        {
            op1 = RFM22DRIVER_OP1_RX_ON;
 801350c:	2304      	movs	r3, #4
 801350e:	73fb      	strb	r3, [r7, #15]
            op2 = 0;
 8013510:	2300      	movs	r3, #0
 8013512:	73bb      	strb	r3, [r7, #14]
        }
        rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, op1);
 8013514:	7bfb      	ldrb	r3, [r7, #15]
 8013516:	4619      	mov	r1, r3
 8013518:	2007      	movs	r0, #7
 801351a:	f7ff fd75 	bl	8013008 <_Z23rfm22driver_trans_writehh>
        rfm22driver_trans_write(RFM22_ADDR_OPERATING_2, op2);
 801351e:	7bbb      	ldrb	r3, [r7, #14]
 8013520:	4619      	mov	r1, r3
 8013522:	2008      	movs	r0, #8
 8013524:	f7ff fd70 	bl	8013008 <_Z23rfm22driver_trans_writehh>
        rfm22frame_state = FRS_RX_WAIT;
 8013528:	4b03      	ldr	r3, [pc, #12]	; (8013538 <_Z27rfm22frame_start_rx_waitingh+0x84>)
 801352a:	2202      	movs	r2, #2
 801352c:	701a      	strb	r2, [r3, #0]
    }
}
 801352e:	bf00      	nop
 8013530:	3710      	adds	r7, #16
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}
 8013536:	bf00      	nop
 8013538:	20001000 	.word	0x20001000
 801353c:	20000f48 	.word	0x20000f48
 8013540:	2000100e 	.word	0x2000100e
 8013544:	20001015 	.word	0x20001015

08013548 <_Z26rfm22frame_stop_rx_waitingv>:

void rfm22frame_stop_rx_waiting()
{
 8013548:	b580      	push	{r7, lr}
 801354a:	af00      	add	r7, sp, #0
    if(rfm22frame_state == FRS_RX_WAIT)
 801354c:	4b0b      	ldr	r3, [pc, #44]	; (801357c <_Z26rfm22frame_stop_rx_waitingv+0x34>)
 801354e:	781b      	ldrb	r3, [r3, #0]
 8013550:	2b02      	cmp	r3, #2
 8013552:	d110      	bne.n	8013576 <_Z26rfm22frame_stop_rx_waitingv+0x2e>
    {
        //hazardous switch to FRS_RX possible here
        rfm22frame_state = FRS_IDLE;
 8013554:	4b09      	ldr	r3, [pc, #36]	; (801357c <_Z26rfm22frame_stop_rx_waitingv+0x34>)
 8013556:	2200      	movs	r2, #0
 8013558:	701a      	strb	r2, [r3, #0]
        //hazardous isr possible with FRS_IDLE state
        //low duty mode can trigger rx, its turned off first
        rfm22driver_trans_write(RFM22_ADDR_OPERATING_2, 0);
 801355a:	2100      	movs	r1, #0
 801355c:	2008      	movs	r0, #8
 801355e:	f7ff fd53 	bl	8013008 <_Z23rfm22driver_trans_writehh>
        rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, 0);
 8013562:	2100      	movs	r1, #0
 8013564:	2007      	movs	r0, #7
 8013566:	f7ff fd4f 	bl	8013008 <_Z23rfm22driver_trans_writehh>
        rfm22driver_interrupt_enable(0, 0);
 801356a:	2100      	movs	r1, #0
 801356c:	2000      	movs	r0, #0
 801356e:	f7ff fe41 	bl	80131f4 <_Z28rfm22driver_interrupt_enablehh>
        rfm22driver_clear_fifo();
 8013572:	f7ff fe33 	bl	80131dc <_Z22rfm22driver_clear_fifov>
    }
}
 8013576:	bf00      	nop
 8013578:	bd80      	pop	{r7, pc}
 801357a:	bf00      	nop
 801357c:	20001000 	.word	0x20001000

08013580 <_Z17rfm22frame_updatev>:

void rfm22frame_update()
{
 8013580:	b580      	push	{r7, lr}
 8013582:	af00      	add	r7, sp, #0
    //blowout error detection
    switch(rfm22frame_state)
 8013584:	4b2a      	ldr	r3, [pc, #168]	; (8013630 <_Z17rfm22frame_updatev+0xb0>)
 8013586:	781b      	ldrb	r3, [r3, #0]
 8013588:	2b03      	cmp	r3, #3
 801358a:	d84f      	bhi.n	801362c <_Z17rfm22frame_updatev+0xac>
 801358c:	a201      	add	r2, pc, #4	; (adr r2, 8013594 <_Z17rfm22frame_updatev+0x14>)
 801358e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013592:	bf00      	nop
 8013594:	08013623 	.word	0x08013623
 8013598:	080135a5 	.word	0x080135a5
 801359c:	08013623 	.word	0x08013623
 80135a0:	080135e3 	.word	0x080135e3
        }
        break;

        case FRS_TX:
        {
            if(wtp3drivercalls_isTimerZero(1))
 80135a4:	2001      	movs	r0, #1
 80135a6:	f001 ff97 	bl	80154d8 <_Z27wtp3drivercalls_isTimerZeroh>
 80135aa:	4603      	mov	r3, r0
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	bf14      	ite	ne
 80135b0:	2301      	movne	r3, #1
 80135b2:	2300      	moveq	r3, #0
 80135b4:	b2db      	uxtb	r3, r3
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d035      	beq.n	8013626 <_Z17rfm22frame_updatev+0xa6>
            {
                //hazardous switch to FRS_IDLE possible here
                rfm22frame_state = FRS_IDLE;
 80135ba:	4b1d      	ldr	r3, [pc, #116]	; (8013630 <_Z17rfm22frame_updatev+0xb0>)
 80135bc:	2200      	movs	r2, #0
 80135be:	701a      	strb	r2, [r3, #0]
                //hazardous isr possible with FRS_IDLE state
                rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, 0);
 80135c0:	2100      	movs	r1, #0
 80135c2:	2007      	movs	r0, #7
 80135c4:	f7ff fd20 	bl	8013008 <_Z23rfm22driver_trans_writehh>
                rfm22driver_interrupt_enable(0, 0);
 80135c8:	2100      	movs	r1, #0
 80135ca:	2000      	movs	r0, #0
 80135cc:	f7ff fe12 	bl	80131f4 <_Z28rfm22driver_interrupt_enablehh>
                rfm22driver_clear_fifo();
 80135d0:	f7ff fe04 	bl	80131dc <_Z22rfm22driver_clear_fifov>
                rfm22frame_tx_last_interrupt = 0;
 80135d4:	4b17      	ldr	r3, [pc, #92]	; (8013634 <_Z17rfm22frame_updatev+0xb4>)
 80135d6:	2200      	movs	r2, #0
 80135d8:	701a      	strb	r2, [r3, #0]
                rfm22frame_general_err_blowout = 1;
 80135da:	4b17      	ldr	r3, [pc, #92]	; (8013638 <_Z17rfm22frame_updatev+0xb8>)
 80135dc:	2201      	movs	r2, #1
 80135de:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 80135e0:	e021      	b.n	8013626 <_Z17rfm22frame_updatev+0xa6>

        case FRS_RX:
        {
            if(wtp3drivercalls_isTimerZero(1))
 80135e2:	2001      	movs	r0, #1
 80135e4:	f001 ff78 	bl	80154d8 <_Z27wtp3drivercalls_isTimerZeroh>
 80135e8:	4603      	mov	r3, r0
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	bf14      	ite	ne
 80135ee:	2301      	movne	r3, #1
 80135f0:	2300      	moveq	r3, #0
 80135f2:	b2db      	uxtb	r3, r3
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d018      	beq.n	801362a <_Z17rfm22frame_updatev+0xaa>
            {
                //hazardous switch to FRS_IDLE possible here
                rfm22frame_state = FRS_IDLE;
 80135f8:	4b0d      	ldr	r3, [pc, #52]	; (8013630 <_Z17rfm22frame_updatev+0xb0>)
 80135fa:	2200      	movs	r2, #0
 80135fc:	701a      	strb	r2, [r3, #0]
                //hazardous isr possible with FRS_IDLE state
                //low duty mode can trigger rx, its turned off first
                rfm22driver_trans_write(RFM22_ADDR_OPERATING_2, 0);
 80135fe:	2100      	movs	r1, #0
 8013600:	2008      	movs	r0, #8
 8013602:	f7ff fd01 	bl	8013008 <_Z23rfm22driver_trans_writehh>
                rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, 0);
 8013606:	2100      	movs	r1, #0
 8013608:	2007      	movs	r0, #7
 801360a:	f7ff fcfd 	bl	8013008 <_Z23rfm22driver_trans_writehh>
                rfm22driver_interrupt_enable(0, 0);
 801360e:	2100      	movs	r1, #0
 8013610:	2000      	movs	r0, #0
 8013612:	f7ff fdef 	bl	80131f4 <_Z28rfm22driver_interrupt_enablehh>
                rfm22driver_clear_fifo();
 8013616:	f7ff fde1 	bl	80131dc <_Z22rfm22driver_clear_fifov>
                rfm22frame_general_err_blowout = 1;
 801361a:	4b07      	ldr	r3, [pc, #28]	; (8013638 <_Z17rfm22frame_updatev+0xb8>)
 801361c:	2201      	movs	r2, #1
 801361e:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 8013620:	e003      	b.n	801362a <_Z17rfm22frame_updatev+0xaa>
        break;
 8013622:	bf00      	nop
 8013624:	e002      	b.n	801362c <_Z17rfm22frame_updatev+0xac>
        break;
 8013626:	bf00      	nop
 8013628:	e000      	b.n	801362c <_Z17rfm22frame_updatev+0xac>
        break;
 801362a:	bf00      	nop
    }
}
 801362c:	bf00      	nop
 801362e:	bd80      	pop	{r7, pc}
 8013630:	20001000 	.word	0x20001000
 8013634:	20001001 	.word	0x20001001
 8013638:	20001014 	.word	0x20001014

0801363c <_Z14rfm22frame_isrv>:

void rfm22frame_isr()
{
 801363c:	b580      	push	{r7, lr}
 801363e:	af00      	add	r7, sp, #0
    switch(rfm22frame_state)
 8013640:	4b0d      	ldr	r3, [pc, #52]	; (8013678 <_Z14rfm22frame_isrv+0x3c>)
 8013642:	781b      	ldrb	r3, [r3, #0]
 8013644:	2b03      	cmp	r3, #3
 8013646:	d815      	bhi.n	8013674 <_Z14rfm22frame_isrv+0x38>
 8013648:	a201      	add	r2, pc, #4	; (adr r2, 8013650 <_Z14rfm22frame_isrv+0x14>)
 801364a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801364e:	bf00      	nop
 8013650:	08013673 	.word	0x08013673
 8013654:	08013661 	.word	0x08013661
 8013658:	08013667 	.word	0x08013667
 801365c:	0801366d 	.word	0x0801366d
        }
        break;

        case FRS_TX:
        {
            rfm22frame_isr_tx();
 8013660:	f000 f80c 	bl	801367c <_Z17rfm22frame_isr_txv>
        }
        break;
 8013664:	e006      	b.n	8013674 <_Z14rfm22frame_isrv+0x38>

        case FRS_RX_WAIT:
        {
            rfm22frame_isr_rx();
 8013666:	f000 f87b 	bl	8013760 <_Z17rfm22frame_isr_rxv>
        }
        break;
 801366a:	e003      	b.n	8013674 <_Z14rfm22frame_isrv+0x38>

        case FRS_RX:
        {
            rfm22frame_isr_rx();
 801366c:	f000 f878 	bl	8013760 <_Z17rfm22frame_isr_rxv>
        }
        break;
 8013670:	e000      	b.n	8013674 <_Z14rfm22frame_isrv+0x38>
        break;
 8013672:	bf00      	nop
    }
}
 8013674:	bf00      	nop
 8013676:	bd80      	pop	{r7, pc}
 8013678:	20001000 	.word	0x20001000

0801367c <_Z17rfm22frame_isr_txv>:

void rfm22frame_isr_tx()
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b082      	sub	sp, #8
 8013680:	af00      	add	r7, sp, #0
    uint8_t put_bytes;
    uint8_t en1;
    uint8_t status1;

    if(rfm22frame_tx_last_interrupt)
 8013682:	4b32      	ldr	r3, [pc, #200]	; (801374c <_Z17rfm22frame_isr_txv+0xd0>)
 8013684:	781b      	ldrb	r3, [r3, #0]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d010      	beq.n	80136ac <_Z17rfm22frame_isr_txv+0x30>
    {
        rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, 0);
 801368a:	2100      	movs	r1, #0
 801368c:	2007      	movs	r0, #7
 801368e:	f7ff fcbb 	bl	8013008 <_Z23rfm22driver_trans_writehh>
        rfm22driver_interrupt_enable(0, 0);                           //clears int pin
 8013692:	2100      	movs	r1, #0
 8013694:	2000      	movs	r0, #0
 8013696:	f7ff fdad 	bl	80131f4 <_Z28rfm22driver_interrupt_enablehh>
        rfm22driver_clear_fifo();
 801369a:	f7ff fd9f 	bl	80131dc <_Z22rfm22driver_clear_fifov>
        rfm22frame_tx_last_interrupt = 0;
 801369e:	4b2b      	ldr	r3, [pc, #172]	; (801374c <_Z17rfm22frame_isr_txv+0xd0>)
 80136a0:	2200      	movs	r2, #0
 80136a2:	701a      	strb	r2, [r3, #0]
        rfm22frame_state = FRS_IDLE;
 80136a4:	4b2a      	ldr	r3, [pc, #168]	; (8013750 <_Z17rfm22frame_isr_txv+0xd4>)
 80136a6:	2200      	movs	r2, #0
 80136a8:	701a      	strb	r2, [r3, #0]

            //still RFM22_ADDR_OPERATING_1 is RFM22DRIVER_OP1_TX_ON
            //still rfm22frame_state is FRS_TX
        }
    }
}
 80136aa:	e04a      	b.n	8013742 <_Z17rfm22frame_isr_txv+0xc6>
        put_bytes = RFM22FRAME_TX_ALMOST_EMPTY_THRESHOLD;
 80136ac:	231f      	movs	r3, #31
 80136ae:	71fb      	strb	r3, [r7, #7]
        rfm22frame_put_tx_bytes(put_bytes);
 80136b0:	79fb      	ldrb	r3, [r7, #7]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f000 f9a4 	bl	8013a00 <_Z23rfm22frame_put_tx_bytesh>
        status1 = rfm22driver_trans_read(RFM22_ADDR_INTERRUPT_STATUS_1);
 80136b8:	2003      	movs	r0, #3
 80136ba:	f7ff fc96 	bl	8012fea <_Z22rfm22driver_trans_readh>
 80136be:	4603      	mov	r3, r0
 80136c0:	71bb      	strb	r3, [r7, #6]
        if(status1 & RFM22DRIVER_IN1_PACKET_SENT)
 80136c2:	79bb      	ldrb	r3, [r7, #6]
 80136c4:	f003 0304 	and.w	r3, r3, #4
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d003      	beq.n	80136d4 <_Z17rfm22frame_isr_txv+0x58>
            rfm22frame_tx_err_underflow = 1;
 80136cc:	4b21      	ldr	r3, [pc, #132]	; (8013754 <_Z17rfm22frame_isr_txv+0xd8>)
 80136ce:	2201      	movs	r2, #1
 80136d0:	701a      	strb	r2, [r3, #0]
 80136d2:	e007      	b.n	80136e4 <_Z17rfm22frame_isr_txv+0x68>
        else if(!(status1 & RFM22DRIVER_IN1_TX_FIFO_AL_EMPTY))
 80136d4:	79bb      	ldrb	r3, [r7, #6]
 80136d6:	f003 0320 	and.w	r3, r3, #32
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d102      	bne.n	80136e4 <_Z17rfm22frame_isr_txv+0x68>
            rfm22frame_tx_err_no_almost_empty = 1;
 80136de:	4b1e      	ldr	r3, [pc, #120]	; (8013758 <_Z17rfm22frame_isr_txv+0xdc>)
 80136e0:	2201      	movs	r2, #1
 80136e2:	701a      	strb	r2, [r3, #0]
        if(rfm22frame_tx_err_underflow || rfm22frame_tx_err_no_almost_empty)
 80136e4:	4b1b      	ldr	r3, [pc, #108]	; (8013754 <_Z17rfm22frame_isr_txv+0xd8>)
 80136e6:	781b      	ldrb	r3, [r3, #0]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d103      	bne.n	80136f4 <_Z17rfm22frame_isr_txv+0x78>
 80136ec:	4b1a      	ldr	r3, [pc, #104]	; (8013758 <_Z17rfm22frame_isr_txv+0xdc>)
 80136ee:	781b      	ldrb	r3, [r3, #0]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d011      	beq.n	8013718 <_Z17rfm22frame_isr_txv+0x9c>
            rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, 0);
 80136f4:	2100      	movs	r1, #0
 80136f6:	2007      	movs	r0, #7
 80136f8:	f7ff fc86 	bl	8013008 <_Z23rfm22driver_trans_writehh>
            rfm22driver_interrupt_enable(0, 0);                           //clears int pin
 80136fc:	2100      	movs	r1, #0
 80136fe:	2000      	movs	r0, #0
 8013700:	f7ff fd78 	bl	80131f4 <_Z28rfm22driver_interrupt_enablehh>
            rfm22driver_clear_fifo();
 8013704:	f7ff fd6a 	bl	80131dc <_Z22rfm22driver_clear_fifov>
            rfm22frame_tx_last_interrupt = 0;
 8013708:	4b10      	ldr	r3, [pc, #64]	; (801374c <_Z17rfm22frame_isr_txv+0xd0>)
 801370a:	2200      	movs	r2, #0
 801370c:	701a      	strb	r2, [r3, #0]
            rfm22frame_state = FRS_IDLE;                                  //accidentally triggered interrupt allowed
 801370e:	4b10      	ldr	r3, [pc, #64]	; (8013750 <_Z17rfm22frame_isr_txv+0xd4>)
 8013710:	2200      	movs	r2, #0
 8013712:	701a      	strb	r2, [r3, #0]
 8013714:	bf00      	nop
}
 8013716:	e014      	b.n	8013742 <_Z17rfm22frame_isr_txv+0xc6>
            if(prot3buff_getBytesAvail(&rfm22frame_tx_buff) > 0)
 8013718:	4810      	ldr	r0, [pc, #64]	; (801375c <_Z17rfm22frame_isr_txv+0xe0>)
 801371a:	f7ff f9c2 	bl	8012aa2 <_Z23prot3buff_getBytesAvailP11prot3buff_t>
 801371e:	4603      	mov	r3, r0
 8013720:	2b00      	cmp	r3, #0
 8013722:	bfcc      	ite	gt
 8013724:	2301      	movgt	r3, #1
 8013726:	2300      	movle	r3, #0
 8013728:	b2db      	uxtb	r3, r3
 801372a:	2b00      	cmp	r3, #0
 801372c:	d109      	bne.n	8013742 <_Z17rfm22frame_isr_txv+0xc6>
                rfm22frame_tx_last_interrupt = 1;
 801372e:	4b07      	ldr	r3, [pc, #28]	; (801374c <_Z17rfm22frame_isr_txv+0xd0>)
 8013730:	2201      	movs	r2, #1
 8013732:	701a      	strb	r2, [r3, #0]
                en1 = RFM22DRIVER_IN1_PACKET_SENT;
 8013734:	2304      	movs	r3, #4
 8013736:	717b      	strb	r3, [r7, #5]
                rfm22driver_interrupt_enable(en1, 0);
 8013738:	797b      	ldrb	r3, [r7, #5]
 801373a:	2100      	movs	r1, #0
 801373c:	4618      	mov	r0, r3
 801373e:	f7ff fd59 	bl	80131f4 <_Z28rfm22driver_interrupt_enablehh>
}
 8013742:	bf00      	nop
 8013744:	3708      	adds	r7, #8
 8013746:	46bd      	mov	sp, r7
 8013748:	bd80      	pop	{r7, pc}
 801374a:	bf00      	nop
 801374c:	20001001 	.word	0x20001001
 8013750:	20001000 	.word	0x20001000
 8013754:	20001002 	.word	0x20001002
 8013758:	20001003 	.word	0x20001003
 801375c:	20000e90 	.word	0x20000e90

08013760 <_Z17rfm22frame_isr_rxv>:

void rfm22frame_isr_rx()
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b082      	sub	sp, #8
 8013764:	af00      	add	r7, sp, #0
    uint8_t first_interrupt = (rfm22frame_state == FRS_RX_WAIT);
 8013766:	4b80      	ldr	r3, [pc, #512]	; (8013968 <_Z17rfm22frame_isr_rxv+0x208>)
 8013768:	781b      	ldrb	r3, [r3, #0]
 801376a:	2b02      	cmp	r3, #2
 801376c:	bf0c      	ite	eq
 801376e:	2301      	moveq	r3, #1
 8013770:	2300      	movne	r3, #0
 8013772:	b2db      	uxtb	r3, r3
 8013774:	71fb      	strb	r3, [r7, #7]
    uint8_t status1, status2;
    uint8_t avail_bytes;

    if(first_interrupt)
 8013776:	79fb      	ldrb	r3, [r7, #7]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d04e      	beq.n	801381a <_Z17rfm22frame_isr_rxv+0xba>
    {
        status2 = rfm22driver_trans_read(RFM22_ADDR_INTERRUPT_STATUS_2);
 801377c:	2004      	movs	r0, #4
 801377e:	f7ff fc34 	bl	8012fea <_Z22rfm22driver_trans_readh>
 8013782:	4603      	mov	r3, r0
 8013784:	71bb      	strb	r3, [r7, #6]
        if(!(status2 & RFM22DRIVER_IN2_SYNC_WORD_DET))
 8013786:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801378a:	2b00      	cmp	r3, #0
 801378c:	db03      	blt.n	8013796 <_Z17rfm22frame_isr_rxv+0x36>
        {
            rfm22frame_rx_err_no_sync = 1;
 801378e:	4b77      	ldr	r3, [pc, #476]	; (801396c <_Z17rfm22frame_isr_rxv+0x20c>)
 8013790:	2201      	movs	r2, #1
 8013792:	701a      	strb	r2, [r3, #0]
 8013794:	e010      	b.n	80137b8 <_Z17rfm22frame_isr_rxv+0x58>
        }
        else
        {
            status1 = rfm22driver_trans_read(RFM22_ADDR_INTERRUPT_STATUS_1);
 8013796:	2003      	movs	r0, #3
 8013798:	f7ff fc27 	bl	8012fea <_Z22rfm22driver_trans_readh>
 801379c:	4603      	mov	r3, r0
 801379e:	717b      	strb	r3, [r7, #5]
            if((status1 & RFM22DRIVER_IN1_FIFO_FLOW) || (status1 & RFM22DRIVER_IN1_RX_FIFO_AL_FULL))
 80137a0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	db04      	blt.n	80137b2 <_Z17rfm22frame_isr_rxv+0x52>
 80137a8:	797b      	ldrb	r3, [r7, #5]
 80137aa:	f003 0310 	and.w	r3, r3, #16
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d002      	beq.n	80137b8 <_Z17rfm22frame_isr_rxv+0x58>
            {
                rfm22frame_rx_err_overflow = 1;
 80137b2:	4b6f      	ldr	r3, [pc, #444]	; (8013970 <_Z17rfm22frame_isr_rxv+0x210>)
 80137b4:	2201      	movs	r2, #1
 80137b6:	701a      	strb	r2, [r3, #0]
            }
        }

        if(rfm22frame_rx_err_no_sync || rfm22frame_rx_err_overflow)
 80137b8:	4b6c      	ldr	r3, [pc, #432]	; (801396c <_Z17rfm22frame_isr_rxv+0x20c>)
 80137ba:	781b      	ldrb	r3, [r3, #0]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d103      	bne.n	80137c8 <_Z17rfm22frame_isr_rxv+0x68>
 80137c0:	4b6b      	ldr	r3, [pc, #428]	; (8013970 <_Z17rfm22frame_isr_rxv+0x210>)
 80137c2:	781b      	ldrb	r3, [r3, #0]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d015      	beq.n	80137f4 <_Z17rfm22frame_isr_rxv+0x94>
        {
            //low duty mode can trigger rx, its turned off first
            rfm22driver_trans_write(RFM22_ADDR_OPERATING_2, 0);
 80137c8:	2100      	movs	r1, #0
 80137ca:	2008      	movs	r0, #8
 80137cc:	f7ff fc1c 	bl	8013008 <_Z23rfm22driver_trans_writehh>
            rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, 0);
 80137d0:	2100      	movs	r1, #0
 80137d2:	2007      	movs	r0, #7
 80137d4:	f7ff fc18 	bl	8013008 <_Z23rfm22driver_trans_writehh>
            rfm22driver_interrupt_enable(0, 0);                           //clears int pin
 80137d8:	2100      	movs	r1, #0
 80137da:	2000      	movs	r0, #0
 80137dc:	f7ff fd0a 	bl	80131f4 <_Z28rfm22driver_interrupt_enablehh>
            rfm22driver_clear_fifo();
 80137e0:	f7ff fcfc 	bl	80131dc <_Z22rfm22driver_clear_fifov>
            rfm22frame_signal_strength = 0;
 80137e4:	4b63      	ldr	r3, [pc, #396]	; (8013974 <_Z17rfm22frame_isr_rxv+0x214>)
 80137e6:	2200      	movs	r2, #0
 80137e8:	701a      	strb	r2, [r3, #0]
            rfm22frame_state = FRS_IDLE;                                  //accidentally triggered interrupt allowed
 80137ea:	4b5f      	ldr	r3, [pc, #380]	; (8013968 <_Z17rfm22frame_isr_rxv+0x208>)
 80137ec:	2200      	movs	r2, #0
 80137ee:	701a      	strb	r2, [r3, #0]
 80137f0:	bf00      	nop
            //still en1 == (RFM22DRIVER_IN1_FIFO_FLOW | RFM22DRIVER_IN1_RX_FIFO_AL_FULL) and en2 == 0
            //still rfm22frame_state == FRS_RX
        }
    }

}
 80137f2:	e0b4      	b.n	801395e <_Z17rfm22frame_isr_rxv+0x1fe>
            rfm22frame_signal_strength = rfm22driver_trans_read(RFM22_ADDR_RSSI);
 80137f4:	2026      	movs	r0, #38	; 0x26
 80137f6:	f7ff fbf8 	bl	8012fea <_Z22rfm22driver_trans_readh>
 80137fa:	4603      	mov	r3, r0
 80137fc:	461a      	mov	r2, r3
 80137fe:	4b5d      	ldr	r3, [pc, #372]	; (8013974 <_Z17rfm22frame_isr_rxv+0x214>)
 8013800:	701a      	strb	r2, [r3, #0]
            rfm22driver_interrupt_enable(RFM22DRIVER_IN1_FIFO_FLOW | RFM22DRIVER_IN1_RX_FIFO_AL_FULL, 0);
 8013802:	2100      	movs	r1, #0
 8013804:	2090      	movs	r0, #144	; 0x90
 8013806:	f7ff fcf5 	bl	80131f4 <_Z28rfm22driver_interrupt_enablehh>
            rfm22frame_state = FRS_RX;
 801380a:	4b57      	ldr	r3, [pc, #348]	; (8013968 <_Z17rfm22frame_isr_rxv+0x208>)
 801380c:	2203      	movs	r2, #3
 801380e:	701a      	strb	r2, [r3, #0]
            wtp3drivercalls_setTimer(1, BLOW_OUT_TIMEOUT);
 8013810:	2164      	movs	r1, #100	; 0x64
 8013812:	2001      	movs	r0, #1
 8013814:	f001 fe48 	bl	80154a8 <_Z24wtp3drivercalls_setTimerhm>
}
 8013818:	e0a1      	b.n	801395e <_Z17rfm22frame_isr_rxv+0x1fe>
        avail_bytes = RFM22FRAME_RX_ALMOST_FULL_THRESHOLD;
 801381a:	2320      	movs	r3, #32
 801381c:	713b      	strb	r3, [r7, #4]
        rfm22frame_get_rx_bytes(avail_bytes);
 801381e:	793b      	ldrb	r3, [r7, #4]
 8013820:	4618      	mov	r0, r3
 8013822:	f000 f92d 	bl	8013a80 <_Z23rfm22frame_get_rx_bytesh>
        if(rfm22frame_rx_package_size == 0)
 8013826:	4b54      	ldr	r3, [pc, #336]	; (8013978 <_Z17rfm22frame_isr_rxv+0x218>)
 8013828:	881b      	ldrh	r3, [r3, #0]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d12e      	bne.n	801388c <_Z17rfm22frame_isr_rxv+0x12c>
            if(prot3buff_getWriterPos(&rfm22frame_rx_buff) >= rfm22frame_rx_package_size_threshold)
 801382e:	4853      	ldr	r0, [pc, #332]	; (801397c <_Z17rfm22frame_isr_rxv+0x21c>)
 8013830:	f7ff f88b 	bl	801294a <_Z22prot3buff_getWriterPosP11prot3buff_t>
 8013834:	4603      	mov	r3, r0
 8013836:	461a      	mov	r2, r3
 8013838:	4b51      	ldr	r3, [pc, #324]	; (8013980 <_Z17rfm22frame_isr_rxv+0x220>)
 801383a:	881b      	ldrh	r3, [r3, #0]
 801383c:	429a      	cmp	r2, r3
 801383e:	bfac      	ite	ge
 8013840:	2301      	movge	r3, #1
 8013842:	2300      	movlt	r3, #0
 8013844:	b2db      	uxtb	r3, r3
 8013846:	2b00      	cmp	r3, #0
 8013848:	d020      	beq.n	801388c <_Z17rfm22frame_isr_rxv+0x12c>
                rfm22frame_rx_package_size = rfm22frame_rx_package_size_getter();
 801384a:	4b4e      	ldr	r3, [pc, #312]	; (8013984 <_Z17rfm22frame_isr_rxv+0x224>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	4798      	blx	r3
 8013850:	4603      	mov	r3, r0
 8013852:	461a      	mov	r2, r3
 8013854:	4b48      	ldr	r3, [pc, #288]	; (8013978 <_Z17rfm22frame_isr_rxv+0x218>)
 8013856:	801a      	strh	r2, [r3, #0]
                if(rfm22frame_rx_package_size != 0xFFFF)
 8013858:	4b47      	ldr	r3, [pc, #284]	; (8013978 <_Z17rfm22frame_isr_rxv+0x218>)
 801385a:	881b      	ldrh	r3, [r3, #0]
 801385c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013860:	4293      	cmp	r3, r2
 8013862:	d013      	beq.n	801388c <_Z17rfm22frame_isr_rxv+0x12c>
                    if(prot3buff_getWriterPos(&rfm22frame_rx_buff) > rfm22frame_rx_package_size)
 8013864:	4845      	ldr	r0, [pc, #276]	; (801397c <_Z17rfm22frame_isr_rxv+0x21c>)
 8013866:	f7ff f870 	bl	801294a <_Z22prot3buff_getWriterPosP11prot3buff_t>
 801386a:	4603      	mov	r3, r0
 801386c:	461a      	mov	r2, r3
 801386e:	4b42      	ldr	r3, [pc, #264]	; (8013978 <_Z17rfm22frame_isr_rxv+0x218>)
 8013870:	881b      	ldrh	r3, [r3, #0]
 8013872:	429a      	cmp	r2, r3
 8013874:	bfcc      	ite	gt
 8013876:	2301      	movgt	r3, #1
 8013878:	2300      	movle	r3, #0
 801387a:	b2db      	uxtb	r3, r3
 801387c:	2b00      	cmp	r3, #0
 801387e:	d005      	beq.n	801388c <_Z17rfm22frame_isr_rxv+0x12c>
                        prot3buff_setWriterToPos(&rfm22frame_rx_buff, rfm22frame_rx_package_size);
 8013880:	4b3d      	ldr	r3, [pc, #244]	; (8013978 <_Z17rfm22frame_isr_rxv+0x218>)
 8013882:	881b      	ldrh	r3, [r3, #0]
 8013884:	4619      	mov	r1, r3
 8013886:	483d      	ldr	r0, [pc, #244]	; (801397c <_Z17rfm22frame_isr_rxv+0x21c>)
 8013888:	f7ff f875 	bl	8012976 <_Z24prot3buff_setWriterToPosP11prot3buff_tt>
        status1 = rfm22driver_trans_read(RFM22_ADDR_INTERRUPT_STATUS_1);
 801388c:	2003      	movs	r0, #3
 801388e:	f7ff fbac 	bl	8012fea <_Z22rfm22driver_trans_readh>
 8013892:	4603      	mov	r3, r0
 8013894:	717b      	strb	r3, [r7, #5]
        if(status1 & RFM22DRIVER_IN1_FIFO_FLOW)
 8013896:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801389a:	2b00      	cmp	r3, #0
 801389c:	da03      	bge.n	80138a6 <_Z17rfm22frame_isr_rxv+0x146>
            rfm22frame_rx_err_overflow = 1;
 801389e:	4b34      	ldr	r3, [pc, #208]	; (8013970 <_Z17rfm22frame_isr_rxv+0x210>)
 80138a0:	2201      	movs	r2, #1
 80138a2:	701a      	strb	r2, [r3, #0]
 80138a4:	e019      	b.n	80138da <_Z17rfm22frame_isr_rxv+0x17a>
        else if(!(status1 & RFM22DRIVER_IN1_RX_FIFO_AL_FULL))
 80138a6:	797b      	ldrb	r3, [r7, #5]
 80138a8:	f003 0310 	and.w	r3, r3, #16
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d103      	bne.n	80138b8 <_Z17rfm22frame_isr_rxv+0x158>
            rfm22frame_rx_err_no_almost_full = 1;
 80138b0:	4b35      	ldr	r3, [pc, #212]	; (8013988 <_Z17rfm22frame_isr_rxv+0x228>)
 80138b2:	2201      	movs	r2, #1
 80138b4:	701a      	strb	r2, [r3, #0]
 80138b6:	e010      	b.n	80138da <_Z17rfm22frame_isr_rxv+0x17a>
        else if(rfm22frame_rx_package_size == 0xFFFF)
 80138b8:	4b2f      	ldr	r3, [pc, #188]	; (8013978 <_Z17rfm22frame_isr_rxv+0x218>)
 80138ba:	881b      	ldrh	r3, [r3, #0]
 80138bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138c0:	4293      	cmp	r3, r2
 80138c2:	d103      	bne.n	80138cc <_Z17rfm22frame_isr_rxv+0x16c>
            rfm22frame_rx_callback_err_size = 1;
 80138c4:	4b31      	ldr	r3, [pc, #196]	; (801398c <_Z17rfm22frame_isr_rxv+0x22c>)
 80138c6:	2201      	movs	r2, #1
 80138c8:	701a      	strb	r2, [r3, #0]
 80138ca:	e006      	b.n	80138da <_Z17rfm22frame_isr_rxv+0x17a>
        else if(rfm22frame_rx_package_size > BUFF_LEN)
 80138cc:	4b2a      	ldr	r3, [pc, #168]	; (8013978 <_Z17rfm22frame_isr_rxv+0x218>)
 80138ce:	881b      	ldrh	r3, [r3, #0]
 80138d0:	2baa      	cmp	r3, #170	; 0xaa
 80138d2:	dd02      	ble.n	80138da <_Z17rfm22frame_isr_rxv+0x17a>
            rfm22frame_rx_callback_err_size = 1;
 80138d4:	4b2d      	ldr	r3, [pc, #180]	; (801398c <_Z17rfm22frame_isr_rxv+0x22c>)
 80138d6:	2201      	movs	r2, #1
 80138d8:	701a      	strb	r2, [r3, #0]
        rx_error = (rfm22frame_rx_err_overflow || rfm22frame_rx_err_no_almost_full || rfm22frame_rx_callback_err_size);
 80138da:	4b25      	ldr	r3, [pc, #148]	; (8013970 <_Z17rfm22frame_isr_rxv+0x210>)
 80138dc:	781b      	ldrb	r3, [r3, #0]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d107      	bne.n	80138f2 <_Z17rfm22frame_isr_rxv+0x192>
 80138e2:	4b29      	ldr	r3, [pc, #164]	; (8013988 <_Z17rfm22frame_isr_rxv+0x228>)
 80138e4:	781b      	ldrb	r3, [r3, #0]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d103      	bne.n	80138f2 <_Z17rfm22frame_isr_rxv+0x192>
 80138ea:	4b28      	ldr	r3, [pc, #160]	; (801398c <_Z17rfm22frame_isr_rxv+0x22c>)
 80138ec:	781b      	ldrb	r3, [r3, #0]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d001      	beq.n	80138f6 <_Z17rfm22frame_isr_rxv+0x196>
 80138f2:	2301      	movs	r3, #1
 80138f4:	e000      	b.n	80138f8 <_Z17rfm22frame_isr_rxv+0x198>
 80138f6:	2300      	movs	r3, #0
 80138f8:	70fb      	strb	r3, [r7, #3]
        if(rx_error)
 80138fa:	78fb      	ldrb	r3, [r7, #3]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d002      	beq.n	8013906 <_Z17rfm22frame_isr_rxv+0x1a6>
            rfm22frame_signal_strength = 0;
 8013900:	4b1c      	ldr	r3, [pc, #112]	; (8013974 <_Z17rfm22frame_isr_rxv+0x214>)
 8013902:	2200      	movs	r2, #0
 8013904:	701a      	strb	r2, [r3, #0]
                || (prot3buff_getCapacityAvail(&rfm22frame_rx_buff) == 0))
 8013906:	78fb      	ldrb	r3, [r7, #3]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d112      	bne.n	8013932 <_Z17rfm22frame_isr_rxv+0x1d2>
        if(rx_error || ((rfm22frame_rx_package_size > 0) && (prot3buff_getWriterPos(&rfm22frame_rx_buff) >= rfm22frame_rx_package_size))
 801390c:	4b1a      	ldr	r3, [pc, #104]	; (8013978 <_Z17rfm22frame_isr_rxv+0x218>)
 801390e:	881b      	ldrh	r3, [r3, #0]
 8013910:	2b00      	cmp	r3, #0
 8013912:	dd08      	ble.n	8013926 <_Z17rfm22frame_isr_rxv+0x1c6>
 8013914:	4819      	ldr	r0, [pc, #100]	; (801397c <_Z17rfm22frame_isr_rxv+0x21c>)
 8013916:	f7ff f818 	bl	801294a <_Z22prot3buff_getWriterPosP11prot3buff_t>
 801391a:	4603      	mov	r3, r0
 801391c:	461a      	mov	r2, r3
 801391e:	4b16      	ldr	r3, [pc, #88]	; (8013978 <_Z17rfm22frame_isr_rxv+0x218>)
 8013920:	881b      	ldrh	r3, [r3, #0]
 8013922:	429a      	cmp	r2, r3
 8013924:	da05      	bge.n	8013932 <_Z17rfm22frame_isr_rxv+0x1d2>
                || (prot3buff_getCapacityAvail(&rfm22frame_rx_buff) == 0))
 8013926:	4815      	ldr	r0, [pc, #84]	; (801397c <_Z17rfm22frame_isr_rxv+0x21c>)
 8013928:	f7ff f85b 	bl	80129e2 <_Z26prot3buff_getCapacityAvailP11prot3buff_t>
 801392c:	4603      	mov	r3, r0
 801392e:	2b00      	cmp	r3, #0
 8013930:	d101      	bne.n	8013936 <_Z17rfm22frame_isr_rxv+0x1d6>
 8013932:	2301      	movs	r3, #1
 8013934:	e000      	b.n	8013938 <_Z17rfm22frame_isr_rxv+0x1d8>
 8013936:	2300      	movs	r3, #0
        if(rx_error || ((rfm22frame_rx_package_size > 0) && (prot3buff_getWriterPos(&rfm22frame_rx_buff) >= rfm22frame_rx_package_size))
 8013938:	2b00      	cmp	r3, #0
 801393a:	d010      	beq.n	801395e <_Z17rfm22frame_isr_rxv+0x1fe>
            rfm22driver_trans_write(RFM22_ADDR_OPERATING_2, 0);
 801393c:	2100      	movs	r1, #0
 801393e:	2008      	movs	r0, #8
 8013940:	f7ff fb62 	bl	8013008 <_Z23rfm22driver_trans_writehh>
            rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, 0);
 8013944:	2100      	movs	r1, #0
 8013946:	2007      	movs	r0, #7
 8013948:	f7ff fb5e 	bl	8013008 <_Z23rfm22driver_trans_writehh>
            rfm22driver_interrupt_enable(0, 0);                           //clears int pin
 801394c:	2100      	movs	r1, #0
 801394e:	2000      	movs	r0, #0
 8013950:	f7ff fc50 	bl	80131f4 <_Z28rfm22driver_interrupt_enablehh>
            rfm22driver_clear_fifo();
 8013954:	f7ff fc42 	bl	80131dc <_Z22rfm22driver_clear_fifov>
            rfm22frame_state = FRS_IDLE;                                  //accidentally triggered interrupt allowed
 8013958:	4b03      	ldr	r3, [pc, #12]	; (8013968 <_Z17rfm22frame_isr_rxv+0x208>)
 801395a:	2200      	movs	r2, #0
 801395c:	701a      	strb	r2, [r3, #0]
}
 801395e:	bf00      	nop
 8013960:	3708      	adds	r7, #8
 8013962:	46bd      	mov	sp, r7
 8013964:	bd80      	pop	{r7, pc}
 8013966:	bf00      	nop
 8013968:	20001000 	.word	0x20001000
 801396c:	20001010 	.word	0x20001010
 8013970:	20001011 	.word	0x20001011
 8013974:	20001015 	.word	0x20001015
 8013978:	2000100e 	.word	0x2000100e
 801397c:	20000f48 	.word	0x20000f48
 8013980:	2000100c 	.word	0x2000100c
 8013984:	20001008 	.word	0x20001008
 8013988:	20001012 	.word	0x20001012
 801398c:	20001013 	.word	0x20001013

08013990 <_Z29rfm22frame_put_starting_bytesh>:

void rfm22frame_put_starting_bytes(uint8_t preamble_len)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b086      	sub	sp, #24
 8013994:	af00      	add	r7, sp, #0
 8013996:	4603      	mov	r3, r0
 8013998:	71fb      	strb	r3, [r7, #7]
    uint8_t arr[10];
    uint8_t portion;
    uint8_t i;

    while(preamble_len > 0)
 801399a:	79fb      	ldrb	r3, [r7, #7]
 801399c:	2b00      	cmp	r3, #0
 801399e:	dd20      	ble.n	80139e2 <_Z29rfm22frame_put_starting_bytesh+0x52>
    {
        for(i = 0; i < 10; i++)
 80139a0:	2300      	movs	r3, #0
 80139a2:	75fb      	strb	r3, [r7, #23]
 80139a4:	7dfb      	ldrb	r3, [r7, #23]
 80139a6:	2b09      	cmp	r3, #9
 80139a8:	dc0a      	bgt.n	80139c0 <_Z29rfm22frame_put_starting_bytesh+0x30>
        {
            arr[i] = 0xAA;
 80139aa:	7dfb      	ldrb	r3, [r7, #23]
 80139ac:	f107 0218 	add.w	r2, r7, #24
 80139b0:	4413      	add	r3, r2
 80139b2:	22aa      	movs	r2, #170	; 0xaa
 80139b4:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(i = 0; i < 10; i++)
 80139b8:	7dfb      	ldrb	r3, [r7, #23]
 80139ba:	3301      	adds	r3, #1
 80139bc:	75fb      	strb	r3, [r7, #23]
 80139be:	e7f1      	b.n	80139a4 <_Z29rfm22frame_put_starting_bytesh+0x14>
        }
        portion = (preamble_len >= 10) ? 10 : preamble_len;
 80139c0:	79fb      	ldrb	r3, [r7, #7]
 80139c2:	2b0a      	cmp	r3, #10
 80139c4:	bf28      	it	cs
 80139c6:	230a      	movcs	r3, #10
 80139c8:	75bb      	strb	r3, [r7, #22]
        rfm22driver_burst_write(RFM22_ADDR_FIFO_ACCESS, portion, arr);
 80139ca:	f107 020c 	add.w	r2, r7, #12
 80139ce:	7dbb      	ldrb	r3, [r7, #22]
 80139d0:	4619      	mov	r1, r3
 80139d2:	207f      	movs	r0, #127	; 0x7f
 80139d4:	f7ff fb3f 	bl	8013056 <_Z23rfm22driver_burst_writehhPh>
        preamble_len -= portion;
 80139d8:	79fa      	ldrb	r2, [r7, #7]
 80139da:	7dbb      	ldrb	r3, [r7, #22]
 80139dc:	1ad3      	subs	r3, r2, r3
 80139de:	71fb      	strb	r3, [r7, #7]
    while(preamble_len > 0)
 80139e0:	e7db      	b.n	801399a <_Z29rfm22frame_put_starting_bytesh+0xa>
    }
    arr[0] = 0x89;
 80139e2:	2389      	movs	r3, #137	; 0x89
 80139e4:	733b      	strb	r3, [r7, #12]
    arr[1] = 0x6B;    //prawidlowe
 80139e6:	236b      	movs	r3, #107	; 0x6b
 80139e8:	737b      	strb	r3, [r7, #13]
    //arr[1] = 0x6C;      //bledne
    rfm22driver_burst_write(RFM22_ADDR_FIFO_ACCESS, 2, arr);
 80139ea:	f107 030c 	add.w	r3, r7, #12
 80139ee:	461a      	mov	r2, r3
 80139f0:	2102      	movs	r1, #2
 80139f2:	207f      	movs	r0, #127	; 0x7f
 80139f4:	f7ff fb2f 	bl	8013056 <_Z23rfm22driver_burst_writehhPh>
}
 80139f8:	bf00      	nop
 80139fa:	3718      	adds	r7, #24
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}

08013a00 <_Z23rfm22frame_put_tx_bytesh>:

void rfm22frame_put_tx_bytes(uint8_t bytes_in_fifo)
{
 8013a00:	b590      	push	{r4, r7, lr}
 8013a02:	b087      	sub	sp, #28
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	4603      	mov	r3, r0
 8013a08:	71fb      	strb	r3, [r7, #7]
    uint8_t arr[10];
    uint8_t portion;
    uint8_t fifo_free_spots = (bytes_in_fifo < FIFO_TX_MAX_LOAD) ? (FIFO_TX_MAX_LOAD - bytes_in_fifo) : 0;
 8013a0a:	79fb      	ldrb	r3, [r7, #7]
 8013a0c:	2b3d      	cmp	r3, #61	; 0x3d
 8013a0e:	dc04      	bgt.n	8013a1a <_Z23rfm22frame_put_tx_bytesh+0x1a>
 8013a10:	79fb      	ldrb	r3, [r7, #7]
 8013a12:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 8013a16:	b2db      	uxtb	r3, r3
 8013a18:	e000      	b.n	8013a1c <_Z23rfm22frame_put_tx_bytesh+0x1c>
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	75bb      	strb	r3, [r7, #22]
    uint8_t bytes_to_put = (fifo_free_spots < prot3buff_getBytesAvail(&rfm22frame_tx_buff)) ?
 8013a1e:	7dbc      	ldrb	r4, [r7, #22]
 8013a20:	4816      	ldr	r0, [pc, #88]	; (8013a7c <_Z23rfm22frame_put_tx_bytesh+0x7c>)
 8013a22:	f7ff f83e 	bl	8012aa2 <_Z23prot3buff_getBytesAvailP11prot3buff_t>
 8013a26:	4603      	mov	r3, r0
            fifo_free_spots : prot3buff_getBytesAvail(&rfm22frame_tx_buff);
 8013a28:	429c      	cmp	r4, r3
 8013a2a:	db05      	blt.n	8013a38 <_Z23rfm22frame_put_tx_bytesh+0x38>
 8013a2c:	4813      	ldr	r0, [pc, #76]	; (8013a7c <_Z23rfm22frame_put_tx_bytesh+0x7c>)
 8013a2e:	f7ff f838 	bl	8012aa2 <_Z23prot3buff_getBytesAvailP11prot3buff_t>
 8013a32:	4603      	mov	r3, r0
 8013a34:	b2db      	uxtb	r3, r3
 8013a36:	e000      	b.n	8013a3a <_Z23rfm22frame_put_tx_bytesh+0x3a>
 8013a38:	7dbb      	ldrb	r3, [r7, #22]
 8013a3a:	75fb      	strb	r3, [r7, #23]

    while(bytes_to_put > 0)
 8013a3c:	7dfb      	ldrb	r3, [r7, #23]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	dd18      	ble.n	8013a74 <_Z23rfm22frame_put_tx_bytesh+0x74>
    {
        portion = (bytes_to_put > 10) ? 10 : bytes_to_put;
 8013a42:	7dfb      	ldrb	r3, [r7, #23]
 8013a44:	2b0a      	cmp	r3, #10
 8013a46:	bf28      	it	cs
 8013a48:	230a      	movcs	r3, #10
 8013a4a:	757b      	strb	r3, [r7, #21]
        prot3buff_readBytes(&rfm22frame_tx_buff, arr, portion);
 8013a4c:	7d7b      	ldrb	r3, [r7, #21]
 8013a4e:	b29a      	uxth	r2, r3
 8013a50:	f107 0308 	add.w	r3, r7, #8
 8013a54:	4619      	mov	r1, r3
 8013a56:	4809      	ldr	r0, [pc, #36]	; (8013a7c <_Z23rfm22frame_put_tx_bytesh+0x7c>)
 8013a58:	f7ff f868 	bl	8012b2c <_Z19prot3buff_readBytesP11prot3buff_tPht>
        rfm22driver_burst_write(RFM22_ADDR_FIFO_ACCESS, portion, arr);
 8013a5c:	f107 0208 	add.w	r2, r7, #8
 8013a60:	7d7b      	ldrb	r3, [r7, #21]
 8013a62:	4619      	mov	r1, r3
 8013a64:	207f      	movs	r0, #127	; 0x7f
 8013a66:	f7ff faf6 	bl	8013056 <_Z23rfm22driver_burst_writehhPh>
        bytes_to_put -= portion;
 8013a6a:	7dfa      	ldrb	r2, [r7, #23]
 8013a6c:	7d7b      	ldrb	r3, [r7, #21]
 8013a6e:	1ad3      	subs	r3, r2, r3
 8013a70:	75fb      	strb	r3, [r7, #23]
    while(bytes_to_put > 0)
 8013a72:	e7e3      	b.n	8013a3c <_Z23rfm22frame_put_tx_bytesh+0x3c>
    }
}
 8013a74:	bf00      	nop
 8013a76:	371c      	adds	r7, #28
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd90      	pop	{r4, r7, pc}
 8013a7c:	20000e90 	.word	0x20000e90

08013a80 <_Z23rfm22frame_get_rx_bytesh>:

void rfm22frame_get_rx_bytes(uint8_t bytes_in_fifo)
{
 8013a80:	b590      	push	{r4, r7, lr}
 8013a82:	b089      	sub	sp, #36	; 0x24
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	4603      	mov	r3, r0
 8013a88:	71fb      	strb	r3, [r7, #7]
    uint8_t arr[10];
    uint8_t portion;
    uint16_t buffer_free_spots = prot3buff_getCapacityAvail(&rfm22frame_rx_buff);
 8013a8a:	4829      	ldr	r0, [pc, #164]	; (8013b30 <_Z23rfm22frame_get_rx_bytesh+0xb0>)
 8013a8c:	f7fe ffa9 	bl	80129e2 <_Z26prot3buff_getCapacityAvailP11prot3buff_t>
 8013a90:	4603      	mov	r3, r0
 8013a92:	837b      	strh	r3, [r7, #26]
    uint16_t remaining_package_bytes;
    uint8_t bytes_to_put;

    if(rfm22frame_rx_package_size > 0)
 8013a94:	4b27      	ldr	r3, [pc, #156]	; (8013b34 <_Z23rfm22frame_get_rx_bytesh+0xb4>)
 8013a96:	881b      	ldrh	r3, [r3, #0]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	dd19      	ble.n	8013ad0 <_Z23rfm22frame_get_rx_bytesh+0x50>
    {
        if(rfm22frame_rx_package_size >= prot3buff_getWriterPos(&rfm22frame_rx_buff))
 8013a9c:	4b25      	ldr	r3, [pc, #148]	; (8013b34 <_Z23rfm22frame_get_rx_bytesh+0xb4>)
 8013a9e:	881b      	ldrh	r3, [r3, #0]
 8013aa0:	461c      	mov	r4, r3
 8013aa2:	4823      	ldr	r0, [pc, #140]	; (8013b30 <_Z23rfm22frame_get_rx_bytesh+0xb0>)
 8013aa4:	f7fe ff51 	bl	801294a <_Z22prot3buff_getWriterPosP11prot3buff_t>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	429c      	cmp	r4, r3
 8013aac:	bfac      	ite	ge
 8013aae:	2301      	movge	r3, #1
 8013ab0:	2300      	movlt	r3, #0
 8013ab2:	b2db      	uxtb	r3, r3
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d008      	beq.n	8013aca <_Z23rfm22frame_get_rx_bytesh+0x4a>
        {
            remaining_package_bytes = rfm22frame_rx_package_size - prot3buff_getWriterPos(&rfm22frame_rx_buff);
 8013ab8:	4b1e      	ldr	r3, [pc, #120]	; (8013b34 <_Z23rfm22frame_get_rx_bytesh+0xb4>)
 8013aba:	881c      	ldrh	r4, [r3, #0]
 8013abc:	481c      	ldr	r0, [pc, #112]	; (8013b30 <_Z23rfm22frame_get_rx_bytesh+0xb0>)
 8013abe:	f7fe ff44 	bl	801294a <_Z22prot3buff_getWriterPosP11prot3buff_t>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	1ae3      	subs	r3, r4, r3
 8013ac6:	83fb      	strh	r3, [r7, #30]
 8013ac8:	e005      	b.n	8013ad6 <_Z23rfm22frame_get_rx_bytesh+0x56>
        }
        else
        {
            remaining_package_bytes = 0;
 8013aca:	2300      	movs	r3, #0
 8013acc:	83fb      	strh	r3, [r7, #30]
 8013ace:	e002      	b.n	8013ad6 <_Z23rfm22frame_get_rx_bytesh+0x56>
        }
    }
    else
    {
        remaining_package_bytes = 0xFFFF;
 8013ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013ad4:	83fb      	strh	r3, [r7, #30]
    }

    //portion := temporary var for min(bytes_in_fifo, buffer_free_spots)
    portion = (bytes_in_fifo < buffer_free_spots) ? bytes_in_fifo : buffer_free_spots;
 8013ad6:	8b7a      	ldrh	r2, [r7, #26]
 8013ad8:	79fb      	ldrb	r3, [r7, #7]
 8013ada:	4293      	cmp	r3, r2
 8013adc:	bfa8      	it	ge
 8013ade:	4613      	movge	r3, r2
 8013ae0:	767b      	strb	r3, [r7, #25]
    bytes_to_put = (portion < remaining_package_bytes) ? portion : remaining_package_bytes;
 8013ae2:	8bfa      	ldrh	r2, [r7, #30]
 8013ae4:	7e7b      	ldrb	r3, [r7, #25]
 8013ae6:	4293      	cmp	r3, r2
 8013ae8:	bfa8      	it	ge
 8013aea:	4613      	movge	r3, r2
 8013aec:	777b      	strb	r3, [r7, #29]

    while(bytes_to_put > 0)
 8013aee:	7f7b      	ldrb	r3, [r7, #29]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	dd18      	ble.n	8013b26 <_Z23rfm22frame_get_rx_bytesh+0xa6>
    {
        portion = (bytes_to_put > 10) ? 10 : bytes_to_put;
 8013af4:	7f7b      	ldrb	r3, [r7, #29]
 8013af6:	2b0a      	cmp	r3, #10
 8013af8:	bf28      	it	cs
 8013afa:	230a      	movcs	r3, #10
 8013afc:	767b      	strb	r3, [r7, #25]
        rfm22driver_burst_read(RFM22_ADDR_FIFO_ACCESS, portion, arr);
 8013afe:	f107 020c 	add.w	r2, r7, #12
 8013b02:	7e7b      	ldrb	r3, [r7, #25]
 8013b04:	4619      	mov	r1, r3
 8013b06:	207f      	movs	r0, #127	; 0x7f
 8013b08:	f7ff fa93 	bl	8013032 <_Z22rfm22driver_burst_readhhPh>
        prot3buff_putBytes(&rfm22frame_rx_buff, arr, portion);
 8013b0c:	7e7b      	ldrb	r3, [r7, #25]
 8013b0e:	b29a      	uxth	r2, r3
 8013b10:	f107 030c 	add.w	r3, r7, #12
 8013b14:	4619      	mov	r1, r3
 8013b16:	4806      	ldr	r0, [pc, #24]	; (8013b30 <_Z23rfm22frame_get_rx_bytesh+0xb0>)
 8013b18:	f7fe ff94 	bl	8012a44 <_Z18prot3buff_putBytesP11prot3buff_tPht>
        bytes_to_put -= portion;
 8013b1c:	7f7a      	ldrb	r2, [r7, #29]
 8013b1e:	7e7b      	ldrb	r3, [r7, #25]
 8013b20:	1ad3      	subs	r3, r2, r3
 8013b22:	777b      	strb	r3, [r7, #29]
    while(bytes_to_put > 0)
 8013b24:	e7e3      	b.n	8013aee <_Z23rfm22frame_get_rx_bytesh+0x6e>
    }
}
 8013b26:	bf00      	nop
 8013b28:	3724      	adds	r7, #36	; 0x24
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd90      	pop	{r4, r7, pc}
 8013b2e:	bf00      	nop
 8013b30:	20000f48 	.word	0x20000f48
 8013b34:	2000100e 	.word	0x2000100e

08013b38 <_Z24scrambler_get_init_valuev>:
#include "scrambler.h"


uint8_t scrambler_get_init_value()
{
 8013b38:	b480      	push	{r7}
 8013b3a:	af00      	add	r7, sp, #0
    return 0x7F;
 8013b3c:	237f      	movs	r3, #127	; 0x7f
}
 8013b3e:	4618      	mov	r0, r3
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bc80      	pop	{r7}
 8013b44:	4770      	bx	lr

08013b46 <_Z21scrambler_reset_stateP11scrambler_t>:

void scrambler_reset_state(scrambler_t *ob)
{
 8013b46:	b580      	push	{r7, lr}
 8013b48:	b082      	sub	sp, #8
 8013b4a:	af00      	add	r7, sp, #0
 8013b4c:	6078      	str	r0, [r7, #4]
    ob->state = scrambler_get_init_value();
 8013b4e:	f7ff fff3 	bl	8013b38 <_Z24scrambler_get_init_valuev>
 8013b52:	4603      	mov	r3, r0
 8013b54:	461a      	mov	r2, r3
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	701a      	strb	r2, [r3, #0]
}
 8013b5a:	bf00      	nop
 8013b5c:	3708      	adds	r7, #8
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd80      	pop	{r7, pc}

08013b62 <_Z16scrambler_updateP11scrambler_th>:

uint8_t scrambler_update(scrambler_t *ob, uint8_t byte)
{
 8013b62:	b480      	push	{r7}
 8013b64:	b085      	sub	sp, #20
 8013b66:	af00      	add	r7, sp, #0
 8013b68:	6078      	str	r0, [r7, #4]
 8013b6a:	460b      	mov	r3, r1
 8013b6c:	70fb      	strb	r3, [r7, #3]
    //right-shifting

    uint8_t mask;
    uint8_t i;

    for(i = 0; i < 8; i++)
 8013b6e:	2300      	movs	r3, #0
 8013b70:	73fb      	strb	r3, [r7, #15]
 8013b72:	7bfb      	ldrb	r3, [r7, #15]
 8013b74:	2b07      	cmp	r3, #7
 8013b76:	dc2f      	bgt.n	8013bd8 <_Z16scrambler_updateP11scrambler_th+0x76>
    {
        mask = -((ob->state ^ (ob->state >> 3) ^ byte) & 0x01);
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	781b      	ldrb	r3, [r3, #0]
 8013b7c:	b25a      	sxtb	r2, r3
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	781b      	ldrb	r3, [r3, #0]
 8013b82:	10db      	asrs	r3, r3, #3
 8013b84:	b25b      	sxtb	r3, r3
 8013b86:	4053      	eors	r3, r2
 8013b88:	b25a      	sxtb	r2, r3
 8013b8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013b8e:	4053      	eors	r3, r2
 8013b90:	b25b      	sxtb	r3, r3
 8013b92:	b2db      	uxtb	r3, r3
 8013b94:	f003 0301 	and.w	r3, r3, #1
 8013b98:	b2db      	uxtb	r3, r3
 8013b9a:	425b      	negs	r3, r3
 8013b9c:	73bb      	strb	r3, [r7, #14]
        ob->state = (ob->state >> 1) | (mask & 0x40);
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	781b      	ldrb	r3, [r3, #0]
 8013ba2:	105b      	asrs	r3, r3, #1
 8013ba4:	b25a      	sxtb	r2, r3
 8013ba6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013bae:	b25b      	sxtb	r3, r3
 8013bb0:	4313      	orrs	r3, r2
 8013bb2:	b25b      	sxtb	r3, r3
 8013bb4:	b2da      	uxtb	r2, r3
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	701a      	strb	r2, [r3, #0]
        byte = (byte >> 1) | (mask & 0x80);
 8013bba:	78fb      	ldrb	r3, [r7, #3]
 8013bbc:	105b      	asrs	r3, r3, #1
 8013bbe:	b25a      	sxtb	r2, r3
 8013bc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013bc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013bc8:	b25b      	sxtb	r3, r3
 8013bca:	4313      	orrs	r3, r2
 8013bcc:	b25b      	sxtb	r3, r3
 8013bce:	70fb      	strb	r3, [r7, #3]
    for(i = 0; i < 8; i++)
 8013bd0:	7bfb      	ldrb	r3, [r7, #15]
 8013bd2:	3301      	adds	r3, #1
 8013bd4:	73fb      	strb	r3, [r7, #15]
 8013bd6:	e7cc      	b.n	8013b72 <_Z16scrambler_updateP11scrambler_th+0x10>
    }
    return byte;
 8013bd8:	78fb      	ldrb	r3, [r7, #3]
}
 8013bda:	4618      	mov	r0, r3
 8013bdc:	3714      	adds	r7, #20
 8013bde:	46bd      	mov	sp, r7
 8013be0:	bc80      	pop	{r7}
 8013be2:	4770      	bx	lr

08013be4 <_Z18descrambler_updateP11scrambler_th>:

uint8_t descrambler_update(scrambler_t *ob, uint8_t byte)
{
 8013be4:	b480      	push	{r7}
 8013be6:	b085      	sub	sp, #20
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
 8013bec:	460b      	mov	r3, r1
 8013bee:	70fb      	strb	r3, [r7, #3]
    //right-shifting

    uint8_t mask;
    uint8_t i;

    for(i = 0; i < 8; i++)
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	73fb      	strb	r3, [r7, #15]
 8013bf4:	7bfb      	ldrb	r3, [r7, #15]
 8013bf6:	2b07      	cmp	r3, #7
 8013bf8:	dc34      	bgt.n	8013c64 <_Z18descrambler_updateP11scrambler_th+0x80>
    {
        mask = -((ob->state ^ (ob->state >> 3) ^ byte) & 0x01);
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	781b      	ldrb	r3, [r3, #0]
 8013bfe:	b25a      	sxtb	r2, r3
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	781b      	ldrb	r3, [r3, #0]
 8013c04:	10db      	asrs	r3, r3, #3
 8013c06:	b25b      	sxtb	r3, r3
 8013c08:	4053      	eors	r3, r2
 8013c0a:	b25a      	sxtb	r2, r3
 8013c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013c10:	4053      	eors	r3, r2
 8013c12:	b25b      	sxtb	r3, r3
 8013c14:	b2db      	uxtb	r3, r3
 8013c16:	f003 0301 	and.w	r3, r3, #1
 8013c1a:	b2db      	uxtb	r3, r3
 8013c1c:	425b      	negs	r3, r3
 8013c1e:	73bb      	strb	r3, [r7, #14]
        ob->state = (ob->state >> 1) | (-(byte & 0x01) & 0x40);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	781b      	ldrb	r3, [r3, #0]
 8013c24:	105b      	asrs	r3, r3, #1
 8013c26:	b25a      	sxtb	r2, r3
 8013c28:	78fb      	ldrb	r3, [r7, #3]
 8013c2a:	f003 0301 	and.w	r3, r3, #1
 8013c2e:	b2db      	uxtb	r3, r3
 8013c30:	425b      	negs	r3, r3
 8013c32:	b2db      	uxtb	r3, r3
 8013c34:	b25b      	sxtb	r3, r3
 8013c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c3a:	b25b      	sxtb	r3, r3
 8013c3c:	4313      	orrs	r3, r2
 8013c3e:	b25b      	sxtb	r3, r3
 8013c40:	b2da      	uxtb	r2, r3
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	701a      	strb	r2, [r3, #0]
        byte = (byte >> 1) | (mask & 0x80);
 8013c46:	78fb      	ldrb	r3, [r7, #3]
 8013c48:	105b      	asrs	r3, r3, #1
 8013c4a:	b25a      	sxtb	r2, r3
 8013c4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013c50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013c54:	b25b      	sxtb	r3, r3
 8013c56:	4313      	orrs	r3, r2
 8013c58:	b25b      	sxtb	r3, r3
 8013c5a:	70fb      	strb	r3, [r7, #3]
    for(i = 0; i < 8; i++)
 8013c5c:	7bfb      	ldrb	r3, [r7, #15]
 8013c5e:	3301      	adds	r3, #1
 8013c60:	73fb      	strb	r3, [r7, #15]
 8013c62:	e7c7      	b.n	8013bf4 <_Z18descrambler_updateP11scrambler_th+0x10>
    }
    return byte;
 8013c64:	78fb      	ldrb	r3, [r7, #3]
}
 8013c66:	4618      	mov	r0, r3
 8013c68:	3714      	adds	r7, #20
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bc80      	pop	{r7}
 8013c6e:	4770      	bx	lr

08013c70 <_ZN10Wtp3DriverC1Ev>:
#include "crc32_basic.h"
#include "wtp3drivercalls.h"

Wtp3Driver *Wtp3Driver::singleton = NULL;

Wtp3Driver::Wtp3Driver()
 8013c70:	b480      	push	{r7}
 8013c72:	b083      	sub	sp, #12
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
{
    if(singleton == NULL)
 8013c78:	4b06      	ldr	r3, [pc, #24]	; (8013c94 <_ZN10Wtp3DriverC1Ev+0x24>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d102      	bne.n	8013c86 <_ZN10Wtp3DriverC1Ev+0x16>
    {
        singleton = this;
 8013c80:	4a04      	ldr	r2, [pc, #16]	; (8013c94 <_ZN10Wtp3DriverC1Ev+0x24>)
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	6013      	str	r3, [r2, #0]
    }
}
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	4618      	mov	r0, r3
 8013c8a:	370c      	adds	r7, #12
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bc80      	pop	{r7}
 8013c90:	4770      	bx	lr
 8013c92:	bf00      	nop
 8013c94:	20001018 	.word	0x20001018

08013c98 <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh>:
    return result;
}

void Wtp3Driver::init(IWtp3Device *devicesArr[], uint16_t devicesArrSize, uint32_t ownAddress,
        uint16_t ownDevice, EReceiveMode receiveMode, uint8_t receivedCmdSizeMax)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b086      	sub	sp, #24
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	60b9      	str	r1, [r7, #8]
 8013ca2:	603b      	str	r3, [r7, #0]
 8013ca4:	4613      	mov	r3, r2
 8013ca6:	80fb      	strh	r3, [r7, #6]
    uint16_t i;

    rfm22frame_init(1, sizeHeaderFirstCheck, SIZE_HEADER_SIZE);
 8013ca8:	2204      	movs	r2, #4
 8013caa:	4931      	ldr	r1, [pc, #196]	; (8013d70 <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0xd8>)
 8013cac:	2001      	movs	r0, #1
 8013cae:	f7ff fab7 	bl	8013220 <_Z15rfm22frame_inithPFtvEt>
    this->rfm22frameState = rfm22frame_get_state();
 8013cb2:	f7ff fb07 	bl	80132c4 <_Z20rfm22frame_get_statev>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	461a      	mov	r2, r3
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    this->txbuf = rfm22frame_get_tx_buff();
 8013cc0:	f7ff faec 	bl	801329c <_Z22rfm22frame_get_tx_buffv>
 8013cc4:	4602      	mov	r2, r0
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	601a      	str	r2, [r3, #0]
    this->rxbuf = rfm22frame_get_rx_buff();
 8013cca:	f7ff faf1 	bl	80132b0 <_Z22rfm22frame_get_rx_buffv>
 8013cce:	4602      	mov	r2, r0
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	605a      	str	r2, [r3, #4]
    this->devicesArr = devicesArr;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	68ba      	ldr	r2, [r7, #8]
 8013cd8:	609a      	str	r2, [r3, #8]
    this->devicesArrSize = devicesArrSize;
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	88fa      	ldrh	r2, [r7, #6]
 8013cde:	819a      	strh	r2, [r3, #12]
    this->ownAddress = ownAddress;
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	683a      	ldr	r2, [r7, #0]
 8013ce4:	611a      	str	r2, [r3, #16]
    this->ownDevice = ownDevice;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	8c3a      	ldrh	r2, [r7, #32]
 8013cea:	829a      	strh	r2, [r3, #20]
    this->receiveMode = receiveMode;
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8013cf2:	759a      	strb	r2, [r3, #22]
    this->receivedCmdSizeMax = receivedCmdSizeMax;
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013cfa:	75da      	strb	r2, [r3, #23]
    this->generalErrorsCounter = 0;
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	2200      	movs	r2, #0
 8013d00:	84da      	strh	r2, [r3, #38]	; 0x26
    this->txErrorsCounter = 0;
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	2200      	movs	r2, #0
 8013d06:	851a      	strh	r2, [r3, #40]	; 0x28
    this->rxErrorsCounter = 0;
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    wtp3drivercalls_setTimer(2, RESET_INTERVAL_MILISEC);
 8013d0e:	4919      	ldr	r1, [pc, #100]	; (8013d74 <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0xdc>)
 8013d10:	2002      	movs	r0, #2
 8013d12:	f001 fbc9 	bl	80154a8 <_Z24wtp3drivercalls_setTimerhm>

    for(i = 0; i < this->devicesArrSize; i++)
 8013d16:	2300      	movs	r3, #0
 8013d18:	82fb      	strh	r3, [r7, #22]
 8013d1a:	8afb      	ldrh	r3, [r7, #22]
 8013d1c:	68fa      	ldr	r2, [r7, #12]
 8013d1e:	8992      	ldrh	r2, [r2, #12]
 8013d20:	4293      	cmp	r3, r2
 8013d22:	da13      	bge.n	8013d4c <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0xb4>
    {
        this->devicesArr[i]->init();
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	689a      	ldr	r2, [r3, #8]
 8013d28:	8afb      	ldrh	r3, [r7, #22]
 8013d2a:	009b      	lsls	r3, r3, #2
 8013d2c:	4413      	add	r3, r2
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	68fa      	ldr	r2, [r7, #12]
 8013d36:	6891      	ldr	r1, [r2, #8]
 8013d38:	8afa      	ldrh	r2, [r7, #22]
 8013d3a:	0092      	lsls	r2, r2, #2
 8013d3c:	440a      	add	r2, r1
 8013d3e:	6812      	ldr	r2, [r2, #0]
 8013d40:	4610      	mov	r0, r2
 8013d42:	4798      	blx	r3
    for(i = 0; i < this->devicesArrSize; i++)
 8013d44:	8afb      	ldrh	r3, [r7, #22]
 8013d46:	3301      	adds	r3, #1
 8013d48:	82fb      	strh	r3, [r7, #22]
 8013d4a:	e7e6      	b.n	8013d1a <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0x82>
    }
    switch(this->receiveMode)
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	7d9b      	ldrb	r3, [r3, #22]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	db09      	blt.n	8013d68 <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0xd0>
 8013d54:	2b01      	cmp	r3, #1
 8013d56:	dd06      	ble.n	8013d66 <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0xce>
 8013d58:	2b02      	cmp	r3, #2
 8013d5a:	d000      	beq.n	8013d5e <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0xc6>
        case RECEIVE_MODE_AFTER_TX:
        case RECEIVE_MODE_OFF:
            //it stays in FRS_IDLE
            break;
    }
}
 8013d5c:	e004      	b.n	8013d68 <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0xd0>
            rfm22frame_start_rx_waiting(0);
 8013d5e:	2000      	movs	r0, #0
 8013d60:	f7ff fba8 	bl	80134b4 <_Z27rfm22frame_start_rx_waitingh>
            break;
 8013d64:	e000      	b.n	8013d68 <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0xd0>
            break;
 8013d66:	bf00      	nop
}
 8013d68:	bf00      	nop
 8013d6a:	3718      	adds	r7, #24
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	08014561 	.word	0x08014561
 8013d74:	000dbba0 	.word	0x000dbba0

08013d78 <_ZN10Wtp3Driver6updateEv>:

void Wtp3Driver::update()
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b088      	sub	sp, #32
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
    uint16_t i;

    //rfm22frame update
    rfm22frame_update();
 8013d80:	f7ff fbfe 	bl	8013580 <_Z17rfm22frame_updatev>

    //counters update
    wtp3drivercalls_updateCounters();
 8013d84:	f001 fbbe 	bl	8015504 <_Z30wtp3drivercalls_updateCountersv>

    //devices update
    for(i = 0; i < devicesArrSize; i++)
 8013d88:	2300      	movs	r3, #0
 8013d8a:	83fb      	strh	r3, [r7, #30]
 8013d8c:	8bfb      	ldrh	r3, [r7, #30]
 8013d8e:	687a      	ldr	r2, [r7, #4]
 8013d90:	8992      	ldrh	r2, [r2, #12]
 8013d92:	4293      	cmp	r3, r2
 8013d94:	da14      	bge.n	8013dc0 <_ZN10Wtp3Driver6updateEv+0x48>
    {
        devicesArr[i]->update();
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	689a      	ldr	r2, [r3, #8]
 8013d9a:	8bfb      	ldrh	r3, [r7, #30]
 8013d9c:	009b      	lsls	r3, r3, #2
 8013d9e:	4413      	add	r3, r2
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	3304      	adds	r3, #4
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	687a      	ldr	r2, [r7, #4]
 8013daa:	6891      	ldr	r1, [r2, #8]
 8013dac:	8bfa      	ldrh	r2, [r7, #30]
 8013dae:	0092      	lsls	r2, r2, #2
 8013db0:	440a      	add	r2, r1
 8013db2:	6812      	ldr	r2, [r2, #0]
 8013db4:	4610      	mov	r0, r2
 8013db6:	4798      	blx	r3
    for(i = 0; i < devicesArrSize; i++)
 8013db8:	8bfb      	ldrh	r3, [r7, #30]
 8013dba:	3301      	adds	r3, #1
 8013dbc:	83fb      	strh	r3, [r7, #30]
 8013dbe:	e7e5      	b.n	8013d8c <_ZN10Wtp3Driver6updateEv+0x14>
    }

    //main part
    switch(rfm22frame_get_state())
 8013dc0:	f7ff fa80 	bl	80132c4 <_Z20rfm22frame_get_statev>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	2b03      	cmp	r3, #3
 8013dc8:	f200 81cf 	bhi.w	801416a <_ZN10Wtp3Driver6updateEv+0x3f2>
 8013dcc:	a201      	add	r2, pc, #4	; (adr r2, 8013dd4 <_ZN10Wtp3Driver6updateEv+0x5c>)
 8013dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dd2:	bf00      	nop
 8013dd4:	08013de5 	.word	0x08013de5
 8013dd8:	0801416b 	.word	0x0801416b
 8013ddc:	080140cd 	.word	0x080140cd
 8013de0:	0801416b 	.word	0x0801416b
    {
        case FRS_IDLE:
            {
                uint8_t actionDone = 0;
 8013de4:	2300      	movs	r3, #0
 8013de6:	777b      	strb	r3, [r7, #29]

                if(!actionDone)
 8013de8:	7f7b      	ldrb	r3, [r7, #29]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	f040 8091 	bne.w	8013f12 <_ZN10Wtp3Driver6updateEv+0x19a>
                {
                    uint8_t error = 0;
 8013df0:	2300      	movs	r3, #0
 8013df2:	773b      	strb	r3, [r7, #28]

                    if(rfm22frame_is_general_error())
 8013df4:	f7ff fab2 	bl	801335c <_Z27rfm22frame_is_general_errorv>
 8013df8:	4603      	mov	r3, r0
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	bf14      	ite	ne
 8013dfe:	2301      	movne	r3, #1
 8013e00:	2300      	moveq	r3, #0
 8013e02:	b2db      	uxtb	r3, r3
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d006      	beq.n	8013e16 <_ZN10Wtp3Driver6updateEv+0x9e>
                    {
                        incrementErrorCounter(&generalErrorsCounter);
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	3326      	adds	r3, #38	; 0x26
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f000 fd07 	bl	8014820 <_ZN10Wtp3Driver21incrementErrorCounterEPt>
                        error = 1;
 8013e12:	2301      	movs	r3, #1
 8013e14:	773b      	strb	r3, [r7, #28]
                    }
                    if(rfm22frame_is_rx_error())
 8013e16:	f7ff fa7b 	bl	8013310 <_Z22rfm22frame_is_rx_errorv>
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	bf14      	ite	ne
 8013e20:	2301      	movne	r3, #1
 8013e22:	2300      	moveq	r3, #0
 8013e24:	b2db      	uxtb	r3, r3
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d006      	beq.n	8013e38 <_ZN10Wtp3Driver6updateEv+0xc0>
                    {
                        incrementErrorCounter(&rxErrorsCounter);
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	332a      	adds	r3, #42	; 0x2a
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f000 fcf6 	bl	8014820 <_ZN10Wtp3Driver21incrementErrorCounterEPt>
                        error = 1;
 8013e34:	2301      	movs	r3, #1
 8013e36:	773b      	strb	r3, [r7, #28]
                    }
                    if(rfm22frame_is_rx_callback_error())
 8013e38:	f7ff fa86 	bl	8013348 <_Z31rfm22frame_is_rx_callback_errorv>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	bf14      	ite	ne
 8013e42:	2301      	movne	r3, #1
 8013e44:	2300      	moveq	r3, #0
 8013e46:	b2db      	uxtb	r3, r3
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d001      	beq.n	8013e50 <_ZN10Wtp3Driver6updateEv+0xd8>
                    {
                        error = 1;
 8013e4c:	2301      	movs	r3, #1
 8013e4e:	773b      	strb	r3, [r7, #28]
                    }
                    if(rfm22frame_is_tx_error())
 8013e50:	f7ff fa42 	bl	80132d8 <_Z22rfm22frame_is_tx_errorv>
 8013e54:	4603      	mov	r3, r0
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	bf14      	ite	ne
 8013e5a:	2301      	movne	r3, #1
 8013e5c:	2300      	moveq	r3, #0
 8013e5e:	b2db      	uxtb	r3, r3
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d006      	beq.n	8013e72 <_ZN10Wtp3Driver6updateEv+0xfa>
                    {
                        incrementErrorCounter(&txErrorsCounter);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	3328      	adds	r3, #40	; 0x28
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f000 fcd9 	bl	8014820 <_ZN10Wtp3Driver21incrementErrorCounterEPt>
                        error = 1;
 8013e6e:	2301      	movs	r3, #1
 8013e70:	773b      	strb	r3, [r7, #28]
                    }
                    if(error || wtp3drivercalls_isTimerZero(2))
 8013e72:	7f3b      	ldrb	r3, [r7, #28]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d105      	bne.n	8013e84 <_ZN10Wtp3Driver6updateEv+0x10c>
 8013e78:	2002      	movs	r0, #2
 8013e7a:	f001 fb2d 	bl	80154d8 <_Z27wtp3drivercalls_isTimerZeroh>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d001      	beq.n	8013e88 <_ZN10Wtp3Driver6updateEv+0x110>
 8013e84:	2301      	movs	r3, #1
 8013e86:	e000      	b.n	8013e8a <_ZN10Wtp3Driver6updateEv+0x112>
 8013e88:	2300      	movs	r3, #0
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d041      	beq.n	8013f12 <_ZN10Wtp3Driver6updateEv+0x19a>
                    {
                        if(rfm22frame_is_general_error() || ((rxErrorsCounter + txErrorsCounter) >= REINIT_ERROR_COUNT)
 8013e8e:	f7ff fa65 	bl	801335c <_Z27rfm22frame_is_general_errorv>
 8013e92:	4603      	mov	r3, r0
                                || wtp3drivercalls_isTimerZero(2))
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d10d      	bne.n	8013eb4 <_ZN10Wtp3Driver6updateEv+0x13c>
                        if(rfm22frame_is_general_error() || ((rxErrorsCounter + txErrorsCounter) >= REINIT_ERROR_COUNT)
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013e9c:	461a      	mov	r2, r3
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013ea2:	4413      	add	r3, r2
 8013ea4:	2b09      	cmp	r3, #9
 8013ea6:	dc05      	bgt.n	8013eb4 <_ZN10Wtp3Driver6updateEv+0x13c>
                                || wtp3drivercalls_isTimerZero(2))
 8013ea8:	2002      	movs	r0, #2
 8013eaa:	f001 fb15 	bl	80154d8 <_Z27wtp3drivercalls_isTimerZeroh>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d001      	beq.n	8013eb8 <_ZN10Wtp3Driver6updateEv+0x140>
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	e000      	b.n	8013eba <_ZN10Wtp3Driver6updateEv+0x142>
 8013eb8:	2300      	movs	r3, #0
                        if(rfm22frame_is_general_error() || ((rxErrorsCounter + txErrorsCounter) >= REINIT_ERROR_COUNT)
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d00e      	beq.n	8013edc <_ZN10Wtp3Driver6updateEv+0x164>
                        {
                            rfm22frame_init(0, sizeHeaderFirstCheck, SIZE_HEADER_SIZE);
 8013ebe:	2204      	movs	r2, #4
 8013ec0:	49a7      	ldr	r1, [pc, #668]	; (8014160 <_ZN10Wtp3Driver6updateEv+0x3e8>)
 8013ec2:	2000      	movs	r0, #0
 8013ec4:	f7ff f9ac 	bl	8013220 <_Z15rfm22frame_inithPFtvEt>
                            //rfm22frame interrupt in FRS_IDLE possible here
                            //generalErrorsCounter is never cleared
                            rxErrorsCounter = 0;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2200      	movs	r2, #0
 8013ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
                            txErrorsCounter = 0;
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	851a      	strh	r2, [r3, #40]	; 0x28
                            wtp3drivercalls_setTimer(2, RESET_INTERVAL_MILISEC);
 8013ed4:	49a3      	ldr	r1, [pc, #652]	; (8014164 <_ZN10Wtp3Driver6updateEv+0x3ec>)
 8013ed6:	2002      	movs	r0, #2
 8013ed8:	f001 fae6 	bl	80154a8 <_Z24wtp3drivercalls_setTimerhm>
                        }
                        rfm22frame_clear_error_flags();
 8013edc:	f7ff fa48 	bl	8013370 <_Z28rfm22frame_clear_error_flagsv>
                        prot3buff_clear(txbuf);
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f7fe fd6c 	bl	80129c2 <_Z15prot3buff_clearP11prot3buff_t>
                        prot3buff_clear(rxbuf);
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	685b      	ldr	r3, [r3, #4]
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f7fe fd67 	bl	80129c2 <_Z15prot3buff_clearP11prot3buff_t>
                        switch(receiveMode)
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	7d9b      	ldrb	r3, [r3, #22]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	db08      	blt.n	8013f0e <_ZN10Wtp3Driver6updateEv+0x196>
 8013efc:	2b01      	cmp	r3, #1
 8013efe:	dd05      	ble.n	8013f0c <_ZN10Wtp3Driver6updateEv+0x194>
 8013f00:	2b02      	cmp	r3, #2
 8013f02:	d104      	bne.n	8013f0e <_ZN10Wtp3Driver6updateEv+0x196>
                        {
                            case RECEIVE_MODE_CONTINUOUS:
                                rfm22frame_start_rx_waiting(0);
 8013f04:	2000      	movs	r0, #0
 8013f06:	f7ff fad5 	bl	80134b4 <_Z27rfm22frame_start_rx_waitingh>
                                break;
 8013f0a:	e000      	b.n	8013f0e <_ZN10Wtp3Driver6updateEv+0x196>
                            case RECEIVE_MODE_AFTER_TX:
                            case RECEIVE_MODE_OFF:
                                //it stays in FRS_IDLE
                                break;
 8013f0c:	bf00      	nop
                        }
                        actionDone = 1;
 8013f0e:	2301      	movs	r3, #1
 8013f10:	777b      	strb	r3, [r7, #29]
                    }
                }
                if(!actionDone && isFrameReceived())
 8013f12:	7f7b      	ldrb	r3, [r7, #29]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d107      	bne.n	8013f28 <_ZN10Wtp3Driver6updateEv+0x1b0>
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	f000 fa3f 	bl	801439c <_ZN10Wtp3Driver15isFrameReceivedEv>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d001      	beq.n	8013f28 <_ZN10Wtp3Driver6updateEv+0x1b0>
 8013f24:	2301      	movs	r3, #1
 8013f26:	e000      	b.n	8013f2a <_ZN10Wtp3Driver6updateEv+0x1b2>
 8013f28:	2300      	movs	r3, #0
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	f000 8083 	beq.w	8014036 <_ZN10Wtp3Driver6updateEv+0x2be>
                {
                    IWtp3Device *device = NULL;
 8013f30:	2300      	movs	r3, #0
 8013f32:	61bb      	str	r3, [r7, #24]

                    if(checkFrame())
 8013f34:	6878      	ldr	r0, [r7, #4]
 8013f36:	f000 fb21 	bl	801457c <_ZN10Wtp3Driver10checkFrameEv>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	bf14      	ite	ne
 8013f40:	2301      	movne	r3, #1
 8013f42:	2300      	moveq	r3, #0
 8013f44:	b2db      	uxtb	r3, r3
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d017      	beq.n	8013f7a <_ZN10Wtp3Driver6updateEv+0x202>
                    {
                        if(((receivedAddrHeader.dest == WTP3_BROADCAST) || (receivedAddrHeader.dest == ownAddress))
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	699b      	ldr	r3, [r3, #24]
 8013f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f52:	d005      	beq.n	8013f60 <_ZN10Wtp3Driver6updateEv+0x1e8>
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	699a      	ldr	r2, [r3, #24]
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	691b      	ldr	r3, [r3, #16]
 8013f5c:	429a      	cmp	r2, r3
 8013f5e:	d10c      	bne.n	8013f7a <_ZN10Wtp3Driver6updateEv+0x202>
                                && (receivedAddrHeader.sender != ownAddress))
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	69da      	ldr	r2, [r3, #28]
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	691b      	ldr	r3, [r3, #16]
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	d006      	beq.n	8013f7a <_ZN10Wtp3Driver6updateEv+0x202>
                        {
                            //crc and address conditions verified
                            device = findDevice(receivedAddrHeader.device);
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8013f70:	4619      	mov	r1, r3
 8013f72:	6878      	ldr	r0, [r7, #4]
 8013f74:	f000 fbe6 	bl	8014744 <_ZN10Wtp3Driver10findDeviceEt>
 8013f78:	61b8      	str	r0, [r7, #24]
                        }
                    }
                    if(device != NULL)
 8013f7a:	69bb      	ldr	r3, [r7, #24]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d03d      	beq.n	8013ffc <_ZN10Wtp3Driver6updateEv+0x284>
                    {
                        ERecFrameResult recFrameResult = REC_FRAME_NO_ANSWER;
 8013f80:	2300      	movs	r3, #0
 8013f82:	75fb      	strb	r3, [r7, #23]

                        prot3buff_clear(txbuf);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f7fe fd1a 	bl	80129c2 <_Z15prot3buff_clearP11prot3buff_t>
                        recFrameResult = device->receiveFrame(this);
 8013f8e:	69bb      	ldr	r3, [r7, #24]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	3314      	adds	r3, #20
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	6879      	ldr	r1, [r7, #4]
 8013f98:	69b8      	ldr	r0, [r7, #24]
 8013f9a:	4798      	blx	r3
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	75fb      	strb	r3, [r7, #23]
                        prot3buff_clear(rxbuf);
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	685b      	ldr	r3, [r3, #4]
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7fe fd0c 	bl	80129c2 <_Z15prot3buff_clearP11prot3buff_t>
                        switch(recFrameResult)
 8013faa:	7dfb      	ldrb	r3, [r7, #23]
 8013fac:	2b01      	cmp	r3, #1
 8013fae:	d004      	beq.n	8013fba <_ZN10Wtp3Driver6updateEv+0x242>
 8013fb0:	2b02      	cmp	r3, #2
 8013fb2:	d013      	beq.n	8013fdc <_ZN10Wtp3Driver6updateEv+0x264>
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d003      	beq.n	8013fc0 <_ZN10Wtp3Driver6updateEv+0x248>
 8013fb8:	e03b      	b.n	8014032 <_ZN10Wtp3Driver6updateEv+0x2ba>
                        {
                            case REC_FRAME_ANSWER:
                                rfm22frame_start_tx();
 8013fba:	f7ff fa29 	bl	8013410 <_Z19rfm22frame_start_txv>
                                break;
 8013fbe:	e038      	b.n	8014032 <_ZN10Wtp3Driver6updateEv+0x2ba>
                            case REC_FRAME_NO_ANSWER:
                                switch(receiveMode)
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	7d9b      	ldrb	r3, [r3, #22]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d007      	beq.n	8013fd8 <_ZN10Wtp3Driver6updateEv+0x260>
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	db2d      	blt.n	8014028 <_ZN10Wtp3Driver6updateEv+0x2b0>
 8013fcc:	2b02      	cmp	r3, #2
 8013fce:	dc2b      	bgt.n	8014028 <_ZN10Wtp3Driver6updateEv+0x2b0>
                                {
                                    case RECEIVE_MODE_CONTINUOUS:
                                    case RECEIVE_MODE_AFTER_TX:
                                        rfm22frame_start_rx_waiting(0);
 8013fd0:	2000      	movs	r0, #0
 8013fd2:	f7ff fa6f 	bl	80134b4 <_Z27rfm22frame_start_rx_waitingh>
                                        break;
 8013fd6:	e000      	b.n	8013fda <_ZN10Wtp3Driver6updateEv+0x262>
                                    case RECEIVE_MODE_OFF:
                                        //it's possible if receiveMode's been changed
                                        break;
 8013fd8:	bf00      	nop
                                }
                                break;
 8013fda:	e025      	b.n	8014028 <_ZN10Wtp3Driver6updateEv+0x2b0>
                            case REC_FRAME_NO_ANSWER_STOP_RX:
                                switch(receiveMode)
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	7d9b      	ldrb	r3, [r3, #22]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	db23      	blt.n	801402c <_ZN10Wtp3Driver6updateEv+0x2b4>
 8013fe4:	2b01      	cmp	r3, #1
 8013fe6:	dd06      	ble.n	8013ff6 <_ZN10Wtp3Driver6updateEv+0x27e>
 8013fe8:	2b02      	cmp	r3, #2
 8013fea:	d000      	beq.n	8013fee <_ZN10Wtp3Driver6updateEv+0x276>
                                    case RECEIVE_MODE_OFF:
                                        //it stays in FRS_IDLE
                                        //RECEIVE_OFF is possible if receiveMode's been changed
                                        break;
                                }
                                break;
 8013fec:	e01e      	b.n	801402c <_ZN10Wtp3Driver6updateEv+0x2b4>
                                        rfm22frame_start_rx_waiting(0);
 8013fee:	2000      	movs	r0, #0
 8013ff0:	f7ff fa60 	bl	80134b4 <_Z27rfm22frame_start_rx_waitingh>
                                        break;
 8013ff4:	e000      	b.n	8013ff8 <_ZN10Wtp3Driver6updateEv+0x280>
                                        break;
 8013ff6:	bf00      	nop
                                break;
 8013ff8:	bf00      	nop
 8013ffa:	e017      	b.n	801402c <_ZN10Wtp3Driver6updateEv+0x2b4>
                        }
                    }
                    else
                    {
                        prot3buff_clear(txbuf);
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	4618      	mov	r0, r3
 8014002:	f7fe fcde 	bl	80129c2 <_Z15prot3buff_clearP11prot3buff_t>
                        prot3buff_clear(rxbuf);
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	685b      	ldr	r3, [r3, #4]
 801400a:	4618      	mov	r0, r3
 801400c:	f7fe fcd9 	bl	80129c2 <_Z15prot3buff_clearP11prot3buff_t>
                        switch(receiveMode)
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	7d9b      	ldrb	r3, [r3, #22]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d00b      	beq.n	8014030 <_ZN10Wtp3Driver6updateEv+0x2b8>
 8014018:	2b00      	cmp	r3, #0
 801401a:	db0a      	blt.n	8014032 <_ZN10Wtp3Driver6updateEv+0x2ba>
 801401c:	2b02      	cmp	r3, #2
 801401e:	dc08      	bgt.n	8014032 <_ZN10Wtp3Driver6updateEv+0x2ba>
                        {
                            case RECEIVE_MODE_CONTINUOUS:
                            case RECEIVE_MODE_AFTER_TX:
                                rfm22frame_start_rx_waiting(0);
 8014020:	2000      	movs	r0, #0
 8014022:	f7ff fa47 	bl	80134b4 <_Z27rfm22frame_start_rx_waitingh>
                                break;
 8014026:	e004      	b.n	8014032 <_ZN10Wtp3Driver6updateEv+0x2ba>
                                break;
 8014028:	bf00      	nop
 801402a:	e002      	b.n	8014032 <_ZN10Wtp3Driver6updateEv+0x2ba>
                                break;
 801402c:	bf00      	nop
 801402e:	e000      	b.n	8014032 <_ZN10Wtp3Driver6updateEv+0x2ba>
                            case RECEIVE_MODE_OFF:
                                //it's possible if receiveMode's been changed
                                break;
 8014030:	bf00      	nop
                        }
                    }
                    actionDone = 1;
 8014032:	2301      	movs	r3, #1
 8014034:	777b      	strb	r3, [r7, #29]
                }
                if(!actionDone && isFrameSent())
 8014036:	7f7b      	ldrb	r3, [r7, #29]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d107      	bne.n	801404c <_ZN10Wtp3Driver6updateEv+0x2d4>
 801403c:	6878      	ldr	r0, [r7, #4]
 801403e:	f000 f9c8 	bl	80143d2 <_ZN10Wtp3Driver11isFrameSentEv>
 8014042:	4603      	mov	r3, r0
 8014044:	2b00      	cmp	r3, #0
 8014046:	d001      	beq.n	801404c <_ZN10Wtp3Driver6updateEv+0x2d4>
 8014048:	2301      	movs	r3, #1
 801404a:	e000      	b.n	801404e <_ZN10Wtp3Driver6updateEv+0x2d6>
 801404c:	2300      	movs	r3, #0
 801404e:	2b00      	cmp	r3, #0
 8014050:	d01c      	beq.n	801408c <_ZN10Wtp3Driver6updateEv+0x314>
                {
                    //sending done
                    prot3buff_clear(txbuf);
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	4618      	mov	r0, r3
 8014058:	f7fe fcb3 	bl	80129c2 <_Z15prot3buff_clearP11prot3buff_t>
                    prot3buff_clear(rxbuf);
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	685b      	ldr	r3, [r3, #4]
 8014060:	4618      	mov	r0, r3
 8014062:	f7fe fcae 	bl	80129c2 <_Z15prot3buff_clearP11prot3buff_t>
                    switch(receiveMode)
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	7d9b      	ldrb	r3, [r3, #22]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d00b      	beq.n	8014086 <_ZN10Wtp3Driver6updateEv+0x30e>
 801406e:	2b00      	cmp	r3, #0
 8014070:	db0a      	blt.n	8014088 <_ZN10Wtp3Driver6updateEv+0x310>
 8014072:	2b02      	cmp	r3, #2
 8014074:	dc08      	bgt.n	8014088 <_ZN10Wtp3Driver6updateEv+0x310>
                    {
                        case RECEIVE_MODE_CONTINUOUS:
                        case RECEIVE_MODE_AFTER_TX:
                            //timer set for RECEIVE_MODE_CONTINUOUS too, for the case of state changed
                            wtp3drivercalls_setTimer(0, LIMITED_RX_DELAY_TIME_MILISEC);
 8014076:	2164      	movs	r1, #100	; 0x64
 8014078:	2000      	movs	r0, #0
 801407a:	f001 fa15 	bl	80154a8 <_Z24wtp3drivercalls_setTimerhm>
                            rfm22frame_start_rx_waiting(0);
 801407e:	2000      	movs	r0, #0
 8014080:	f7ff fa18 	bl	80134b4 <_Z27rfm22frame_start_rx_waitingh>
                            break;
 8014084:	e000      	b.n	8014088 <_ZN10Wtp3Driver6updateEv+0x310>
                        case RECEIVE_MODE_OFF:
                            //it stays in FRS_IDLE
                            break;
 8014086:	bf00      	nop
                    }
                    actionDone = 1;
 8014088:	2301      	movs	r3, #1
 801408a:	777b      	strb	r3, [r7, #29]
                }
                if(!actionDone)
 801408c:	7f7b      	ldrb	r3, [r7, #29]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d16a      	bne.n	8014168 <_ZN10Wtp3Driver6updateEv+0x3f0>
                {
                    switch(receiveMode)
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	7d9b      	ldrb	r3, [r3, #22]
 8014096:	2b00      	cmp	r3, #0
 8014098:	db66      	blt.n	8014168 <_ZN10Wtp3Driver6updateEv+0x3f0>
 801409a:	2b01      	cmp	r3, #1
 801409c:	dd01      	ble.n	80140a2 <_ZN10Wtp3Driver6updateEv+0x32a>
 801409e:	2b02      	cmp	r3, #2
                    {
                        case RECEIVE_MODE_CONTINUOUS:
                            break;
 80140a0:	e013      	b.n	80140ca <_ZN10Wtp3Driver6updateEv+0x352>
                        case RECEIVE_MODE_AFTER_TX:
                        case RECEIVE_MODE_OFF:
                            {
                                IWtp3Device *device = findDeviceToSend();
 80140a2:	6878      	ldr	r0, [r7, #4]
 80140a4:	f000 fb8a 	bl	80147bc <_ZN10Wtp3Driver16findDeviceToSendEv>
 80140a8:	6138      	str	r0, [r7, #16]
                                if(device != NULL)
 80140aa:	693b      	ldr	r3, [r7, #16]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d00b      	beq.n	80140c8 <_ZN10Wtp3Driver6updateEv+0x350>
                                {
                                    device->createFrame(this);
 80140b0:	693b      	ldr	r3, [r7, #16]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	3310      	adds	r3, #16
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	6879      	ldr	r1, [r7, #4]
 80140ba:	6938      	ldr	r0, [r7, #16]
 80140bc:	4798      	blx	r3
                                    rfm22frame_start_tx();
 80140be:	f7ff f9a7 	bl	8013410 <_Z19rfm22frame_start_txv>
                                    actionDone = 1;
 80140c2:	2301      	movs	r3, #1
 80140c4:	777b      	strb	r3, [r7, #29]
                                }
                            }
                            break;
 80140c6:	bf00      	nop
 80140c8:	bf00      	nop
                    }
                }
            }
            break;
 80140ca:	e04d      	b.n	8014168 <_ZN10Wtp3Driver6updateEv+0x3f0>

        case FRS_RX_WAIT:
            switch(receiveMode)
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	7d9b      	ldrb	r3, [r3, #22]
 80140d0:	2b01      	cmp	r3, #1
 80140d2:	d02f      	beq.n	8014134 <_ZN10Wtp3Driver6updateEv+0x3bc>
 80140d4:	2b02      	cmp	r3, #2
 80140d6:	d002      	beq.n	80140de <_ZN10Wtp3Driver6updateEv+0x366>
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d039      	beq.n	8014150 <_ZN10Wtp3Driver6updateEv+0x3d8>
                case RECEIVE_MODE_OFF:
                    //if FRS_RX_WAIT->FRS_RX hazard happened, incoming frame will be handled normally
                    rfm22frame_stop_rx_waiting();
                    break;
            }
            break;
 80140dc:	e045      	b.n	801416a <_ZN10Wtp3Driver6updateEv+0x3f2>
                        if(wtp3drivercalls_isTimerZero(2))
 80140de:	2002      	movs	r0, #2
 80140e0:	f001 f9fa 	bl	80154d8 <_Z27wtp3drivercalls_isTimerZeroh>
 80140e4:	4603      	mov	r3, r0
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	bf14      	ite	ne
 80140ea:	2301      	movne	r3, #1
 80140ec:	2300      	moveq	r3, #0
 80140ee:	b2db      	uxtb	r3, r3
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d002      	beq.n	80140fa <_ZN10Wtp3Driver6updateEv+0x382>
                            rfm22frame_stop_rx_waiting();
 80140f4:	f7ff fa28 	bl	8013548 <_Z26rfm22frame_stop_rx_waitingv>
                    break;
 80140f8:	e02d      	b.n	8014156 <_ZN10Wtp3Driver6updateEv+0x3de>
                            IWtp3Device *device = findDeviceToSend();
 80140fa:	6878      	ldr	r0, [r7, #4]
 80140fc:	f000 fb5e 	bl	80147bc <_ZN10Wtp3Driver16findDeviceToSendEv>
 8014100:	60f8      	str	r0, [r7, #12]
                            if(device != NULL)
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d026      	beq.n	8014156 <_ZN10Wtp3Driver6updateEv+0x3de>
                                rfm22frame_stop_rx_waiting();
 8014108:	f7ff fa1e 	bl	8013548 <_Z26rfm22frame_stop_rx_waitingv>
                                if(rfm22frame_get_state() == FRS_IDLE)
 801410c:	f7ff f8da 	bl	80132c4 <_Z20rfm22frame_get_statev>
 8014110:	4603      	mov	r3, r0
 8014112:	2b00      	cmp	r3, #0
 8014114:	bf0c      	ite	eq
 8014116:	2301      	moveq	r3, #1
 8014118:	2300      	movne	r3, #0
 801411a:	b2db      	uxtb	r3, r3
 801411c:	2b00      	cmp	r3, #0
 801411e:	d01a      	beq.n	8014156 <_ZN10Wtp3Driver6updateEv+0x3de>
                                    device->createFrame(this);
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	3310      	adds	r3, #16
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	6879      	ldr	r1, [r7, #4]
 801412a:	68f8      	ldr	r0, [r7, #12]
 801412c:	4798      	blx	r3
                                    rfm22frame_start_tx();
 801412e:	f7ff f96f 	bl	8013410 <_Z19rfm22frame_start_txv>
                    break;
 8014132:	e010      	b.n	8014156 <_ZN10Wtp3Driver6updateEv+0x3de>
                    if(wtp3drivercalls_isTimerZero(0))
 8014134:	2000      	movs	r0, #0
 8014136:	f001 f9cf 	bl	80154d8 <_Z27wtp3drivercalls_isTimerZeroh>
 801413a:	4603      	mov	r3, r0
 801413c:	2b00      	cmp	r3, #0
 801413e:	bf14      	ite	ne
 8014140:	2301      	movne	r3, #1
 8014142:	2300      	moveq	r3, #0
 8014144:	b2db      	uxtb	r3, r3
 8014146:	2b00      	cmp	r3, #0
 8014148:	d007      	beq.n	801415a <_ZN10Wtp3Driver6updateEv+0x3e2>
                        rfm22frame_stop_rx_waiting();
 801414a:	f7ff f9fd 	bl	8013548 <_Z26rfm22frame_stop_rx_waitingv>
                    break;
 801414e:	e004      	b.n	801415a <_ZN10Wtp3Driver6updateEv+0x3e2>
                    rfm22frame_stop_rx_waiting();
 8014150:	f7ff f9fa 	bl	8013548 <_Z26rfm22frame_stop_rx_waitingv>
                    break;
 8014154:	e002      	b.n	801415c <_ZN10Wtp3Driver6updateEv+0x3e4>
                    break;
 8014156:	bf00      	nop
 8014158:	e007      	b.n	801416a <_ZN10Wtp3Driver6updateEv+0x3f2>
                    break;
 801415a:	bf00      	nop
            break;
 801415c:	e005      	b.n	801416a <_ZN10Wtp3Driver6updateEv+0x3f2>
 801415e:	bf00      	nop
 8014160:	08014561 	.word	0x08014561
 8014164:	000dbba0 	.word	0x000dbba0
            break;
 8014168:	bf00      	nop

        case FRS_RX:
        case FRS_TX:
            break;
    }
    rfm22frameState = rfm22frame_get_state();
 801416a:	f7ff f8ab 	bl	80132c4 <_Z20rfm22frame_get_statev>
 801416e:	4603      	mov	r3, r0
 8014170:	461a      	mov	r2, r3
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8014178:	bf00      	nop
 801417a:	3720      	adds	r7, #32
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}

08014180 <_ZN10Wtp3Driver10startFrameEmhh>:

void Wtp3Driver::startFrame(uint32_t dest, uint8_t answer, uint8_t signin)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b086      	sub	sp, #24
 8014184:	af02      	add	r7, sp, #8
 8014186:	60f8      	str	r0, [r7, #12]
 8014188:	60b9      	str	r1, [r7, #8]
 801418a:	4611      	mov	r1, r2
 801418c:	461a      	mov	r2, r3
 801418e:	460b      	mov	r3, r1
 8014190:	71fb      	strb	r3, [r7, #7]
 8014192:	4613      	mov	r3, r2
 8014194:	71bb      	strb	r3, [r7, #6]
    prot3buff_clear(txbuf);
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	4618      	mov	r0, r3
 801419c:	f7fe fc11 	bl	80129c2 <_Z15prot3buff_clearP11prot3buff_t>
    addSizeHeader(0, 0);
 80141a0:	2200      	movs	r2, #0
 80141a2:	2100      	movs	r1, #0
 80141a4:	68f8      	ldr	r0, [r7, #12]
 80141a6:	f000 f92f 	bl	8014408 <_ZN10Wtp3Driver13addSizeHeaderEth>
    addAddressHeader(dest, ownAddress, answer, signin);
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	691a      	ldr	r2, [r3, #16]
 80141ae:	79f9      	ldrb	r1, [r7, #7]
 80141b0:	79bb      	ldrb	r3, [r7, #6]
 80141b2:	9300      	str	r3, [sp, #0]
 80141b4:	460b      	mov	r3, r1
 80141b6:	68b9      	ldr	r1, [r7, #8]
 80141b8:	68f8      	ldr	r0, [r7, #12]
 80141ba:	f000 f804 	bl	80141c6 <_ZN10Wtp3Driver16addAddressHeaderEmmhh>
}
 80141be:	bf00      	nop
 80141c0:	3710      	adds	r7, #16
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bd80      	pop	{r7, pc}

080141c6 <_ZN10Wtp3Driver16addAddressHeaderEmmhh>:

void Wtp3Driver::addAddressHeader(uint32_t dest, uint32_t sender, uint8_t answer, uint8_t signin)
{
 80141c6:	b580      	push	{r7, lr}
 80141c8:	b088      	sub	sp, #32
 80141ca:	af00      	add	r7, sp, #0
 80141cc:	60f8      	str	r0, [r7, #12]
 80141ce:	60b9      	str	r1, [r7, #8]
 80141d0:	607a      	str	r2, [r7, #4]
 80141d2:	70fb      	strb	r3, [r7, #3]
    uint8_t arr[ADDRESS_HEADER_SIZE];

    answer = (answer != 0);
 80141d4:	78fb      	ldrb	r3, [r7, #3]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	bf14      	ite	ne
 80141da:	2301      	movne	r3, #1
 80141dc:	2300      	moveq	r3, #0
 80141de:	b2db      	uxtb	r3, r3
 80141e0:	70fb      	strb	r3, [r7, #3]
    signin = (signin != 0);
 80141e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	bf14      	ite	ne
 80141ea:	2301      	movne	r3, #1
 80141ec:	2300      	moveq	r3, #0
 80141ee:	b2db      	uxtb	r3, r3
 80141f0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    frame_tools_uint32_to_bytes_LSB(dest, &arr[0]);
 80141f4:	f107 0314 	add.w	r3, r7, #20
 80141f8:	4619      	mov	r1, r3
 80141fa:	68b8      	ldr	r0, [r7, #8]
 80141fc:	f7fe fb47 	bl	801288e <_Z31frame_tools_uint32_to_bytes_LSBmPh>
    frame_tools_uint32_to_bytes_LSB(sender, &arr[4]);
 8014200:	f107 0314 	add.w	r3, r7, #20
 8014204:	3304      	adds	r3, #4
 8014206:	4619      	mov	r1, r3
 8014208:	6878      	ldr	r0, [r7, #4]
 801420a:	f7fe fb40 	bl	801288e <_Z31frame_tools_uint32_to_bytes_LSBmPh>
    arr[8] = (answer << 7) | (signin << 6) | ((ownDevice >> 8) & 0x07);
 801420e:	78fb      	ldrb	r3, [r7, #3]
 8014210:	01db      	lsls	r3, r3, #7
 8014212:	b25a      	sxtb	r2, r3
 8014214:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014218:	019b      	lsls	r3, r3, #6
 801421a:	b25b      	sxtb	r3, r3
 801421c:	4313      	orrs	r3, r2
 801421e:	b25a      	sxtb	r2, r3
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	8a9b      	ldrh	r3, [r3, #20]
 8014224:	121b      	asrs	r3, r3, #8
 8014226:	b25b      	sxtb	r3, r3
 8014228:	f003 0307 	and.w	r3, r3, #7
 801422c:	b25b      	sxtb	r3, r3
 801422e:	4313      	orrs	r3, r2
 8014230:	b25b      	sxtb	r3, r3
 8014232:	b2db      	uxtb	r3, r3
 8014234:	773b      	strb	r3, [r7, #28]
    arr[9] = (uint8_t)ownDevice;
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	8a9b      	ldrh	r3, [r3, #20]
 801423a:	b2db      	uxtb	r3, r3
 801423c:	777b      	strb	r3, [r7, #29]

    prot3buff_putBytes(txbuf, arr, ADDRESS_HEADER_SIZE);
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	f107 0114 	add.w	r1, r7, #20
 8014246:	220a      	movs	r2, #10
 8014248:	4618      	mov	r0, r3
 801424a:	f7fe fbfb 	bl	8012a44 <_Z18prot3buff_putBytesP11prot3buff_tPht>
}
 801424e:	bf00      	nop
 8014250:	3720      	adds	r7, #32
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}

08014256 <_ZN10Wtp3Driver14addLongCommandEhhPh>:
    prot3buff_putByte(txbuf, command);
    prot3buff_putByte(txbuf, data);
}

void Wtp3Driver::addLongCommand(uint8_t command, uint8_t size, uint8_t *data)
{
 8014256:	b580      	push	{r7, lr}
 8014258:	b084      	sub	sp, #16
 801425a:	af00      	add	r7, sp, #0
 801425c:	60f8      	str	r0, [r7, #12]
 801425e:	607b      	str	r3, [r7, #4]
 8014260:	460b      	mov	r3, r1
 8014262:	72fb      	strb	r3, [r7, #11]
 8014264:	4613      	mov	r3, r2
 8014266:	72bb      	strb	r3, [r7, #10]
    command |= 0x80;
 8014268:	7afb      	ldrb	r3, [r7, #11]
 801426a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801426e:	72fb      	strb	r3, [r7, #11]
    prot3buff_putByte(txbuf, command);
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	7afa      	ldrb	r2, [r7, #11]
 8014276:	4611      	mov	r1, r2
 8014278:	4618      	mov	r0, r3
 801427a:	f7fe fbc1 	bl	8012a00 <_Z17prot3buff_putByteP11prot3buff_th>
    prot3buff_putByte(txbuf, size);
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	7aba      	ldrb	r2, [r7, #10]
 8014284:	4611      	mov	r1, r2
 8014286:	4618      	mov	r0, r3
 8014288:	f7fe fbba 	bl	8012a00 <_Z17prot3buff_putByteP11prot3buff_th>
    prot3buff_putBytes(txbuf, data, size);
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	7aba      	ldrb	r2, [r7, #10]
 8014292:	b292      	uxth	r2, r2
 8014294:	6879      	ldr	r1, [r7, #4]
 8014296:	4618      	mov	r0, r3
 8014298:	f7fe fbd4 	bl	8012a44 <_Z18prot3buff_putBytesP11prot3buff_tPht>
}
 801429c:	bf00      	nop
 801429e:	3710      	adds	r7, #16
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}

080142a4 <_ZN10Wtp3Driver8endFrameEv>:


void Wtp3Driver::endFrame()
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b086      	sub	sp, #24
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
    uint32_t crc = crc_tools_32_get_initial_value();
 80142ac:	f7fe fa90 	bl	80127d0 <_Z30crc_tools_32_get_initial_valuev>
 80142b0:	6178      	str	r0, [r7, #20]
    uint16_t size;
    uint8_t arr[CRC_SIZE];
    uint8_t byte;

    //crc and reader reset to 0 pos
    prot3buff_setReaderToPos(txbuf, SIZE_HEADER_SIZE);
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	2104      	movs	r1, #4
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7fe fb6f 	bl	801299c <_Z24prot3buff_setReaderToPosP11prot3buff_tt>
    while(prot3buff_isByteAvailable(txbuf))
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	4618      	mov	r0, r3
 80142c4:	f7fe fbfc 	bl	8012ac0 <_Z25prot3buff_isByteAvailableP11prot3buff_t>
 80142c8:	4603      	mov	r3, r0
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	bf14      	ite	ne
 80142ce:	2301      	movne	r3, #1
 80142d0:	2300      	moveq	r3, #0
 80142d2:	b2db      	uxtb	r3, r3
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d00c      	beq.n	80142f2 <_ZN10Wtp3Driver8endFrameEv+0x4e>
    {
        crc = crc32_basic_update(crc, (uint8_t)prot3buff_readByte(txbuf));
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	4618      	mov	r0, r3
 80142de:	f7fe fc03 	bl	8012ae8 <_Z18prot3buff_readByteP11prot3buff_t>
 80142e2:	4603      	mov	r3, r0
 80142e4:	b2db      	uxtb	r3, r3
 80142e6:	4619      	mov	r1, r3
 80142e8:	6978      	ldr	r0, [r7, #20]
 80142ea:	f7fe fa57 	bl	801279c <_Z18crc32_basic_updatemh>
 80142ee:	6178      	str	r0, [r7, #20]
    while(prot3buff_isByteAvailable(txbuf))
 80142f0:	e7e5      	b.n	80142be <_ZN10Wtp3Driver8endFrameEv+0x1a>
    }
    frame_tools_uint32_to_bytes_LSB(crc, arr);
 80142f2:	f107 030c 	add.w	r3, r7, #12
 80142f6:	4619      	mov	r1, r3
 80142f8:	6978      	ldr	r0, [r7, #20]
 80142fa:	f7fe fac8 	bl	801288e <_Z31frame_tools_uint32_to_bytes_LSBmPh>
    prot3buff_putBytes(txbuf, arr, CRC_SIZE);
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	f107 010c 	add.w	r1, r7, #12
 8014306:	2204      	movs	r2, #4
 8014308:	4618      	mov	r0, r3
 801430a:	f7fe fb9b 	bl	8012a44 <_Z18prot3buff_putBytesP11prot3buff_tPht>

    //replace size header
    //size includes size-header & crc
    size = prot3buff_getWriterPos(txbuf);
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	4618      	mov	r0, r3
 8014314:	f7fe fb19 	bl	801294a <_Z22prot3buff_getWriterPosP11prot3buff_t>
 8014318:	4603      	mov	r3, r0
 801431a:	827b      	strh	r3, [r7, #18]
    addSizeHeader(size, 1);
 801431c:	8a7b      	ldrh	r3, [r7, #18]
 801431e:	2201      	movs	r2, #1
 8014320:	4619      	mov	r1, r3
 8014322:	6878      	ldr	r0, [r7, #4]
 8014324:	f000 f870 	bl	8014408 <_ZN10Wtp3Driver13addSizeHeaderEth>

    //scramble
    prot3buff_setReaderToPos(txbuf, 1);
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	2101      	movs	r1, #1
 801432e:	4618      	mov	r0, r3
 8014330:	f7fe fb34 	bl	801299c <_Z24prot3buff_setReaderToPosP11prot3buff_tt>
    scrambler_reset_state(&scrambler);
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	3324      	adds	r3, #36	; 0x24
 8014338:	4618      	mov	r0, r3
 801433a:	f7ff fc04 	bl	8013b46 <_Z21scrambler_reset_stateP11scrambler_t>
    while(prot3buff_isByteAvailable(txbuf))
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	4618      	mov	r0, r3
 8014344:	f7fe fbbc 	bl	8012ac0 <_Z25prot3buff_isByteAvailableP11prot3buff_t>
 8014348:	4603      	mov	r3, r0
 801434a:	2b00      	cmp	r3, #0
 801434c:	bf14      	ite	ne
 801434e:	2301      	movne	r3, #1
 8014350:	2300      	moveq	r3, #0
 8014352:	b2db      	uxtb	r3, r3
 8014354:	2b00      	cmp	r3, #0
 8014356:	d017      	beq.n	8014388 <_ZN10Wtp3Driver8endFrameEv+0xe4>
    {
        byte = (uint8_t)prot3buff_readByte(txbuf);
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	4618      	mov	r0, r3
 801435e:	f7fe fbc3 	bl	8012ae8 <_Z18prot3buff_readByteP11prot3buff_t>
 8014362:	4603      	mov	r3, r0
 8014364:	747b      	strb	r3, [r7, #17]
        byte = scrambler_update(&scrambler, byte);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	3324      	adds	r3, #36	; 0x24
 801436a:	7c7a      	ldrb	r2, [r7, #17]
 801436c:	4611      	mov	r1, r2
 801436e:	4618      	mov	r0, r3
 8014370:	f7ff fbf7 	bl	8013b62 <_Z16scrambler_updateP11scrambler_th>
 8014374:	4603      	mov	r3, r0
 8014376:	747b      	strb	r3, [r7, #17]
        prot3buff_replaceLastReadByte(txbuf, byte);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	7c7a      	ldrb	r2, [r7, #17]
 801437e:	4611      	mov	r1, r2
 8014380:	4618      	mov	r0, r3
 8014382:	f7fe fc1a 	bl	8012bba <_Z29prot3buff_replaceLastReadByteP11prot3buff_th>
    while(prot3buff_isByteAvailable(txbuf))
 8014386:	e7da      	b.n	801433e <_ZN10Wtp3Driver8endFrameEv+0x9a>
    }

    //reset reader to 0 pos
    prot3buff_setReaderToPos(txbuf, 0);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	2100      	movs	r1, #0
 801438e:	4618      	mov	r0, r3
 8014390:	f7fe fb04 	bl	801299c <_Z24prot3buff_setReaderToPosP11prot3buff_tt>
}
 8014394:	bf00      	nop
 8014396:	3718      	adds	r7, #24
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}

0801439c <_ZN10Wtp3Driver15isFrameReceivedEv>:

uint8_t Wtp3Driver::isFrameReceived()
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b082      	sub	sp, #8
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
    return (prot3buff_getWriterPos(rxbuf) > 0) && prot3buff_isByteAvailable(rxbuf);
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	685b      	ldr	r3, [r3, #4]
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7fe face 	bl	801294a <_Z22prot3buff_getWriterPosP11prot3buff_t>
 80143ae:	4603      	mov	r3, r0
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	dd09      	ble.n	80143c8 <_ZN10Wtp3Driver15isFrameReceivedEv+0x2c>
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	685b      	ldr	r3, [r3, #4]
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7fe fb81 	bl	8012ac0 <_Z25prot3buff_isByteAvailableP11prot3buff_t>
 80143be:	4603      	mov	r3, r0
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d001      	beq.n	80143c8 <_ZN10Wtp3Driver15isFrameReceivedEv+0x2c>
 80143c4:	2301      	movs	r3, #1
 80143c6:	e000      	b.n	80143ca <_ZN10Wtp3Driver15isFrameReceivedEv+0x2e>
 80143c8:	2300      	movs	r3, #0
}
 80143ca:	4618      	mov	r0, r3
 80143cc:	3708      	adds	r7, #8
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}

080143d2 <_ZN10Wtp3Driver11isFrameSentEv>:

uint8_t Wtp3Driver::isFrameSent()
{
 80143d2:	b580      	push	{r7, lr}
 80143d4:	b082      	sub	sp, #8
 80143d6:	af00      	add	r7, sp, #0
 80143d8:	6078      	str	r0, [r7, #4]
    return (prot3buff_getWriterPos(txbuf) > 0) && !prot3buff_isByteAvailable(txbuf);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	4618      	mov	r0, r3
 80143e0:	f7fe fab3 	bl	801294a <_Z22prot3buff_getWriterPosP11prot3buff_t>
 80143e4:	4603      	mov	r3, r0
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	dd09      	ble.n	80143fe <_ZN10Wtp3Driver11isFrameSentEv+0x2c>
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7fe fb66 	bl	8012ac0 <_Z25prot3buff_isByteAvailableP11prot3buff_t>
 80143f4:	4603      	mov	r3, r0
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d101      	bne.n	80143fe <_ZN10Wtp3Driver11isFrameSentEv+0x2c>
 80143fa:	2301      	movs	r3, #1
 80143fc:	e000      	b.n	8014400 <_ZN10Wtp3Driver11isFrameSentEv+0x2e>
 80143fe:	2300      	movs	r3, #0
}
 8014400:	4618      	mov	r0, r3
 8014402:	3708      	adds	r7, #8
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}

08014408 <_ZN10Wtp3Driver13addSizeHeaderEth>:

void Wtp3Driver::addSizeHeader(uint16_t size, uint8_t replace)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b084      	sub	sp, #16
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	460b      	mov	r3, r1
 8014412:	807b      	strh	r3, [r7, #2]
 8014414:	4613      	mov	r3, r2
 8014416:	707b      	strb	r3, [r7, #1]
    uint16_t pos;
    uint8_t arr[SIZE_HEADER_SIZE];

    arr[0] = 0x03;
 8014418:	2303      	movs	r3, #3
 801441a:	723b      	strb	r3, [r7, #8]
    arr[1] = (size >> 8) & 0x07;
 801441c:	887b      	ldrh	r3, [r7, #2]
 801441e:	121b      	asrs	r3, r3, #8
 8014420:	b2db      	uxtb	r3, r3
 8014422:	f003 0307 	and.w	r3, r3, #7
 8014426:	b2db      	uxtb	r3, r3
 8014428:	727b      	strb	r3, [r7, #9]
    arr[2] = size & 0xFF;
 801442a:	887b      	ldrh	r3, [r7, #2]
 801442c:	b2db      	uxtb	r3, r3
 801442e:	72bb      	strb	r3, [r7, #10]
    arr[3] = crc_tools_ibutton_calculate(arr, SIZE_HEADER_SIZE - 1);
 8014430:	f107 0308 	add.w	r3, r7, #8
 8014434:	2103      	movs	r1, #3
 8014436:	4618      	mov	r0, r3
 8014438:	f7fe fa05 	bl	8012846 <_Z27crc_tools_ibutton_calculatePhh>
 801443c:	4603      	mov	r3, r0
 801443e:	72fb      	strb	r3, [r7, #11]

    if(replace)
 8014440:	787b      	ldrb	r3, [r7, #1]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d00c      	beq.n	8014460 <_ZN10Wtp3Driver13addSizeHeaderEth+0x58>
    {
        pos = prot3buff_getWriterPos(txbuf);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	4618      	mov	r0, r3
 801444c:	f7fe fa7d 	bl	801294a <_Z22prot3buff_getWriterPosP11prot3buff_t>
 8014450:	4603      	mov	r3, r0
 8014452:	81fb      	strh	r3, [r7, #14]
        prot3buff_setWriterToPos(txbuf, 0);
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	2100      	movs	r1, #0
 801445a:	4618      	mov	r0, r3
 801445c:	f7fe fa8b 	bl	8012976 <_Z24prot3buff_setWriterToPosP11prot3buff_tt>
    }
    prot3buff_putBytes(txbuf, arr, SIZE_HEADER_SIZE);
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	f107 0108 	add.w	r1, r7, #8
 8014468:	2204      	movs	r2, #4
 801446a:	4618      	mov	r0, r3
 801446c:	f7fe faea 	bl	8012a44 <_Z18prot3buff_putBytesP11prot3buff_tPht>
    if(replace)
 8014470:	787b      	ldrb	r3, [r7, #1]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d006      	beq.n	8014484 <_ZN10Wtp3Driver13addSizeHeaderEth+0x7c>
    {
        prot3buff_setWriterToPos(txbuf, pos);
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	89fa      	ldrh	r2, [r7, #14]
 801447c:	4611      	mov	r1, r2
 801447e:	4618      	mov	r0, r3
 8014480:	f7fe fa79 	bl	8012976 <_Z24prot3buff_setWriterToPosP11prot3buff_tt>
    }
}
 8014484:	bf00      	nop
 8014486:	3710      	adds	r7, #16
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}

0801448c <_ZN10Wtp3Driver15checkSizeHeaderEh>:

uint16_t Wtp3Driver::checkSizeHeader(uint8_t descramble)
{
 801448c:	b590      	push	{r4, r7, lr}
 801448e:	b087      	sub	sp, #28
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
 8014494:	460b      	mov	r3, r1
 8014496:	70fb      	strb	r3, [r7, #3]
    uint8_t arr[SIZE_HEADER_SIZE];
    uint8_t read;
    uint8_t i;
    uint8_t crc;
    uint16_t size = 0xFFFF;
 8014498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801449c:	82bb      	strh	r3, [r7, #20]

    read = prot3buff_readBytes(rxbuf, arr, SIZE_HEADER_SIZE);
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	685b      	ldr	r3, [r3, #4]
 80144a2:	f107 010c 	add.w	r1, r7, #12
 80144a6:	2204      	movs	r2, #4
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7fe fb3f 	bl	8012b2c <_Z19prot3buff_readBytesP11prot3buff_tPht>
 80144ae:	4603      	mov	r3, r0
 80144b0:	74fb      	strb	r3, [r7, #19]
    if(read == SIZE_HEADER_SIZE)
 80144b2:	7cfb      	ldrb	r3, [r7, #19]
 80144b4:	2b04      	cmp	r3, #4
 80144b6:	d147      	bne.n	8014548 <_ZN10Wtp3Driver15checkSizeHeaderEh+0xbc>
    {
        //descramble
        if(descramble)
 80144b8:	78fb      	ldrb	r3, [r7, #3]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d02a      	beq.n	8014514 <_ZN10Wtp3Driver15checkSizeHeaderEh+0x88>
        {
            scrambler_reset_state(&scrambler);
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	3324      	adds	r3, #36	; 0x24
 80144c2:	4618      	mov	r0, r3
 80144c4:	f7ff fb3f 	bl	8013b46 <_Z21scrambler_reset_stateP11scrambler_t>
            //byte 0 is not scrambled
            for(i = 1; i < SIZE_HEADER_SIZE; i++)
 80144c8:	2301      	movs	r3, #1
 80144ca:	75fb      	strb	r3, [r7, #23]
 80144cc:	7dfb      	ldrb	r3, [r7, #23]
 80144ce:	2b03      	cmp	r3, #3
 80144d0:	dc18      	bgt.n	8014504 <_ZN10Wtp3Driver15checkSizeHeaderEh+0x78>
            {
                arr[i] = descrambler_update(&scrambler, arr[i]);
 80144d2:	7dfc      	ldrb	r4, [r7, #23]
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80144da:	7dfb      	ldrb	r3, [r7, #23]
 80144dc:	f107 0118 	add.w	r1, r7, #24
 80144e0:	440b      	add	r3, r1
 80144e2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80144e6:	4619      	mov	r1, r3
 80144e8:	4610      	mov	r0, r2
 80144ea:	f7ff fb7b 	bl	8013be4 <_Z18descrambler_updateP11scrambler_th>
 80144ee:	4603      	mov	r3, r0
 80144f0:	461a      	mov	r2, r3
 80144f2:	f107 0318 	add.w	r3, r7, #24
 80144f6:	4423      	add	r3, r4
 80144f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
            for(i = 1; i < SIZE_HEADER_SIZE; i++)
 80144fc:	7dfb      	ldrb	r3, [r7, #23]
 80144fe:	3301      	adds	r3, #1
 8014500:	75fb      	strb	r3, [r7, #23]
 8014502:	e7e3      	b.n	80144cc <_ZN10Wtp3Driver15checkSizeHeaderEh+0x40>
            }
            prot3buff_replaceLastNReadBytes(rxbuf, arr, SIZE_HEADER_SIZE);
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	685b      	ldr	r3, [r3, #4]
 8014508:	f107 010c 	add.w	r1, r7, #12
 801450c:	2204      	movs	r2, #4
 801450e:	4618      	mov	r0, r3
 8014510:	f7fe fb6d 	bl	8012bee <_Z31prot3buff_replaceLastNReadBytesP11prot3buff_tPht>
        }
        crc = crc_tools_ibutton_calculate(arr, SIZE_HEADER_SIZE - 1);
 8014514:	f107 030c 	add.w	r3, r7, #12
 8014518:	2103      	movs	r1, #3
 801451a:	4618      	mov	r0, r3
 801451c:	f7fe f993 	bl	8012846 <_Z27crc_tools_ibutton_calculatePhh>
 8014520:	4603      	mov	r3, r0
 8014522:	74bb      	strb	r3, [r7, #18]
        if((arr[0] == 0x03) && (crc == arr[SIZE_HEADER_SIZE - 1]))
 8014524:	7b3b      	ldrb	r3, [r7, #12]
 8014526:	2b03      	cmp	r3, #3
 8014528:	d10e      	bne.n	8014548 <_ZN10Wtp3Driver15checkSizeHeaderEh+0xbc>
 801452a:	7bfb      	ldrb	r3, [r7, #15]
 801452c:	7cba      	ldrb	r2, [r7, #18]
 801452e:	429a      	cmp	r2, r3
 8014530:	d10a      	bne.n	8014548 <_ZN10Wtp3Driver15checkSizeHeaderEh+0xbc>
        {
            size = ((arr[1] & 0x07) << 8) | arr[2];
 8014532:	7b7b      	ldrb	r3, [r7, #13]
 8014534:	021b      	lsls	r3, r3, #8
 8014536:	b21b      	sxth	r3, r3
 8014538:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801453c:	b21a      	sxth	r2, r3
 801453e:	7bbb      	ldrb	r3, [r7, #14]
 8014540:	b21b      	sxth	r3, r3
 8014542:	4313      	orrs	r3, r2
 8014544:	b21b      	sxth	r3, r3
 8014546:	82bb      	strh	r3, [r7, #20]
        }
    }
    prot3buff_setReaderToPos(rxbuf, 0);
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	685b      	ldr	r3, [r3, #4]
 801454c:	2100      	movs	r1, #0
 801454e:	4618      	mov	r0, r3
 8014550:	f7fe fa24 	bl	801299c <_Z24prot3buff_setReaderToPosP11prot3buff_tt>
    return size;
 8014554:	8abb      	ldrh	r3, [r7, #20]
}
 8014556:	4618      	mov	r0, r3
 8014558:	371c      	adds	r7, #28
 801455a:	46bd      	mov	sp, r7
 801455c:	bd90      	pop	{r4, r7, pc}
	...

08014560 <_ZN10Wtp3Driver20sizeHeaderFirstCheckEv>:

uint16_t Wtp3Driver::sizeHeaderFirstCheck()
{
 8014560:	b580      	push	{r7, lr}
 8014562:	af00      	add	r7, sp, #0
    return singleton->checkSizeHeader(1);
 8014564:	4b04      	ldr	r3, [pc, #16]	; (8014578 <_ZN10Wtp3Driver20sizeHeaderFirstCheckEv+0x18>)
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	2101      	movs	r1, #1
 801456a:	4618      	mov	r0, r3
 801456c:	f7ff ff8e 	bl	801448c <_ZN10Wtp3Driver15checkSizeHeaderEh>
 8014570:	4603      	mov	r3, r0
}
 8014572:	4618      	mov	r0, r3
 8014574:	bd80      	pop	{r7, pc}
 8014576:	bf00      	nop
 8014578:	20001018 	.word	0x20001018

0801457c <_ZN10Wtp3Driver10checkFrameEv>:

uint8_t Wtp3Driver::checkFrame()
{
 801457c:	b590      	push	{r4, r7, lr}
 801457e:	b08b      	sub	sp, #44	; 0x2c
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
    uint8_t arr[ADDRESS_HEADER_SIZE];
    uint16_t size;
    uint32_t crc = crc_tools_32_get_initial_value();
 8014584:	f7fe f924 	bl	80127d0 <_Z30crc_tools_32_get_initial_valuev>
 8014588:	6238      	str	r0, [r7, #32]
    uint32_t crcFrame;
    uint16_t i;
    uint8_t byte;
    uint8_t result = 0;
 801458a:	2300      	movs	r3, #0
 801458c:	777b      	strb	r3, [r7, #29]

    //crc check
    prot3buff_setReaderToPos(rxbuf, 0);
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	685b      	ldr	r3, [r3, #4]
 8014592:	2100      	movs	r1, #0
 8014594:	4618      	mov	r0, r3
 8014596:	f7fe fa01 	bl	801299c <_Z24prot3buff_setReaderToPosP11prot3buff_tt>
    size = checkSizeHeader(0);
 801459a:	2100      	movs	r1, #0
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	f7ff ff75 	bl	801448c <_ZN10Wtp3Driver15checkSizeHeaderEh>
 80145a2:	4603      	mov	r3, r0
 80145a4:	84fb      	strh	r3, [r7, #38]	; 0x26
    if(size != 0xFFFF)
 80145a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80145a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80145ac:	4293      	cmp	r3, r2
 80145ae:	d072      	beq.n	8014696 <_ZN10Wtp3Driver10checkFrameEv+0x11a>
    {
        if(size == prot3buff_getBytesAvail(rxbuf))
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	685b      	ldr	r3, [r3, #4]
 80145b4:	4618      	mov	r0, r3
 80145b6:	f7fe fa74 	bl	8012aa2 <_Z23prot3buff_getBytesAvailP11prot3buff_t>
 80145ba:	4603      	mov	r3, r0
 80145bc:	461a      	mov	r2, r3
 80145be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80145c0:	4293      	cmp	r3, r2
 80145c2:	bf0c      	ite	eq
 80145c4:	2301      	moveq	r3, #1
 80145c6:	2300      	movne	r3, #0
 80145c8:	b2db      	uxtb	r3, r3
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d063      	beq.n	8014696 <_ZN10Wtp3Driver10checkFrameEv+0x11a>
        {
            //descramble, size header already descrambled
            prot3buff_setReaderToPos(rxbuf, SIZE_HEADER_SIZE);
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	685b      	ldr	r3, [r3, #4]
 80145d2:	2104      	movs	r1, #4
 80145d4:	4618      	mov	r0, r3
 80145d6:	f7fe f9e1 	bl	801299c <_Z24prot3buff_setReaderToPosP11prot3buff_tt>
            while(prot3buff_isByteAvailable(rxbuf))
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	685b      	ldr	r3, [r3, #4]
 80145de:	4618      	mov	r0, r3
 80145e0:	f7fe fa6e 	bl	8012ac0 <_Z25prot3buff_isByteAvailableP11prot3buff_t>
 80145e4:	4603      	mov	r3, r0
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	bf14      	ite	ne
 80145ea:	2301      	movne	r3, #1
 80145ec:	2300      	moveq	r3, #0
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d017      	beq.n	8014624 <_ZN10Wtp3Driver10checkFrameEv+0xa8>
            {
                byte = (uint8_t)prot3buff_readByte(rxbuf);
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	685b      	ldr	r3, [r3, #4]
 80145f8:	4618      	mov	r0, r3
 80145fa:	f7fe fa75 	bl	8012ae8 <_Z18prot3buff_readByteP11prot3buff_t>
 80145fe:	4603      	mov	r3, r0
 8014600:	773b      	strb	r3, [r7, #28]
                byte = descrambler_update(&scrambler, byte);
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	3324      	adds	r3, #36	; 0x24
 8014606:	7f3a      	ldrb	r2, [r7, #28]
 8014608:	4611      	mov	r1, r2
 801460a:	4618      	mov	r0, r3
 801460c:	f7ff faea 	bl	8013be4 <_Z18descrambler_updateP11scrambler_th>
 8014610:	4603      	mov	r3, r0
 8014612:	773b      	strb	r3, [r7, #28]
                prot3buff_replaceLastReadByte(rxbuf, byte);
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	685b      	ldr	r3, [r3, #4]
 8014618:	7f3a      	ldrb	r2, [r7, #28]
 801461a:	4611      	mov	r1, r2
 801461c:	4618      	mov	r0, r3
 801461e:	f7fe facc 	bl	8012bba <_Z29prot3buff_replaceLastReadByteP11prot3buff_th>
            while(prot3buff_isByteAvailable(rxbuf))
 8014622:	e7da      	b.n	80145da <_ZN10Wtp3Driver10checkFrameEv+0x5e>
            }

            //calculation of data part size
            if(size >= (SIZE_HEADER_SIZE + CRC_SIZE))
 8014624:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014626:	2b07      	cmp	r3, #7
 8014628:	dd03      	ble.n	8014632 <_ZN10Wtp3Driver10checkFrameEv+0xb6>
            {
                size -= (SIZE_HEADER_SIZE + CRC_SIZE);
 801462a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801462c:	3b08      	subs	r3, #8
 801462e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014630:	e001      	b.n	8014636 <_ZN10Wtp3Driver10checkFrameEv+0xba>
            }
            else
            {
                size = 0;
 8014632:	2300      	movs	r3, #0
 8014634:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            //crc check
            prot3buff_setReaderToPos(rxbuf, SIZE_HEADER_SIZE);
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	685b      	ldr	r3, [r3, #4]
 801463a:	2104      	movs	r1, #4
 801463c:	4618      	mov	r0, r3
 801463e:	f7fe f9ad 	bl	801299c <_Z24prot3buff_setReaderToPosP11prot3buff_tt>
            for(i = 0; i < size; i++)
 8014642:	2300      	movs	r3, #0
 8014644:	83fb      	strh	r3, [r7, #30]
 8014646:	8bfa      	ldrh	r2, [r7, #30]
 8014648:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801464a:	429a      	cmp	r2, r3
 801464c:	da0f      	bge.n	801466e <_ZN10Wtp3Driver10checkFrameEv+0xf2>
            {
                crc = crc32_basic_update(crc, (uint8_t)prot3buff_readByte(rxbuf));
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	685b      	ldr	r3, [r3, #4]
 8014652:	4618      	mov	r0, r3
 8014654:	f7fe fa48 	bl	8012ae8 <_Z18prot3buff_readByteP11prot3buff_t>
 8014658:	4603      	mov	r3, r0
 801465a:	b2db      	uxtb	r3, r3
 801465c:	4619      	mov	r1, r3
 801465e:	6a38      	ldr	r0, [r7, #32]
 8014660:	f7fe f89c 	bl	801279c <_Z18crc32_basic_updatemh>
 8014664:	6238      	str	r0, [r7, #32]
            for(i = 0; i < size; i++)
 8014666:	8bfb      	ldrh	r3, [r7, #30]
 8014668:	3301      	adds	r3, #1
 801466a:	83fb      	strh	r3, [r7, #30]
 801466c:	e7eb      	b.n	8014646 <_ZN10Wtp3Driver10checkFrameEv+0xca>
            }
            prot3buff_readBytes(rxbuf, arr, CRC_SIZE);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	685b      	ldr	r3, [r3, #4]
 8014672:	f107 010c 	add.w	r1, r7, #12
 8014676:	2204      	movs	r2, #4
 8014678:	4618      	mov	r0, r3
 801467a:	f7fe fa57 	bl	8012b2c <_Z19prot3buff_readBytesP11prot3buff_tPht>
            crcFrame = frame_tools_bytes_LSB_to_uint32(arr);
 801467e:	f107 030c 	add.w	r3, r7, #12
 8014682:	4618      	mov	r0, r3
 8014684:	f7fe f924 	bl	80128d0 <_Z31frame_tools_bytes_LSB_to_uint32Ph>
 8014688:	61b8      	str	r0, [r7, #24]
            if(crc == crcFrame)
 801468a:	6a3a      	ldr	r2, [r7, #32]
 801468c:	69bb      	ldr	r3, [r7, #24]
 801468e:	429a      	cmp	r2, r3
 8014690:	d101      	bne.n	8014696 <_ZN10Wtp3Driver10checkFrameEv+0x11a>
            {
                result = 1;
 8014692:	2301      	movs	r3, #1
 8014694:	777b      	strb	r3, [r7, #29]
            }
        }
    }

    if(result != 0)
 8014696:	7f7b      	ldrb	r3, [r7, #29]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d04e      	beq.n	801473a <_ZN10Wtp3Driver10checkFrameEv+0x1be>
    {
        //delete crc
        prot3buff_setWriterToPos(rxbuf, prot3buff_getWriterPos(rxbuf) - CRC_SIZE);
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	685c      	ldr	r4, [r3, #4]
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	685b      	ldr	r3, [r3, #4]
 80146a4:	4618      	mov	r0, r3
 80146a6:	f7fe f950 	bl	801294a <_Z22prot3buff_getWriterPosP11prot3buff_t>
 80146aa:	4603      	mov	r3, r0
 80146ac:	3b04      	subs	r3, #4
 80146ae:	b29b      	uxth	r3, r3
 80146b0:	4619      	mov	r1, r3
 80146b2:	4620      	mov	r0, r4
 80146b4:	f7fe f95f 	bl	8012976 <_Z24prot3buff_setWriterToPosP11prot3buff_tt>

        //received address header
        prot3buff_setReaderToPos(rxbuf, SIZE_HEADER_SIZE);
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	685b      	ldr	r3, [r3, #4]
 80146bc:	2104      	movs	r1, #4
 80146be:	4618      	mov	r0, r3
 80146c0:	f7fe f96c 	bl	801299c <_Z24prot3buff_setReaderToPosP11prot3buff_tt>
        prot3buff_readBytes(rxbuf, arr, ADDRESS_HEADER_SIZE);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	685b      	ldr	r3, [r3, #4]
 80146c8:	f107 010c 	add.w	r1, r7, #12
 80146cc:	220a      	movs	r2, #10
 80146ce:	4618      	mov	r0, r3
 80146d0:	f7fe fa2c 	bl	8012b2c <_Z19prot3buff_readBytesP11prot3buff_tPht>

        receivedAddrHeader.dest = frame_tools_bytes_LSB_to_uint32(&arr[0]);
 80146d4:	f107 030c 	add.w	r3, r7, #12
 80146d8:	4618      	mov	r0, r3
 80146da:	f7fe f8f9 	bl	80128d0 <_Z31frame_tools_bytes_LSB_to_uint32Ph>
 80146de:	4602      	mov	r2, r0
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	619a      	str	r2, [r3, #24]

        receivedAddrHeader.sender = frame_tools_bytes_LSB_to_uint32(&arr[4]);
 80146e4:	f107 030c 	add.w	r3, r7, #12
 80146e8:	3304      	adds	r3, #4
 80146ea:	4618      	mov	r0, r3
 80146ec:	f7fe f8f0 	bl	80128d0 <_Z31frame_tools_bytes_LSB_to_uint32Ph>
 80146f0:	4602      	mov	r2, r0
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	61da      	str	r2, [r3, #28]
        receivedAddrHeader.answer = (arr[8] & (1 << 7)) != 0;
 80146f6:	7d3b      	ldrb	r3, [r7, #20]
 80146f8:	b25b      	sxtb	r3, r3
 80146fa:	b2db      	uxtb	r3, r3
 80146fc:	09db      	lsrs	r3, r3, #7
 80146fe:	b2db      	uxtb	r3, r3
 8014700:	461a      	mov	r2, r3
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	f883 2020 	strb.w	r2, [r3, #32]
        receivedAddrHeader.signin = (arr[8] & (1 << 6)) != 0;
 8014708:	7d3b      	ldrb	r3, [r7, #20]
 801470a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801470e:	2b00      	cmp	r3, #0
 8014710:	bf14      	ite	ne
 8014712:	2301      	movne	r3, #1
 8014714:	2300      	moveq	r3, #0
 8014716:	b2db      	uxtb	r3, r3
 8014718:	461a      	mov	r2, r3
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        receivedAddrHeader.device = ((arr[8] & 0x07) << 8) | arr[9];
 8014720:	7d3b      	ldrb	r3, [r7, #20]
 8014722:	021b      	lsls	r3, r3, #8
 8014724:	b21b      	sxth	r3, r3
 8014726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801472a:	b21a      	sxth	r2, r3
 801472c:	7d7b      	ldrb	r3, [r7, #21]
 801472e:	b21b      	sxth	r3, r3
 8014730:	4313      	orrs	r3, r2
 8014732:	b21b      	sxth	r3, r3
 8014734:	b29a      	uxth	r2, r3
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	845a      	strh	r2, [r3, #34]	; 0x22
    }

    return result;
 801473a:	7f7b      	ldrb	r3, [r7, #29]
}
 801473c:	4618      	mov	r0, r3
 801473e:	372c      	adds	r7, #44	; 0x2c
 8014740:	46bd      	mov	sp, r7
 8014742:	bd90      	pop	{r4, r7, pc}

08014744 <_ZN10Wtp3Driver10findDeviceEt>:
    }
    return cmdSize;
}

IWtp3Device* Wtp3Driver::findDevice(uint16_t device)
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b084      	sub	sp, #16
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
 801474c:	460b      	mov	r3, r1
 801474e:	807b      	strh	r3, [r7, #2]
    IWtp3Device *result = NULL;
 8014750:	2300      	movs	r3, #0
 8014752:	60fb      	str	r3, [r7, #12]
    uint16_t i;

    for(i = 0; i < devicesArrSize; i++)
 8014754:	2300      	movs	r3, #0
 8014756:	817b      	strh	r3, [r7, #10]
 8014758:	897b      	ldrh	r3, [r7, #10]
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	8992      	ldrh	r2, [r2, #12]
 801475e:	4293      	cmp	r3, r2
 8014760:	da27      	bge.n	80147b2 <_ZN10Wtp3Driver10findDeviceEt+0x6e>
    {
        uint16_t _device = devicesArr[i]->getDeviceNumber();
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	689a      	ldr	r2, [r3, #8]
 8014766:	897b      	ldrh	r3, [r7, #10]
 8014768:	009b      	lsls	r3, r3, #2
 801476a:	4413      	add	r3, r2
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	3308      	adds	r3, #8
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	687a      	ldr	r2, [r7, #4]
 8014776:	6891      	ldr	r1, [r2, #8]
 8014778:	897a      	ldrh	r2, [r7, #10]
 801477a:	0092      	lsls	r2, r2, #2
 801477c:	440a      	add	r2, r1
 801477e:	6812      	ldr	r2, [r2, #0]
 8014780:	4610      	mov	r0, r2
 8014782:	4798      	blx	r3
 8014784:	4603      	mov	r3, r0
 8014786:	813b      	strh	r3, [r7, #8]

        if((_device == device) || (_device == IWtp3Device::ANY_DEVICE_NUMBER))
 8014788:	893a      	ldrh	r2, [r7, #8]
 801478a:	887b      	ldrh	r3, [r7, #2]
 801478c:	429a      	cmp	r2, r3
 801478e:	d004      	beq.n	801479a <_ZN10Wtp3Driver10findDeviceEt+0x56>
 8014790:	893b      	ldrh	r3, [r7, #8]
 8014792:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8014796:	4293      	cmp	r3, r2
 8014798:	d107      	bne.n	80147aa <_ZN10Wtp3Driver10findDeviceEt+0x66>
        {
            result = devicesArr[i];
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	689a      	ldr	r2, [r3, #8]
 801479e:	897b      	ldrh	r3, [r7, #10]
 80147a0:	009b      	lsls	r3, r3, #2
 80147a2:	4413      	add	r3, r2
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	60fb      	str	r3, [r7, #12]
            break;
 80147a8:	e003      	b.n	80147b2 <_ZN10Wtp3Driver10findDeviceEt+0x6e>
    for(i = 0; i < devicesArrSize; i++)
 80147aa:	897b      	ldrh	r3, [r7, #10]
 80147ac:	3301      	adds	r3, #1
 80147ae:	817b      	strh	r3, [r7, #10]
 80147b0:	e7d2      	b.n	8014758 <_ZN10Wtp3Driver10findDeviceEt+0x14>
        }
    }
    return result;
 80147b2:	68fb      	ldr	r3, [r7, #12]
}
 80147b4:	4618      	mov	r0, r3
 80147b6:	3710      	adds	r7, #16
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}

080147bc <_ZN10Wtp3Driver16findDeviceToSendEv>:

IWtp3Device* Wtp3Driver::findDeviceToSend()
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b084      	sub	sp, #16
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
    IWtp3Device *result = NULL;
 80147c4:	2300      	movs	r3, #0
 80147c6:	60fb      	str	r3, [r7, #12]
    uint16_t i;

    for(i = 0; i < devicesArrSize; i++)
 80147c8:	2300      	movs	r3, #0
 80147ca:	817b      	strh	r3, [r7, #10]
 80147cc:	897b      	ldrh	r3, [r7, #10]
 80147ce:	687a      	ldr	r2, [r7, #4]
 80147d0:	8992      	ldrh	r2, [r2, #12]
 80147d2:	4293      	cmp	r3, r2
 80147d4:	da1f      	bge.n	8014816 <_ZN10Wtp3Driver16findDeviceToSendEv+0x5a>
    {
        if(devicesArr[i]->sendNeeded())
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	689a      	ldr	r2, [r3, #8]
 80147da:	897b      	ldrh	r3, [r7, #10]
 80147dc:	009b      	lsls	r3, r3, #2
 80147de:	4413      	add	r3, r2
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	330c      	adds	r3, #12
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	687a      	ldr	r2, [r7, #4]
 80147ea:	6891      	ldr	r1, [r2, #8]
 80147ec:	897a      	ldrh	r2, [r7, #10]
 80147ee:	0092      	lsls	r2, r2, #2
 80147f0:	440a      	add	r2, r1
 80147f2:	6812      	ldr	r2, [r2, #0]
 80147f4:	4610      	mov	r0, r2
 80147f6:	4798      	blx	r3
 80147f8:	4603      	mov	r3, r0
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d007      	beq.n	801480e <_ZN10Wtp3Driver16findDeviceToSendEv+0x52>
        {
            result = devicesArr[i];
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	689a      	ldr	r2, [r3, #8]
 8014802:	897b      	ldrh	r3, [r7, #10]
 8014804:	009b      	lsls	r3, r3, #2
 8014806:	4413      	add	r3, r2
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	60fb      	str	r3, [r7, #12]
            break;
 801480c:	e003      	b.n	8014816 <_ZN10Wtp3Driver16findDeviceToSendEv+0x5a>
    for(i = 0; i < devicesArrSize; i++)
 801480e:	897b      	ldrh	r3, [r7, #10]
 8014810:	3301      	adds	r3, #1
 8014812:	817b      	strh	r3, [r7, #10]
 8014814:	e7da      	b.n	80147cc <_ZN10Wtp3Driver16findDeviceToSendEv+0x10>
        }
    }
    return result;
 8014816:	68fb      	ldr	r3, [r7, #12]
}
 8014818:	4618      	mov	r0, r3
 801481a:	3710      	adds	r7, #16
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}

08014820 <_ZN10Wtp3Driver21incrementErrorCounterEPt>:

void Wtp3Driver::incrementErrorCounter(uint16_t *counter)
{
 8014820:	b480      	push	{r7}
 8014822:	b083      	sub	sp, #12
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
    if(*counter < 0xFFFF)
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	881b      	ldrh	r3, [r3, #0]
 801482c:	461a      	mov	r2, r3
 801482e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8014832:	429a      	cmp	r2, r3
 8014834:	dc05      	bgt.n	8014842 <_ZN10Wtp3Driver21incrementErrorCounterEPt+0x22>
    {
        (*counter)++;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	881b      	ldrh	r3, [r3, #0]
 801483a:	3301      	adds	r3, #1
 801483c:	b29a      	uxth	r2, r3
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	801a      	strh	r2, [r3, #0]
    }
}
 8014842:	bf00      	nop
 8014844:	370c      	adds	r7, #12
 8014846:	46bd      	mov	sp, r7
 8014848:	bc80      	pop	{r7}
 801484a:	4770      	bx	lr

0801484c <_ZN9IDateTimeC1Ev>:
class IDateTime
 801484c:	b480      	push	{r7}
 801484e:	b083      	sub	sp, #12
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
 8014854:	4a04      	ldr	r2, [pc, #16]	; (8014868 <_ZN9IDateTimeC1Ev+0x1c>)
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	601a      	str	r2, [r3, #0]
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	4618      	mov	r0, r3
 801485e:	370c      	adds	r7, #12
 8014860:	46bd      	mov	sp, r7
 8014862:	bc80      	pop	{r7}
 8014864:	4770      	bx	lr
 8014866:	bf00      	nop
 8014868:	0801cba0 	.word	0x0801cba0

0801486c <_ZN11CRTCalendarC1Ev>:
	static IDelayFunctions* delayFn;
	tm* cachedTimeStruct;
	TRTCInitResult initStatus;

public:
	CRTCalendar()
 801486c:	b580      	push	{r7, lr}
 801486e:	b082      	sub	sp, #8
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
	{
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	4618      	mov	r0, r3
 8014878:	f7ff ffe8 	bl	801484c <_ZN9IDateTimeC1Ev>
 801487c:	4a05      	ldr	r2, [pc, #20]	; (8014894 <_ZN11CRTCalendarC1Ev+0x28>)
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	601a      	str	r2, [r3, #0]
		initStatus = TRTC_NOT_INIT;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	2200      	movs	r2, #0
 8014886:	721a      	strb	r2, [r3, #8]
	}
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	4618      	mov	r0, r3
 801488c:	3708      	adds	r7, #8
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}
 8014892:	bf00      	nop
 8014894:	0801cb5c 	.word	0x0801cb5c

08014898 <_ZN8ICommVarC1Ev>:
	ICommVar()
 8014898:	b480      	push	{r7}
 801489a:	b083      	sub	sp, #12
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
	{
 80148a0:	4a04      	ldr	r2, [pc, #16]	; (80148b4 <_ZN8ICommVarC1Ev+0x1c>)
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	601a      	str	r2, [r3, #0]
	}
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	4618      	mov	r0, r3
 80148aa:	370c      	adds	r7, #12
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bc80      	pop	{r7}
 80148b0:	4770      	bx	lr
 80148b2:	bf00      	nop
 80148b4:	0801cd40 	.word	0x0801cd40

080148b8 <_ZN11IWtp3DeviceC1Ev>:
#include "wtp3driver.h"
#include "wtp3structs.h"

class Wtp3Driver;

class IWtp3Device
 80148b8:	b480      	push	{r7}
 80148ba:	b083      	sub	sp, #12
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	4a04      	ldr	r2, [pc, #16]	; (80148d4 <_ZN11IWtp3DeviceC1Ev+0x1c>)
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	601a      	str	r2, [r3, #0]
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	4618      	mov	r0, r3
 80148ca:	370c      	adds	r7, #12
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bc80      	pop	{r7}
 80148d0:	4770      	bx	lr
 80148d2:	bf00      	nop
 80148d4:	08022738 	.word	0x08022738

080148d8 <_ZN17MotoCounterSetterC1Ev>:
	MotoCounterSetter(): counterAddress(0)
 80148d8:	b580      	push	{r7, lr}
 80148da:	b082      	sub	sp, #8
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	4618      	mov	r0, r3
 80148e4:	f7ff ffe8 	bl	80148b8 <_ZN11IWtp3DeviceC1Ev>
 80148e8:	4a15      	ldr	r2, [pc, #84]	; (8014940 <_ZN17MotoCounterSetterC1Ev+0x68>)
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	601a      	str	r2, [r3, #0]
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2200      	movs	r2, #0
 80148f2:	605a      	str	r2, [r3, #4]
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	3310      	adds	r3, #16
 80148f8:	4618      	mov	r0, r3
 80148fa:	f000 faf1 	bl	8014ee0 <_ZN7CommVarImEC1Ev>
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	3320      	adds	r3, #32
 8014902:	4618      	mov	r0, r3
 8014904:	f000 faec 	bl	8014ee0 <_ZN7CommVarImEC1Ev>
		nextInspection.setCommand(CounterCommand::NEXT_INSPECTION);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	3310      	adds	r3, #16
 801490c:	2101      	movs	r1, #1
 801490e:	4618      	mov	r0, r3
 8014910:	f000 fb02 	bl	8014f18 <_ZN7CommVarImE10setCommandEh>
		currentCounter.setCommand(CounterCommand::SET_CURRENT_COUNTER);
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	3320      	adds	r3, #32
 8014918:	2102      	movs	r1, #2
 801491a:	4618      	mov	r0, r3
 801491c:	f000 fafc 	bl	8014f18 <_ZN7CommVarImE10setCommandEh>
		parameters[0] = &nextInspection;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	f103 0210 	add.w	r2, r3, #16
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	609a      	str	r2, [r3, #8]
		parameters[1] = &currentCounter;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	f103 0220 	add.w	r2, r3, #32
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	60da      	str	r2, [r3, #12]
	}
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	4618      	mov	r0, r3
 8014938:	3708      	adds	r7, #8
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}
 801493e:	bf00      	nop
 8014940:	0801ccf4 	.word	0x0801ccf4

08014944 <_ZN19DriverCommunicationC1Ev>:
	DriverCommunication(): address(1){}
 8014944:	b580      	push	{r7, lr}
 8014946:	b082      	sub	sp, #8
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	4618      	mov	r0, r3
 8014950:	f7f7 fc6a 	bl	800c228 <_ZN10IUpdatableC1Ev>
 8014954:	4a0a      	ldr	r2, [pc, #40]	; (8014980 <_ZN19DriverCommunicationC1Ev+0x3c>)
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	601a      	str	r2, [r3, #0]
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	2201      	movs	r2, #1
 801495e:	605a      	str	r2, [r3, #4]
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	3308      	adds	r3, #8
 8014964:	4618      	mov	r0, r3
 8014966:	f7ff ffb7 	bl	80148d8 <_ZN17MotoCounterSetterC1Ev>
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	333c      	adds	r3, #60	; 0x3c
 801496e:	4618      	mov	r0, r3
 8014970:	f7ff f97e 	bl	8013c70 <_ZN10Wtp3DriverC1Ev>
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	4618      	mov	r0, r3
 8014978:	3708      	adds	r7, #8
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}
 801497e:	bf00      	nop
 8014980:	08022758 	.word	0x08022758

08014984 <_ZN19DriverCommunicationD1Ev>:
	virtual ~DriverCommunication(){}
 8014984:	b580      	push	{r7, lr}
 8014986:	b082      	sub	sp, #8
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
 801498c:	4a06      	ldr	r2, [pc, #24]	; (80149a8 <_ZN19DriverCommunicationD1Ev+0x24>)
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	601a      	str	r2, [r3, #0]
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	3308      	adds	r3, #8
 8014996:	4618      	mov	r0, r3
 8014998:	f7fc fb72 	bl	8011080 <_ZN17MotoCounterSetterD1Ev>
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	4618      	mov	r0, r3
 80149a0:	3708      	adds	r7, #8
 80149a2:	46bd      	mov	sp, r7
 80149a4:	bd80      	pop	{r7, pc}
 80149a6:	bf00      	nop
 80149a8:	08022758 	.word	0x08022758

080149ac <_ZN19DriverCommunicationD0Ev>:
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b082      	sub	sp, #8
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f7ff ffe5 	bl	8014984 <_ZN19DriverCommunicationD1Ev>
 80149ba:	6878      	ldr	r0, [r7, #4]
 80149bc:	f000 fe0e 	bl	80155dc <_ZdlPv>
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	4618      	mov	r0, r3
 80149c4:	3708      	adds	r7, #8
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd80      	pop	{r7, pc}
	...

080149cc <_ZN15IDelayFunctionsC1Ev>:
class IDelayFunctions
 80149cc:	b480      	push	{r7}
 80149ce:	b083      	sub	sp, #12
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
 80149d4:	4a04      	ldr	r2, [pc, #16]	; (80149e8 <_ZN15IDelayFunctionsC1Ev+0x1c>)
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	601a      	str	r2, [r3, #0]
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	4618      	mov	r0, r3
 80149de:	370c      	adds	r7, #12
 80149e0:	46bd      	mov	sp, r7
 80149e2:	bc80      	pop	{r7}
 80149e4:	4770      	bx	lr
 80149e6:	bf00      	nop
 80149e8:	0801cc24 	.word	0x0801cc24

080149ec <_ZN7CSystem15CDelayFunctionsC1Ev>:
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b082      	sub	sp, #8
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	4618      	mov	r0, r3
 80149f8:	f7ff ffe8 	bl	80149cc <_ZN15IDelayFunctionsC1Ev>
 80149fc:	4a03      	ldr	r2, [pc, #12]	; (8014a0c <_ZN7CSystem15CDelayFunctionsC1Ev+0x20>)
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	601a      	str	r2, [r3, #0]
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	4618      	mov	r0, r3
 8014a06:	3708      	adds	r7, #8
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}
 8014a0c:	0801cc0c 	.word	0x0801cc0c

08014a10 <_ZN6DriverC1Ev>:
	Driver()
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b082      	sub	sp, #8
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
	{
 8014a18:	4a1d      	ldr	r2, [pc, #116]	; (8014a90 <_ZN6DriverC1Ev+0x80>)
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	601a      	str	r2, [r3, #0]
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	33e8      	adds	r3, #232	; 0xe8
 8014a22:	4618      	mov	r0, r3
 8014a24:	f7fc f8f6 	bl	8010c14 <_ZN7CeepromC1Ev>
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	33f8      	adds	r3, #248	; 0xf8
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f7ff ff1d 	bl	801486c <_ZN11CRTCalendarC1Ev>
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f7ff ffd7 	bl	80149ec <_ZN7CSystem15CDelayFunctionsC1Ev>
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014a44:	4618      	mov	r0, r3
 8014a46:	f7f6 f8c7 	bl	800abd8 <_ZN16CBacklightDriverC1Ev>
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8014a50:	4618      	mov	r0, r3
 8014a52:	f7f8 fffd 	bl	800da50 <_ZN16CModulatedBuzzerC1Ev>
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7f6 ffd1 	bl	800ba04 <_ZN18CDriverBuzzerAsyncC1Ev>
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f7f6 ff2d 	bl	800b8c8 <_ZN13CDigitalInputC1Ev>
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8014a74:	4618      	mov	r0, r3
 8014a76:	f7f7 fbe7 	bl	800c248 <_ZN20CDamperBoolInterfaceC1Ev>
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8014a80:	4618      	mov	r0, r3
 8014a82:	f7ff ff5f 	bl	8014944 <_ZN19DriverCommunicationC1Ev>
	}
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	4618      	mov	r0, r3
 8014a8a:	3708      	adds	r7, #8
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd80      	pop	{r7, pc}
 8014a90:	08022728 	.word	0x08022728

08014a94 <_ZN6DriverD1Ev>:
	virtual ~Driver()
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b082      	sub	sp, #8
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]
	{
 8014a9c:	4a14      	ldr	r2, [pc, #80]	; (8014af0 <_ZN6DriverD1Ev+0x5c>)
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	601a      	str	r2, [r3, #0]
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f7ff ff6b 	bl	8014984 <_ZN19DriverCommunicationD1Ev>
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f7f7 f885 	bl	800bbc4 <_ZN18CDriverBuzzerAsyncD1Ev>
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f7f6 fbe7 	bl	800b294 <_ZN16CBacklightDriverD1Ev>
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8014acc:	4618      	mov	r0, r3
 8014ace:	f7fb f93f 	bl	800fd50 <_ZN7CSystem15CDelayFunctionsD1Ev>
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	33f8      	adds	r3, #248	; 0xf8
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f7f9 fd04 	bl	800e4e4 <_ZN11CRTCalendarD1Ev>
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	33e8      	adds	r3, #232	; 0xe8
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f7fc f931 	bl	8010d48 <_ZN7CeepromD1Ev>
	}
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	4618      	mov	r0, r3
 8014aea:	3708      	adds	r7, #8
 8014aec:	46bd      	mov	sp, r7
 8014aee:	bd80      	pop	{r7, pc}
 8014af0:	08022728 	.word	0x08022728

08014af4 <_ZN6DriverD0Ev>:
	virtual ~Driver()
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b082      	sub	sp, #8
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
	}
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	f7ff ffc9 	bl	8014a94 <_ZN6DriverD1Ev>
 8014b02:	6878      	ldr	r0, [r7, #4]
 8014b04:	f000 fd6a 	bl	80155dc <_ZdlPv>
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	3708      	adds	r7, #8
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}
	...

08014b14 <_ZN6Driver11getInstanceEv>:
#include "CEEPROMVar.h"
#include "pwmController.h"
#include "CGUI.h"

Driver& Driver::getInstance()
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	af00      	add	r7, sp, #0
	static Driver instance;
 8014b18:	4b09      	ldr	r3, [pc, #36]	; (8014b40 <_ZN6Driver11getInstanceEv+0x2c>)
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	f003 0301 	and.w	r3, r3, #1
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d10a      	bne.n	8014b3a <_ZN6Driver11getInstanceEv+0x26>
 8014b24:	4807      	ldr	r0, [pc, #28]	; (8014b44 <_ZN6Driver11getInstanceEv+0x30>)
 8014b26:	f7ff ff73 	bl	8014a10 <_ZN6DriverC1Ev>
 8014b2a:	4b05      	ldr	r3, [pc, #20]	; (8014b40 <_ZN6Driver11getInstanceEv+0x2c>)
 8014b2c:	2201      	movs	r2, #1
 8014b2e:	601a      	str	r2, [r3, #0]
 8014b30:	4a05      	ldr	r2, [pc, #20]	; (8014b48 <_ZN6Driver11getInstanceEv+0x34>)
 8014b32:	4906      	ldr	r1, [pc, #24]	; (8014b4c <_ZN6Driver11getInstanceEv+0x38>)
 8014b34:	4803      	ldr	r0, [pc, #12]	; (8014b44 <_ZN6Driver11getInstanceEv+0x30>)
 8014b36:	f000 fd53 	bl	80155e0 <__aeabi_atexit>
	return instance;
 8014b3a:	4b02      	ldr	r3, [pc, #8]	; (8014b44 <_ZN6Driver11getInstanceEv+0x30>)
}
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	bd80      	pop	{r7, pc}
 8014b40:	200012b8 	.word	0x200012b8
 8014b44:	2000101c 	.word	0x2000101c
 8014b48:	20000000 	.word	0x20000000
 8014b4c:	08014a95 	.word	0x08014a95

08014b50 <_ZN6Driver4initEv>:

void Driver::init()
{
 8014b50:	b5b0      	push	{r4, r5, r7, lr}
 8014b52:	b084      	sub	sp, #16
 8014b54:	af02      	add	r7, sp, #8
 8014b56:	6078      	str	r0, [r7, #4]
	initEeprom();
 8014b58:	6878      	ldr	r0, [r7, #4]
 8014b5a:	f000 f843 	bl	8014be4 <_ZN6Driver10initEepromEv>
	deviceID = new CDeviceID(0xC000);
 8014b5e:	2010      	movs	r0, #16
 8014b60:	f000 fd8a 	bl	8015678 <_Znwj>
 8014b64:	4603      	mov	r3, r0
 8014b66:	461c      	mov	r4, r3
 8014b68:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8014b6c:	4620      	mov	r0, r4
 8014b6e:	f7f6 fe89 	bl	800b884 <_ZN9CDeviceIDC1Em>
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
	initRtc();
 8014b78:	6878      	ldr	r0, [r7, #4]
 8014b7a:	f000 f877 	bl	8014c6c <_ZN6Driver7initRtcEv>
	initBacklight();
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f000 f8c4 	bl	8014d0c <_ZN6Driver13initBacklightEv>
	initBuzzer();
 8014b84:	6878      	ldr	r0, [r7, #4]
 8014b86:	f000 f90f 	bl	8014da8 <_ZN6Driver10initBuzzerEv>
	initRadioSpi();
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f000 f954 	bl	8014e38 <_ZN6Driver12initRadioSpiEv>
	driverCommunication.init();
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8014b96:	4618      	mov	r0, r3
 8014b98:	f000 f9cc 	bl	8014f34 <_ZN19DriverCommunication4initEv>

	CGUI::getInstance().init(&delayFunctions, deviceID, &rtc, &backlightDriver, &buzzerAsync);
 8014b9c:	f7f7 fbc2 	bl	800c324 <_ZN4CGUI11getInstanceEv>
 8014ba0:	4605      	mov	r5, r0
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	f503 7182 	add.w	r1, r3, #260	; 0x104
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	f103 04f8 	add.w	r4, r3, #248	; 0xf8
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014bba:	687a      	ldr	r2, [r7, #4]
 8014bbc:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8014bc0:	9201      	str	r2, [sp, #4]
 8014bc2:	9300      	str	r3, [sp, #0]
 8014bc4:	4623      	mov	r3, r4
 8014bc6:	4602      	mov	r2, r0
 8014bc8:	4628      	mov	r0, r5
 8014bca:	f7f7 fbc1 	bl	800c350 <_ZN4CGUI4initEP15IDelayFunctionsP9CDeviceIDP9IDateTimeP16CBacklightDriverP7IBuzzer>
	CGUI::getInstance().show();
 8014bce:	f7f7 fba9 	bl	800c324 <_ZN4CGUI11getInstanceEv>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7f7 fcdb 	bl	800c590 <_ZN4CGUI4showEv>
}
 8014bda:	bf00      	nop
 8014bdc:	3708      	adds	r7, #8
 8014bde:	46bd      	mov	sp, r7
 8014be0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014be4 <_ZN6Driver10initEepromEv>:

void Driver::initEeprom(void)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b08e      	sub	sp, #56	; 0x38
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
	CDriverI2C::TI2CInitParams i2cParams;
	i2cParams.I2Cx = I2C1;
 8014bec:	4b1b      	ldr	r3, [pc, #108]	; (8014c5c <_ZN6Driver10initEepromEv+0x78>)
 8014bee:	60fb      	str	r3, [r7, #12]
	i2cParams.ClockSpeed = 50000;
 8014bf0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014bf4:	613b      	str	r3, [r7, #16]
	i2cParams.OwnAddress = 0x02;
 8014bf6:	2302      	movs	r3, #2
 8014bf8:	617b      	str	r3, [r7, #20]
	i2cParams.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014bfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014bfe:	61bb      	str	r3, [r7, #24]
	i2cParams.SDAPin = GPIO_PIN_7;
 8014c00:	2380      	movs	r3, #128	; 0x80
 8014c02:	61fb      	str	r3, [r7, #28]
	i2cParams.SDAPort = GPIOB;
 8014c04:	4b16      	ldr	r3, [pc, #88]	; (8014c60 <_ZN6Driver10initEepromEv+0x7c>)
 8014c06:	623b      	str	r3, [r7, #32]
	i2cParams.SCKPin = GPIO_PIN_6;
 8014c08:	2340      	movs	r3, #64	; 0x40
 8014c0a:	627b      	str	r3, [r7, #36]	; 0x24
	i2cParams.SCKPort = GPIOB;
 8014c0c:	4b14      	ldr	r3, [pc, #80]	; (8014c60 <_ZN6Driver10initEepromEv+0x7c>)
 8014c0e:	62bb      	str	r3, [r7, #40]	; 0x28
	i2cParams.DMARx = DMA1_Channel7;
 8014c10:	4b14      	ldr	r3, [pc, #80]	; (8014c64 <_ZN6Driver10initEepromEv+0x80>)
 8014c12:	62fb      	str	r3, [r7, #44]	; 0x2c
	i2cParams.DMATx = DMA1_Channel6;
 8014c14:	4b14      	ldr	r3, [pc, #80]	; (8014c68 <_ZN6Driver10initEepromEv+0x84>)
 8014c16:	633b      	str	r3, [r7, #48]	; 0x30
	i2cParams.DMATxIRQ = DMA1_Channel6_IRQn;
 8014c18:	2310      	movs	r3, #16
 8014c1a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	i2cParams.DMARxIRQ = DMA1_Channel7_IRQn;
 8014c1e:	2311      	movs	r3, #17
 8014c20:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	i2c.init(&i2cParams, 128);
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	3304      	adds	r3, #4
 8014c28:	f107 010c 	add.w	r1, r7, #12
 8014c2c:	2280      	movs	r2, #128	; 0x80
 8014c2e:	4618      	mov	r0, r3
 8014c30:	f7f6 fff6 	bl	800bc20 <_ZN10CDriverI2C4initEPNS_14TI2CInitParamsEt>
	eeprom.init(&i2c, 0xA2);
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	3304      	adds	r3, #4
 8014c3e:	22a2      	movs	r2, #162	; 0xa2
 8014c40:	4619      	mov	r1, r3
 8014c42:	f7fb ffff 	bl	8010c44 <_ZN7Ceeprom4initEP10CDriverI2Ch>
	CEEPROMMgr::init(&eeprom, true);
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	33e8      	adds	r3, #232	; 0xe8
 8014c4a:	2101      	movs	r1, #1
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f7f7 fa87 	bl	800c160 <_ZN10CEEPROMMgr4initEP7Ceepromb>
}
 8014c52:	bf00      	nop
 8014c54:	3738      	adds	r7, #56	; 0x38
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd80      	pop	{r7, pc}
 8014c5a:	bf00      	nop
 8014c5c:	40005400 	.word	0x40005400
 8014c60:	40010c00 	.word	0x40010c00
 8014c64:	40020080 	.word	0x40020080
 8014c68:	4002006c 	.word	0x4002006c

08014c6c <_ZN6Driver7initRtcEv>:

void Driver::initRtc()
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b084      	sub	sp, #16
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE()
 8014c74:	4a24      	ldr	r2, [pc, #144]	; (8014d08 <_ZN6Driver7initRtcEv+0x9c>)
 8014c76:	4b24      	ldr	r3, [pc, #144]	; (8014d08 <_ZN6Driver7initRtcEv+0x9c>)
 8014c78:	69db      	ldr	r3, [r3, #28]
 8014c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014c7e:	61d3      	str	r3, [r2, #28]
 8014c80:	4b21      	ldr	r3, [pc, #132]	; (8014d08 <_ZN6Driver7initRtcEv+0x9c>)
 8014c82:	69db      	ldr	r3, [r3, #28]
 8014c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014c88:	60fb      	str	r3, [r7, #12]
 8014c8a:	68fb      	ldr	r3, [r7, #12]
	;
	HAL_PWR_EnableBkUpAccess();
 8014c8c:	f7f4 fbb2 	bl	80093f4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_BKP_CLK_ENABLE()
 8014c90:	4a1d      	ldr	r2, [pc, #116]	; (8014d08 <_ZN6Driver7initRtcEv+0x9c>)
 8014c92:	4b1d      	ldr	r3, [pc, #116]	; (8014d08 <_ZN6Driver7initRtcEv+0x9c>)
 8014c94:	69db      	ldr	r3, [r3, #28]
 8014c96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014c9a:	61d3      	str	r3, [r2, #28]
 8014c9c:	4b1a      	ldr	r3, [pc, #104]	; (8014d08 <_ZN6Driver7initRtcEv+0x9c>)
 8014c9e:	69db      	ldr	r3, [r3, #28]
 8014ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014ca4:	60bb      	str	r3, [r7, #8]
 8014ca6:	68bb      	ldr	r3, [r7, #8]
	;
	rtc.initialize(CRTCalendar::TRCTCLK_LSE, true, &delayFunctions);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	f103 00f8 	add.w	r0, r3, #248	; 0xf8
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8014cb4:	2201      	movs	r2, #1
 8014cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014cba:	f7f9 f893 	bl	800dde4 <_ZN11CRTCalendar10initializeENS_9TRTCClockEbP15IDelayFunctions>
	rtc.initRTCIRQ(0, 0);
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	33f8      	adds	r3, #248	; 0xf8
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	2100      	movs	r1, #0
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f7f9 fb3c 	bl	800e344 <_ZN11CRTCalendar10initRTCIRQEhh>
	if (rtc.getYear() < 2021)
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	33f8      	adds	r3, #248	; 0xf8
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	f7f9 f9d3 	bl	800e07c <_ZN11CRTCalendar7getYearEv>
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	461a      	mov	r2, r3
 8014cda:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8014cde:	429a      	cmp	r2, r3
 8014ce0:	bfd4      	ite	le
 8014ce2:	2301      	movle	r3, #1
 8014ce4:	2300      	movgt	r3, #0
 8014ce6:	b2db      	uxtb	r3, r3
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d008      	beq.n	8014cfe <_ZN6Driver7initRtcEv+0x92>
	{
		rtc.setDate(2021, 1, 1);
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	f103 00f8 	add.w	r0, r3, #248	; 0xf8
 8014cf2:	2301      	movs	r3, #1
 8014cf4:	2201      	movs	r2, #1
 8014cf6:	f240 71e5 	movw	r1, #2021	; 0x7e5
 8014cfa:	f7f9 fa27 	bl	800e14c <_ZN11CRTCalendar7setDateEthh>
	}
}
 8014cfe:	bf00      	nop
 8014d00:	3710      	adds	r7, #16
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}
 8014d06:	bf00      	nop
 8014d08:	40021000 	.word	0x40021000

08014d0c <_ZN6Driver13initBacklightEv>:

void Driver::initBacklight(void)
{
 8014d0c:	b590      	push	{r4, r7, lr}
 8014d0e:	b08b      	sub	sp, #44	; 0x2c
 8014d10:	af02      	add	r7, sp, #8
 8014d12:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM2_CLK_ENABLE()
 8014d14:	4a21      	ldr	r2, [pc, #132]	; (8014d9c <_ZN6Driver13initBacklightEv+0x90>)
 8014d16:	4b21      	ldr	r3, [pc, #132]	; (8014d9c <_ZN6Driver13initBacklightEv+0x90>)
 8014d18:	69db      	ldr	r3, [r3, #28]
 8014d1a:	f043 0301 	orr.w	r3, r3, #1
 8014d1e:	61d3      	str	r3, [r2, #28]
 8014d20:	4b1e      	ldr	r3, [pc, #120]	; (8014d9c <_ZN6Driver13initBacklightEv+0x90>)
 8014d22:	69db      	ldr	r3, [r3, #28]
 8014d24:	f003 0301 	and.w	r3, r3, #1
 8014d28:	60bb      	str	r3, [r7, #8]
 8014d2a:	68bb      	ldr	r3, [r7, #8]
	;
	CPwmController::TInitStruct initStruct;
	initStruct.TIMx = TIM2;
 8014d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014d30:	60fb      	str	r3, [r7, #12]
	initStruct.PWMChannel = 3;
 8014d32:	2303      	movs	r3, #3
 8014d34:	743b      	strb	r3, [r7, #16]
	initStruct.TIMx_OCPolarity = TIM_OCPOLARITY_HIGH;
 8014d36:	2300      	movs	r3, #0
 8014d38:	827b      	strh	r3, [r7, #18]
	initStruct.port = GPIOB;
 8014d3a:	4b19      	ldr	r3, [pc, #100]	; (8014da0 <_ZN6Driver13initBacklightEv+0x94>)
 8014d3c:	617b      	str	r3, [r7, #20]
	initStruct.pin = GPIO_PIN_10;
 8014d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014d42:	833b      	strh	r3, [r7, #24]
	initStruct.isAdvancedTimer = false;
 8014d44:	2300      	movs	r3, #0
 8014d46:	76bb      	strb	r3, [r7, #26]
	backlightDriver.init(&initStruct, CSystem::getSystemClockFreq(), 0, 100);
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	f503 7484 	add.w	r4, r3, #264	; 0x108
 8014d4e:	f7fa fe41 	bl	800f9d4 <_ZN7CSystem18getSystemClockFreqEv>
 8014d52:	4602      	mov	r2, r0
 8014d54:	f107 010c 	add.w	r1, r7, #12
 8014d58:	2364      	movs	r3, #100	; 0x64
 8014d5a:	9300      	str	r3, [sp, #0]
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	4620      	mov	r0, r4
 8014d60:	f7f5 ff66 	bl	800ac30 <_ZN16CBacklightDriver4initEPN14CPwmController11TInitStructEmaa>
	__HAL_AFIO_REMAP_TIM2_PARTIAL_2()
 8014d64:	4b0f      	ldr	r3, [pc, #60]	; (8014da4 <_ZN6Driver13initBacklightEv+0x98>)
 8014d66:	685b      	ldr	r3, [r3, #4]
 8014d68:	61fb      	str	r3, [r7, #28]
 8014d6a:	69fb      	ldr	r3, [r7, #28]
 8014d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014d70:	61fb      	str	r3, [r7, #28]
 8014d72:	69fb      	ldr	r3, [r7, #28]
 8014d74:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8014d78:	61fb      	str	r3, [r7, #28]
 8014d7a:	69fb      	ldr	r3, [r7, #28]
 8014d7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014d80:	61fb      	str	r3, [r7, #28]
 8014d82:	4a08      	ldr	r2, [pc, #32]	; (8014da4 <_ZN6Driver13initBacklightEv+0x98>)
 8014d84:	69fb      	ldr	r3, [r7, #28]
 8014d86:	6053      	str	r3, [r2, #4]
	;
	CSystem::addFastInterruptUpdatable(&backlightDriver);
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7fa ff54 	bl	800fc3c <_ZN7CSystem25addFastInterruptUpdatableEP19IInterruptUpdatable>
}
 8014d94:	bf00      	nop
 8014d96:	3724      	adds	r7, #36	; 0x24
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd90      	pop	{r4, r7, pc}
 8014d9c:	40021000 	.word	0x40021000
 8014da0:	40010c00 	.word	0x40010c00
 8014da4:	40010000 	.word	0x40010000

08014da8 <_ZN6Driver10initBuzzerEv>:

void Driver::initBuzzer()
{
 8014da8:	b590      	push	{r4, r7, lr}
 8014daa:	b08b      	sub	sp, #44	; 0x2c
 8014dac:	af02      	add	r7, sp, #8
 8014dae:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM3_CLK_ENABLE()
 8014db0:	4a1e      	ldr	r2, [pc, #120]	; (8014e2c <_ZN6Driver10initBuzzerEv+0x84>)
 8014db2:	4b1e      	ldr	r3, [pc, #120]	; (8014e2c <_ZN6Driver10initBuzzerEv+0x84>)
 8014db4:	69db      	ldr	r3, [r3, #28]
 8014db6:	f043 0302 	orr.w	r3, r3, #2
 8014dba:	61d3      	str	r3, [r2, #28]
 8014dbc:	4b1b      	ldr	r3, [pc, #108]	; (8014e2c <_ZN6Driver10initBuzzerEv+0x84>)
 8014dbe:	69db      	ldr	r3, [r3, #28]
 8014dc0:	f003 0302 	and.w	r3, r3, #2
 8014dc4:	60fb      	str	r3, [r7, #12]
 8014dc6:	68fb      	ldr	r3, [r7, #12]
	;
	CPwmController::TInitStruct initStruct;
	initStruct.TIMx = TIM3;
 8014dc8:	4b19      	ldr	r3, [pc, #100]	; (8014e30 <_ZN6Driver10initBuzzerEv+0x88>)
 8014dca:	613b      	str	r3, [r7, #16]
	initStruct.PWMChannel = 3;
 8014dcc:	2303      	movs	r3, #3
 8014dce:	753b      	strb	r3, [r7, #20]
	initStruct.TIMx_OCPolarity = TIM_OCPOLARITY_HIGH;
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	82fb      	strh	r3, [r7, #22]
	initStruct.port = GPIOB;
 8014dd4:	4b17      	ldr	r3, [pc, #92]	; (8014e34 <_ZN6Driver10initBuzzerEv+0x8c>)
 8014dd6:	61bb      	str	r3, [r7, #24]
	initStruct.pin = GPIO_PIN_0;
 8014dd8:	2301      	movs	r3, #1
 8014dda:	83bb      	strh	r3, [r7, #28]
	initStruct.isAdvancedTimer = false;
 8014ddc:	2300      	movs	r3, #0
 8014dde:	77bb      	strb	r3, [r7, #30]
	buzzerHrd.init(&initStruct, 4000, CSystem::getSystemClockFreq());
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
 8014de6:	f7fa fdf5 	bl	800f9d4 <_ZN7CSystem18getSystemClockFreqEv>
 8014dea:	4602      	mov	r2, r0
 8014dec:	f107 0110 	add.w	r1, r7, #16
 8014df0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014df4:	9300      	str	r3, [sp, #0]
 8014df6:	4613      	mov	r3, r2
 8014df8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8014dfc:	4620      	mov	r0, r4
 8014dfe:	f7f8 fe47 	bl	800da90 <_ZN16CModulatedBuzzer4initEPN14CPwmController11TInitStructEtmt>
	buzzerAsync.init(&buzzerHrd);
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8014e0e:	4619      	mov	r1, r3
 8014e10:	4610      	mov	r0, r2
 8014e12:	f7f6 fe21 	bl	800ba58 <_ZN18CDriverBuzzerAsync4initEP25ITwoLogicalStatesHardware>
	CSystem::addFastInterruptUpdatable(&buzzerAsync);
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f7fa ff0d 	bl	800fc3c <_ZN7CSystem25addFastInterruptUpdatableEP19IInterruptUpdatable>
}
 8014e22:	bf00      	nop
 8014e24:	3724      	adds	r7, #36	; 0x24
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd90      	pop	{r4, r7, pc}
 8014e2a:	bf00      	nop
 8014e2c:	40021000 	.word	0x40021000
 8014e30:	40000400 	.word	0x40000400
 8014e34:	40010c00 	.word	0x40010c00

08014e38 <_ZN6Driver12initRadioSpiEv>:

void Driver::initRadioSpi(void)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b088      	sub	sp, #32
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_SPI2_CLK_ENABLE();
 8014e40:	4a25      	ldr	r2, [pc, #148]	; (8014ed8 <_ZN6Driver12initRadioSpiEv+0xa0>)
 8014e42:	4b25      	ldr	r3, [pc, #148]	; (8014ed8 <_ZN6Driver12initRadioSpiEv+0xa0>)
 8014e44:	69db      	ldr	r3, [r3, #28]
 8014e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014e4a:	61d3      	str	r3, [r2, #28]
 8014e4c:	4b22      	ldr	r3, [pc, #136]	; (8014ed8 <_ZN6Driver12initRadioSpiEv+0xa0>)
 8014e4e:	69db      	ldr	r3, [r3, #28]
 8014e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014e54:	60fb      	str	r3, [r7, #12]
 8014e56:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8014e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014e5c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e5e:	2302      	movs	r3, #2
 8014e60:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e62:	2300      	movs	r3, #0
 8014e64:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8014e66:	2303      	movs	r3, #3
 8014e68:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014e6a:	f107 0310 	add.w	r3, r7, #16
 8014e6e:	4619      	mov	r1, r3
 8014e70:	481a      	ldr	r0, [pc, #104]	; (8014edc <_ZN6Driver12initRadioSpiEv+0xa4>)
 8014e72:	f7f3 fcf1 	bl	8008858 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8014e76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014e7a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e7c:	2302      	movs	r3, #2
 8014e7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e80:	2300      	movs	r3, #0
 8014e82:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8014e84:	2303      	movs	r3, #3
 8014e86:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014e88:	f107 0310 	add.w	r3, r7, #16
 8014e8c:	4619      	mov	r1, r3
 8014e8e:	4813      	ldr	r0, [pc, #76]	; (8014edc <_ZN6Driver12initRadioSpiEv+0xa4>)
 8014e90:	f7f3 fce2 	bl	8008858 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8014e94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014e98:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e9a:	2302      	movs	r3, #2
 8014e9c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8014ea2:	2303      	movs	r3, #3
 8014ea4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014ea6:	f107 0310 	add.w	r3, r7, #16
 8014eaa:	4619      	mov	r1, r3
 8014eac:	480b      	ldr	r0, [pc, #44]	; (8014edc <_ZN6Driver12initRadioSpiEv+0xa4>)
 8014eae:	f7f3 fcd3 	bl	8008858 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8014eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014eb6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014eb8:	2301      	movs	r3, #1
 8014eba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8014ec0:	2303      	movs	r3, #3
 8014ec2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014ec4:	f107 0310 	add.w	r3, r7, #16
 8014ec8:	4619      	mov	r1, r3
 8014eca:	4804      	ldr	r0, [pc, #16]	; (8014edc <_ZN6Driver12initRadioSpiEv+0xa4>)
 8014ecc:	f7f3 fcc4 	bl	8008858 <HAL_GPIO_Init>
}
 8014ed0:	bf00      	nop
 8014ed2:	3720      	adds	r7, #32
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}
 8014ed8:	40021000 	.word	0x40021000
 8014edc:	40010c00 	.word	0x40010c00

08014ee0 <_ZN7CommVarImEC1Ev>:
	CommVar(): command(0), data(0), newValue(false)
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b082      	sub	sp, #8
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	4618      	mov	r0, r3
 8014eec:	f7ff fcd4 	bl	8014898 <_ZN8ICommVarC1Ev>
 8014ef0:	4a08      	ldr	r2, [pc, #32]	; (8014f14 <_ZN7CommVarImEC1Ev+0x34>)
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	601a      	str	r2, [r3, #0]
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	2200      	movs	r2, #0
 8014efa:	711a      	strb	r2, [r3, #4]
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	2200      	movs	r2, #0
 8014f00:	609a      	str	r2, [r3, #8]
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	2200      	movs	r2, #0
 8014f06:	731a      	strb	r2, [r3, #12]
	}
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	3708      	adds	r7, #8
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}
 8014f12:	bf00      	nop
 8014f14:	0801cd1c 	.word	0x0801cd1c

08014f18 <_ZN7CommVarImE10setCommandEh>:
	void setCommand(uint8_t _comm)
 8014f18:	b480      	push	{r7}
 8014f1a:	b083      	sub	sp, #12
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
 8014f20:	460b      	mov	r3, r1
 8014f22:	70fb      	strb	r3, [r7, #3]
		command = _comm;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	78fa      	ldrb	r2, [r7, #3]
 8014f28:	711a      	strb	r2, [r3, #4]
	}
 8014f2a:	bf00      	nop
 8014f2c:	370c      	adds	r7, #12
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bc80      	pop	{r7}
 8014f32:	4770      	bx	lr

08014f34 <_ZN19DriverCommunication4initEv>:
#include "DriverCommunication.h"
#include "wtp_address_gen.h"
#include "CContext.h"

void DriverCommunication::init()
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b086      	sub	sp, #24
 8014f38:	af04      	add	r7, sp, #16
 8014f3a:	6078      	str	r0, [r7, #4]
	wtp3Devices[0] = &motoCounterSetter;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	f103 0208 	add.w	r2, r3, #8
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	639a      	str	r2, [r3, #56]	; 0x38
	wtp3Driver.init(wtp3Devices, 1, address, 1, RECEIVE_MODE_AFTER_TX, 170);
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	685a      	ldr	r2, [r3, #4]
 8014f56:	23aa      	movs	r3, #170	; 0xaa
 8014f58:	9302      	str	r3, [sp, #8]
 8014f5a:	2301      	movs	r3, #1
 8014f5c:	9301      	str	r3, [sp, #4]
 8014f5e:	2301      	movs	r3, #1
 8014f60:	9300      	str	r3, [sp, #0]
 8014f62:	4613      	mov	r3, r2
 8014f64:	2201      	movs	r2, #1
 8014f66:	f7fe fe97 	bl	8013c98 <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh>
	CContext::addUpdatable(this);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2100      	movs	r1, #0
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f7f6 f9c0 	bl	800b2f4 <_ZN8CContext12addUpdatableEP10IUpdatableb>
}
 8014f74:	bf00      	nop
 8014f76:	3708      	adds	r7, #8
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	bd80      	pop	{r7, pc}

08014f7c <_ZN19DriverCommunication6updateEv>:

void DriverCommunication::update()
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b082      	sub	sp, #8
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
	wtp3Driver.update();
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	333c      	adds	r3, #60	; 0x3c
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f7fe fef5 	bl	8013d78 <_ZN10Wtp3Driver6updateEv>
}
 8014f8e:	bf00      	nop
 8014f90:	3708      	adds	r7, #8
 8014f92:	46bd      	mov	sp, r7
 8014f94:	bd80      	pop	{r7, pc}
	...

08014f98 <main>:
#include "CSystem.h"
#include "timer.h"
#include "Driver.h"

int main(void)
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b082      	sub	sp, #8
 8014f9c:	af00      	add	r7, sp, #0
	CSystem::initSystemClock(CSystem::OT_OSCILATOR_EXTERNAL);
 8014f9e:	2000      	movs	r0, #0
 8014fa0:	f7fa fc86 	bl	800f8b0 <_ZN7CSystem15initSystemClockENS_14TOscilatorTypeE>
	CSystem::initPeripherialsClock();
 8014fa4:	f7fa fd56 	bl	800fa54 <_ZN7CSystem21initPeripherialsClockEv>
	CTimer::classInit1000(HAL_GetTick);
 8014fa8:	4806      	ldr	r0, [pc, #24]	; (8014fc4 <main+0x2c>)
 8014faa:	f7fb f9e7 	bl	801037c <_ZN6CTimer13classInit1000EPFmvE>
	Driver::getInstance().init();
 8014fae:	f7ff fdb1 	bl	8014b14 <_ZN6Driver11getInstanceEv>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f7ff fdcb 	bl	8014b50 <_ZN6Driver4initEv>
	int i;
	while (1)
	{
		i++;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	3301      	adds	r3, #1
 8014fbe:	607b      	str	r3, [r7, #4]
 8014fc0:	e7fb      	b.n	8014fba <main+0x22>
 8014fc2:	bf00      	nop
 8014fc4:	08008461 	.word	0x08008461

08014fc8 <HAL_SYSTICK_Callback>:
	}
}

void HAL_SYSTICK_Callback()
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	af00      	add	r7, sp, #0
	CSystem::SysTick_Handler();
 8014fcc:	f7fa fe58 	bl	800fc80 <_ZN7CSystem15SysTick_HandlerEv>
}
 8014fd0:	bf00      	nop
 8014fd2:	bd80      	pop	{r7, pc}

08014fd4 <_ZN6Driver6getI2CEv>:
	CDriverI2C* getI2C()
 8014fd4:	b480      	push	{r7}
 8014fd6:	b083      	sub	sp, #12
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
		return &i2c;
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	3304      	adds	r3, #4
	}
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	370c      	adds	r7, #12
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bc80      	pop	{r7}
 8014fe8:	4770      	bx	lr

08014fea <_ZN6Driver6getRtcEv>:
	CRTCalendar* getRtc()
 8014fea:	b480      	push	{r7}
 8014fec:	b083      	sub	sp, #12
 8014fee:	af00      	add	r7, sp, #0
 8014ff0:	6078      	str	r0, [r7, #4]
		return &rtc;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	33f8      	adds	r3, #248	; 0xf8
	}
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	370c      	adds	r7, #12
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	bc80      	pop	{r7}
 8014ffe:	4770      	bx	lr

08015000 <NMI_Handler>:
#include "Driver.h"
#include "rfm22HRD.h"
#include "rfm22frame.h"

void NMI_Handler(void)
{
 8015000:	b480      	push	{r7}
 8015002:	af00      	add	r7, sp, #0

}
 8015004:	bf00      	nop
 8015006:	46bd      	mov	sp, r7
 8015008:	bc80      	pop	{r7}
 801500a:	4770      	bx	lr

0801500c <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 801500c:	b480      	push	{r7}
 801500e:	af00      	add	r7, sp, #0
	while (1)
 8015010:	e7fe      	b.n	8015010 <HardFault_Handler+0x4>

08015012 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8015012:	b480      	push	{r7}
 8015014:	af00      	add	r7, sp, #0
	while (1)
 8015016:	e7fe      	b.n	8015016 <MemManage_Handler+0x4>

08015018 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8015018:	b480      	push	{r7}
 801501a:	af00      	add	r7, sp, #0
	while (1)
 801501c:	e7fe      	b.n	801501c <BusFault_Handler+0x4>

0801501e <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 801501e:	b480      	push	{r7}
 8015020:	af00      	add	r7, sp, #0
	while (1)
 8015022:	e7fe      	b.n	8015022 <UsageFault_Handler+0x4>

08015024 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{}
 8015024:	b480      	push	{r7}
 8015026:	af00      	add	r7, sp, #0
 8015028:	bf00      	nop
 801502a:	46bd      	mov	sp, r7
 801502c:	bc80      	pop	{r7}
 801502e:	4770      	bx	lr

08015030 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8015030:	b480      	push	{r7}
 8015032:	af00      	add	r7, sp, #0
}
 8015034:	bf00      	nop
 8015036:	46bd      	mov	sp, r7
 8015038:	bc80      	pop	{r7}
 801503a:	4770      	bx	lr

0801503c <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 801503c:	b480      	push	{r7}
 801503e:	af00      	add	r7, sp, #0
}
 8015040:	bf00      	nop
 8015042:	46bd      	mov	sp, r7
 8015044:	bc80      	pop	{r7}
 8015046:	4770      	bx	lr

08015048 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8015048:	b580      	push	{r7, lr}
 801504a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 801504c:	f7f3 f9fc 	bl	8008448 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8015050:	f7f3 faa4 	bl	800859c <HAL_SYSTICK_IRQHandler>
}
 8015054:	bf00      	nop
 8015056:	bd80      	pop	{r7, pc}

08015058 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void)
{
 8015058:	b580      	push	{r7, lr}
 801505a:	af00      	add	r7, sp, #0
	Driver::getInstance().getI2C()->DMATxIrqHandler();
 801505c:	f7ff fd5a 	bl	8014b14 <_ZN6Driver11getInstanceEv>
 8015060:	4603      	mov	r3, r0
 8015062:	4618      	mov	r0, r3
 8015064:	f7ff ffb6 	bl	8014fd4 <_ZN6Driver6getI2CEv>
 8015068:	4603      	mov	r3, r0
 801506a:	4618      	mov	r0, r3
 801506c:	f7f7 f83f 	bl	800c0ee <_ZN10CDriverI2C15DMATxIrqHandlerEv>
}
 8015070:	bf00      	nop
 8015072:	bd80      	pop	{r7, pc}

08015074 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	af00      	add	r7, sp, #0
	Driver::getInstance().getI2C()->DMARxIrqHandler();
 8015078:	f7ff fd4c 	bl	8014b14 <_ZN6Driver11getInstanceEv>
 801507c:	4603      	mov	r3, r0
 801507e:	4618      	mov	r0, r3
 8015080:	f7ff ffa8 	bl	8014fd4 <_ZN6Driver6getI2CEv>
 8015084:	4603      	mov	r3, r0
 8015086:	4618      	mov	r0, r3
 8015088:	f7f7 f824 	bl	800c0d4 <_ZN10CDriverI2C15DMARxIrqHandlerEv>
}
 801508c:	bf00      	nop
 801508e:	bd80      	pop	{r7, pc}

08015090 <RTC_IRQHandler>:

void RTC_IRQHandler()
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b082      	sub	sp, #8
 8015094:	af00      	add	r7, sp, #0
	ITStatus bitstatus = RESET;
 8015096:	2300      	movs	r3, #0
 8015098:	71fb      	strb	r3, [r7, #7]
	bitstatus = (ITStatus)(RTC->CRL & RTC_IT_SEC);
 801509a:	4b13      	ldr	r3, [pc, #76]	; (80150e8 <RTC_IRQHandler+0x58>)
 801509c:	685b      	ldr	r3, [r3, #4]
 801509e:	b2db      	uxtb	r3, r3
 80150a0:	f003 0301 	and.w	r3, r3, #1
 80150a4:	71fb      	strb	r3, [r7, #7]
	if (((RTC->CRH & RTC_IT_SEC) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
 80150a6:	4b10      	ldr	r3, [pc, #64]	; (80150e8 <RTC_IRQHandler+0x58>)
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	f003 0301 	and.w	r3, r3, #1
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d004      	beq.n	80150bc <RTC_IRQHandler+0x2c>
 80150b2:	79fb      	ldrb	r3, [r7, #7]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d001      	beq.n	80150bc <RTC_IRQHandler+0x2c>
 80150b8:	2301      	movs	r3, #1
 80150ba:	e000      	b.n	80150be <RTC_IRQHandler+0x2e>
 80150bc:	2300      	movs	r3, #0
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d00e      	beq.n	80150e0 <RTC_IRQHandler+0x50>
	{
		RTC->CRL &= (uint16_t)~RTC_IT_SEC;
 80150c2:	4909      	ldr	r1, [pc, #36]	; (80150e8 <RTC_IRQHandler+0x58>)
 80150c4:	4b08      	ldr	r3, [pc, #32]	; (80150e8 <RTC_IRQHandler+0x58>)
 80150c6:	685a      	ldr	r2, [r3, #4]
 80150c8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80150cc:	4013      	ands	r3, r2
 80150ce:	604b      	str	r3, [r1, #4]
		Driver::getInstance().getRtc()->RTCIRQHandler();
 80150d0:	f7ff fd20 	bl	8014b14 <_ZN6Driver11getInstanceEv>
 80150d4:	4603      	mov	r3, r0
 80150d6:	4618      	mov	r0, r3
 80150d8:	f7ff ff87 	bl	8014fea <_ZN6Driver6getRtcEv>
 80150dc:	f7f9 f926 	bl	800e32c <_ZN11CRTCalendar13RTCIRQHandlerEv>
	}
}
 80150e0:	bf00      	nop
 80150e2:	3708      	adds	r7, #8
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}
 80150e8:	40002800 	.word	0x40002800

080150ec <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(RFM22_INT_BIT);
 80150f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80150f4:	f7f3 fc9e 	bl	8008a34 <HAL_GPIO_EXTI_IRQHandler>
	rfm22frame_isr();
 80150f8:	f7fe faa0 	bl	801363c <_Z14rfm22frame_isrv>
}
 80150fc:	bf00      	nop
 80150fe:	bd80      	pop	{r7, pc}

08015100 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8015100:	2001      	movs	r0, #1
 8015102:	4770      	bx	lr

08015104 <_kill>:

int _kill(int pid, int sig)
{
 8015104:	b508      	push	{r3, lr}
	errno = EINVAL;
 8015106:	f001 fb49 	bl	801679c <__errno>
 801510a:	2316      	movs	r3, #22
 801510c:	6003      	str	r3, [r0, #0]
	return -1;
}
 801510e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015112:	bd08      	pop	{r3, pc}

08015114 <_exit>:

void _exit (int status)
{
 8015114:	b508      	push	{r3, lr}
	errno = EINVAL;
 8015116:	f001 fb41 	bl	801679c <__errno>
 801511a:	2316      	movs	r3, #22
 801511c:	6003      	str	r3, [r0, #0]
 801511e:	e7fe      	b.n	801511e <_exit+0xa>

08015120 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8015120:	b570      	push	{r4, r5, r6, lr}
 8015122:	460e      	mov	r6, r1
 8015124:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015126:	460c      	mov	r4, r1
 8015128:	1ba3      	subs	r3, r4, r6
 801512a:	429d      	cmp	r5, r3
 801512c:	dc01      	bgt.n	8015132 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 801512e:	4628      	mov	r0, r5
 8015130:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8015132:	f3af 8000 	nop.w
 8015136:	f804 0b01 	strb.w	r0, [r4], #1
 801513a:	e7f5      	b.n	8015128 <_read+0x8>

0801513c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801513c:	b570      	push	{r4, r5, r6, lr}
 801513e:	460e      	mov	r6, r1
 8015140:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015142:	460c      	mov	r4, r1
 8015144:	1ba3      	subs	r3, r4, r6
 8015146:	429d      	cmp	r5, r3
 8015148:	dc01      	bgt.n	801514e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 801514a:	4628      	mov	r0, r5
 801514c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 801514e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015152:	f3af 8000 	nop.w
 8015156:	e7f5      	b.n	8015144 <_write+0x8>

08015158 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8015158:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801515a:	4b0a      	ldr	r3, [pc, #40]	; (8015184 <_sbrk+0x2c>)
{
 801515c:	4602      	mov	r2, r0
	if (heap_end == 0)
 801515e:	6819      	ldr	r1, [r3, #0]
 8015160:	b909      	cbnz	r1, 8015166 <_sbrk+0xe>
		heap_end = &end;
 8015162:	4909      	ldr	r1, [pc, #36]	; (8015188 <_sbrk+0x30>)
 8015164:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8015166:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8015168:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 801516a:	4402      	add	r2, r0
 801516c:	428a      	cmp	r2, r1
 801516e:	d906      	bls.n	801517e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8015170:	f001 fb14 	bl	801679c <__errno>
 8015174:	230c      	movs	r3, #12
 8015176:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8015178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801517c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 801517e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8015180:	bd08      	pop	{r3, pc}
 8015182:	bf00      	nop
 8015184:	200012c0 	.word	0x200012c0
 8015188:	200014ec 	.word	0x200014ec

0801518c <_close>:

int _close(int file)
{
	return -1;
}
 801518c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015190:	4770      	bx	lr

08015192 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8015192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8015196:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8015198:	604b      	str	r3, [r1, #4]
}
 801519a:	4770      	bx	lr

0801519c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 801519c:	2001      	movs	r0, #1
 801519e:	4770      	bx	lr

080151a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80151a0:	2000      	movs	r0, #0
 80151a2:	4770      	bx	lr

080151a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80151a4:	4770      	bx	lr

080151a6 <_Z26rfm22callbacks_set_channelh>:
static const uint8_t rfm22callbacks_power = RFM22BANDS_DEFAULT_POWER;

/*channel*/
/*--------------------------------------------------------------------*/
void rfm22callbacks_set_channel(uint8_t channel)
{
 80151a6:	b480      	push	{r7}
 80151a8:	b083      	sub	sp, #12
 80151aa:	af00      	add	r7, sp, #0
 80151ac:	4603      	mov	r3, r0
 80151ae:	71fb      	strb	r3, [r7, #7]

}
 80151b0:	bf00      	nop
 80151b2:	370c      	adds	r7, #12
 80151b4:	46bd      	mov	sp, r7
 80151b6:	bc80      	pop	{r7}
 80151b8:	4770      	bx	lr

080151ba <_Z26rfm22callbacks_get_channelv>:

/*--------------------------------------------------------------------*/
uint8_t rfm22callbacks_get_channel()
{
 80151ba:	b480      	push	{r7}
 80151bc:	af00      	add	r7, sp, #0
    return rfm22callbacks_channel;
 80151be:	2331      	movs	r3, #49	; 0x31
}
 80151c0:	4618      	mov	r0, r3
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bc80      	pop	{r7}
 80151c6:	4770      	bx	lr

080151c8 <_Z24rfm22callbacks_set_powerh>:

/*--------------------------------------------------------------------*/
void rfm22callbacks_set_power(uint8_t power)
{
 80151c8:	b480      	push	{r7}
 80151ca:	b083      	sub	sp, #12
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	4603      	mov	r3, r0
 80151d0:	71fb      	strb	r3, [r7, #7]

}
 80151d2:	bf00      	nop
 80151d4:	370c      	adds	r7, #12
 80151d6:	46bd      	mov	sp, r7
 80151d8:	bc80      	pop	{r7}
 80151da:	4770      	bx	lr

080151dc <_Z24rfm22callbacks_get_powerv>:

/*--------------------------------------------------------------------*/
uint8_t rfm22callbacks_get_power()
{
 80151dc:	b480      	push	{r7}
 80151de:	af00      	add	r7, sp, #0
    return rfm22callbacks_power;
 80151e0:	2306      	movs	r3, #6
}
 80151e2:	4618      	mov	r0, r3
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bc80      	pop	{r7}
 80151e8:	4770      	bx	lr

080151ea <_Z23rfm22callbacks_delay_mst>:

/*--------------------------------------------------------------------*/
void rfm22callbacks_delay_ms(uint16_t ms)
{
 80151ea:	b580      	push	{r7, lr}
 80151ec:	b082      	sub	sp, #8
 80151ee:	af00      	add	r7, sp, #0
 80151f0:	4603      	mov	r3, r0
 80151f2:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 80151f4:	88fb      	ldrh	r3, [r7, #6]
 80151f6:	4618      	mov	r0, r3
 80151f8:	f7f3 f938 	bl	800846c <HAL_Delay>
}
 80151fc:	bf00      	nop
 80151fe:	3708      	adds	r7, #8
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}

08015204 <_Z23rfm22ports_clearIntFlagv>:
{
    return HAL_GPIO_ReadPin(RFM22_INT_PORT, RFM22_INT_BIT) == GPIO_PIN_RESET;
}

void rfm22ports_clearIntFlag()
{
 8015204:	b580      	push	{r7, lr}
 8015206:	af00      	add	r7, sp, #0
    __HAL_GPIO_EXTI_CLEAR_IT(RFM22_INT_BIT);
 8015208:	4b04      	ldr	r3, [pc, #16]	; (801521c <_Z23rfm22ports_clearIntFlagv+0x18>)
 801520a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801520e:	615a      	str	r2, [r3, #20]
    HAL_NVIC_ClearPendingIRQ(RFM22_IRQ);
 8015210:	2028      	movs	r0, #40	; 0x28
 8015212:	f7f3 f9a7 	bl	8008564 <HAL_NVIC_ClearPendingIRQ>
}
 8015216:	bf00      	nop
 8015218:	bd80      	pop	{r7, pc}
 801521a:	bf00      	nop
 801521c:	40010400 	.word	0x40010400

08015220 <_Z22rfm22ports_activateIntv>:

void rfm22ports_activateInt()
{
 8015220:	b580      	push	{r7, lr}
 8015222:	af00      	add	r7, sp, #0
    rfm22ports_clearIntFlag();
 8015224:	f7ff ffee 	bl	8015204 <_Z23rfm22ports_clearIntFlagv>
    HAL_NVIC_EnableIRQ(RFM22_IRQ);
 8015228:	2028      	movs	r0, #40	; 0x28
 801522a:	f7f3 f977 	bl	800851c <HAL_NVIC_EnableIRQ>
}
 801522e:	bf00      	nop
 8015230:	bd80      	pop	{r7, pc}
	...

08015234 <_Z22rfm22ports_initIntPortv>:
{
    HAL_NVIC_DisableIRQ(RFM22_IRQ);
}

void rfm22ports_initIntPort()
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b086      	sub	sp, #24
 8015238:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    RFM22_INT_PORT_ENABLE();
 801523a:	4a12      	ldr	r2, [pc, #72]	; (8015284 <_Z22rfm22ports_initIntPortv+0x50>)
 801523c:	4b11      	ldr	r3, [pc, #68]	; (8015284 <_Z22rfm22ports_initIntPortv+0x50>)
 801523e:	699b      	ldr	r3, [r3, #24]
 8015240:	f043 0308 	orr.w	r3, r3, #8
 8015244:	6193      	str	r3, [r2, #24]
 8015246:	4b0f      	ldr	r3, [pc, #60]	; (8015284 <_Z22rfm22ports_initIntPortv+0x50>)
 8015248:	699b      	ldr	r3, [r3, #24]
 801524a:	f003 0308 	and.w	r3, r3, #8
 801524e:	607b      	str	r3, [r7, #4]
 8015250:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = RFM22_INT_BIT;
 8015252:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015256:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8015258:	4b0b      	ldr	r3, [pc, #44]	; (8015288 <_Z22rfm22ports_initIntPortv+0x54>)
 801525a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801525c:	2302      	movs	r3, #2
 801525e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8015260:	2303      	movs	r3, #3
 8015262:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(RFM22_INT_PORT, &GPIO_InitStruct);
 8015264:	f107 0308 	add.w	r3, r7, #8
 8015268:	4619      	mov	r1, r3
 801526a:	4808      	ldr	r0, [pc, #32]	; (801528c <_Z22rfm22ports_initIntPortv+0x58>)
 801526c:	f7f3 faf4 	bl	8008858 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(RFM22_IRQ, 1, 0);
 8015270:	2200      	movs	r2, #0
 8015272:	2101      	movs	r1, #1
 8015274:	2028      	movs	r0, #40	; 0x28
 8015276:	f7f3 f91d 	bl	80084b4 <HAL_NVIC_SetPriority>
}
 801527a:	bf00      	nop
 801527c:	3718      	adds	r7, #24
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}
 8015282:	bf00      	nop
 8015284:	40021000 	.word	0x40021000
 8015288:	10210000 	.word	0x10210000
 801528c:	40010c00 	.word	0x40010c00

08015290 <_Z22rfm22ports_initVccPortv>:

void rfm22ports_initVccPort()
{
 8015290:	b480      	push	{r7}
 8015292:	af00      	add	r7, sp, #0
}
 8015294:	bf00      	nop
 8015296:	46bd      	mov	sp, r7
 8015298:	bc80      	pop	{r7}
 801529a:	4770      	bx	lr

0801529c <_Z17rfm22ports_setVcch>:

void rfm22ports_setVcc(uint8_t value)
{
 801529c:	b480      	push	{r7}
 801529e:	b083      	sub	sp, #12
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	4603      	mov	r3, r0
 80152a4:	71fb      	strb	r3, [r7, #7]
}
 80152a6:	bf00      	nop
 80152a8:	370c      	adds	r7, #12
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bc80      	pop	{r7}
 80152ae:	4770      	bx	lr

080152b0 <_Z22rfm22ports_initSDNPortv>:

void rfm22ports_initSDNPort()
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b086      	sub	sp, #24
 80152b4:	af00      	add	r7, sp, #0
    //od razu po przelaczeniu na wyjscie stan wysoki (shutdown)

    GPIO_InitTypeDef GPIO_InitStruct;

    RFM22_SDN_PORT_ENABLE();
 80152b6:	4a0f      	ldr	r2, [pc, #60]	; (80152f4 <_Z22rfm22ports_initSDNPortv+0x44>)
 80152b8:	4b0e      	ldr	r3, [pc, #56]	; (80152f4 <_Z22rfm22ports_initSDNPortv+0x44>)
 80152ba:	699b      	ldr	r3, [r3, #24]
 80152bc:	f043 0310 	orr.w	r3, r3, #16
 80152c0:	6193      	str	r3, [r2, #24]
 80152c2:	4b0c      	ldr	r3, [pc, #48]	; (80152f4 <_Z22rfm22ports_initSDNPortv+0x44>)
 80152c4:	699b      	ldr	r3, [r3, #24]
 80152c6:	f003 0310 	and.w	r3, r3, #16
 80152ca:	607b      	str	r3, [r7, #4]
 80152cc:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = RFM22_SDN_BIT;
 80152ce:	2340      	movs	r3, #64	; 0x40
 80152d0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80152d2:	2301      	movs	r3, #1
 80152d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80152d6:	2300      	movs	r3, #0
 80152d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80152da:	2301      	movs	r3, #1
 80152dc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(RFM22_SDN_PORT, &GPIO_InitStruct);
 80152de:	f107 0308 	add.w	r3, r7, #8
 80152e2:	4619      	mov	r1, r3
 80152e4:	4804      	ldr	r0, [pc, #16]	; (80152f8 <_Z22rfm22ports_initSDNPortv+0x48>)
 80152e6:	f7f3 fab7 	bl	8008858 <HAL_GPIO_Init>
    //HAL_GPIO_WritePin(RFM22_SDN_PORT, RFM22_SDN_BIT, GPIO_PIN_SET);
}
 80152ea:	bf00      	nop
 80152ec:	3718      	adds	r7, #24
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}
 80152f2:	bf00      	nop
 80152f4:	40021000 	.word	0x40021000
 80152f8:	40011000 	.word	0x40011000

080152fc <_Z17rfm22ports_setSDNh>:

void rfm22ports_setSDN(uint8_t value)
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b082      	sub	sp, #8
 8015300:	af00      	add	r7, sp, #0
 8015302:	4603      	mov	r3, r0
 8015304:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RFM22_SDN_PORT, RFM22_SDN_BIT, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8015306:	79fb      	ldrb	r3, [r7, #7]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d001      	beq.n	8015310 <_Z17rfm22ports_setSDNh+0x14>
 801530c:	2301      	movs	r3, #1
 801530e:	e000      	b.n	8015312 <_Z17rfm22ports_setSDNh+0x16>
 8015310:	2300      	movs	r3, #0
 8015312:	461a      	mov	r2, r3
 8015314:	2140      	movs	r1, #64	; 0x40
 8015316:	4803      	ldr	r0, [pc, #12]	; (8015324 <_Z17rfm22ports_setSDNh+0x28>)
 8015318:	f7f3 fb86 	bl	8008a28 <HAL_GPIO_WritePin>
}
 801531c:	bf00      	nop
 801531e:	3708      	adds	r7, #8
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}
 8015324:	40011000 	.word	0x40011000

08015328 <_Z25rfm22ports_getResetMethodv>:

uint8_t rfm22ports_getResetMethod()
{
 8015328:	b480      	push	{r7}
 801532a:	af00      	add	r7, sp, #0
    return RFM22PORTS_RESET_SDN;
 801532c:	2301      	movs	r3, #1
}
 801532e:	4618      	mov	r0, r3
 8015330:	46bd      	mov	sp, r7
 8015332:	bc80      	pop	{r7}
 8015334:	4770      	bx	lr
	...

08015338 <_Z18rfm22ports_initSPIv>:

void rfm22ports_initSPI()
{
 8015338:	b580      	push	{r7, lr}
 801533a:	af00      	add	r7, sp, #0
	RFM22_SPI_HANDLE.Instance = RFM22_SPI;
 801533c:	4b15      	ldr	r3, [pc, #84]	; (8015394 <_Z18rfm22ports_initSPIv+0x5c>)
 801533e:	4a16      	ldr	r2, [pc, #88]	; (8015398 <_Z18rfm22ports_initSPIv+0x60>)
 8015340:	601a      	str	r2, [r3, #0]
	RFM22_SPI_HANDLE.Init.Mode = SPI_MODE_MASTER;
 8015342:	4b14      	ldr	r3, [pc, #80]	; (8015394 <_Z18rfm22ports_initSPIv+0x5c>)
 8015344:	f44f 7282 	mov.w	r2, #260	; 0x104
 8015348:	605a      	str	r2, [r3, #4]
	RFM22_SPI_HANDLE.Init.Direction = SPI_DIRECTION_2LINES;
 801534a:	4b12      	ldr	r3, [pc, #72]	; (8015394 <_Z18rfm22ports_initSPIv+0x5c>)
 801534c:	2200      	movs	r2, #0
 801534e:	609a      	str	r2, [r3, #8]
	RFM22_SPI_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8015350:	4b10      	ldr	r3, [pc, #64]	; (8015394 <_Z18rfm22ports_initSPIv+0x5c>)
 8015352:	2200      	movs	r2, #0
 8015354:	60da      	str	r2, [r3, #12]
	RFM22_SPI_HANDLE.Init.CLKPolarity = SPI_POLARITY_LOW;
 8015356:	4b0f      	ldr	r3, [pc, #60]	; (8015394 <_Z18rfm22ports_initSPIv+0x5c>)
 8015358:	2200      	movs	r2, #0
 801535a:	611a      	str	r2, [r3, #16]
	RFM22_SPI_HANDLE.Init.CLKPhase = SPI_PHASE_1EDGE;
 801535c:	4b0d      	ldr	r3, [pc, #52]	; (8015394 <_Z18rfm22ports_initSPIv+0x5c>)
 801535e:	2200      	movs	r2, #0
 8015360:	615a      	str	r2, [r3, #20]
	RFM22_SPI_HANDLE.Init.NSS = SPI_NSS_SOFT;
 8015362:	4b0c      	ldr	r3, [pc, #48]	; (8015394 <_Z18rfm22ports_initSPIv+0x5c>)
 8015364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015368:	619a      	str	r2, [r3, #24]
	RFM22_SPI_HANDLE.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 801536a:	4b0a      	ldr	r3, [pc, #40]	; (8015394 <_Z18rfm22ports_initSPIv+0x5c>)
 801536c:	2208      	movs	r2, #8
 801536e:	61da      	str	r2, [r3, #28]
	RFM22_SPI_HANDLE.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8015370:	4b08      	ldr	r3, [pc, #32]	; (8015394 <_Z18rfm22ports_initSPIv+0x5c>)
 8015372:	2200      	movs	r2, #0
 8015374:	621a      	str	r2, [r3, #32]
	RFM22_SPI_HANDLE.Init.TIMode = SPI_TIMODE_DISABLED;
 8015376:	4b07      	ldr	r3, [pc, #28]	; (8015394 <_Z18rfm22ports_initSPIv+0x5c>)
 8015378:	2200      	movs	r2, #0
 801537a:	625a      	str	r2, [r3, #36]	; 0x24
	RFM22_SPI_HANDLE.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 801537c:	4b05      	ldr	r3, [pc, #20]	; (8015394 <_Z18rfm22ports_initSPIv+0x5c>)
 801537e:	2200      	movs	r2, #0
 8015380:	629a      	str	r2, [r3, #40]	; 0x28
	RFM22_SPI_HANDLE.Init.CRCPolynomial = 10;
 8015382:	4b04      	ldr	r3, [pc, #16]	; (8015394 <_Z18rfm22ports_initSPIv+0x5c>)
 8015384:	220a      	movs	r2, #10
 8015386:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_SPI_Init(&RFM22_SPI_HANDLE);
 8015388:	4802      	ldr	r0, [pc, #8]	; (8015394 <_Z18rfm22ports_initSPIv+0x5c>)
 801538a:	f7f4 fde7 	bl	8009f5c <HAL_SPI_Init>
}
 801538e:	bf00      	nop
 8015390:	bd80      	pop	{r7, pc}
 8015392:	bf00      	nop
 8015394:	200012c4 	.word	0x200012c4
 8015398:	40003800 	.word	0x40003800

0801539c <_Z20rfm22ports_deinitSPIv>:

void rfm22ports_deinitSPI()
{
 801539c:	b580      	push	{r7, lr}
 801539e:	af00      	add	r7, sp, #0
	HAL_SPI_DeInit(&RFM22_SPI_HANDLE);
 80153a0:	4802      	ldr	r0, [pc, #8]	; (80153ac <_Z20rfm22ports_deinitSPIv+0x10>)
 80153a2:	f7f4 fe17 	bl	8009fd4 <HAL_SPI_DeInit>
}
 80153a6:	bf00      	nop
 80153a8:	bd80      	pop	{r7, pc}
 80153aa:	bf00      	nop
 80153ac:	200012c4 	.word	0x200012c4

080153b0 <_Z16rfm22ports_transhh>:

uint8_t rfm22ports_trans(uint8_t address, uint8_t value)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b086      	sub	sp, #24
 80153b4:	af02      	add	r7, sp, #8
 80153b6:	4603      	mov	r3, r0
 80153b8:	460a      	mov	r2, r1
 80153ba:	71fb      	strb	r3, [r7, #7]
 80153bc:	4613      	mov	r3, r2
 80153be:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[2] = {address, value};
 80153c0:	79fb      	ldrb	r3, [r7, #7]
 80153c2:	733b      	strb	r3, [r7, #12]
 80153c4:	79bb      	ldrb	r3, [r7, #6]
 80153c6:	737b      	strb	r3, [r7, #13]
    uint8_t feedback[2] = {0, 0};
 80153c8:	2300      	movs	r3, #0
 80153ca:	723b      	strb	r3, [r7, #8]
 80153cc:	2300      	movs	r3, #0
 80153ce:	727b      	strb	r3, [r7, #9]

    HAL_GPIO_WritePin(RFM22_SPI_CS_PORT, RFM22_SPI_CS_BIT, GPIO_PIN_RESET);
 80153d0:	2200      	movs	r2, #0
 80153d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80153d6:	480c      	ldr	r0, [pc, #48]	; (8015408 <_Z16rfm22ports_transhh+0x58>)
 80153d8:	f7f3 fb26 	bl	8008a28 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&RFM22_SPI_HANDLE, txData, feedback, 2, 50);
 80153dc:	f107 0208 	add.w	r2, r7, #8
 80153e0:	f107 010c 	add.w	r1, r7, #12
 80153e4:	2332      	movs	r3, #50	; 0x32
 80153e6:	9300      	str	r3, [sp, #0]
 80153e8:	2302      	movs	r3, #2
 80153ea:	4808      	ldr	r0, [pc, #32]	; (801540c <_Z16rfm22ports_transhh+0x5c>)
 80153ec:	f7f4 feb1 	bl	800a152 <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(RFM22_SPI_CS_PORT, RFM22_SPI_CS_BIT, GPIO_PIN_SET);
 80153f0:	2201      	movs	r2, #1
 80153f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80153f6:	4804      	ldr	r0, [pc, #16]	; (8015408 <_Z16rfm22ports_transhh+0x58>)
 80153f8:	f7f3 fb16 	bl	8008a28 <HAL_GPIO_WritePin>

    return feedback[1];
 80153fc:	7a7b      	ldrb	r3, [r7, #9]
}
 80153fe:	4618      	mov	r0, r3
 8015400:	3710      	adds	r7, #16
 8015402:	46bd      	mov	sp, r7
 8015404:	bd80      	pop	{r7, pc}
 8015406:	bf00      	nop
 8015408:	40010c00 	.word	0x40010c00
 801540c:	200012c4 	.word	0x200012c4

08015410 <_Z16rfm22ports_bursthhPh>:

void rfm22ports_burst(uint8_t address, uint8_t length, uint8_t *values)
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b086      	sub	sp, #24
 8015414:	af02      	add	r7, sp, #8
 8015416:	4603      	mov	r3, r0
 8015418:	603a      	str	r2, [r7, #0]
 801541a:	71fb      	strb	r3, [r7, #7]
 801541c:	460b      	mov	r3, r1
 801541e:	71bb      	strb	r3, [r7, #6]
    uint8_t i;

    HAL_GPIO_WritePin(RFM22_SPI_CS_PORT, RFM22_SPI_CS_BIT, GPIO_PIN_RESET);
 8015420:	2200      	movs	r2, #0
 8015422:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8015426:	4810      	ldr	r0, [pc, #64]	; (8015468 <_Z16rfm22ports_bursthhPh+0x58>)
 8015428:	f7f3 fafe 	bl	8008a28 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&RFM22_SPI_HANDLE, &address, &i, 1, 50);
 801542c:	f107 020f 	add.w	r2, r7, #15
 8015430:	1df9      	adds	r1, r7, #7
 8015432:	2332      	movs	r3, #50	; 0x32
 8015434:	9300      	str	r3, [sp, #0]
 8015436:	2301      	movs	r3, #1
 8015438:	480c      	ldr	r0, [pc, #48]	; (801546c <_Z16rfm22ports_bursthhPh+0x5c>)
 801543a:	f7f4 fe8a 	bl	800a152 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&RFM22_SPI_HANDLE, values, values, length, 300);
 801543e:	79bb      	ldrb	r3, [r7, #6]
 8015440:	b29a      	uxth	r2, r3
 8015442:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8015446:	9300      	str	r3, [sp, #0]
 8015448:	4613      	mov	r3, r2
 801544a:	683a      	ldr	r2, [r7, #0]
 801544c:	6839      	ldr	r1, [r7, #0]
 801544e:	4807      	ldr	r0, [pc, #28]	; (801546c <_Z16rfm22ports_bursthhPh+0x5c>)
 8015450:	f7f4 fe7f 	bl	800a152 <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(RFM22_SPI_CS_PORT, RFM22_SPI_CS_BIT, GPIO_PIN_SET);
 8015454:	2201      	movs	r2, #1
 8015456:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801545a:	4803      	ldr	r0, [pc, #12]	; (8015468 <_Z16rfm22ports_bursthhPh+0x58>)
 801545c:	f7f3 fae4 	bl	8008a28 <HAL_GPIO_WritePin>
}
 8015460:	bf00      	nop
 8015462:	3710      	adds	r7, #16
 8015464:	46bd      	mov	sp, r7
 8015466:	bd80      	pop	{r7, pc}
 8015468:	40010c00 	.word	0x40010c00
 801546c:	200012c4 	.word	0x200012c4

08015470 <_Z39rfm22profiles_internal2external_profilePK20rfm22profiles_regs_tPS_>:
 *
 * param intPr    pointer to rfm22profiles_regs_t located in pernament memory, ex. eeprom
 * param extPr    pointer to ram
 */
void rfm22profiles_internal2external_profile(const rfm22profiles_regs_t *intPr, rfm22profiles_regs_t *extPr)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b082      	sub	sp, #8
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
 8015478:	6039      	str	r1, [r7, #0]
	memcpy(extPr, intPr, sizeof(rfm22profiles_regs_t));
 801547a:	2218      	movs	r2, #24
 801547c:	6879      	ldr	r1, [r7, #4]
 801547e:	6838      	ldr	r0, [r7, #0]
 8015480:	f001 ff17 	bl	80172b2 <memcpy>
}
 8015484:	bf00      	nop
 8015486:	3708      	adds	r7, #8
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}

0801548c <_Z35rfm22profiles_fill_standard_profileP20rfm22profiles_regs_t>:
/**
 * Don't modify funtions below
 */

void rfm22profiles_fill_standard_profile(rfm22profiles_regs_t *regs)
{
 801548c:	b580      	push	{r7, lr}
 801548e:	b082      	sub	sp, #8
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
    rfm22profiles_internal2external_profile(&rfm22profiles_standard_profile, regs);
 8015494:	6879      	ldr	r1, [r7, #4]
 8015496:	4803      	ldr	r0, [pc, #12]	; (80154a4 <_Z35rfm22profiles_fill_standard_profileP20rfm22profiles_regs_t+0x18>)
 8015498:	f7ff ffea 	bl	8015470 <_Z39rfm22profiles_internal2external_profilePK20rfm22profiles_regs_tPS_>
}
 801549c:	bf00      	nop
 801549e:	3708      	adds	r7, #8
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bd80      	pop	{r7, pc}
 80154a4:	0802277c 	.word	0x0802277c

080154a8 <_Z24wtp3drivercalls_setTimerhm>:
#include "timer.h"

static CTimer wtp4timers[3] = {CTimer(CTimer::UNIT_MILISEC), CTimer(CTimer::UNIT_MILISEC), CTimer(CTimer::UNIT_MILISEC)};

void wtp3drivercalls_setTimer(uint8_t nr, uint32_t ms)
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b082      	sub	sp, #8
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	4603      	mov	r3, r0
 80154b0:	6039      	str	r1, [r7, #0]
 80154b2:	71fb      	strb	r3, [r7, #7]
    wtp4timers[nr].start(ms);
 80154b4:	79fa      	ldrb	r2, [r7, #7]
 80154b6:	4613      	mov	r3, r2
 80154b8:	005b      	lsls	r3, r3, #1
 80154ba:	4413      	add	r3, r2
 80154bc:	009b      	lsls	r3, r3, #2
 80154be:	4a05      	ldr	r2, [pc, #20]	; (80154d4 <_Z24wtp3drivercalls_setTimerhm+0x2c>)
 80154c0:	4413      	add	r3, r2
 80154c2:	6839      	ldr	r1, [r7, #0]
 80154c4:	4618      	mov	r0, r3
 80154c6:	f7fa ffa8 	bl	801041a <_ZN6CTimer5startEm>
}
 80154ca:	bf00      	nop
 80154cc:	3708      	adds	r7, #8
 80154ce:	46bd      	mov	sp, r7
 80154d0:	bd80      	pop	{r7, pc}
 80154d2:	bf00      	nop
 80154d4:	2000131c 	.word	0x2000131c

080154d8 <_Z27wtp3drivercalls_isTimerZeroh>:

uint8_t wtp3drivercalls_isTimerZero(uint8_t nr)
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b082      	sub	sp, #8
 80154dc:	af00      	add	r7, sp, #0
 80154de:	4603      	mov	r3, r0
 80154e0:	71fb      	strb	r3, [r7, #7]
    return wtp4timers[nr].isZero();
 80154e2:	79fa      	ldrb	r2, [r7, #7]
 80154e4:	4613      	mov	r3, r2
 80154e6:	005b      	lsls	r3, r3, #1
 80154e8:	4413      	add	r3, r2
 80154ea:	009b      	lsls	r3, r3, #2
 80154ec:	4a04      	ldr	r2, [pc, #16]	; (8015500 <_Z27wtp3drivercalls_isTimerZeroh+0x28>)
 80154ee:	4413      	add	r3, r2
 80154f0:	4618      	mov	r0, r3
 80154f2:	f7fb f80f 	bl	8010514 <_ZN6CTimer6isZeroEv>
 80154f6:	4603      	mov	r3, r0
}
 80154f8:	4618      	mov	r0, r3
 80154fa:	3708      	adds	r7, #8
 80154fc:	46bd      	mov	sp, r7
 80154fe:	bd80      	pop	{r7, pc}
 8015500:	2000131c 	.word	0x2000131c

08015504 <_Z30wtp3drivercalls_updateCountersv>:

void wtp3drivercalls_updateCounters()
{
 8015504:	b580      	push	{r7, lr}
 8015506:	b082      	sub	sp, #8
 8015508:	af00      	add	r7, sp, #0
    uint8_t i;

    for(i = 0; i < 3; i++)
 801550a:	2300      	movs	r3, #0
 801550c:	71fb      	strb	r3, [r7, #7]
 801550e:	79fb      	ldrb	r3, [r7, #7]
 8015510:	2b02      	cmp	r3, #2
 8015512:	dc0d      	bgt.n	8015530 <_Z30wtp3drivercalls_updateCountersv+0x2c>
    {
        wtp4timers[i].isZero();
 8015514:	79fa      	ldrb	r2, [r7, #7]
 8015516:	4613      	mov	r3, r2
 8015518:	005b      	lsls	r3, r3, #1
 801551a:	4413      	add	r3, r2
 801551c:	009b      	lsls	r3, r3, #2
 801551e:	4a06      	ldr	r2, [pc, #24]	; (8015538 <_Z30wtp3drivercalls_updateCountersv+0x34>)
 8015520:	4413      	add	r3, r2
 8015522:	4618      	mov	r0, r3
 8015524:	f7fa fff6 	bl	8010514 <_ZN6CTimer6isZeroEv>
    for(i = 0; i < 3; i++)
 8015528:	79fb      	ldrb	r3, [r7, #7]
 801552a:	3301      	adds	r3, #1
 801552c:	71fb      	strb	r3, [r7, #7]
 801552e:	e7ee      	b.n	801550e <_Z30wtp3drivercalls_updateCountersv+0xa>
    }
}
 8015530:	bf00      	nop
 8015532:	3708      	adds	r7, #8
 8015534:	46bd      	mov	sp, r7
 8015536:	bd80      	pop	{r7, pc}
 8015538:	2000131c 	.word	0x2000131c

0801553c <_Z41__static_initialization_and_destruction_0ii>:
 801553c:	b590      	push	{r4, r7, lr}
 801553e:	b083      	sub	sp, #12
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
 8015544:	6039      	str	r1, [r7, #0]
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	2b01      	cmp	r3, #1
 801554a:	d114      	bne.n	8015576 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 801554c:	683b      	ldr	r3, [r7, #0]
 801554e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015552:	4293      	cmp	r3, r2
 8015554:	d10f      	bne.n	8015576 <_Z41__static_initialization_and_destruction_0ii+0x3a>
static CTimer wtp4timers[3] = {CTimer(CTimer::UNIT_MILISEC), CTimer(CTimer::UNIT_MILISEC), CTimer(CTimer::UNIT_MILISEC)};
 8015556:	4c0a      	ldr	r4, [pc, #40]	; (8015580 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8015558:	2100      	movs	r1, #0
 801555a:	4620      	mov	r0, r4
 801555c:	f7fa ff2e 	bl	80103bc <_ZN6CTimerC1ENS_4UnitE>
 8015560:	340c      	adds	r4, #12
 8015562:	2100      	movs	r1, #0
 8015564:	4620      	mov	r0, r4
 8015566:	f7fa ff29 	bl	80103bc <_ZN6CTimerC1ENS_4UnitE>
 801556a:	f104 030c 	add.w	r3, r4, #12
 801556e:	2100      	movs	r1, #0
 8015570:	4618      	mov	r0, r3
 8015572:	f7fa ff23 	bl	80103bc <_ZN6CTimerC1ENS_4UnitE>
}
 8015576:	bf00      	nop
 8015578:	370c      	adds	r7, #12
 801557a:	46bd      	mov	sp, r7
 801557c:	bd90      	pop	{r4, r7, pc}
 801557e:	bf00      	nop
 8015580:	2000131c 	.word	0x2000131c

08015584 <_GLOBAL__sub_I__Z24wtp3drivercalls_setTimerhm>:
 8015584:	b580      	push	{r7, lr}
 8015586:	af00      	add	r7, sp, #0
 8015588:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801558c:	2001      	movs	r0, #1
 801558e:	f7ff ffd5 	bl	801553c <_Z41__static_initialization_and_destruction_0ii>
 8015592:	bd80      	pop	{r7, pc}

08015594 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8015594:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8015596:	e003      	b.n	80155a0 <LoopCopyDataInit>

08015598 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8015598:	4b0a      	ldr	r3, [pc, #40]	; (80155c4 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 801559a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 801559c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 801559e:	3104      	adds	r1, #4

080155a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80155a0:	4809      	ldr	r0, [pc, #36]	; (80155c8 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 80155a2:	4b0a      	ldr	r3, [pc, #40]	; (80155cc <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 80155a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80155a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80155a8:	d3f6      	bcc.n	8015598 <CopyDataInit>
  ldr r2, =_sbss
 80155aa:	4a09      	ldr	r2, [pc, #36]	; (80155d0 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 80155ac:	e002      	b.n	80155b4 <LoopFillZerobss>

080155ae <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80155ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80155b0:	f842 3b04 	str.w	r3, [r2], #4

080155b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80155b4:	4b07      	ldr	r3, [pc, #28]	; (80155d4 <LoopFillZerobss+0x20>)
  cmp r2, r3
 80155b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80155b8:	d3f9      	bcc.n	80155ae <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 80155ba:	f7ff fdf3 	bl	80151a4 <SystemInit>
/* Call the application's entry point.*/
  bl main
 80155be:	f7ff fceb 	bl	8014f98 <main>
  bx lr
 80155c2:	4770      	bx	lr
  ldr r3, =_sidata
 80155c4:	080238ec 	.word	0x080238ec
  ldr r0, =_sdata
 80155c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80155cc:	200006e8 	.word	0x200006e8
  ldr r2, =_sbss
 80155d0:	200006e8 	.word	0x200006e8
  ldr r3, = _ebss
 80155d4:	200014ec 	.word	0x200014ec

080155d8 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80155d8:	e7fe      	b.n	80155d8 <ADC1_2_IRQHandler>
	...

080155dc <_ZdlPv>:
 80155dc:	f001 bc38 	b.w	8016e50 <free>

080155e0 <__aeabi_atexit>:
 80155e0:	460b      	mov	r3, r1
 80155e2:	4601      	mov	r1, r0
 80155e4:	4618      	mov	r0, r3
 80155e6:	f001 b8d2 	b.w	801678e <__cxa_atexit>
 80155ea:	bf00      	nop

080155ec <__cxa_pure_virtual>:
 80155ec:	b508      	push	{r3, lr}
 80155ee:	221b      	movs	r2, #27
 80155f0:	4902      	ldr	r1, [pc, #8]	; (80155fc <__cxa_pure_virtual+0x10>)
 80155f2:	2002      	movs	r0, #2
 80155f4:	f003 fbac 	bl	8018d50 <write>
 80155f8:	f000 f816 	bl	8015628 <_ZSt9terminatev>
 80155fc:	08022794 	.word	0x08022794

08015600 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8015600:	b508      	push	{r3, lr}
 8015602:	4780      	blx	r0
 8015604:	f001 f8bc 	bl	8016780 <abort>
 8015608:	f000 ff90 	bl	801652c <__cxa_begin_catch>
 801560c:	f001 f8b8 	bl	8016780 <abort>
 8015610:	460d      	mov	r5, r1
 8015612:	4604      	mov	r4, r0
 8015614:	f000 ffca 	bl	80165ac <__cxa_end_catch>
 8015618:	3501      	adds	r5, #1
 801561a:	d001      	beq.n	8015620 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 801561c:	f000 f9b8 	bl	8015990 <__cxa_end_cleanup>
 8015620:	4620      	mov	r0, r4
 8015622:	f000 ff11 	bl	8016448 <__cxa_call_unexpected>
 8015626:	bf00      	nop

08015628 <_ZSt9terminatev>:
 8015628:	b508      	push	{r3, lr}
 801562a:	4b03      	ldr	r3, [pc, #12]	; (8015638 <_ZSt9terminatev+0x10>)
 801562c:	6818      	ldr	r0, [r3, #0]
 801562e:	f3bf 8f5b 	dmb	ish
 8015632:	f7ff ffe5 	bl	8015600 <_ZN10__cxxabiv111__terminateEPFvvE>
 8015636:	bf00      	nop
 8015638:	20000024 	.word	0x20000024

0801563c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 801563c:	b508      	push	{r3, lr}
 801563e:	4780      	blx	r0
 8015640:	f7ff fff2 	bl	8015628 <_ZSt9terminatev>

08015644 <_ZSt10unexpectedv>:
 8015644:	b508      	push	{r3, lr}
 8015646:	4b03      	ldr	r3, [pc, #12]	; (8015654 <_ZSt10unexpectedv+0x10>)
 8015648:	6818      	ldr	r0, [r3, #0]
 801564a:	f3bf 8f5b 	dmb	ish
 801564e:	f7ff fff5 	bl	801563c <_ZN10__cxxabiv112__unexpectedEPFvvE>
 8015652:	bf00      	nop
 8015654:	20000028 	.word	0x20000028

08015658 <_ZSt13get_terminatev>:
 8015658:	4b02      	ldr	r3, [pc, #8]	; (8015664 <_ZSt13get_terminatev+0xc>)
 801565a:	6818      	ldr	r0, [r3, #0]
 801565c:	f3bf 8f5b 	dmb	ish
 8015660:	4770      	bx	lr
 8015662:	bf00      	nop
 8015664:	20000024 	.word	0x20000024

08015668 <_ZSt14get_unexpectedv>:
 8015668:	4b02      	ldr	r3, [pc, #8]	; (8015674 <_ZSt14get_unexpectedv+0xc>)
 801566a:	6818      	ldr	r0, [r3, #0]
 801566c:	f3bf 8f5b 	dmb	ish
 8015670:	4770      	bx	lr
 8015672:	bf00      	nop
 8015674:	20000028 	.word	0x20000028

08015678 <_Znwj>:
 8015678:	b510      	push	{r4, lr}
 801567a:	2800      	cmp	r0, #0
 801567c:	bf14      	ite	ne
 801567e:	4604      	movne	r4, r0
 8015680:	2401      	moveq	r4, #1
 8015682:	4620      	mov	r0, r4
 8015684:	f001 fbdc 	bl	8016e40 <malloc>
 8015688:	b100      	cbz	r0, 801568c <_Znwj+0x14>
 801568a:	bd10      	pop	{r4, pc}
 801568c:	f000 fd76 	bl	801617c <_ZSt15get_new_handlerv>
 8015690:	b108      	cbz	r0, 8015696 <_Znwj+0x1e>
 8015692:	4780      	blx	r0
 8015694:	e7f5      	b.n	8015682 <_Znwj+0xa>
 8015696:	2004      	movs	r0, #4
 8015698:	f000 f87e 	bl	8015798 <__cxa_allocate_exception>
 801569c:	4b02      	ldr	r3, [pc, #8]	; (80156a8 <_Znwj+0x30>)
 801569e:	4a03      	ldr	r2, [pc, #12]	; (80156ac <_Znwj+0x34>)
 80156a0:	6003      	str	r3, [r0, #0]
 80156a2:	4903      	ldr	r1, [pc, #12]	; (80156b0 <_Znwj+0x38>)
 80156a4:	f000 f8d6 	bl	8015854 <__cxa_throw>
 80156a8:	080227e4 	.word	0x080227e4
 80156ac:	08015951 	.word	0x08015951
 80156b0:	080227c0 	.word	0x080227c0

080156b4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 80156b4:	b4f0      	push	{r4, r5, r6, r7}
 80156b6:	4c1d      	ldr	r4, [pc, #116]	; (801572c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x78>)
 80156b8:	f1a0 0608 	sub.w	r6, r0, #8
 80156bc:	6861      	ldr	r1, [r4, #4]
 80156be:	f850 7c08 	ldr.w	r7, [r0, #-8]
 80156c2:	b1c9      	cbz	r1, 80156f8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
 80156c4:	19f5      	adds	r5, r6, r7
 80156c6:	42a9      	cmp	r1, r5
 80156c8:	d01b      	beq.n	8015702 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
 80156ca:	684a      	ldr	r2, [r1, #4]
 80156cc:	b32a      	cbz	r2, 801571a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
 80156ce:	4295      	cmp	r5, r2
 80156d0:	d304      	bcc.n	80156dc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x28>
 80156d2:	e026      	b.n	8015722 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x6e>
 80156d4:	429d      	cmp	r5, r3
 80156d6:	4611      	mov	r1, r2
 80156d8:	d204      	bcs.n	80156e4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 80156da:	461a      	mov	r2, r3
 80156dc:	6853      	ldr	r3, [r2, #4]
 80156de:	1d0c      	adds	r4, r1, #4
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d1f7      	bne.n	80156d4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
 80156e4:	6811      	ldr	r1, [r2, #0]
 80156e6:	1855      	adds	r5, r2, r1
 80156e8:	42ae      	cmp	r6, r5
 80156ea:	d013      	beq.n	8015714 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
 80156ec:	f840 3c04 	str.w	r3, [r0, #-4]
 80156f0:	6823      	ldr	r3, [r4, #0]
 80156f2:	605e      	str	r6, [r3, #4]
 80156f4:	bcf0      	pop	{r4, r5, r6, r7}
 80156f6:	4770      	bx	lr
 80156f8:	f840 1c04 	str.w	r1, [r0, #-4]
 80156fc:	6066      	str	r6, [r4, #4]
 80156fe:	bcf0      	pop	{r4, r5, r6, r7}
 8015700:	4770      	bx	lr
 8015702:	680b      	ldr	r3, [r1, #0]
 8015704:	684a      	ldr	r2, [r1, #4]
 8015706:	441f      	add	r7, r3
 8015708:	f840 7c08 	str.w	r7, [r0, #-8]
 801570c:	f840 2c04 	str.w	r2, [r0, #-4]
 8015710:	6066      	str	r6, [r4, #4]
 8015712:	e7ef      	b.n	80156f4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
 8015714:	440f      	add	r7, r1
 8015716:	6017      	str	r7, [r2, #0]
 8015718:	e7ec      	b.n	80156f4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
 801571a:	4613      	mov	r3, r2
 801571c:	3404      	adds	r4, #4
 801571e:	460a      	mov	r2, r1
 8015720:	e7e0      	b.n	80156e4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 8015722:	4613      	mov	r3, r2
 8015724:	3404      	adds	r4, #4
 8015726:	460a      	mov	r2, r1
 8015728:	e7dc      	b.n	80156e4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 801572a:	bf00      	nop
 801572c:	20001340 	.word	0x20001340

08015730 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 8015730:	b430      	push	{r4, r5}
 8015732:	4c18      	ldr	r4, [pc, #96]	; (8015794 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
 8015734:	f100 0108 	add.w	r1, r0, #8
 8015738:	6863      	ldr	r3, [r4, #4]
 801573a:	2908      	cmp	r1, #8
 801573c:	bf38      	it	cc
 801573e:	2108      	movcc	r1, #8
 8015740:	b313      	cbz	r3, 8015788 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 8015742:	3107      	adds	r1, #7
 8015744:	681a      	ldr	r2, [r3, #0]
 8015746:	f021 0107 	bic.w	r1, r1, #7
 801574a:	4291      	cmp	r1, r2
 801574c:	d804      	bhi.n	8015758 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
 801574e:	e01d      	b.n	801578c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
 8015750:	6802      	ldr	r2, [r0, #0]
 8015752:	4291      	cmp	r1, r2
 8015754:	d905      	bls.n	8015762 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
 8015756:	4603      	mov	r3, r0
 8015758:	6858      	ldr	r0, [r3, #4]
 801575a:	2800      	cmp	r0, #0
 801575c:	d1f8      	bne.n	8015750 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
 801575e:	bc30      	pop	{r4, r5}
 8015760:	4770      	bx	lr
 8015762:	3304      	adds	r3, #4
 8015764:	1a52      	subs	r2, r2, r1
 8015766:	2a07      	cmp	r2, #7
 8015768:	d90a      	bls.n	8015780 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 801576a:	6844      	ldr	r4, [r0, #4]
 801576c:	1845      	adds	r5, r0, r1
 801576e:	606c      	str	r4, [r5, #4]
 8015770:	681c      	ldr	r4, [r3, #0]
 8015772:	5042      	str	r2, [r0, r1]
 8015774:	6021      	str	r1, [r4, #0]
 8015776:	601d      	str	r5, [r3, #0]
 8015778:	f104 0008 	add.w	r0, r4, #8
 801577c:	bc30      	pop	{r4, r5}
 801577e:	4770      	bx	lr
 8015780:	6842      	ldr	r2, [r0, #4]
 8015782:	4604      	mov	r4, r0
 8015784:	601a      	str	r2, [r3, #0]
 8015786:	e7f7      	b.n	8015778 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 8015788:	4618      	mov	r0, r3
 801578a:	e7e8      	b.n	801575e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
 801578c:	4618      	mov	r0, r3
 801578e:	1d23      	adds	r3, r4, #4
 8015790:	e7e8      	b.n	8015764 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 8015792:	bf00      	nop
 8015794:	20001340 	.word	0x20001340

08015798 <__cxa_allocate_exception>:
 8015798:	b538      	push	{r3, r4, r5, lr}
 801579a:	f100 0580 	add.w	r5, r0, #128	; 0x80
 801579e:	4628      	mov	r0, r5
 80157a0:	f001 fb4e 	bl	8016e40 <malloc>
 80157a4:	4604      	mov	r4, r0
 80157a6:	b138      	cbz	r0, 80157b8 <__cxa_allocate_exception+0x20>
 80157a8:	2280      	movs	r2, #128	; 0x80
 80157aa:	2100      	movs	r1, #0
 80157ac:	4620      	mov	r0, r4
 80157ae:	f001 fda5 	bl	80172fc <memset>
 80157b2:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80157b6:	bd38      	pop	{r3, r4, r5, pc}
 80157b8:	4628      	mov	r0, r5
 80157ba:	f7ff ffb9 	bl	8015730 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 80157be:	4604      	mov	r4, r0
 80157c0:	2800      	cmp	r0, #0
 80157c2:	d1f1      	bne.n	80157a8 <__cxa_allocate_exception+0x10>
 80157c4:	f7ff ff30 	bl	8015628 <_ZSt9terminatev>

080157c8 <__cxa_free_exception>:
 80157c8:	4a06      	ldr	r2, [pc, #24]	; (80157e4 <__cxa_free_exception+0x1c>)
 80157ca:	3880      	subs	r0, #128	; 0x80
 80157cc:	6893      	ldr	r3, [r2, #8]
 80157ce:	4298      	cmp	r0, r3
 80157d0:	d905      	bls.n	80157de <__cxa_free_exception+0x16>
 80157d2:	68d2      	ldr	r2, [r2, #12]
 80157d4:	4413      	add	r3, r2
 80157d6:	4298      	cmp	r0, r3
 80157d8:	d201      	bcs.n	80157de <__cxa_free_exception+0x16>
 80157da:	f7ff bf6b 	b.w	80156b4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 80157de:	f001 bb37 	b.w	8016e50 <free>
 80157e2:	bf00      	nop
 80157e4:	20001340 	.word	0x20001340

080157e8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 80157e8:	b538      	push	{r3, r4, r5, lr}
 80157ea:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 80157ee:	4c07      	ldr	r4, [pc, #28]	; (801580c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 80157f0:	4628      	mov	r0, r5
 80157f2:	60e5      	str	r5, [r4, #12]
 80157f4:	f001 fb24 	bl	8016e40 <malloc>
 80157f8:	60a0      	str	r0, [r4, #8]
 80157fa:	b120      	cbz	r0, 8015806 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 80157fc:	2300      	movs	r3, #0
 80157fe:	6060      	str	r0, [r4, #4]
 8015800:	6005      	str	r5, [r0, #0]
 8015802:	6043      	str	r3, [r0, #4]
 8015804:	bd38      	pop	{r3, r4, r5, pc}
 8015806:	60e0      	str	r0, [r4, #12]
 8015808:	6060      	str	r0, [r4, #4]
 801580a:	bd38      	pop	{r3, r4, r5, pc}
 801580c:	20001340 	.word	0x20001340

08015810 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 8015810:	2801      	cmp	r0, #1
 8015812:	b510      	push	{r4, lr}
 8015814:	d81a      	bhi.n	801584c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 8015816:	f3bf 8f5b 	dmb	ish
 801581a:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 801581e:	e853 2f00 	ldrex	r2, [r3]
 8015822:	3a01      	subs	r2, #1
 8015824:	e843 2000 	strex	r0, r2, [r3]
 8015828:	2800      	cmp	r0, #0
 801582a:	d1f8      	bne.n	801581e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 801582c:	f3bf 8f5b 	dmb	ish
 8015830:	b95a      	cbnz	r2, 801584a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 8015832:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8015836:	f101 0458 	add.w	r4, r1, #88	; 0x58
 801583a:	b10b      	cbz	r3, 8015840 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 801583c:	4620      	mov	r0, r4
 801583e:	4798      	blx	r3
 8015840:	4620      	mov	r0, r4
 8015842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015846:	f7ff bfbf 	b.w	80157c8 <__cxa_free_exception>
 801584a:	bd10      	pop	{r4, pc}
 801584c:	f851 0c14 	ldr.w	r0, [r1, #-20]
 8015850:	f7ff fed6 	bl	8015600 <_ZN10__cxxabiv111__terminateEPFvvE>

08015854 <__cxa_throw>:
 8015854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015858:	4604      	mov	r4, r0
 801585a:	4617      	mov	r7, r2
 801585c:	4688      	mov	r8, r1
 801585e:	f000 f893 	bl	8015988 <__cxa_get_globals>
 8015862:	2601      	movs	r6, #1
 8015864:	6843      	ldr	r3, [r0, #4]
 8015866:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
 801586a:	4433      	add	r3, r6
 801586c:	6043      	str	r3, [r0, #4]
 801586e:	f844 7c74 	str.w	r7, [r4, #-116]
 8015872:	f844 6c80 	str.w	r6, [r4, #-128]
 8015876:	f844 8c78 	str.w	r8, [r4, #-120]
 801587a:	f7ff fef5 	bl	8015668 <_ZSt14get_unexpectedv>
 801587e:	f844 0c70 	str.w	r0, [r4, #-112]
 8015882:	f7ff fee9 	bl	8015658 <_ZSt13get_terminatev>
 8015886:	2147      	movs	r1, #71	; 0x47
 8015888:	2243      	movs	r2, #67	; 0x43
 801588a:	232b      	movs	r3, #43	; 0x2b
 801588c:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
 8015890:	2755      	movs	r7, #85	; 0x55
 8015892:	2600      	movs	r6, #0
 8015894:	f804 1c58 	strb.w	r1, [r4, #-88]
 8015898:	490d      	ldr	r1, [pc, #52]	; (80158d0 <__cxa_throw+0x7c>)
 801589a:	f844 0c6c 	str.w	r0, [r4, #-108]
 801589e:	f804 ec57 	strb.w	lr, [r4, #-87]
 80158a2:	f844 1c50 	str.w	r1, [r4, #-80]
 80158a6:	f804 2c55 	strb.w	r2, [r4, #-85]
 80158aa:	f804 2c54 	strb.w	r2, [r4, #-84]
 80158ae:	f804 3c53 	strb.w	r3, [r4, #-83]
 80158b2:	f804 3c52 	strb.w	r3, [r4, #-82]
 80158b6:	f804 7c56 	strb.w	r7, [r4, #-86]
 80158ba:	f804 6c51 	strb.w	r6, [r4, #-81]
 80158be:	4628      	mov	r0, r5
 80158c0:	f7f2 fb92 	bl	8007fe8 <_Unwind_RaiseException>
 80158c4:	4628      	mov	r0, r5
 80158c6:	f000 fe31 	bl	801652c <__cxa_begin_catch>
 80158ca:	f7ff fead 	bl	8015628 <_ZSt9terminatev>
 80158ce:	bf00      	nop
 80158d0:	08015811 	.word	0x08015811

080158d4 <__cxa_rethrow>:
 80158d4:	b510      	push	{r4, lr}
 80158d6:	f000 f857 	bl	8015988 <__cxa_get_globals>
 80158da:	6842      	ldr	r2, [r0, #4]
 80158dc:	6804      	ldr	r4, [r0, #0]
 80158de:	3201      	adds	r2, #1
 80158e0:	6042      	str	r2, [r0, #4]
 80158e2:	b164      	cbz	r4, 80158fe <__cxa_rethrow+0x2a>
 80158e4:	f894 2020 	ldrb.w	r2, [r4, #32]
 80158e8:	2a47      	cmp	r2, #71	; 0x47
 80158ea:	d00a      	beq.n	8015902 <__cxa_rethrow+0x2e>
 80158ec:	2200      	movs	r2, #0
 80158ee:	6002      	str	r2, [r0, #0]
 80158f0:	3420      	adds	r4, #32
 80158f2:	4620      	mov	r0, r4
 80158f4:	f7f2 fb9c 	bl	8008030 <_Unwind_Resume_or_Rethrow>
 80158f8:	4620      	mov	r0, r4
 80158fa:	f000 fe17 	bl	801652c <__cxa_begin_catch>
 80158fe:	f7ff fe93 	bl	8015628 <_ZSt9terminatev>
 8015902:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8015906:	2a4e      	cmp	r2, #78	; 0x4e
 8015908:	d1f0      	bne.n	80158ec <__cxa_rethrow+0x18>
 801590a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 801590e:	2a55      	cmp	r2, #85	; 0x55
 8015910:	d1ec      	bne.n	80158ec <__cxa_rethrow+0x18>
 8015912:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8015916:	2a43      	cmp	r2, #67	; 0x43
 8015918:	d1e8      	bne.n	80158ec <__cxa_rethrow+0x18>
 801591a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 801591e:	2a43      	cmp	r2, #67	; 0x43
 8015920:	d1e4      	bne.n	80158ec <__cxa_rethrow+0x18>
 8015922:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8015926:	2a2b      	cmp	r2, #43	; 0x2b
 8015928:	d1e0      	bne.n	80158ec <__cxa_rethrow+0x18>
 801592a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 801592e:	2a2b      	cmp	r2, #43	; 0x2b
 8015930:	d1dc      	bne.n	80158ec <__cxa_rethrow+0x18>
 8015932:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8015936:	2a01      	cmp	r2, #1
 8015938:	d8d8      	bhi.n	80158ec <__cxa_rethrow+0x18>
 801593a:	6962      	ldr	r2, [r4, #20]
 801593c:	4252      	negs	r2, r2
 801593e:	6162      	str	r2, [r4, #20]
 8015940:	e7d6      	b.n	80158f0 <__cxa_rethrow+0x1c>
 8015942:	bf00      	nop

08015944 <_Znaj>:
 8015944:	f7ff be98 	b.w	8015678 <_Znwj>

08015948 <_ZNKSt9bad_alloc4whatEv>:
 8015948:	4800      	ldr	r0, [pc, #0]	; (801594c <_ZNKSt9bad_alloc4whatEv+0x4>)
 801594a:	4770      	bx	lr
 801594c:	080227b0 	.word	0x080227b0

08015950 <_ZNSt9bad_allocD1Ev>:
 8015950:	b510      	push	{r4, lr}
 8015952:	4604      	mov	r4, r0
 8015954:	4b02      	ldr	r3, [pc, #8]	; (8015960 <_ZNSt9bad_allocD1Ev+0x10>)
 8015956:	6003      	str	r3, [r0, #0]
 8015958:	f000 fc18 	bl	801618c <_ZNSt9exceptionD1Ev>
 801595c:	4620      	mov	r0, r4
 801595e:	bd10      	pop	{r4, pc}
 8015960:	080227e4 	.word	0x080227e4

08015964 <_ZNSt9bad_allocD0Ev>:
 8015964:	b510      	push	{r4, lr}
 8015966:	4604      	mov	r4, r0
 8015968:	4b04      	ldr	r3, [pc, #16]	; (801597c <_ZNSt9bad_allocD0Ev+0x18>)
 801596a:	6003      	str	r3, [r0, #0]
 801596c:	f000 fc0e 	bl	801618c <_ZNSt9exceptionD1Ev>
 8015970:	4620      	mov	r0, r4
 8015972:	2104      	movs	r1, #4
 8015974:	f000 fc00 	bl	8016178 <_ZdlPvj>
 8015978:	4620      	mov	r0, r4
 801597a:	bd10      	pop	{r4, pc}
 801597c:	080227e4 	.word	0x080227e4

08015980 <__cxa_get_globals_fast>:
 8015980:	4800      	ldr	r0, [pc, #0]	; (8015984 <__cxa_get_globals_fast+0x4>)
 8015982:	4770      	bx	lr
 8015984:	20001350 	.word	0x20001350

08015988 <__cxa_get_globals>:
 8015988:	4800      	ldr	r0, [pc, #0]	; (801598c <__cxa_get_globals+0x4>)
 801598a:	4770      	bx	lr
 801598c:	20001350 	.word	0x20001350

08015990 <__cxa_end_cleanup>:
 8015990:	b41e      	push	{r1, r2, r3, r4}
 8015992:	f000 f891 	bl	8015ab8 <__gnu_end_cleanup>
 8015996:	bc1e      	pop	{r1, r2, r3, r4}
 8015998:	f7f2 fb38 	bl	800800c <_Unwind_Resume>

0801599c <__cxa_type_match>:
 801599c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801599e:	7802      	ldrb	r2, [r0, #0]
 80159a0:	b083      	sub	sp, #12
 80159a2:	2a47      	cmp	r2, #71	; 0x47
 80159a4:	460d      	mov	r5, r1
 80159a6:	461f      	mov	r7, r3
 80159a8:	d01e      	beq.n	80159e8 <__cxa_type_match+0x4c>
 80159aa:	2300      	movs	r3, #0
 80159ac:	4c27      	ldr	r4, [pc, #156]	; (8015a4c <__cxa_type_match+0xb0>)
 80159ae:	9301      	str	r3, [sp, #4]
 80159b0:	6823      	ldr	r3, [r4, #0]
 80159b2:	4620      	mov	r0, r4
 80159b4:	689b      	ldr	r3, [r3, #8]
 80159b6:	4798      	blx	r3
 80159b8:	b180      	cbz	r0, 80159dc <__cxa_type_match+0x40>
 80159ba:	2602      	movs	r6, #2
 80159bc:	9b01      	ldr	r3, [sp, #4]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	9301      	str	r3, [sp, #4]
 80159c2:	682b      	ldr	r3, [r5, #0]
 80159c4:	4621      	mov	r1, r4
 80159c6:	4628      	mov	r0, r5
 80159c8:	691c      	ldr	r4, [r3, #16]
 80159ca:	aa01      	add	r2, sp, #4
 80159cc:	2301      	movs	r3, #1
 80159ce:	47a0      	blx	r4
 80159d0:	b130      	cbz	r0, 80159e0 <__cxa_type_match+0x44>
 80159d2:	4630      	mov	r0, r6
 80159d4:	9b01      	ldr	r3, [sp, #4]
 80159d6:	603b      	str	r3, [r7, #0]
 80159d8:	b003      	add	sp, #12
 80159da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159dc:	2601      	movs	r6, #1
 80159de:	e7f0      	b.n	80159c2 <__cxa_type_match+0x26>
 80159e0:	4606      	mov	r6, r0
 80159e2:	4630      	mov	r0, r6
 80159e4:	b003      	add	sp, #12
 80159e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159e8:	7843      	ldrb	r3, [r0, #1]
 80159ea:	2b4e      	cmp	r3, #78	; 0x4e
 80159ec:	d1dd      	bne.n	80159aa <__cxa_type_match+0xe>
 80159ee:	7883      	ldrb	r3, [r0, #2]
 80159f0:	2b55      	cmp	r3, #85	; 0x55
 80159f2:	d1da      	bne.n	80159aa <__cxa_type_match+0xe>
 80159f4:	78c3      	ldrb	r3, [r0, #3]
 80159f6:	2b43      	cmp	r3, #67	; 0x43
 80159f8:	d019      	beq.n	8015a2e <__cxa_type_match+0x92>
 80159fa:	78c3      	ldrb	r3, [r0, #3]
 80159fc:	2b43      	cmp	r3, #67	; 0x43
 80159fe:	d1d4      	bne.n	80159aa <__cxa_type_match+0xe>
 8015a00:	7903      	ldrb	r3, [r0, #4]
 8015a02:	2b43      	cmp	r3, #67	; 0x43
 8015a04:	d1d1      	bne.n	80159aa <__cxa_type_match+0xe>
 8015a06:	7943      	ldrb	r3, [r0, #5]
 8015a08:	2b2b      	cmp	r3, #43	; 0x2b
 8015a0a:	d1ce      	bne.n	80159aa <__cxa_type_match+0xe>
 8015a0c:	7983      	ldrb	r3, [r0, #6]
 8015a0e:	2b2b      	cmp	r3, #43	; 0x2b
 8015a10:	d1cb      	bne.n	80159aa <__cxa_type_match+0xe>
 8015a12:	79c3      	ldrb	r3, [r0, #7]
 8015a14:	2b01      	cmp	r3, #1
 8015a16:	d8c8      	bhi.n	80159aa <__cxa_type_match+0xe>
 8015a18:	d004      	beq.n	8015a24 <__cxa_type_match+0x88>
 8015a1a:	f850 4c20 	ldr.w	r4, [r0, #-32]
 8015a1e:	3058      	adds	r0, #88	; 0x58
 8015a20:	9001      	str	r0, [sp, #4]
 8015a22:	e7c5      	b.n	80159b0 <__cxa_type_match+0x14>
 8015a24:	f850 0c20 	ldr.w	r0, [r0, #-32]
 8015a28:	f850 4c78 	ldr.w	r4, [r0, #-120]
 8015a2c:	e7f8      	b.n	8015a20 <__cxa_type_match+0x84>
 8015a2e:	7903      	ldrb	r3, [r0, #4]
 8015a30:	2b46      	cmp	r3, #70	; 0x46
 8015a32:	d1e2      	bne.n	80159fa <__cxa_type_match+0x5e>
 8015a34:	7943      	ldrb	r3, [r0, #5]
 8015a36:	2b4f      	cmp	r3, #79	; 0x4f
 8015a38:	d1df      	bne.n	80159fa <__cxa_type_match+0x5e>
 8015a3a:	7983      	ldrb	r3, [r0, #6]
 8015a3c:	2b52      	cmp	r3, #82	; 0x52
 8015a3e:	d1dc      	bne.n	80159fa <__cxa_type_match+0x5e>
 8015a40:	79c3      	ldrb	r3, [r0, #7]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d1d9      	bne.n	80159fa <__cxa_type_match+0x5e>
 8015a46:	9301      	str	r3, [sp, #4]
 8015a48:	4c01      	ldr	r4, [pc, #4]	; (8015a50 <__cxa_type_match+0xb4>)
 8015a4a:	e7b1      	b.n	80159b0 <__cxa_type_match+0x14>
 8015a4c:	0802280c 	.word	0x0802280c
 8015a50:	08022804 	.word	0x08022804

08015a54 <__cxa_begin_cleanup>:
 8015a54:	b510      	push	{r4, lr}
 8015a56:	4604      	mov	r4, r0
 8015a58:	f7ff ff96 	bl	8015988 <__cxa_get_globals>
 8015a5c:	7823      	ldrb	r3, [r4, #0]
 8015a5e:	f1a4 0220 	sub.w	r2, r4, #32
 8015a62:	2b47      	cmp	r3, #71	; 0x47
 8015a64:	d004      	beq.n	8015a70 <__cxa_begin_cleanup+0x1c>
 8015a66:	6883      	ldr	r3, [r0, #8]
 8015a68:	bb23      	cbnz	r3, 8015ab4 <__cxa_begin_cleanup+0x60>
 8015a6a:	6082      	str	r2, [r0, #8]
 8015a6c:	2001      	movs	r0, #1
 8015a6e:	bd10      	pop	{r4, pc}
 8015a70:	7863      	ldrb	r3, [r4, #1]
 8015a72:	2b4e      	cmp	r3, #78	; 0x4e
 8015a74:	d1f7      	bne.n	8015a66 <__cxa_begin_cleanup+0x12>
 8015a76:	78a3      	ldrb	r3, [r4, #2]
 8015a78:	2b55      	cmp	r3, #85	; 0x55
 8015a7a:	d1f4      	bne.n	8015a66 <__cxa_begin_cleanup+0x12>
 8015a7c:	78e3      	ldrb	r3, [r4, #3]
 8015a7e:	2b43      	cmp	r3, #67	; 0x43
 8015a80:	d1f1      	bne.n	8015a66 <__cxa_begin_cleanup+0x12>
 8015a82:	7923      	ldrb	r3, [r4, #4]
 8015a84:	2b43      	cmp	r3, #67	; 0x43
 8015a86:	d1ee      	bne.n	8015a66 <__cxa_begin_cleanup+0x12>
 8015a88:	7963      	ldrb	r3, [r4, #5]
 8015a8a:	2b2b      	cmp	r3, #43	; 0x2b
 8015a8c:	d1eb      	bne.n	8015a66 <__cxa_begin_cleanup+0x12>
 8015a8e:	79a3      	ldrb	r3, [r4, #6]
 8015a90:	2b2b      	cmp	r3, #43	; 0x2b
 8015a92:	d1e8      	bne.n	8015a66 <__cxa_begin_cleanup+0x12>
 8015a94:	79e3      	ldrb	r3, [r4, #7]
 8015a96:	2b01      	cmp	r3, #1
 8015a98:	d8e5      	bhi.n	8015a66 <__cxa_begin_cleanup+0x12>
 8015a9a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015a9e:	3301      	adds	r3, #1
 8015aa0:	2b01      	cmp	r3, #1
 8015aa2:	f844 3c04 	str.w	r3, [r4, #-4]
 8015aa6:	d1e1      	bne.n	8015a6c <__cxa_begin_cleanup+0x18>
 8015aa8:	6883      	ldr	r3, [r0, #8]
 8015aaa:	f844 3c08 	str.w	r3, [r4, #-8]
 8015aae:	6082      	str	r2, [r0, #8]
 8015ab0:	2001      	movs	r0, #1
 8015ab2:	bd10      	pop	{r4, pc}
 8015ab4:	f7ff fdb8 	bl	8015628 <_ZSt9terminatev>

08015ab8 <__gnu_end_cleanup>:
 8015ab8:	b508      	push	{r3, lr}
 8015aba:	f7ff ff65 	bl	8015988 <__cxa_get_globals>
 8015abe:	6883      	ldr	r3, [r0, #8]
 8015ac0:	b383      	cbz	r3, 8015b24 <__gnu_end_cleanup+0x6c>
 8015ac2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8015ac6:	2a47      	cmp	r2, #71	; 0x47
 8015ac8:	d004      	beq.n	8015ad4 <__gnu_end_cleanup+0x1c>
 8015aca:	2200      	movs	r2, #0
 8015acc:	6082      	str	r2, [r0, #8]
 8015ace:	f103 0020 	add.w	r0, r3, #32
 8015ad2:	bd08      	pop	{r3, pc}
 8015ad4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8015ad8:	2a4e      	cmp	r2, #78	; 0x4e
 8015ada:	d1f6      	bne.n	8015aca <__gnu_end_cleanup+0x12>
 8015adc:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8015ae0:	2a55      	cmp	r2, #85	; 0x55
 8015ae2:	d1f2      	bne.n	8015aca <__gnu_end_cleanup+0x12>
 8015ae4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8015ae8:	2a43      	cmp	r2, #67	; 0x43
 8015aea:	d1ee      	bne.n	8015aca <__gnu_end_cleanup+0x12>
 8015aec:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8015af0:	2a43      	cmp	r2, #67	; 0x43
 8015af2:	d1ea      	bne.n	8015aca <__gnu_end_cleanup+0x12>
 8015af4:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8015af8:	2a2b      	cmp	r2, #43	; 0x2b
 8015afa:	d1e6      	bne.n	8015aca <__gnu_end_cleanup+0x12>
 8015afc:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8015b00:	2a2b      	cmp	r2, #43	; 0x2b
 8015b02:	d1e2      	bne.n	8015aca <__gnu_end_cleanup+0x12>
 8015b04:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8015b08:	2a01      	cmp	r2, #1
 8015b0a:	d8de      	bhi.n	8015aca <__gnu_end_cleanup+0x12>
 8015b0c:	69da      	ldr	r2, [r3, #28]
 8015b0e:	3a01      	subs	r2, #1
 8015b10:	61da      	str	r2, [r3, #28]
 8015b12:	2a00      	cmp	r2, #0
 8015b14:	d1db      	bne.n	8015ace <__gnu_end_cleanup+0x16>
 8015b16:	2200      	movs	r2, #0
 8015b18:	6999      	ldr	r1, [r3, #24]
 8015b1a:	6081      	str	r1, [r0, #8]
 8015b1c:	619a      	str	r2, [r3, #24]
 8015b1e:	f103 0020 	add.w	r0, r3, #32
 8015b22:	bd08      	pop	{r3, pc}
 8015b24:	f7ff fd80 	bl	8015628 <_ZSt9terminatev>

08015b28 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8015b28:	2850      	cmp	r0, #80	; 0x50
 8015b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b2c:	d054      	beq.n	8015bd8 <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
 8015b2e:	f000 040f 	and.w	r4, r0, #15
 8015b32:	2c0c      	cmp	r4, #12
 8015b34:	d84e      	bhi.n	8015bd4 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
 8015b36:	e8df f004 	tbb	[pc, r4]
 8015b3a:	3907      	.short	0x3907
 8015b3c:	4d170749 	.word	0x4d170749
 8015b40:	1f4d4d4d 	.word	0x1f4d4d4d
 8015b44:	071b      	.short	0x071b
 8015b46:	17          	.byte	0x17
 8015b47:	00          	.byte	0x00
 8015b48:	4615      	mov	r5, r2
 8015b4a:	f855 4b04 	ldr.w	r4, [r5], #4
 8015b4e:	b144      	cbz	r4, 8015b62 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
 8015b50:	f000 0670 	and.w	r6, r0, #112	; 0x70
 8015b54:	2e10      	cmp	r6, #16
 8015b56:	bf08      	it	eq
 8015b58:	4611      	moveq	r1, r2
 8015b5a:	0602      	lsls	r2, r0, #24
 8015b5c:	440c      	add	r4, r1
 8015b5e:	bf48      	it	mi
 8015b60:	6824      	ldrmi	r4, [r4, #0]
 8015b62:	601c      	str	r4, [r3, #0]
 8015b64:	4628      	mov	r0, r5
 8015b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b68:	4615      	mov	r5, r2
 8015b6a:	f855 4b08 	ldr.w	r4, [r5], #8
 8015b6e:	e7ee      	b.n	8015b4e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8015b70:	4615      	mov	r5, r2
 8015b72:	f935 4b02 	ldrsh.w	r4, [r5], #2
 8015b76:	e7ea      	b.n	8015b4e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8015b78:	2400      	movs	r4, #0
 8015b7a:	4615      	mov	r5, r2
 8015b7c:	4627      	mov	r7, r4
 8015b7e:	f815 eb01 	ldrb.w	lr, [r5], #1
 8015b82:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 8015b86:	40be      	lsls	r6, r7
 8015b88:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8015b8c:	ea44 0406 	orr.w	r4, r4, r6
 8015b90:	f107 0707 	add.w	r7, r7, #7
 8015b94:	d1f3      	bne.n	8015b7e <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
 8015b96:	2f1f      	cmp	r7, #31
 8015b98:	d8d9      	bhi.n	8015b4e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8015b9a:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8015b9e:	d0d6      	beq.n	8015b4e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8015ba0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8015ba4:	fa06 f707 	lsl.w	r7, r6, r7
 8015ba8:	433c      	orrs	r4, r7
 8015baa:	e7d1      	b.n	8015b50 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 8015bac:	2400      	movs	r4, #0
 8015bae:	4615      	mov	r5, r2
 8015bb0:	4627      	mov	r7, r4
 8015bb2:	f815 eb01 	ldrb.w	lr, [r5], #1
 8015bb6:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 8015bba:	40be      	lsls	r6, r7
 8015bbc:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8015bc0:	ea44 0406 	orr.w	r4, r4, r6
 8015bc4:	f107 0707 	add.w	r7, r7, #7
 8015bc8:	d1f3      	bne.n	8015bb2 <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
 8015bca:	e7c0      	b.n	8015b4e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8015bcc:	4615      	mov	r5, r2
 8015bce:	f835 4b02 	ldrh.w	r4, [r5], #2
 8015bd2:	e7bc      	b.n	8015b4e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8015bd4:	f000 fdd4 	bl	8016780 <abort>
 8015bd8:	3203      	adds	r2, #3
 8015bda:	f022 0503 	bic.w	r5, r2, #3
 8015bde:	f855 4b04 	ldr.w	r4, [r5], #4
 8015be2:	601c      	str	r4, [r3, #0]
 8015be4:	4628      	mov	r0, r5
 8015be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015be8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8015be8:	28ff      	cmp	r0, #255	; 0xff
 8015bea:	d00d      	beq.n	8015c08 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8015bec:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8015bf0:	2820      	cmp	r0, #32
 8015bf2:	d015      	beq.n	8015c20 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8015bf4:	d90a      	bls.n	8015c0c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 8015bf6:	2840      	cmp	r0, #64	; 0x40
 8015bf8:	d00f      	beq.n	8015c1a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 8015bfa:	2850      	cmp	r0, #80	; 0x50
 8015bfc:	d004      	beq.n	8015c08 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8015bfe:	2830      	cmp	r0, #48	; 0x30
 8015c00:	d108      	bne.n	8015c14 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8015c02:	4608      	mov	r0, r1
 8015c04:	f7f2 bc08 	b.w	8008418 <_Unwind_GetDataRelBase>
 8015c08:	2000      	movs	r0, #0
 8015c0a:	4770      	bx	lr
 8015c0c:	2800      	cmp	r0, #0
 8015c0e:	d0fb      	beq.n	8015c08 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8015c10:	2810      	cmp	r0, #16
 8015c12:	d0f9      	beq.n	8015c08 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8015c14:	b508      	push	{r3, lr}
 8015c16:	f000 fdb3 	bl	8016780 <abort>
 8015c1a:	4608      	mov	r0, r1
 8015c1c:	f7f2 bbe8 	b.w	80083f0 <_Unwind_GetRegionStart>
 8015c20:	4608      	mov	r0, r1
 8015c22:	f7f2 bbf5 	b.w	8008410 <_Unwind_GetTextRelBase>
 8015c26:	bf00      	nop

08015c28 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8015c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c2a:	460c      	mov	r4, r1
 8015c2c:	4615      	mov	r5, r2
 8015c2e:	4607      	mov	r7, r0
 8015c30:	2800      	cmp	r0, #0
 8015c32:	d042      	beq.n	8015cba <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x92>
 8015c34:	f7f2 fbdc 	bl	80083f0 <_Unwind_GetRegionStart>
 8015c38:	6028      	str	r0, [r5, #0]
 8015c3a:	7826      	ldrb	r6, [r4, #0]
 8015c3c:	3401      	adds	r4, #1
 8015c3e:	2eff      	cmp	r6, #255	; 0xff
 8015c40:	d032      	beq.n	8015ca8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x80>
 8015c42:	4639      	mov	r1, r7
 8015c44:	4630      	mov	r0, r6
 8015c46:	f7ff ffcf 	bl	8015be8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8015c4a:	4622      	mov	r2, r4
 8015c4c:	4601      	mov	r1, r0
 8015c4e:	1d2b      	adds	r3, r5, #4
 8015c50:	4630      	mov	r0, r6
 8015c52:	f7ff ff69 	bl	8015b28 <_ZL28read_encoded_value_with_basehjPKhPj>
 8015c56:	4604      	mov	r4, r0
 8015c58:	7823      	ldrb	r3, [r4, #0]
 8015c5a:	1c60      	adds	r0, r4, #1
 8015c5c:	2bff      	cmp	r3, #255	; 0xff
 8015c5e:	752b      	strb	r3, [r5, #20]
 8015c60:	d028      	beq.n	8015cb4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
 8015c62:	2400      	movs	r4, #0
 8015c64:	2310      	movs	r3, #16
 8015c66:	4622      	mov	r2, r4
 8015c68:	752b      	strb	r3, [r5, #20]
 8015c6a:	f810 1b01 	ldrb.w	r1, [r0], #1
 8015c6e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8015c72:	4093      	lsls	r3, r2
 8015c74:	0609      	lsls	r1, r1, #24
 8015c76:	ea44 0403 	orr.w	r4, r4, r3
 8015c7a:	f102 0207 	add.w	r2, r2, #7
 8015c7e:	d4f4      	bmi.n	8015c6a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x42>
 8015c80:	4404      	add	r4, r0
 8015c82:	60ec      	str	r4, [r5, #12]
 8015c84:	2400      	movs	r4, #0
 8015c86:	4622      	mov	r2, r4
 8015c88:	7803      	ldrb	r3, [r0, #0]
 8015c8a:	3001      	adds	r0, #1
 8015c8c:	756b      	strb	r3, [r5, #21]
 8015c8e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8015c92:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8015c96:	4093      	lsls	r3, r2
 8015c98:	431c      	orrs	r4, r3
 8015c9a:	060b      	lsls	r3, r1, #24
 8015c9c:	f102 0207 	add.w	r2, r2, #7
 8015ca0:	d4f5      	bmi.n	8015c8e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x66>
 8015ca2:	4404      	add	r4, r0
 8015ca4:	612c      	str	r4, [r5, #16]
 8015ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ca8:	6068      	str	r0, [r5, #4]
 8015caa:	7823      	ldrb	r3, [r4, #0]
 8015cac:	1c60      	adds	r0, r4, #1
 8015cae:	2bff      	cmp	r3, #255	; 0xff
 8015cb0:	752b      	strb	r3, [r5, #20]
 8015cb2:	d1d6      	bne.n	8015c62 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3a>
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	60eb      	str	r3, [r5, #12]
 8015cb8:	e7e4      	b.n	8015c84 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
 8015cba:	e7bd      	b.n	8015c38 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

08015cbc <__gxx_personality_v0>:
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cc2:	f000 0403 	and.w	r4, r0, #3
 8015cc6:	b097      	sub	sp, #92	; 0x5c
 8015cc8:	2c01      	cmp	r4, #1
 8015cca:	4689      	mov	r9, r1
 8015ccc:	4617      	mov	r7, r2
 8015cce:	930a      	str	r3, [sp, #40]	; 0x28
 8015cd0:	d01e      	beq.n	8015d10 <__gxx_personality_v0+0x54>
 8015cd2:	d30e      	bcc.n	8015cf2 <__gxx_personality_v0+0x36>
 8015cd4:	2c02      	cmp	r4, #2
 8015cd6:	d10a      	bne.n	8015cee <__gxx_personality_v0+0x32>
 8015cd8:	4639      	mov	r1, r7
 8015cda:	4648      	mov	r0, r9
 8015cdc:	f7f2 fb72 	bl	80083c4 <__gnu_unwind_frame>
 8015ce0:	2800      	cmp	r0, #0
 8015ce2:	f000 80a5 	beq.w	8015e30 <__gxx_personality_v0+0x174>
 8015ce6:	2009      	movs	r0, #9
 8015ce8:	b017      	add	sp, #92	; 0x5c
 8015cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cee:	f000 fd47 	bl	8016780 <abort>
 8015cf2:	0700      	lsls	r0, r0, #28
 8015cf4:	d4f0      	bmi.n	8015cd8 <__gxx_personality_v0+0x1c>
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	9303      	str	r3, [sp, #12]
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	aa16      	add	r2, sp, #88	; 0x58
 8015cfe:	f842 9d2c 	str.w	r9, [r2, #-44]!
 8015d02:	9200      	str	r2, [sp, #0]
 8015d04:	4619      	mov	r1, r3
 8015d06:	220c      	movs	r2, #12
 8015d08:	4638      	mov	r0, r7
 8015d0a:	f7f1 fdfb 	bl	8007904 <_Unwind_VRS_Set>
 8015d0e:	e00f      	b.n	8015d30 <__gxx_personality_v0+0x74>
 8015d10:	f010 0408 	ands.w	r4, r0, #8
 8015d14:	f000 8090 	beq.w	8015e38 <__gxx_personality_v0+0x17c>
 8015d18:	aa16      	add	r2, sp, #88	; 0x58
 8015d1a:	f842 1d2c 	str.w	r1, [r2, #-44]!
 8015d1e:	9200      	str	r2, [sp, #0]
 8015d20:	f044 0402 	orr.w	r4, r4, #2
 8015d24:	4619      	mov	r1, r3
 8015d26:	220c      	movs	r2, #12
 8015d28:	4638      	mov	r0, r7
 8015d2a:	9403      	str	r4, [sp, #12]
 8015d2c:	f7f1 fdea 	bl	8007904 <_Unwind_VRS_Set>
 8015d30:	4638      	mov	r0, r7
 8015d32:	f7f2 fb63 	bl	80083fc <_Unwind_GetLanguageSpecificData>
 8015d36:	9005      	str	r0, [sp, #20]
 8015d38:	2800      	cmp	r0, #0
 8015d3a:	d0cd      	beq.n	8015cd8 <__gxx_personality_v0+0x1c>
 8015d3c:	ab10      	add	r3, sp, #64	; 0x40
 8015d3e:	461a      	mov	r2, r3
 8015d40:	9905      	ldr	r1, [sp, #20]
 8015d42:	4638      	mov	r0, r7
 8015d44:	9306      	str	r3, [sp, #24]
 8015d46:	f7ff ff6f 	bl	8015c28 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8015d4a:	4639      	mov	r1, r7
 8015d4c:	4604      	mov	r4, r0
 8015d4e:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 8015d52:	f7ff ff49 	bl	8015be8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8015d56:	2300      	movs	r3, #0
 8015d58:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
 8015d5c:	9012      	str	r0, [sp, #72]	; 0x48
 8015d5e:	4619      	mov	r1, r3
 8015d60:	220f      	movs	r2, #15
 8015d62:	f8cd b000 	str.w	fp, [sp]
 8015d66:	4638      	mov	r0, r7
 8015d68:	f7f1 fda6 	bl	80078b8 <_Unwind_VRS_Get>
 8015d6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015d70:	f023 0301 	bic.w	r3, r3, #1
 8015d74:	42a2      	cmp	r2, r4
 8015d76:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
 8015d7a:	d975      	bls.n	8015e68 <__gxx_personality_v0+0x1ac>
 8015d7c:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 8015d80:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8015d84:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
 8015d88:	2100      	movs	r1, #0
 8015d8a:	4628      	mov	r0, r5
 8015d8c:	f7ff ff2c 	bl	8015be8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8015d90:	4622      	mov	r2, r4
 8015d92:	4653      	mov	r3, sl
 8015d94:	4601      	mov	r1, r0
 8015d96:	4628      	mov	r0, r5
 8015d98:	f7ff fec6 	bl	8015b28 <_ZL28read_encoded_value_with_basehjPKhPj>
 8015d9c:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 8015da0:	4605      	mov	r5, r0
 8015da2:	2100      	movs	r1, #0
 8015da4:	4620      	mov	r0, r4
 8015da6:	f7ff ff1f 	bl	8015be8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8015daa:	462a      	mov	r2, r5
 8015dac:	4643      	mov	r3, r8
 8015dae:	4601      	mov	r1, r0
 8015db0:	4620      	mov	r0, r4
 8015db2:	f7ff feb9 	bl	8015b28 <_ZL28read_encoded_value_with_basehjPKhPj>
 8015db6:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 8015dba:	4605      	mov	r5, r0
 8015dbc:	2100      	movs	r1, #0
 8015dbe:	4620      	mov	r0, r4
 8015dc0:	f7ff ff12 	bl	8015be8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8015dc4:	462a      	mov	r2, r5
 8015dc6:	4601      	mov	r1, r0
 8015dc8:	465b      	mov	r3, fp
 8015dca:	4620      	mov	r0, r4
 8015dcc:	f7ff feac 	bl	8015b28 <_ZL28read_encoded_value_with_basehjPKhPj>
 8015dd0:	4604      	mov	r4, r0
 8015dd2:	2000      	movs	r0, #0
 8015dd4:	4602      	mov	r2, r0
 8015dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dda:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8015dde:	4093      	lsls	r3, r2
 8015de0:	0609      	lsls	r1, r1, #24
 8015de2:	ea40 0003 	orr.w	r0, r0, r3
 8015de6:	f102 0207 	add.w	r2, r2, #7
 8015dea:	d4f4      	bmi.n	8015dd6 <__gxx_personality_v0+0x11a>
 8015dec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015dee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015df0:	4413      	add	r3, r2
 8015df2:	429e      	cmp	r6, r3
 8015df4:	d231      	bcs.n	8015e5a <__gxx_personality_v0+0x19e>
 8015df6:	9b03      	ldr	r3, [sp, #12]
 8015df8:	07db      	lsls	r3, r3, #31
 8015dfa:	d539      	bpl.n	8015e70 <__gxx_personality_v0+0x1b4>
 8015dfc:	2500      	movs	r5, #0
 8015dfe:	9504      	str	r5, [sp, #16]
 8015e00:	2300      	movs	r3, #0
 8015e02:	220d      	movs	r2, #13
 8015e04:	4619      	mov	r1, r3
 8015e06:	f8cd 8000 	str.w	r8, [sp]
 8015e0a:	4638      	mov	r0, r7
 8015e0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015e0e:	f7f1 fd53 	bl	80078b8 <_Unwind_VRS_Get>
 8015e12:	9a05      	ldr	r2, [sp, #20]
 8015e14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e16:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
 8015e1a:	9a04      	ldr	r2, [sp, #16]
 8015e1c:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
 8015e20:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
 8015e24:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 8015e28:	f8c9 3020 	str.w	r3, [r9, #32]
 8015e2c:	2006      	movs	r0, #6
 8015e2e:	e75b      	b.n	8015ce8 <__gxx_personality_v0+0x2c>
 8015e30:	2008      	movs	r0, #8
 8015e32:	b017      	add	sp, #92	; 0x5c
 8015e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e38:	ab10      	add	r3, sp, #64	; 0x40
 8015e3a:	9300      	str	r3, [sp, #0]
 8015e3c:	9306      	str	r3, [sp, #24]
 8015e3e:	220d      	movs	r2, #13
 8015e40:	4623      	mov	r3, r4
 8015e42:	4621      	mov	r1, r4
 8015e44:	4638      	mov	r0, r7
 8015e46:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8015e4a:	f7f1 fd35 	bl	80078b8 <_Unwind_VRS_Get>
 8015e4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e50:	429d      	cmp	r5, r3
 8015e52:	d012      	beq.n	8015e7a <__gxx_personality_v0+0x1be>
 8015e54:	2302      	movs	r3, #2
 8015e56:	9303      	str	r3, [sp, #12]
 8015e58:	e74f      	b.n	8015cfa <__gxx_personality_v0+0x3e>
 8015e5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015e5c:	4413      	add	r3, r2
 8015e5e:	429e      	cmp	r6, r3
 8015e60:	d359      	bcc.n	8015f16 <__gxx_personality_v0+0x25a>
 8015e62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e64:	42a3      	cmp	r3, r4
 8015e66:	d88d      	bhi.n	8015d84 <__gxx_personality_v0+0xc8>
 8015e68:	2500      	movs	r5, #0
 8015e6a:	2401      	movs	r4, #1
 8015e6c:	9504      	str	r5, [sp, #16]
 8015e6e:	e107      	b.n	8016080 <__gxx_personality_v0+0x3c4>
 8015e70:	9b03      	ldr	r3, [sp, #12]
 8015e72:	071b      	lsls	r3, r3, #28
 8015e74:	d54c      	bpl.n	8015f10 <__gxx_personality_v0+0x254>
 8015e76:	f7ff fbd7 	bl	8015628 <_ZSt9terminatev>
 8015e7a:	ab16      	add	r3, sp, #88	; 0x58
 8015e7c:	f843 9d2c 	str.w	r9, [r3, #-44]!
 8015e80:	9300      	str	r3, [sp, #0]
 8015e82:	4621      	mov	r1, r4
 8015e84:	4623      	mov	r3, r4
 8015e86:	220c      	movs	r2, #12
 8015e88:	4638      	mov	r0, r7
 8015e8a:	f7f1 fd3b 	bl	8007904 <_Unwind_VRS_Set>
 8015e8e:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8015e92:	9304      	str	r3, [sp, #16]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d03b      	beq.n	8015f10 <__gxx_personality_v0+0x254>
 8015e98:	2403      	movs	r4, #3
 8015e9a:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
 8015e9e:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8015ea2:	2d00      	cmp	r5, #0
 8015ea4:	f2c0 8108 	blt.w	80160b8 <__gxx_personality_v0+0x3fc>
 8015ea8:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 8015eac:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	aa16      	add	r2, sp, #88	; 0x58
 8015eb4:	f842 9d28 	str.w	r9, [r2, #-40]!
 8015eb8:	4619      	mov	r1, r3
 8015eba:	9200      	str	r2, [sp, #0]
 8015ebc:	4638      	mov	r0, r7
 8015ebe:	461a      	mov	r2, r3
 8015ec0:	f7f1 fd20 	bl	8007904 <_Unwind_VRS_Set>
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	2201      	movs	r2, #1
 8015ec8:	4619      	mov	r1, r3
 8015eca:	f8cd a000 	str.w	sl, [sp]
 8015ece:	4638      	mov	r0, r7
 8015ed0:	950d      	str	r5, [sp, #52]	; 0x34
 8015ed2:	f7f1 fd17 	bl	8007904 <_Unwind_VRS_Set>
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	220f      	movs	r2, #15
 8015eda:	4619      	mov	r1, r3
 8015edc:	f8cd 8000 	str.w	r8, [sp]
 8015ee0:	4638      	mov	r0, r7
 8015ee2:	f7f1 fce9 	bl	80078b8 <_Unwind_VRS_Get>
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015eea:	9d04      	ldr	r5, [sp, #16]
 8015eec:	f002 0201 	and.w	r2, r2, #1
 8015ef0:	4315      	orrs	r5, r2
 8015ef2:	f8cd 8000 	str.w	r8, [sp]
 8015ef6:	4638      	mov	r0, r7
 8015ef8:	4619      	mov	r1, r3
 8015efa:	220f      	movs	r2, #15
 8015efc:	950e      	str	r5, [sp, #56]	; 0x38
 8015efe:	f7f1 fd01 	bl	8007904 <_Unwind_VRS_Set>
 8015f02:	2c02      	cmp	r4, #2
 8015f04:	f000 8082 	beq.w	801600c <__gxx_personality_v0+0x350>
 8015f08:	2007      	movs	r0, #7
 8015f0a:	b017      	add	sp, #92	; 0x5c
 8015f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f10:	4648      	mov	r0, r9
 8015f12:	f000 fa89 	bl	8016428 <__cxa_call_terminate>
 8015f16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f18:	461a      	mov	r2, r3
 8015f1a:	9304      	str	r3, [sp, #16]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d17a      	bne.n	8016016 <__gxx_personality_v0+0x35a>
 8015f20:	2800      	cmp	r0, #0
 8015f22:	f43f aed9 	beq.w	8015cd8 <__gxx_personality_v0+0x1c>
 8015f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015f28:	9a04      	ldr	r2, [sp, #16]
 8015f2a:	3801      	subs	r0, #1
 8015f2c:	4403      	add	r3, r0
 8015f2e:	2a00      	cmp	r2, #0
 8015f30:	f43f aed2 	beq.w	8015cd8 <__gxx_personality_v0+0x1c>
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d077      	beq.n	8016028 <__gxx_personality_v0+0x36c>
 8015f38:	9a03      	ldr	r2, [sp, #12]
 8015f3a:	f012 0208 	ands.w	r2, r2, #8
 8015f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8015f40:	f000 80f8 	beq.w	8016134 <__gxx_personality_v0+0x478>
 8015f44:	2547      	movs	r5, #71	; 0x47
 8015f46:	244e      	movs	r4, #78	; 0x4e
 8015f48:	2055      	movs	r0, #85	; 0x55
 8015f4a:	2143      	movs	r1, #67	; 0x43
 8015f4c:	2246      	movs	r2, #70	; 0x46
 8015f4e:	264f      	movs	r6, #79	; 0x4f
 8015f50:	f04f 0e52 	mov.w	lr, #82	; 0x52
 8015f54:	f04f 0c00 	mov.w	ip, #0
 8015f58:	f889 5000 	strb.w	r5, [r9]
 8015f5c:	f889 4001 	strb.w	r4, [r9, #1]
 8015f60:	f889 0002 	strb.w	r0, [r9, #2]
 8015f64:	f889 1003 	strb.w	r1, [r9, #3]
 8015f68:	f889 2004 	strb.w	r2, [r9, #4]
 8015f6c:	f889 6005 	strb.w	r6, [r9, #5]
 8015f70:	f889 e006 	strb.w	lr, [r9, #6]
 8015f74:	f889 c007 	strb.w	ip, [r9, #7]
 8015f78:	2200      	movs	r2, #0
 8015f7a:	9707      	str	r7, [sp, #28]
 8015f7c:	9208      	str	r2, [sp, #32]
 8015f7e:	2500      	movs	r5, #0
 8015f80:	4629      	mov	r1, r5
 8015f82:	e000      	b.n	8015f86 <__gxx_personality_v0+0x2ca>
 8015f84:	4623      	mov	r3, r4
 8015f86:	461c      	mov	r4, r3
 8015f88:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015f8c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8015f90:	408a      	lsls	r2, r1
 8015f92:	0606      	lsls	r6, r0, #24
 8015f94:	ea45 0502 	orr.w	r5, r5, r2
 8015f98:	f101 0107 	add.w	r1, r1, #7
 8015f9c:	d4f2      	bmi.n	8015f84 <__gxx_personality_v0+0x2c8>
 8015f9e:	291f      	cmp	r1, #31
 8015fa0:	d805      	bhi.n	8015fae <__gxx_personality_v0+0x2f2>
 8015fa2:	0642      	lsls	r2, r0, #25
 8015fa4:	d503      	bpl.n	8015fae <__gxx_personality_v0+0x2f2>
 8015fa6:	2201      	movs	r2, #1
 8015fa8:	408a      	lsls	r2, r1
 8015faa:	4252      	negs	r2, r2
 8015fac:	4315      	orrs	r5, r2
 8015fae:	2600      	movs	r6, #0
 8015fb0:	4631      	mov	r1, r6
 8015fb2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8015fb6:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8015fba:	408a      	lsls	r2, r1
 8015fbc:	0607      	lsls	r7, r0, #24
 8015fbe:	ea46 0602 	orr.w	r6, r6, r2
 8015fc2:	f101 0107 	add.w	r1, r1, #7
 8015fc6:	d4f4      	bmi.n	8015fb2 <__gxx_personality_v0+0x2f6>
 8015fc8:	291f      	cmp	r1, #31
 8015fca:	d805      	bhi.n	8015fd8 <__gxx_personality_v0+0x31c>
 8015fcc:	0640      	lsls	r0, r0, #25
 8015fce:	d503      	bpl.n	8015fd8 <__gxx_personality_v0+0x31c>
 8015fd0:	2301      	movs	r3, #1
 8015fd2:	408b      	lsls	r3, r1
 8015fd4:	425b      	negs	r3, r3
 8015fd6:	431e      	orrs	r6, r3
 8015fd8:	2d00      	cmp	r5, #0
 8015fda:	d05c      	beq.n	8016096 <__gxx_personality_v0+0x3da>
 8015fdc:	dd5e      	ble.n	801609c <__gxx_personality_v0+0x3e0>
 8015fde:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 8015fe2:	28ff      	cmp	r0, #255	; 0xff
 8015fe4:	f000 80a4 	beq.w	8016130 <__gxx_personality_v0+0x474>
 8015fe8:	f000 0307 	and.w	r3, r0, #7
 8015fec:	2b04      	cmp	r3, #4
 8015fee:	f63f ae7e 	bhi.w	8015cee <__gxx_personality_v0+0x32>
 8015ff2:	a201      	add	r2, pc, #4	; (adr r2, 8015ff8 <__gxx_personality_v0+0x33c>)
 8015ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ff8:	08016063 	.word	0x08016063
 8015ffc:	08015cef 	.word	0x08015cef
 8016000:	08016069 	.word	0x08016069
 8016004:	08016063 	.word	0x08016063
 8016008:	08016041 	.word	0x08016041
 801600c:	4648      	mov	r0, r9
 801600e:	f7ff fd21 	bl	8015a54 <__cxa_begin_cleanup>
 8016012:	2007      	movs	r0, #7
 8016014:	e668      	b.n	8015ce8 <__gxx_personality_v0+0x2c>
 8016016:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016018:	441a      	add	r2, r3
 801601a:	9204      	str	r2, [sp, #16]
 801601c:	2800      	cmp	r0, #0
 801601e:	d182      	bne.n	8015f26 <__gxx_personality_v0+0x26a>
 8016020:	9b04      	ldr	r3, [sp, #16]
 8016022:	2b00      	cmp	r3, #0
 8016024:	f43f ae58 	beq.w	8015cd8 <__gxx_personality_v0+0x1c>
 8016028:	9b03      	ldr	r3, [sp, #12]
 801602a:	f013 0301 	ands.w	r3, r3, #1
 801602e:	f47f ae53 	bne.w	8015cd8 <__gxx_personality_v0+0x1c>
 8016032:	9a03      	ldr	r2, [sp, #12]
 8016034:	f012 0508 	ands.w	r5, r2, #8
 8016038:	f040 8097 	bne.w	801616a <__gxx_personality_v0+0x4ae>
 801603c:	2402      	movs	r4, #2
 801603e:	e737      	b.n	8015eb0 <__gxx_personality_v0+0x1f4>
 8016040:	00eb      	lsls	r3, r5, #3
 8016042:	425b      	negs	r3, r3
 8016044:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016046:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016048:	441a      	add	r2, r3
 801604a:	4643      	mov	r3, r8
 801604c:	f7ff fd6c 	bl	8015b28 <_ZL28read_encoded_value_with_basehjPKhPj>
 8016050:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016052:	b199      	cbz	r1, 801607c <__gxx_personality_v0+0x3c0>
 8016054:	f1b9 0f00 	cmp.w	r9, #0
 8016058:	d109      	bne.n	801606e <__gxx_personality_v0+0x3b2>
 801605a:	2e00      	cmp	r6, #0
 801605c:	d077      	beq.n	801614e <__gxx_personality_v0+0x492>
 801605e:	19a3      	adds	r3, r4, r6
 8016060:	e78d      	b.n	8015f7e <__gxx_personality_v0+0x2c2>
 8016062:	00ab      	lsls	r3, r5, #2
 8016064:	425b      	negs	r3, r3
 8016066:	e7ed      	b.n	8016044 <__gxx_personality_v0+0x388>
 8016068:	006b      	lsls	r3, r5, #1
 801606a:	425b      	negs	r3, r3
 801606c:	e7ea      	b.n	8016044 <__gxx_personality_v0+0x388>
 801606e:	ab0a      	add	r3, sp, #40	; 0x28
 8016070:	2200      	movs	r2, #0
 8016072:	4648      	mov	r0, r9
 8016074:	f7ff fc92 	bl	801599c <__cxa_type_match>
 8016078:	2800      	cmp	r0, #0
 801607a:	d0ee      	beq.n	801605a <__gxx_personality_v0+0x39e>
 801607c:	2403      	movs	r4, #3
 801607e:	9f07      	ldr	r7, [sp, #28]
 8016080:	9b03      	ldr	r3, [sp, #12]
 8016082:	07da      	lsls	r2, r3, #31
 8016084:	d460      	bmi.n	8016148 <__gxx_personality_v0+0x48c>
 8016086:	9b03      	ldr	r3, [sp, #12]
 8016088:	0719      	lsls	r1, r3, #28
 801608a:	d466      	bmi.n	801615a <__gxx_personality_v0+0x49e>
 801608c:	2c01      	cmp	r4, #1
 801608e:	f43f af3f 	beq.w	8015f10 <__gxx_personality_v0+0x254>
 8016092:	9905      	ldr	r1, [sp, #20]
 8016094:	e705      	b.n	8015ea2 <__gxx_personality_v0+0x1e6>
 8016096:	2301      	movs	r3, #1
 8016098:	9308      	str	r3, [sp, #32]
 801609a:	e7de      	b.n	801605a <__gxx_personality_v0+0x39e>
 801609c:	f1b9 0f00 	cmp.w	r9, #0
 80160a0:	d001      	beq.n	80160a6 <__gxx_personality_v0+0x3ea>
 80160a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160a4:	b35b      	cbz	r3, 80160fe <__gxx_personality_v0+0x442>
 80160a6:	1c6b      	adds	r3, r5, #1
 80160a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80160aa:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 80160ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d1d1      	bne.n	801605a <__gxx_personality_v0+0x39e>
 80160b6:	e7e1      	b.n	801607c <__gxx_personality_v0+0x3c0>
 80160b8:	9a06      	ldr	r2, [sp, #24]
 80160ba:	4638      	mov	r0, r7
 80160bc:	f7ff fdb4 	bl	8015c28 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80160c0:	4639      	mov	r1, r7
 80160c2:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 80160c6:	f7ff fd8f 	bl	8015be8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80160ca:	00aa      	lsls	r2, r5, #2
 80160cc:	f082 0203 	eor.w	r2, r2, #3
 80160d0:	43d2      	mvns	r2, r2
 80160d2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80160d4:	9012      	str	r0, [sp, #72]	; 0x48
 80160d6:	58b3      	ldr	r3, [r6, r2]
 80160d8:	4416      	add	r6, r2
 80160da:	b133      	cbz	r3, 80160ea <__gxx_personality_v0+0x42e>
 80160dc:	4632      	mov	r2, r6
 80160de:	2300      	movs	r3, #0
 80160e0:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80160e4:	3301      	adds	r3, #1
 80160e6:	2900      	cmp	r1, #0
 80160e8:	d1fa      	bne.n	80160e0 <__gxx_personality_v0+0x424>
 80160ea:	2204      	movs	r2, #4
 80160ec:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 80160f0:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 80160f4:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
 80160f8:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 80160fc:	e6d4      	b.n	8015ea8 <__gxx_personality_v0+0x1ec>
 80160fe:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8016100:	1c6b      	adds	r3, r5, #1
 8016102:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 8016106:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 801610a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801610c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8016110:	920f      	str	r2, [sp, #60]	; 0x3c
 8016112:	b921      	cbnz	r1, 801611e <__gxx_personality_v0+0x462>
 8016114:	e7b2      	b.n	801607c <__gxx_personality_v0+0x3c0>
 8016116:	f857 1f04 	ldr.w	r1, [r7, #4]!
 801611a:	2900      	cmp	r1, #0
 801611c:	d0ae      	beq.n	801607c <__gxx_personality_v0+0x3c0>
 801611e:	4439      	add	r1, r7
 8016120:	465b      	mov	r3, fp
 8016122:	2200      	movs	r2, #0
 8016124:	4648      	mov	r0, r9
 8016126:	f7ff fc39 	bl	801599c <__cxa_type_match>
 801612a:	2800      	cmp	r0, #0
 801612c:	d0f3      	beq.n	8016116 <__gxx_personality_v0+0x45a>
 801612e:	e794      	b.n	801605a <__gxx_personality_v0+0x39e>
 8016130:	2300      	movs	r3, #0
 8016132:	e787      	b.n	8016044 <__gxx_personality_v0+0x388>
 8016134:	f899 2007 	ldrb.w	r2, [r9, #7]
 8016138:	2a01      	cmp	r2, #1
 801613a:	bf0c      	ite	eq
 801613c:	f859 2c20 	ldreq.w	r2, [r9, #-32]
 8016140:	f109 0258 	addne.w	r2, r9, #88	; 0x58
 8016144:	920a      	str	r2, [sp, #40]	; 0x28
 8016146:	e717      	b.n	8015f78 <__gxx_personality_v0+0x2bc>
 8016148:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801614c:	e658      	b.n	8015e00 <__gxx_personality_v0+0x144>
 801614e:	9b08      	ldr	r3, [sp, #32]
 8016150:	9f07      	ldr	r7, [sp, #28]
 8016152:	2b00      	cmp	r3, #0
 8016154:	f47f af68 	bne.w	8016028 <__gxx_personality_v0+0x36c>
 8016158:	e5be      	b.n	8015cd8 <__gxx_personality_v0+0x1c>
 801615a:	2c01      	cmp	r4, #1
 801615c:	f43f ae8b 	beq.w	8015e76 <__gxx_personality_v0+0x1ba>
 8016160:	2d00      	cmp	r5, #0
 8016162:	f6bf aea1 	bge.w	8015ea8 <__gxx_personality_v0+0x1ec>
 8016166:	f7ff fa6d 	bl	8015644 <_ZSt10unexpectedv>
 801616a:	461d      	mov	r5, r3
 801616c:	2402      	movs	r4, #2
 801616e:	e69f      	b.n	8015eb0 <__gxx_personality_v0+0x1f4>
 8016170:	f000 f9dc 	bl	801652c <__cxa_begin_catch>
 8016174:	e67f      	b.n	8015e76 <__gxx_personality_v0+0x1ba>
 8016176:	bf00      	nop

08016178 <_ZdlPvj>:
 8016178:	f7ff ba30 	b.w	80155dc <_ZdlPv>

0801617c <_ZSt15get_new_handlerv>:
 801617c:	4b02      	ldr	r3, [pc, #8]	; (8016188 <_ZSt15get_new_handlerv+0xc>)
 801617e:	6818      	ldr	r0, [r3, #0]
 8016180:	f3bf 8f5b 	dmb	ish
 8016184:	4770      	bx	lr
 8016186:	bf00      	nop
 8016188:	2000135c 	.word	0x2000135c

0801618c <_ZNSt9exceptionD1Ev>:
 801618c:	4770      	bx	lr
 801618e:	bf00      	nop

08016190 <_ZNSt13bad_exceptionD1Ev>:
 8016190:	4770      	bx	lr
 8016192:	bf00      	nop

08016194 <_ZGTtNKSt13bad_exception4whatEv>:
 8016194:	4800      	ldr	r0, [pc, #0]	; (8016198 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 8016196:	4770      	bx	lr
 8016198:	080227f0 	.word	0x080227f0

0801619c <_ZNSt13bad_exceptionD0Ev>:
 801619c:	b510      	push	{r4, lr}
 801619e:	4604      	mov	r4, r0
 80161a0:	2104      	movs	r1, #4
 80161a2:	f7ff ffe9 	bl	8016178 <_ZdlPvj>
 80161a6:	4620      	mov	r0, r4
 80161a8:	bd10      	pop	{r4, pc}
 80161aa:	bf00      	nop

080161ac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80161ac:	b510      	push	{r4, lr}
 80161ae:	4604      	mov	r4, r0
 80161b0:	4b02      	ldr	r3, [pc, #8]	; (80161bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80161b2:	6003      	str	r3, [r0, #0]
 80161b4:	f000 fa70 	bl	8016698 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80161b8:	4620      	mov	r0, r4
 80161ba:	bd10      	pop	{r4, pc}
 80161bc:	080228e0 	.word	0x080228e0

080161c0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80161c0:	b510      	push	{r4, lr}
 80161c2:	4604      	mov	r4, r0
 80161c4:	4b04      	ldr	r3, [pc, #16]	; (80161d8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 80161c6:	6003      	str	r3, [r0, #0]
 80161c8:	f000 fa66 	bl	8016698 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80161cc:	4620      	mov	r0, r4
 80161ce:	210c      	movs	r1, #12
 80161d0:	f7ff ffd2 	bl	8016178 <_ZdlPvj>
 80161d4:	4620      	mov	r0, r4
 80161d6:	bd10      	pop	{r4, pc}
 80161d8:	080228e0 	.word	0x080228e0

080161dc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80161dc:	b570      	push	{r4, r5, r6, lr}
 80161de:	b082      	sub	sp, #8
 80161e0:	9c06      	ldr	r4, [sp, #24]
 80161e2:	460d      	mov	r5, r1
 80161e4:	4294      	cmp	r4, r2
 80161e6:	4606      	mov	r6, r0
 80161e8:	d009      	beq.n	80161fe <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 80161ea:	68b0      	ldr	r0, [r6, #8]
 80161ec:	4629      	mov	r1, r5
 80161ee:	6806      	ldr	r6, [r0, #0]
 80161f0:	9406      	str	r4, [sp, #24]
 80161f2:	6a34      	ldr	r4, [r6, #32]
 80161f4:	46a4      	mov	ip, r4
 80161f6:	b002      	add	sp, #8
 80161f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161fc:	4760      	bx	ip
 80161fe:	4619      	mov	r1, r3
 8016200:	9201      	str	r2, [sp, #4]
 8016202:	9300      	str	r3, [sp, #0]
 8016204:	f000 faa6 	bl	8016754 <_ZNKSt9type_infoeqERKS_>
 8016208:	9b00      	ldr	r3, [sp, #0]
 801620a:	9a01      	ldr	r2, [sp, #4]
 801620c:	2800      	cmp	r0, #0
 801620e:	d0ec      	beq.n	80161ea <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8016210:	2006      	movs	r0, #6
 8016212:	b002      	add	sp, #8
 8016214:	bd70      	pop	{r4, r5, r6, pc}
 8016216:	bf00      	nop

08016218 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8016218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801621c:	4689      	mov	r9, r1
 801621e:	b081      	sub	sp, #4
 8016220:	4619      	mov	r1, r3
 8016222:	461d      	mov	r5, r3
 8016224:	4616      	mov	r6, r2
 8016226:	4607      	mov	r7, r0
 8016228:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801622a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801622e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016232:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8016236:	f000 fa8d 	bl	8016754 <_ZNKSt9type_infoeqERKS_>
 801623a:	b188      	cbz	r0, 8016260 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
 801623c:	f1b9 0f00 	cmp.w	r9, #0
 8016240:	f8c8 4000 	str.w	r4, [r8]
 8016244:	f888 6004 	strb.w	r6, [r8, #4]
 8016248:	db1e      	blt.n	8016288 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 801624a:	444c      	add	r4, r9
 801624c:	45a2      	cmp	sl, r4
 801624e:	bf0c      	ite	eq
 8016250:	2406      	moveq	r4, #6
 8016252:	2401      	movne	r4, #1
 8016254:	f888 4006 	strb.w	r4, [r8, #6]
 8016258:	2000      	movs	r0, #0
 801625a:	b001      	add	sp, #4
 801625c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016260:	4554      	cmp	r4, sl
 8016262:	d018      	beq.n	8016296 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7e>
 8016264:	68b8      	ldr	r0, [r7, #8]
 8016266:	462b      	mov	r3, r5
 8016268:	6805      	ldr	r5, [r0, #0]
 801626a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801626e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8016272:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8016276:	940a      	str	r4, [sp, #40]	; 0x28
 8016278:	69ec      	ldr	r4, [r5, #28]
 801627a:	4632      	mov	r2, r6
 801627c:	4649      	mov	r1, r9
 801627e:	46a4      	mov	ip, r4
 8016280:	b001      	add	sp, #4
 8016282:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016286:	4760      	bx	ip
 8016288:	f119 0f02 	cmn.w	r9, #2
 801628c:	d1e4      	bne.n	8016258 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 801628e:	2301      	movs	r3, #1
 8016290:	f888 3006 	strb.w	r3, [r8, #6]
 8016294:	e7e0      	b.n	8016258 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 8016296:	4659      	mov	r1, fp
 8016298:	4638      	mov	r0, r7
 801629a:	f000 fa5b 	bl	8016754 <_ZNKSt9type_infoeqERKS_>
 801629e:	2800      	cmp	r0, #0
 80162a0:	d0e0      	beq.n	8016264 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c>
 80162a2:	2000      	movs	r0, #0
 80162a4:	f888 6005 	strb.w	r6, [r8, #5]
 80162a8:	b001      	add	sp, #4
 80162aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162ae:	bf00      	nop

080162b0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80162b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162b4:	4607      	mov	r7, r0
 80162b6:	460c      	mov	r4, r1
 80162b8:	4615      	mov	r5, r2
 80162ba:	461e      	mov	r6, r3
 80162bc:	f000 fa04 	bl	80166c8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80162c0:	b108      	cbz	r0, 80162c6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 80162c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162c6:	68b8      	ldr	r0, [r7, #8]
 80162c8:	4633      	mov	r3, r6
 80162ca:	6806      	ldr	r6, [r0, #0]
 80162cc:	4621      	mov	r1, r4
 80162ce:	69b4      	ldr	r4, [r6, #24]
 80162d0:	462a      	mov	r2, r5
 80162d2:	46a4      	mov	ip, r4
 80162d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162d8:	4760      	bx	ip
 80162da:	bf00      	nop

080162dc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 80162dc:	b570      	push	{r4, r5, r6, lr}
 80162de:	4b3c      	ldr	r3, [pc, #240]	; (80163d0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 80162e0:	b082      	sub	sp, #8
 80162e2:	781a      	ldrb	r2, [r3, #0]
 80162e4:	2a00      	cmp	r2, #0
 80162e6:	d135      	bne.n	8016354 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 80162e8:	2401      	movs	r4, #1
 80162ea:	701c      	strb	r4, [r3, #0]
 80162ec:	f000 f9a4 	bl	8016638 <__cxa_current_exception_type>
 80162f0:	2800      	cmp	r0, #0
 80162f2:	d05b      	beq.n	80163ac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
 80162f4:	2200      	movs	r2, #0
 80162f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80162fa:	6844      	ldr	r4, [r0, #4]
 80162fc:	4d35      	ldr	r5, [pc, #212]	; (80163d4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 80162fe:	7823      	ldrb	r3, [r4, #0]
 8016300:	2b2a      	cmp	r3, #42	; 0x2a
 8016302:	bf08      	it	eq
 8016304:	3401      	addeq	r4, #1
 8016306:	ab02      	add	r3, sp, #8
 8016308:	f843 1d04 	str.w	r1, [r3, #-4]!
 801630c:	4620      	mov	r0, r4
 801630e:	4611      	mov	r1, r2
 8016310:	f7f0 fa6a 	bl	80067e8 <__cxa_demangle>
 8016314:	682b      	ldr	r3, [r5, #0]
 8016316:	4606      	mov	r6, r0
 8016318:	68db      	ldr	r3, [r3, #12]
 801631a:	2230      	movs	r2, #48	; 0x30
 801631c:	2101      	movs	r1, #1
 801631e:	482e      	ldr	r0, [pc, #184]	; (80163d8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 8016320:	f000 fc84 	bl	8016c2c <fwrite>
 8016324:	9b01      	ldr	r3, [sp, #4]
 8016326:	b17b      	cbz	r3, 8016348 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 8016328:	682b      	ldr	r3, [r5, #0]
 801632a:	4620      	mov	r0, r4
 801632c:	68d9      	ldr	r1, [r3, #12]
 801632e:	f000 fac9 	bl	80168c4 <fputs>
 8016332:	682b      	ldr	r3, [r5, #0]
 8016334:	2202      	movs	r2, #2
 8016336:	68db      	ldr	r3, [r3, #12]
 8016338:	2101      	movs	r1, #1
 801633a:	4828      	ldr	r0, [pc, #160]	; (80163dc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 801633c:	f000 fc76 	bl	8016c2c <fwrite>
 8016340:	9b01      	ldr	r3, [sp, #4]
 8016342:	b18b      	cbz	r3, 8016368 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 8016344:	f7ff fac6 	bl	80158d4 <__cxa_rethrow>
 8016348:	682b      	ldr	r3, [r5, #0]
 801634a:	4630      	mov	r0, r6
 801634c:	68d9      	ldr	r1, [r3, #12]
 801634e:	f000 fab9 	bl	80168c4 <fputs>
 8016352:	e7ee      	b.n	8016332 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 8016354:	4b1f      	ldr	r3, [pc, #124]	; (80163d4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 8016356:	221d      	movs	r2, #29
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	2101      	movs	r1, #1
 801635c:	68db      	ldr	r3, [r3, #12]
 801635e:	4820      	ldr	r0, [pc, #128]	; (80163e0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 8016360:	f000 fc64 	bl	8016c2c <fwrite>
 8016364:	f000 fa0c 	bl	8016780 <abort>
 8016368:	4630      	mov	r0, r6
 801636a:	f000 fd71 	bl	8016e50 <free>
 801636e:	e7e9      	b.n	8016344 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
 8016370:	2901      	cmp	r1, #1
 8016372:	460c      	mov	r4, r1
 8016374:	d127      	bne.n	80163c6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
 8016376:	f000 f8d9 	bl	801652c <__cxa_begin_catch>
 801637a:	6803      	ldr	r3, [r0, #0]
 801637c:	689b      	ldr	r3, [r3, #8]
 801637e:	4798      	blx	r3
 8016380:	682b      	ldr	r3, [r5, #0]
 8016382:	4606      	mov	r6, r0
 8016384:	4621      	mov	r1, r4
 8016386:	68db      	ldr	r3, [r3, #12]
 8016388:	220b      	movs	r2, #11
 801638a:	4816      	ldr	r0, [pc, #88]	; (80163e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 801638c:	f000 fc4e 	bl	8016c2c <fwrite>
 8016390:	682b      	ldr	r3, [r5, #0]
 8016392:	4630      	mov	r0, r6
 8016394:	68d9      	ldr	r1, [r3, #12]
 8016396:	f000 fa95 	bl	80168c4 <fputs>
 801639a:	682b      	ldr	r3, [r5, #0]
 801639c:	200a      	movs	r0, #10
 801639e:	68d9      	ldr	r1, [r3, #12]
 80163a0:	f000 fa3a 	bl	8016818 <fputc>
 80163a4:	f000 f902 	bl	80165ac <__cxa_end_catch>
 80163a8:	f000 f9ea 	bl	8016780 <abort>
 80163ac:	4b09      	ldr	r3, [pc, #36]	; (80163d4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 80163ae:	4621      	mov	r1, r4
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	222d      	movs	r2, #45	; 0x2d
 80163b4:	68db      	ldr	r3, [r3, #12]
 80163b6:	480c      	ldr	r0, [pc, #48]	; (80163e8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 80163b8:	f000 fc38 	bl	8016c2c <fwrite>
 80163bc:	e7f4      	b.n	80163a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
 80163be:	f000 f8f5 	bl	80165ac <__cxa_end_catch>
 80163c2:	f7ff fae5 	bl	8015990 <__cxa_end_cleanup>
 80163c6:	f000 f8b1 	bl	801652c <__cxa_begin_catch>
 80163ca:	f000 f8ef 	bl	80165ac <__cxa_end_catch>
 80163ce:	e7eb      	b.n	80163a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
 80163d0:	20001360 	.word	0x20001360
 80163d4:	2000002c 	.word	0x2000002c
 80163d8:	08022924 	.word	0x08022924
 80163dc:	08022958 	.word	0x08022958
 80163e0:	08022904 	.word	0x08022904
 80163e4:	0802298c 	.word	0x0802298c
 80163e8:	0802295c 	.word	0x0802295c

080163ec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80163ec:	7803      	ldrb	r3, [r0, #0]
 80163ee:	2b47      	cmp	r3, #71	; 0x47
 80163f0:	d001      	beq.n	80163f6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 80163f2:	2000      	movs	r0, #0
 80163f4:	4770      	bx	lr
 80163f6:	7843      	ldrb	r3, [r0, #1]
 80163f8:	2b4e      	cmp	r3, #78	; 0x4e
 80163fa:	d1fa      	bne.n	80163f2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80163fc:	7883      	ldrb	r3, [r0, #2]
 80163fe:	2b55      	cmp	r3, #85	; 0x55
 8016400:	d1f7      	bne.n	80163f2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8016402:	78c3      	ldrb	r3, [r0, #3]
 8016404:	2b43      	cmp	r3, #67	; 0x43
 8016406:	d1f4      	bne.n	80163f2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8016408:	7903      	ldrb	r3, [r0, #4]
 801640a:	2b43      	cmp	r3, #67	; 0x43
 801640c:	d1f1      	bne.n	80163f2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801640e:	7943      	ldrb	r3, [r0, #5]
 8016410:	2b2b      	cmp	r3, #43	; 0x2b
 8016412:	d1ee      	bne.n	80163f2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8016414:	7983      	ldrb	r3, [r0, #6]
 8016416:	2b2b      	cmp	r3, #43	; 0x2b
 8016418:	d1eb      	bne.n	80163f2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801641a:	79c0      	ldrb	r0, [r0, #7]
 801641c:	2801      	cmp	r0, #1
 801641e:	bf8c      	ite	hi
 8016420:	2000      	movhi	r0, #0
 8016422:	2001      	movls	r0, #1
 8016424:	4770      	bx	lr
 8016426:	bf00      	nop

08016428 <__cxa_call_terminate>:
 8016428:	b510      	push	{r4, lr}
 801642a:	b130      	cbz	r0, 801643a <__cxa_call_terminate+0x12>
 801642c:	4604      	mov	r4, r0
 801642e:	f000 f87d 	bl	801652c <__cxa_begin_catch>
 8016432:	4620      	mov	r0, r4
 8016434:	f7ff ffda 	bl	80163ec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8016438:	b908      	cbnz	r0, 801643e <__cxa_call_terminate+0x16>
 801643a:	f7ff f8f5 	bl	8015628 <_ZSt9terminatev>
 801643e:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8016442:	f7ff f8dd 	bl	8015600 <_ZN10__cxxabiv111__terminateEPFvvE>
 8016446:	bf00      	nop

08016448 <__cxa_call_unexpected>:
 8016448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801644c:	b085      	sub	sp, #20
 801644e:	4602      	mov	r2, r0
 8016450:	f7ff ffcc 	bl	80163ec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8016454:	b168      	cbz	r0, 8016472 <__cxa_call_unexpected+0x2a>
 8016456:	f852 4c18 	ldr.w	r4, [r2, #-24]
 801645a:	4610      	mov	r0, r2
 801645c:	f852 5c14 	ldr.w	r5, [r2, #-20]
 8016460:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8016462:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8016464:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 8016468:	f000 f860 	bl	801652c <__cxa_begin_catch>
 801646c:	4620      	mov	r0, r4
 801646e:	f7ff f8e5 	bl	801563c <_ZN10__cxxabiv112__unexpectedEPFvvE>
 8016472:	4610      	mov	r0, r2
 8016474:	f000 f85a 	bl	801652c <__cxa_begin_catch>
 8016478:	f7ff f8e4 	bl	8015644 <_ZSt10unexpectedv>
 801647c:	f000 f856 	bl	801652c <__cxa_begin_catch>
 8016480:	f7ff f8d2 	bl	8015628 <_ZSt9terminatev>
 8016484:	f000 f852 	bl	801652c <__cxa_begin_catch>
 8016488:	f7ff fa7a 	bl	8015980 <__cxa_get_globals_fast>
 801648c:	6803      	ldr	r3, [r0, #0]
 801648e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8016492:	2a01      	cmp	r2, #1
 8016494:	d037      	beq.n	8016506 <__cxa_call_unexpected+0xbe>
 8016496:	f103 0278 	add.w	r2, r3, #120	; 0x78
 801649a:	f04f 0800 	mov.w	r8, #0
 801649e:	464c      	mov	r4, r9
 80164a0:	46c1      	mov	r9, r8
 80164a2:	f10d 0a10 	add.w	sl, sp, #16
 80164a6:	3320      	adds	r3, #32
 80164a8:	f027 0b03 	bic.w	fp, r7, #3
 80164ac:	9301      	str	r3, [sp, #4]
 80164ae:	f84a 2d08 	str.w	r2, [sl, #-8]!
 80164b2:	45b1      	cmp	r9, r6
 80164b4:	da1b      	bge.n	80164ee <__cxa_call_unexpected+0xa6>
 80164b6:	6827      	ldr	r7, [r4, #0]
 80164b8:	b107      	cbz	r7, 80164bc <__cxa_call_unexpected+0x74>
 80164ba:	4427      	add	r7, r4
 80164bc:	4653      	mov	r3, sl
 80164be:	2200      	movs	r2, #0
 80164c0:	4639      	mov	r1, r7
 80164c2:	9801      	ldr	r0, [sp, #4]
 80164c4:	f7ff fa6a 	bl	801599c <__cxa_type_match>
 80164c8:	bb10      	cbnz	r0, 8016510 <__cxa_call_unexpected+0xc8>
 80164ca:	683b      	ldr	r3, [r7, #0]
 80164cc:	aa04      	add	r2, sp, #16
 80164ce:	691b      	ldr	r3, [r3, #16]
 80164d0:	f842 0d04 	str.w	r0, [r2, #-4]!
 80164d4:	9300      	str	r3, [sp, #0]
 80164d6:	4638      	mov	r0, r7
 80164d8:	2301      	movs	r3, #1
 80164da:	4911      	ldr	r1, [pc, #68]	; (8016520 <__cxa_call_unexpected+0xd8>)
 80164dc:	9f00      	ldr	r7, [sp, #0]
 80164de:	47b8      	blx	r7
 80164e0:	2800      	cmp	r0, #0
 80164e2:	bf18      	it	ne
 80164e4:	4680      	movne	r8, r0
 80164e6:	f109 0901 	add.w	r9, r9, #1
 80164ea:	445c      	add	r4, fp
 80164ec:	e7e1      	b.n	80164b2 <__cxa_call_unexpected+0x6a>
 80164ee:	f1b8 0f00 	cmp.w	r8, #0
 80164f2:	d00a      	beq.n	801650a <__cxa_call_unexpected+0xc2>
 80164f4:	2004      	movs	r0, #4
 80164f6:	f7ff f94f 	bl	8015798 <__cxa_allocate_exception>
 80164fa:	4b0a      	ldr	r3, [pc, #40]	; (8016524 <__cxa_call_unexpected+0xdc>)
 80164fc:	4a0a      	ldr	r2, [pc, #40]	; (8016528 <__cxa_call_unexpected+0xe0>)
 80164fe:	6003      	str	r3, [r0, #0]
 8016500:	4907      	ldr	r1, [pc, #28]	; (8016520 <__cxa_call_unexpected+0xd8>)
 8016502:	f7ff f9a7 	bl	8015854 <__cxa_throw>
 8016506:	681a      	ldr	r2, [r3, #0]
 8016508:	e7c7      	b.n	801649a <__cxa_call_unexpected+0x52>
 801650a:	4628      	mov	r0, r5
 801650c:	f7ff f878 	bl	8015600 <_ZN10__cxxabiv111__terminateEPFvvE>
 8016510:	f7ff f9e0 	bl	80158d4 <__cxa_rethrow>
 8016514:	f000 f84a 	bl	80165ac <__cxa_end_catch>
 8016518:	f000 f848 	bl	80165ac <__cxa_end_catch>
 801651c:	f7ff fa38 	bl	8015990 <__cxa_end_cleanup>
 8016520:	08022814 	.word	0x08022814
 8016524:	08022898 	.word	0x08022898
 8016528:	08016191 	.word	0x08016191

0801652c <__cxa_begin_catch>:
 801652c:	b538      	push	{r3, r4, r5, lr}
 801652e:	4604      	mov	r4, r0
 8016530:	f7ff fa2a 	bl	8015988 <__cxa_get_globals>
 8016534:	7822      	ldrb	r2, [r4, #0]
 8016536:	6803      	ldr	r3, [r0, #0]
 8016538:	2a47      	cmp	r2, #71	; 0x47
 801653a:	f1a4 0120 	sub.w	r1, r4, #32
 801653e:	d005      	beq.n	801654c <__cxa_begin_catch+0x20>
 8016540:	2b00      	cmp	r3, #0
 8016542:	d131      	bne.n	80165a8 <__cxa_begin_catch+0x7c>
 8016544:	461c      	mov	r4, r3
 8016546:	6001      	str	r1, [r0, #0]
 8016548:	4620      	mov	r0, r4
 801654a:	bd38      	pop	{r3, r4, r5, pc}
 801654c:	7862      	ldrb	r2, [r4, #1]
 801654e:	2a4e      	cmp	r2, #78	; 0x4e
 8016550:	d1f6      	bne.n	8016540 <__cxa_begin_catch+0x14>
 8016552:	78a2      	ldrb	r2, [r4, #2]
 8016554:	2a55      	cmp	r2, #85	; 0x55
 8016556:	d1f3      	bne.n	8016540 <__cxa_begin_catch+0x14>
 8016558:	78e2      	ldrb	r2, [r4, #3]
 801655a:	2a43      	cmp	r2, #67	; 0x43
 801655c:	d1f0      	bne.n	8016540 <__cxa_begin_catch+0x14>
 801655e:	7922      	ldrb	r2, [r4, #4]
 8016560:	2a43      	cmp	r2, #67	; 0x43
 8016562:	d1ed      	bne.n	8016540 <__cxa_begin_catch+0x14>
 8016564:	7962      	ldrb	r2, [r4, #5]
 8016566:	2a2b      	cmp	r2, #43	; 0x2b
 8016568:	d1ea      	bne.n	8016540 <__cxa_begin_catch+0x14>
 801656a:	79a2      	ldrb	r2, [r4, #6]
 801656c:	2a2b      	cmp	r2, #43	; 0x2b
 801656e:	d1e7      	bne.n	8016540 <__cxa_begin_catch+0x14>
 8016570:	79e2      	ldrb	r2, [r4, #7]
 8016572:	2a01      	cmp	r2, #1
 8016574:	d8e4      	bhi.n	8016540 <__cxa_begin_catch+0x14>
 8016576:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 801657a:	2a00      	cmp	r2, #0
 801657c:	db11      	blt.n	80165a2 <__cxa_begin_catch+0x76>
 801657e:	3201      	adds	r2, #1
 8016580:	6845      	ldr	r5, [r0, #4]
 8016582:	428b      	cmp	r3, r1
 8016584:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8016588:	f844 2c0c 	str.w	r2, [r4, #-12]
 801658c:	6045      	str	r5, [r0, #4]
 801658e:	bf1c      	itt	ne
 8016590:	f844 3c10 	strne.w	r3, [r4, #-16]
 8016594:	6001      	strne	r1, [r0, #0]
 8016596:	4620      	mov	r0, r4
 8016598:	6a64      	ldr	r4, [r4, #36]	; 0x24
 801659a:	f7f1 f985 	bl	80078a8 <_Unwind_Complete>
 801659e:	4620      	mov	r0, r4
 80165a0:	bd38      	pop	{r3, r4, r5, pc}
 80165a2:	f1c2 0201 	rsb	r2, r2, #1
 80165a6:	e7eb      	b.n	8016580 <__cxa_begin_catch+0x54>
 80165a8:	f7ff f83e 	bl	8015628 <_ZSt9terminatev>

080165ac <__cxa_end_catch>:
 80165ac:	b508      	push	{r3, lr}
 80165ae:	f7ff f9e7 	bl	8015980 <__cxa_get_globals_fast>
 80165b2:	4602      	mov	r2, r0
 80165b4:	6800      	ldr	r0, [r0, #0]
 80165b6:	2800      	cmp	r0, #0
 80165b8:	d03d      	beq.n	8016636 <__cxa_end_catch+0x8a>
 80165ba:	f890 3020 	ldrb.w	r3, [r0, #32]
 80165be:	2b47      	cmp	r3, #71	; 0x47
 80165c0:	d006      	beq.n	80165d0 <__cxa_end_catch+0x24>
 80165c2:	2300      	movs	r3, #0
 80165c4:	3020      	adds	r0, #32
 80165c6:	6013      	str	r3, [r2, #0]
 80165c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80165cc:	f7f1 b96e 	b.w	80078ac <_Unwind_DeleteException>
 80165d0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80165d4:	2b4e      	cmp	r3, #78	; 0x4e
 80165d6:	d1f4      	bne.n	80165c2 <__cxa_end_catch+0x16>
 80165d8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80165dc:	2b55      	cmp	r3, #85	; 0x55
 80165de:	d1f0      	bne.n	80165c2 <__cxa_end_catch+0x16>
 80165e0:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80165e4:	2b43      	cmp	r3, #67	; 0x43
 80165e6:	d1ec      	bne.n	80165c2 <__cxa_end_catch+0x16>
 80165e8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80165ec:	2b43      	cmp	r3, #67	; 0x43
 80165ee:	d1e8      	bne.n	80165c2 <__cxa_end_catch+0x16>
 80165f0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80165f4:	2b2b      	cmp	r3, #43	; 0x2b
 80165f6:	d1e4      	bne.n	80165c2 <__cxa_end_catch+0x16>
 80165f8:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 80165fc:	2b2b      	cmp	r3, #43	; 0x2b
 80165fe:	d1e0      	bne.n	80165c2 <__cxa_end_catch+0x16>
 8016600:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8016604:	2b01      	cmp	r3, #1
 8016606:	d8dc      	bhi.n	80165c2 <__cxa_end_catch+0x16>
 8016608:	6943      	ldr	r3, [r0, #20]
 801660a:	2b00      	cmp	r3, #0
 801660c:	db05      	blt.n	801661a <__cxa_end_catch+0x6e>
 801660e:	3b01      	subs	r3, #1
 8016610:	d008      	beq.n	8016624 <__cxa_end_catch+0x78>
 8016612:	1c5a      	adds	r2, r3, #1
 8016614:	d00d      	beq.n	8016632 <__cxa_end_catch+0x86>
 8016616:	6143      	str	r3, [r0, #20]
 8016618:	bd08      	pop	{r3, pc}
 801661a:	3301      	adds	r3, #1
 801661c:	d1fb      	bne.n	8016616 <__cxa_end_catch+0x6a>
 801661e:	6901      	ldr	r1, [r0, #16]
 8016620:	6011      	str	r1, [r2, #0]
 8016622:	e7f8      	b.n	8016616 <__cxa_end_catch+0x6a>
 8016624:	6903      	ldr	r3, [r0, #16]
 8016626:	3020      	adds	r0, #32
 8016628:	6013      	str	r3, [r2, #0]
 801662a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801662e:	f7f1 b93d 	b.w	80078ac <_Unwind_DeleteException>
 8016632:	f7fe fff9 	bl	8015628 <_ZSt9terminatev>
 8016636:	bd08      	pop	{r3, pc}

08016638 <__cxa_current_exception_type>:
 8016638:	b508      	push	{r3, lr}
 801663a:	f7ff f9a5 	bl	8015988 <__cxa_get_globals>
 801663e:	6800      	ldr	r0, [r0, #0]
 8016640:	b130      	cbz	r0, 8016650 <__cxa_current_exception_type+0x18>
 8016642:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8016646:	2b01      	cmp	r3, #1
 8016648:	bf04      	itt	eq
 801664a:	6800      	ldreq	r0, [r0, #0]
 801664c:	3878      	subeq	r0, #120	; 0x78
 801664e:	6800      	ldr	r0, [r0, #0]
 8016650:	bd08      	pop	{r3, pc}
 8016652:	bf00      	nop

08016654 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8016654:	b570      	push	{r4, r5, r6, lr}
 8016656:	2400      	movs	r4, #0
 8016658:	2610      	movs	r6, #16
 801665a:	6803      	ldr	r3, [r0, #0]
 801665c:	b084      	sub	sp, #16
 801665e:	4615      	mov	r5, r2
 8016660:	9602      	str	r6, [sp, #8]
 8016662:	6812      	ldr	r2, [r2, #0]
 8016664:	699e      	ldr	r6, [r3, #24]
 8016666:	9400      	str	r4, [sp, #0]
 8016668:	466b      	mov	r3, sp
 801666a:	f88d 4004 	strb.w	r4, [sp, #4]
 801666e:	9403      	str	r4, [sp, #12]
 8016670:	47b0      	blx	r6
 8016672:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8016676:	f003 0306 	and.w	r3, r3, #6
 801667a:	2b06      	cmp	r3, #6
 801667c:	bf09      	itett	eq
 801667e:	2001      	moveq	r0, #1
 8016680:	4620      	movne	r0, r4
 8016682:	9b00      	ldreq	r3, [sp, #0]
 8016684:	602b      	streq	r3, [r5, #0]
 8016686:	b004      	add	sp, #16
 8016688:	bd70      	pop	{r4, r5, r6, pc}
 801668a:	bf00      	nop

0801668c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801668c:	9800      	ldr	r0, [sp, #0]
 801668e:	4290      	cmp	r0, r2
 8016690:	bf0c      	ite	eq
 8016692:	2006      	moveq	r0, #6
 8016694:	2001      	movne	r0, #1
 8016696:	4770      	bx	lr

08016698 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8016698:	b510      	push	{r4, lr}
 801669a:	4604      	mov	r4, r0
 801669c:	4b02      	ldr	r3, [pc, #8]	; (80166a8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 801669e:	6003      	str	r3, [r0, #0]
 80166a0:	f000 f854 	bl	801674c <_ZNSt9type_infoD1Ev>
 80166a4:	4620      	mov	r0, r4
 80166a6:	bd10      	pop	{r4, pc}
 80166a8:	080229d0 	.word	0x080229d0

080166ac <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80166ac:	b510      	push	{r4, lr}
 80166ae:	4604      	mov	r4, r0
 80166b0:	4b04      	ldr	r3, [pc, #16]	; (80166c4 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 80166b2:	6003      	str	r3, [r0, #0]
 80166b4:	f000 f84a 	bl	801674c <_ZNSt9type_infoD1Ev>
 80166b8:	4620      	mov	r0, r4
 80166ba:	2108      	movs	r1, #8
 80166bc:	f7ff fd5c 	bl	8016178 <_ZdlPvj>
 80166c0:	4620      	mov	r0, r4
 80166c2:	bd10      	pop	{r4, pc}
 80166c4:	080229d0 	.word	0x080229d0

080166c8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80166c8:	b538      	push	{r3, r4, r5, lr}
 80166ca:	4615      	mov	r5, r2
 80166cc:	461c      	mov	r4, r3
 80166ce:	f000 f841 	bl	8016754 <_ZNKSt9type_infoeqERKS_>
 80166d2:	b120      	cbz	r0, 80166de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80166d4:	2208      	movs	r2, #8
 80166d6:	2306      	movs	r3, #6
 80166d8:	6025      	str	r5, [r4, #0]
 80166da:	60e2      	str	r2, [r4, #12]
 80166dc:	7123      	strb	r3, [r4, #4]
 80166de:	bd38      	pop	{r3, r4, r5, pc}

080166e0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80166e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166e4:	4617      	mov	r7, r2
 80166e6:	461c      	mov	r4, r3
 80166e8:	4606      	mov	r6, r0
 80166ea:	460d      	mov	r5, r1
 80166ec:	f000 f832 	bl	8016754 <_ZNKSt9type_infoeqERKS_>
 80166f0:	b908      	cbnz	r0, 80166f6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 80166f2:	2c03      	cmp	r4, #3
 80166f4:	d901      	bls.n	80166fa <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 80166f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166fa:	682b      	ldr	r3, [r5, #0]
 80166fc:	463a      	mov	r2, r7
 80166fe:	4631      	mov	r1, r6
 8016700:	4628      	mov	r0, r5
 8016702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016706:	695b      	ldr	r3, [r3, #20]
 8016708:	4718      	bx	r3
 801670a:	bf00      	nop

0801670c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801670c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801670e:	b083      	sub	sp, #12
 8016710:	9d08      	ldr	r5, [sp, #32]
 8016712:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016714:	4617      	mov	r7, r2
 8016716:	428d      	cmp	r5, r1
 8016718:	4606      	mov	r6, r0
 801671a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801671c:	d00b      	beq.n	8016736 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 801671e:	4619      	mov	r1, r3
 8016720:	4630      	mov	r0, r6
 8016722:	f000 f817 	bl	8016754 <_ZNKSt9type_infoeqERKS_>
 8016726:	b118      	cbz	r0, 8016730 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 8016728:	2301      	movs	r3, #1
 801672a:	6025      	str	r5, [r4, #0]
 801672c:	7127      	strb	r7, [r4, #4]
 801672e:	71a3      	strb	r3, [r4, #6]
 8016730:	2000      	movs	r0, #0
 8016732:	b003      	add	sp, #12
 8016734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016736:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016738:	9301      	str	r3, [sp, #4]
 801673a:	f000 f80b 	bl	8016754 <_ZNKSt9type_infoeqERKS_>
 801673e:	b118      	cbz	r0, 8016748 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
 8016740:	2000      	movs	r0, #0
 8016742:	7167      	strb	r7, [r4, #5]
 8016744:	b003      	add	sp, #12
 8016746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016748:	9b01      	ldr	r3, [sp, #4]
 801674a:	e7e8      	b.n	801671e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

0801674c <_ZNSt9type_infoD1Ev>:
 801674c:	4770      	bx	lr
 801674e:	bf00      	nop

08016750 <_ZNKSt9type_info14__is_pointer_pEv>:
 8016750:	2000      	movs	r0, #0
 8016752:	4770      	bx	lr

08016754 <_ZNKSt9type_infoeqERKS_>:
 8016754:	4281      	cmp	r1, r0
 8016756:	d011      	beq.n	801677c <_ZNKSt9type_infoeqERKS_+0x28>
 8016758:	b508      	push	{r3, lr}
 801675a:	6840      	ldr	r0, [r0, #4]
 801675c:	7803      	ldrb	r3, [r0, #0]
 801675e:	2b2a      	cmp	r3, #42	; 0x2a
 8016760:	d00a      	beq.n	8016778 <_ZNKSt9type_infoeqERKS_+0x24>
 8016762:	6849      	ldr	r1, [r1, #4]
 8016764:	780b      	ldrb	r3, [r1, #0]
 8016766:	2b2a      	cmp	r3, #42	; 0x2a
 8016768:	bf08      	it	eq
 801676a:	3101      	addeq	r1, #1
 801676c:	f7f0 f8aa 	bl	80068c4 <strcmp>
 8016770:	fab0 f080 	clz	r0, r0
 8016774:	0940      	lsrs	r0, r0, #5
 8016776:	bd08      	pop	{r3, pc}
 8016778:	2000      	movs	r0, #0
 801677a:	bd08      	pop	{r3, pc}
 801677c:	2001      	movs	r0, #1
 801677e:	4770      	bx	lr

08016780 <abort>:
 8016780:	b508      	push	{r3, lr}
 8016782:	2006      	movs	r0, #6
 8016784:	f001 fa34 	bl	8017bf0 <raise>
 8016788:	2001      	movs	r0, #1
 801678a:	f7fe fcc3 	bl	8015114 <_exit>

0801678e <__cxa_atexit>:
 801678e:	4613      	mov	r3, r2
 8016790:	460a      	mov	r2, r1
 8016792:	4601      	mov	r1, r0
 8016794:	2002      	movs	r0, #2
 8016796:	f002 bdff 	b.w	8019398 <__register_exitproc>
	...

0801679c <__errno>:
 801679c:	4b01      	ldr	r3, [pc, #4]	; (80167a4 <__errno+0x8>)
 801679e:	6818      	ldr	r0, [r3, #0]
 80167a0:	4770      	bx	lr
 80167a2:	bf00      	nop
 80167a4:	2000002c 	.word	0x2000002c

080167a8 <_fputc_r>:
 80167a8:	b570      	push	{r4, r5, r6, lr}
 80167aa:	460e      	mov	r6, r1
 80167ac:	4614      	mov	r4, r2
 80167ae:	4605      	mov	r5, r0
 80167b0:	b118      	cbz	r0, 80167ba <_fputc_r+0x12>
 80167b2:	6983      	ldr	r3, [r0, #24]
 80167b4:	b90b      	cbnz	r3, 80167ba <_fputc_r+0x12>
 80167b6:	f003 fe15 	bl	801a3e4 <__sinit>
 80167ba:	4b14      	ldr	r3, [pc, #80]	; (801680c <_fputc_r+0x64>)
 80167bc:	429c      	cmp	r4, r3
 80167be:	d11a      	bne.n	80167f6 <_fputc_r+0x4e>
 80167c0:	686c      	ldr	r4, [r5, #4]
 80167c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80167c4:	07d8      	lsls	r0, r3, #31
 80167c6:	d405      	bmi.n	80167d4 <_fputc_r+0x2c>
 80167c8:	89a3      	ldrh	r3, [r4, #12]
 80167ca:	0599      	lsls	r1, r3, #22
 80167cc:	d402      	bmi.n	80167d4 <_fputc_r+0x2c>
 80167ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80167d0:	f000 fb33 	bl	8016e3a <__retarget_lock_acquire_recursive>
 80167d4:	4622      	mov	r2, r4
 80167d6:	4628      	mov	r0, r5
 80167d8:	4631      	mov	r1, r6
 80167da:	f000 ffff 	bl	80177dc <_putc_r>
 80167de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80167e0:	4605      	mov	r5, r0
 80167e2:	07da      	lsls	r2, r3, #31
 80167e4:	d405      	bmi.n	80167f2 <_fputc_r+0x4a>
 80167e6:	89a3      	ldrh	r3, [r4, #12]
 80167e8:	059b      	lsls	r3, r3, #22
 80167ea:	d402      	bmi.n	80167f2 <_fputc_r+0x4a>
 80167ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80167ee:	f000 fb26 	bl	8016e3e <__retarget_lock_release_recursive>
 80167f2:	4628      	mov	r0, r5
 80167f4:	bd70      	pop	{r4, r5, r6, pc}
 80167f6:	4b06      	ldr	r3, [pc, #24]	; (8016810 <_fputc_r+0x68>)
 80167f8:	429c      	cmp	r4, r3
 80167fa:	d101      	bne.n	8016800 <_fputc_r+0x58>
 80167fc:	68ac      	ldr	r4, [r5, #8]
 80167fe:	e7e0      	b.n	80167c2 <_fputc_r+0x1a>
 8016800:	4b04      	ldr	r3, [pc, #16]	; (8016814 <_fputc_r+0x6c>)
 8016802:	429c      	cmp	r4, r3
 8016804:	bf08      	it	eq
 8016806:	68ec      	ldreq	r4, [r5, #12]
 8016808:	e7db      	b.n	80167c2 <_fputc_r+0x1a>
 801680a:	bf00      	nop
 801680c:	080233e4 	.word	0x080233e4
 8016810:	08023404 	.word	0x08023404
 8016814:	080233c4 	.word	0x080233c4

08016818 <fputc>:
 8016818:	4b02      	ldr	r3, [pc, #8]	; (8016824 <fputc+0xc>)
 801681a:	460a      	mov	r2, r1
 801681c:	4601      	mov	r1, r0
 801681e:	6818      	ldr	r0, [r3, #0]
 8016820:	f7ff bfc2 	b.w	80167a8 <_fputc_r>
 8016824:	2000002c 	.word	0x2000002c

08016828 <_fputs_r>:
 8016828:	b530      	push	{r4, r5, lr}
 801682a:	4605      	mov	r5, r0
 801682c:	b087      	sub	sp, #28
 801682e:	4608      	mov	r0, r1
 8016830:	4614      	mov	r4, r2
 8016832:	9101      	str	r1, [sp, #4]
 8016834:	f7f0 f850 	bl	80068d8 <strlen>
 8016838:	ab01      	add	r3, sp, #4
 801683a:	9303      	str	r3, [sp, #12]
 801683c:	2301      	movs	r3, #1
 801683e:	9005      	str	r0, [sp, #20]
 8016840:	9002      	str	r0, [sp, #8]
 8016842:	9304      	str	r3, [sp, #16]
 8016844:	b125      	cbz	r5, 8016850 <_fputs_r+0x28>
 8016846:	69ab      	ldr	r3, [r5, #24]
 8016848:	b913      	cbnz	r3, 8016850 <_fputs_r+0x28>
 801684a:	4628      	mov	r0, r5
 801684c:	f003 fdca 	bl	801a3e4 <__sinit>
 8016850:	4b19      	ldr	r3, [pc, #100]	; (80168b8 <_fputs_r+0x90>)
 8016852:	429c      	cmp	r4, r3
 8016854:	d126      	bne.n	80168a4 <_fputs_r+0x7c>
 8016856:	686c      	ldr	r4, [r5, #4]
 8016858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801685a:	07db      	lsls	r3, r3, #31
 801685c:	d405      	bmi.n	801686a <_fputs_r+0x42>
 801685e:	89a3      	ldrh	r3, [r4, #12]
 8016860:	0598      	lsls	r0, r3, #22
 8016862:	d402      	bmi.n	801686a <_fputs_r+0x42>
 8016864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016866:	f000 fae8 	bl	8016e3a <__retarget_lock_acquire_recursive>
 801686a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801686e:	0499      	lsls	r1, r3, #18
 8016870:	d406      	bmi.n	8016880 <_fputs_r+0x58>
 8016872:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016876:	81a3      	strh	r3, [r4, #12]
 8016878:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801687a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801687e:	6663      	str	r3, [r4, #100]	; 0x64
 8016880:	aa03      	add	r2, sp, #12
 8016882:	4628      	mov	r0, r5
 8016884:	4621      	mov	r1, r4
 8016886:	f000 f825 	bl	80168d4 <__sfvwrite_r>
 801688a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801688c:	4605      	mov	r5, r0
 801688e:	07da      	lsls	r2, r3, #31
 8016890:	d405      	bmi.n	801689e <_fputs_r+0x76>
 8016892:	89a3      	ldrh	r3, [r4, #12]
 8016894:	059b      	lsls	r3, r3, #22
 8016896:	d402      	bmi.n	801689e <_fputs_r+0x76>
 8016898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801689a:	f000 fad0 	bl	8016e3e <__retarget_lock_release_recursive>
 801689e:	4628      	mov	r0, r5
 80168a0:	b007      	add	sp, #28
 80168a2:	bd30      	pop	{r4, r5, pc}
 80168a4:	4b05      	ldr	r3, [pc, #20]	; (80168bc <_fputs_r+0x94>)
 80168a6:	429c      	cmp	r4, r3
 80168a8:	d101      	bne.n	80168ae <_fputs_r+0x86>
 80168aa:	68ac      	ldr	r4, [r5, #8]
 80168ac:	e7d4      	b.n	8016858 <_fputs_r+0x30>
 80168ae:	4b04      	ldr	r3, [pc, #16]	; (80168c0 <_fputs_r+0x98>)
 80168b0:	429c      	cmp	r4, r3
 80168b2:	bf08      	it	eq
 80168b4:	68ec      	ldreq	r4, [r5, #12]
 80168b6:	e7cf      	b.n	8016858 <_fputs_r+0x30>
 80168b8:	080233e4 	.word	0x080233e4
 80168bc:	08023404 	.word	0x08023404
 80168c0:	080233c4 	.word	0x080233c4

080168c4 <fputs>:
 80168c4:	4b02      	ldr	r3, [pc, #8]	; (80168d0 <fputs+0xc>)
 80168c6:	460a      	mov	r2, r1
 80168c8:	4601      	mov	r1, r0
 80168ca:	6818      	ldr	r0, [r3, #0]
 80168cc:	f7ff bfac 	b.w	8016828 <_fputs_r>
 80168d0:	2000002c 	.word	0x2000002c

080168d4 <__sfvwrite_r>:
 80168d4:	6893      	ldr	r3, [r2, #8]
 80168d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168da:	4607      	mov	r7, r0
 80168dc:	460c      	mov	r4, r1
 80168de:	4690      	mov	r8, r2
 80168e0:	b91b      	cbnz	r3, 80168ea <__sfvwrite_r+0x16>
 80168e2:	2000      	movs	r0, #0
 80168e4:	b003      	add	sp, #12
 80168e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168ea:	898b      	ldrh	r3, [r1, #12]
 80168ec:	0718      	lsls	r0, r3, #28
 80168ee:	d526      	bpl.n	801693e <__sfvwrite_r+0x6a>
 80168f0:	690b      	ldr	r3, [r1, #16]
 80168f2:	b323      	cbz	r3, 801693e <__sfvwrite_r+0x6a>
 80168f4:	89a3      	ldrh	r3, [r4, #12]
 80168f6:	f8d8 6000 	ldr.w	r6, [r8]
 80168fa:	f013 0902 	ands.w	r9, r3, #2
 80168fe:	d02d      	beq.n	801695c <__sfvwrite_r+0x88>
 8016900:	f04f 0a00 	mov.w	sl, #0
 8016904:	46d1      	mov	r9, sl
 8016906:	f8df b264 	ldr.w	fp, [pc, #612]	; 8016b6c <__sfvwrite_r+0x298>
 801690a:	f1b9 0f00 	cmp.w	r9, #0
 801690e:	d01f      	beq.n	8016950 <__sfvwrite_r+0x7c>
 8016910:	45d9      	cmp	r9, fp
 8016912:	464b      	mov	r3, r9
 8016914:	4652      	mov	r2, sl
 8016916:	bf28      	it	cs
 8016918:	465b      	movcs	r3, fp
 801691a:	6a21      	ldr	r1, [r4, #32]
 801691c:	4638      	mov	r0, r7
 801691e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8016920:	47a8      	blx	r5
 8016922:	2800      	cmp	r0, #0
 8016924:	f340 8089 	ble.w	8016a3a <__sfvwrite_r+0x166>
 8016928:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801692c:	4482      	add	sl, r0
 801692e:	eba9 0900 	sub.w	r9, r9, r0
 8016932:	1a18      	subs	r0, r3, r0
 8016934:	f8c8 0008 	str.w	r0, [r8, #8]
 8016938:	2800      	cmp	r0, #0
 801693a:	d1e6      	bne.n	801690a <__sfvwrite_r+0x36>
 801693c:	e7d1      	b.n	80168e2 <__sfvwrite_r+0xe>
 801693e:	4621      	mov	r1, r4
 8016940:	4638      	mov	r0, r7
 8016942:	f002 fcbb 	bl	80192bc <__swsetup_r>
 8016946:	2800      	cmp	r0, #0
 8016948:	d0d4      	beq.n	80168f4 <__sfvwrite_r+0x20>
 801694a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801694e:	e7c9      	b.n	80168e4 <__sfvwrite_r+0x10>
 8016950:	f8d6 a000 	ldr.w	sl, [r6]
 8016954:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8016958:	3608      	adds	r6, #8
 801695a:	e7d6      	b.n	801690a <__sfvwrite_r+0x36>
 801695c:	f013 0301 	ands.w	r3, r3, #1
 8016960:	d043      	beq.n	80169ea <__sfvwrite_r+0x116>
 8016962:	4648      	mov	r0, r9
 8016964:	46ca      	mov	sl, r9
 8016966:	46cb      	mov	fp, r9
 8016968:	f1bb 0f00 	cmp.w	fp, #0
 801696c:	f000 80d9 	beq.w	8016b22 <__sfvwrite_r+0x24e>
 8016970:	b950      	cbnz	r0, 8016988 <__sfvwrite_r+0xb4>
 8016972:	465a      	mov	r2, fp
 8016974:	210a      	movs	r1, #10
 8016976:	4650      	mov	r0, sl
 8016978:	f000 fc7e 	bl	8017278 <memchr>
 801697c:	2800      	cmp	r0, #0
 801697e:	f000 80d5 	beq.w	8016b2c <__sfvwrite_r+0x258>
 8016982:	3001      	adds	r0, #1
 8016984:	eba0 090a 	sub.w	r9, r0, sl
 8016988:	6820      	ldr	r0, [r4, #0]
 801698a:	6921      	ldr	r1, [r4, #16]
 801698c:	45d9      	cmp	r9, fp
 801698e:	464b      	mov	r3, r9
 8016990:	bf28      	it	cs
 8016992:	465b      	movcs	r3, fp
 8016994:	4288      	cmp	r0, r1
 8016996:	6962      	ldr	r2, [r4, #20]
 8016998:	f240 80cb 	bls.w	8016b32 <__sfvwrite_r+0x25e>
 801699c:	68a5      	ldr	r5, [r4, #8]
 801699e:	4415      	add	r5, r2
 80169a0:	42ab      	cmp	r3, r5
 80169a2:	f340 80c6 	ble.w	8016b32 <__sfvwrite_r+0x25e>
 80169a6:	4651      	mov	r1, sl
 80169a8:	462a      	mov	r2, r5
 80169aa:	f000 fc8d 	bl	80172c8 <memmove>
 80169ae:	6823      	ldr	r3, [r4, #0]
 80169b0:	4621      	mov	r1, r4
 80169b2:	442b      	add	r3, r5
 80169b4:	6023      	str	r3, [r4, #0]
 80169b6:	4638      	mov	r0, r7
 80169b8:	f003 fc80 	bl	801a2bc <_fflush_r>
 80169bc:	2800      	cmp	r0, #0
 80169be:	d13c      	bne.n	8016a3a <__sfvwrite_r+0x166>
 80169c0:	ebb9 0905 	subs.w	r9, r9, r5
 80169c4:	f040 80cf 	bne.w	8016b66 <__sfvwrite_r+0x292>
 80169c8:	4621      	mov	r1, r4
 80169ca:	4638      	mov	r0, r7
 80169cc:	f003 fc76 	bl	801a2bc <_fflush_r>
 80169d0:	2800      	cmp	r0, #0
 80169d2:	d132      	bne.n	8016a3a <__sfvwrite_r+0x166>
 80169d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80169d8:	44aa      	add	sl, r5
 80169da:	ebab 0b05 	sub.w	fp, fp, r5
 80169de:	1b5d      	subs	r5, r3, r5
 80169e0:	f8c8 5008 	str.w	r5, [r8, #8]
 80169e4:	2d00      	cmp	r5, #0
 80169e6:	d1bf      	bne.n	8016968 <__sfvwrite_r+0x94>
 80169e8:	e77b      	b.n	80168e2 <__sfvwrite_r+0xe>
 80169ea:	4699      	mov	r9, r3
 80169ec:	469a      	mov	sl, r3
 80169ee:	f1ba 0f00 	cmp.w	sl, #0
 80169f2:	d027      	beq.n	8016a44 <__sfvwrite_r+0x170>
 80169f4:	89a2      	ldrh	r2, [r4, #12]
 80169f6:	68a5      	ldr	r5, [r4, #8]
 80169f8:	0591      	lsls	r1, r2, #22
 80169fa:	d565      	bpl.n	8016ac8 <__sfvwrite_r+0x1f4>
 80169fc:	45aa      	cmp	sl, r5
 80169fe:	d33b      	bcc.n	8016a78 <__sfvwrite_r+0x1a4>
 8016a00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016a04:	d036      	beq.n	8016a74 <__sfvwrite_r+0x1a0>
 8016a06:	2002      	movs	r0, #2
 8016a08:	6921      	ldr	r1, [r4, #16]
 8016a0a:	6823      	ldr	r3, [r4, #0]
 8016a0c:	1a5b      	subs	r3, r3, r1
 8016a0e:	9301      	str	r3, [sp, #4]
 8016a10:	6963      	ldr	r3, [r4, #20]
 8016a12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016a16:	fb93 fbf0 	sdiv	fp, r3, r0
 8016a1a:	9b01      	ldr	r3, [sp, #4]
 8016a1c:	1c58      	adds	r0, r3, #1
 8016a1e:	4450      	add	r0, sl
 8016a20:	4583      	cmp	fp, r0
 8016a22:	bf38      	it	cc
 8016a24:	4683      	movcc	fp, r0
 8016a26:	0553      	lsls	r3, r2, #21
 8016a28:	d53e      	bpl.n	8016aa8 <__sfvwrite_r+0x1d4>
 8016a2a:	4659      	mov	r1, fp
 8016a2c:	4638      	mov	r0, r7
 8016a2e:	f000 fa17 	bl	8016e60 <_malloc_r>
 8016a32:	4605      	mov	r5, r0
 8016a34:	b950      	cbnz	r0, 8016a4c <__sfvwrite_r+0x178>
 8016a36:	230c      	movs	r3, #12
 8016a38:	603b      	str	r3, [r7, #0]
 8016a3a:	89a3      	ldrh	r3, [r4, #12]
 8016a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a40:	81a3      	strh	r3, [r4, #12]
 8016a42:	e782      	b.n	801694a <__sfvwrite_r+0x76>
 8016a44:	e896 0600 	ldmia.w	r6, {r9, sl}
 8016a48:	3608      	adds	r6, #8
 8016a4a:	e7d0      	b.n	80169ee <__sfvwrite_r+0x11a>
 8016a4c:	9a01      	ldr	r2, [sp, #4]
 8016a4e:	6921      	ldr	r1, [r4, #16]
 8016a50:	f000 fc2f 	bl	80172b2 <memcpy>
 8016a54:	89a2      	ldrh	r2, [r4, #12]
 8016a56:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8016a5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8016a5e:	81a2      	strh	r2, [r4, #12]
 8016a60:	9b01      	ldr	r3, [sp, #4]
 8016a62:	6125      	str	r5, [r4, #16]
 8016a64:	441d      	add	r5, r3
 8016a66:	6025      	str	r5, [r4, #0]
 8016a68:	4655      	mov	r5, sl
 8016a6a:	ebab 0303 	sub.w	r3, fp, r3
 8016a6e:	f8c4 b014 	str.w	fp, [r4, #20]
 8016a72:	60a3      	str	r3, [r4, #8]
 8016a74:	45aa      	cmp	sl, r5
 8016a76:	d200      	bcs.n	8016a7a <__sfvwrite_r+0x1a6>
 8016a78:	4655      	mov	r5, sl
 8016a7a:	462a      	mov	r2, r5
 8016a7c:	4649      	mov	r1, r9
 8016a7e:	6820      	ldr	r0, [r4, #0]
 8016a80:	f000 fc22 	bl	80172c8 <memmove>
 8016a84:	68a3      	ldr	r3, [r4, #8]
 8016a86:	1b5b      	subs	r3, r3, r5
 8016a88:	60a3      	str	r3, [r4, #8]
 8016a8a:	6823      	ldr	r3, [r4, #0]
 8016a8c:	441d      	add	r5, r3
 8016a8e:	6025      	str	r5, [r4, #0]
 8016a90:	4655      	mov	r5, sl
 8016a92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016a96:	44a9      	add	r9, r5
 8016a98:	ebaa 0a05 	sub.w	sl, sl, r5
 8016a9c:	1b5d      	subs	r5, r3, r5
 8016a9e:	f8c8 5008 	str.w	r5, [r8, #8]
 8016aa2:	2d00      	cmp	r5, #0
 8016aa4:	d1a3      	bne.n	80169ee <__sfvwrite_r+0x11a>
 8016aa6:	e71c      	b.n	80168e2 <__sfvwrite_r+0xe>
 8016aa8:	465a      	mov	r2, fp
 8016aaa:	4638      	mov	r0, r7
 8016aac:	f000 fee6 	bl	801787c <_realloc_r>
 8016ab0:	4605      	mov	r5, r0
 8016ab2:	2800      	cmp	r0, #0
 8016ab4:	d1d4      	bne.n	8016a60 <__sfvwrite_r+0x18c>
 8016ab6:	6921      	ldr	r1, [r4, #16]
 8016ab8:	4638      	mov	r0, r7
 8016aba:	f003 fd6b 	bl	801a594 <_free_r>
 8016abe:	89a3      	ldrh	r3, [r4, #12]
 8016ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016ac4:	81a3      	strh	r3, [r4, #12]
 8016ac6:	e7b6      	b.n	8016a36 <__sfvwrite_r+0x162>
 8016ac8:	6820      	ldr	r0, [r4, #0]
 8016aca:	6923      	ldr	r3, [r4, #16]
 8016acc:	4298      	cmp	r0, r3
 8016ace:	d802      	bhi.n	8016ad6 <__sfvwrite_r+0x202>
 8016ad0:	6962      	ldr	r2, [r4, #20]
 8016ad2:	4592      	cmp	sl, r2
 8016ad4:	d215      	bcs.n	8016b02 <__sfvwrite_r+0x22e>
 8016ad6:	4555      	cmp	r5, sl
 8016ad8:	bf28      	it	cs
 8016ada:	4655      	movcs	r5, sl
 8016adc:	4649      	mov	r1, r9
 8016ade:	462a      	mov	r2, r5
 8016ae0:	f000 fbf2 	bl	80172c8 <memmove>
 8016ae4:	68a3      	ldr	r3, [r4, #8]
 8016ae6:	6822      	ldr	r2, [r4, #0]
 8016ae8:	1b5b      	subs	r3, r3, r5
 8016aea:	442a      	add	r2, r5
 8016aec:	60a3      	str	r3, [r4, #8]
 8016aee:	6022      	str	r2, [r4, #0]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d1ce      	bne.n	8016a92 <__sfvwrite_r+0x1be>
 8016af4:	4621      	mov	r1, r4
 8016af6:	4638      	mov	r0, r7
 8016af8:	f003 fbe0 	bl	801a2bc <_fflush_r>
 8016afc:	2800      	cmp	r0, #0
 8016afe:	d0c8      	beq.n	8016a92 <__sfvwrite_r+0x1be>
 8016b00:	e79b      	b.n	8016a3a <__sfvwrite_r+0x166>
 8016b02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016b06:	4553      	cmp	r3, sl
 8016b08:	bf28      	it	cs
 8016b0a:	4653      	movcs	r3, sl
 8016b0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016b10:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8016b12:	4353      	muls	r3, r2
 8016b14:	6a21      	ldr	r1, [r4, #32]
 8016b16:	464a      	mov	r2, r9
 8016b18:	4638      	mov	r0, r7
 8016b1a:	47a8      	blx	r5
 8016b1c:	1e05      	subs	r5, r0, #0
 8016b1e:	dcb8      	bgt.n	8016a92 <__sfvwrite_r+0x1be>
 8016b20:	e78b      	b.n	8016a3a <__sfvwrite_r+0x166>
 8016b22:	e896 0c00 	ldmia.w	r6, {sl, fp}
 8016b26:	2000      	movs	r0, #0
 8016b28:	3608      	adds	r6, #8
 8016b2a:	e71d      	b.n	8016968 <__sfvwrite_r+0x94>
 8016b2c:	f10b 0901 	add.w	r9, fp, #1
 8016b30:	e72a      	b.n	8016988 <__sfvwrite_r+0xb4>
 8016b32:	4293      	cmp	r3, r2
 8016b34:	db09      	blt.n	8016b4a <__sfvwrite_r+0x276>
 8016b36:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8016b38:	4613      	mov	r3, r2
 8016b3a:	6a21      	ldr	r1, [r4, #32]
 8016b3c:	4652      	mov	r2, sl
 8016b3e:	4638      	mov	r0, r7
 8016b40:	47a8      	blx	r5
 8016b42:	1e05      	subs	r5, r0, #0
 8016b44:	f73f af3c 	bgt.w	80169c0 <__sfvwrite_r+0xec>
 8016b48:	e777      	b.n	8016a3a <__sfvwrite_r+0x166>
 8016b4a:	461a      	mov	r2, r3
 8016b4c:	4651      	mov	r1, sl
 8016b4e:	9301      	str	r3, [sp, #4]
 8016b50:	f000 fbba 	bl	80172c8 <memmove>
 8016b54:	9b01      	ldr	r3, [sp, #4]
 8016b56:	68a2      	ldr	r2, [r4, #8]
 8016b58:	461d      	mov	r5, r3
 8016b5a:	1ad2      	subs	r2, r2, r3
 8016b5c:	60a2      	str	r2, [r4, #8]
 8016b5e:	6822      	ldr	r2, [r4, #0]
 8016b60:	441a      	add	r2, r3
 8016b62:	6022      	str	r2, [r4, #0]
 8016b64:	e72c      	b.n	80169c0 <__sfvwrite_r+0xec>
 8016b66:	2001      	movs	r0, #1
 8016b68:	e734      	b.n	80169d4 <__sfvwrite_r+0x100>
 8016b6a:	bf00      	nop
 8016b6c:	7ffffc00 	.word	0x7ffffc00

08016b70 <_fwrite_r>:
 8016b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b74:	b086      	sub	sp, #24
 8016b76:	fb02 f503 	mul.w	r5, r2, r3
 8016b7a:	461f      	mov	r7, r3
 8016b7c:	ab01      	add	r3, sp, #4
 8016b7e:	9303      	str	r3, [sp, #12]
 8016b80:	2301      	movs	r3, #1
 8016b82:	4690      	mov	r8, r2
 8016b84:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016b86:	9101      	str	r1, [sp, #4]
 8016b88:	9502      	str	r5, [sp, #8]
 8016b8a:	9505      	str	r5, [sp, #20]
 8016b8c:	9304      	str	r3, [sp, #16]
 8016b8e:	4606      	mov	r6, r0
 8016b90:	b118      	cbz	r0, 8016b9a <_fwrite_r+0x2a>
 8016b92:	6983      	ldr	r3, [r0, #24]
 8016b94:	b90b      	cbnz	r3, 8016b9a <_fwrite_r+0x2a>
 8016b96:	f003 fc25 	bl	801a3e4 <__sinit>
 8016b9a:	4b21      	ldr	r3, [pc, #132]	; (8016c20 <_fwrite_r+0xb0>)
 8016b9c:	429c      	cmp	r4, r3
 8016b9e:	d127      	bne.n	8016bf0 <_fwrite_r+0x80>
 8016ba0:	6874      	ldr	r4, [r6, #4]
 8016ba2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ba4:	07d8      	lsls	r0, r3, #31
 8016ba6:	d405      	bmi.n	8016bb4 <_fwrite_r+0x44>
 8016ba8:	89a3      	ldrh	r3, [r4, #12]
 8016baa:	0599      	lsls	r1, r3, #22
 8016bac:	d402      	bmi.n	8016bb4 <_fwrite_r+0x44>
 8016bae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016bb0:	f000 f943 	bl	8016e3a <__retarget_lock_acquire_recursive>
 8016bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016bb8:	049a      	lsls	r2, r3, #18
 8016bba:	d406      	bmi.n	8016bca <_fwrite_r+0x5a>
 8016bbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016bc0:	81a3      	strh	r3, [r4, #12]
 8016bc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016bc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016bc8:	6663      	str	r3, [r4, #100]	; 0x64
 8016bca:	aa03      	add	r2, sp, #12
 8016bcc:	4621      	mov	r1, r4
 8016bce:	4630      	mov	r0, r6
 8016bd0:	f7ff fe80 	bl	80168d4 <__sfvwrite_r>
 8016bd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016bd6:	b9a8      	cbnz	r0, 8016c04 <_fwrite_r+0x94>
 8016bd8:	07d8      	lsls	r0, r3, #31
 8016bda:	d405      	bmi.n	8016be8 <_fwrite_r+0x78>
 8016bdc:	89a3      	ldrh	r3, [r4, #12]
 8016bde:	0599      	lsls	r1, r3, #22
 8016be0:	d402      	bmi.n	8016be8 <_fwrite_r+0x78>
 8016be2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016be4:	f000 f92b 	bl	8016e3e <__retarget_lock_release_recursive>
 8016be8:	4638      	mov	r0, r7
 8016bea:	b006      	add	sp, #24
 8016bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bf0:	4b0c      	ldr	r3, [pc, #48]	; (8016c24 <_fwrite_r+0xb4>)
 8016bf2:	429c      	cmp	r4, r3
 8016bf4:	d101      	bne.n	8016bfa <_fwrite_r+0x8a>
 8016bf6:	68b4      	ldr	r4, [r6, #8]
 8016bf8:	e7d3      	b.n	8016ba2 <_fwrite_r+0x32>
 8016bfa:	4b0b      	ldr	r3, [pc, #44]	; (8016c28 <_fwrite_r+0xb8>)
 8016bfc:	429c      	cmp	r4, r3
 8016bfe:	bf08      	it	eq
 8016c00:	68f4      	ldreq	r4, [r6, #12]
 8016c02:	e7ce      	b.n	8016ba2 <_fwrite_r+0x32>
 8016c04:	07da      	lsls	r2, r3, #31
 8016c06:	d405      	bmi.n	8016c14 <_fwrite_r+0xa4>
 8016c08:	89a3      	ldrh	r3, [r4, #12]
 8016c0a:	059b      	lsls	r3, r3, #22
 8016c0c:	d402      	bmi.n	8016c14 <_fwrite_r+0xa4>
 8016c0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c10:	f000 f915 	bl	8016e3e <__retarget_lock_release_recursive>
 8016c14:	9b05      	ldr	r3, [sp, #20]
 8016c16:	1aed      	subs	r5, r5, r3
 8016c18:	fbb5 f7f8 	udiv	r7, r5, r8
 8016c1c:	e7e4      	b.n	8016be8 <_fwrite_r+0x78>
 8016c1e:	bf00      	nop
 8016c20:	080233e4 	.word	0x080233e4
 8016c24:	08023404 	.word	0x08023404
 8016c28:	080233c4 	.word	0x080233c4

08016c2c <fwrite>:
 8016c2c:	b507      	push	{r0, r1, r2, lr}
 8016c2e:	9300      	str	r3, [sp, #0]
 8016c30:	4613      	mov	r3, r2
 8016c32:	460a      	mov	r2, r1
 8016c34:	4601      	mov	r1, r0
 8016c36:	4803      	ldr	r0, [pc, #12]	; (8016c44 <fwrite+0x18>)
 8016c38:	6800      	ldr	r0, [r0, #0]
 8016c3a:	f7ff ff99 	bl	8016b70 <_fwrite_r>
 8016c3e:	b003      	add	sp, #12
 8016c40:	f85d fb04 	ldr.w	pc, [sp], #4
 8016c44:	2000002c 	.word	0x2000002c

08016c48 <localtime>:
 8016c48:	b538      	push	{r3, r4, r5, lr}
 8016c4a:	4b07      	ldr	r3, [pc, #28]	; (8016c68 <localtime+0x20>)
 8016c4c:	4605      	mov	r5, r0
 8016c4e:	681c      	ldr	r4, [r3, #0]
 8016c50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016c52:	b91b      	cbnz	r3, 8016c5c <localtime+0x14>
 8016c54:	2024      	movs	r0, #36	; 0x24
 8016c56:	f000 f8f3 	bl	8016e40 <malloc>
 8016c5a:	63e0      	str	r0, [r4, #60]	; 0x3c
 8016c5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016c5e:	4628      	mov	r0, r5
 8016c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016c64:	f000 b802 	b.w	8016c6c <localtime_r>
 8016c68:	2000002c 	.word	0x2000002c

08016c6c <localtime_r>:
 8016c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c70:	460c      	mov	r4, r1
 8016c72:	4680      	mov	r8, r0
 8016c74:	f003 fdb0 	bl	801a7d8 <__gettzinfo>
 8016c78:	4621      	mov	r1, r4
 8016c7a:	4607      	mov	r7, r0
 8016c7c:	4640      	mov	r0, r8
 8016c7e:	f003 fdaf 	bl	801a7e0 <gmtime_r>
 8016c82:	6946      	ldr	r6, [r0, #20]
 8016c84:	4604      	mov	r4, r0
 8016c86:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8016c8a:	07b3      	lsls	r3, r6, #30
 8016c8c:	d105      	bne.n	8016c9a <localtime_r+0x2e>
 8016c8e:	2264      	movs	r2, #100	; 0x64
 8016c90:	fb96 f3f2 	sdiv	r3, r6, r2
 8016c94:	fb02 6313 	mls	r3, r2, r3, r6
 8016c98:	b9fb      	cbnz	r3, 8016cda <localtime_r+0x6e>
 8016c9a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8016c9e:	fb96 f5f3 	sdiv	r5, r6, r3
 8016ca2:	fb03 6515 	mls	r5, r3, r5, r6
 8016ca6:	fab5 f585 	clz	r5, r5
 8016caa:	096d      	lsrs	r5, r5, #5
 8016cac:	2230      	movs	r2, #48	; 0x30
 8016cae:	4b5f      	ldr	r3, [pc, #380]	; (8016e2c <localtime_r+0x1c0>)
 8016cb0:	fb02 3505 	mla	r5, r2, r5, r3
 8016cb4:	f002 f8fe 	bl	8018eb4 <__tz_lock>
 8016cb8:	f002 f908 	bl	8018ecc <_tzset_unlocked>
 8016cbc:	4b5c      	ldr	r3, [pc, #368]	; (8016e30 <localtime_r+0x1c4>)
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	b1e3      	cbz	r3, 8016cfc <localtime_r+0x90>
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	429e      	cmp	r6, r3
 8016cc6:	d10a      	bne.n	8016cde <localtime_r+0x72>
 8016cc8:	6839      	ldr	r1, [r7, #0]
 8016cca:	f8d8 3000 	ldr.w	r3, [r8]
 8016cce:	69fa      	ldr	r2, [r7, #28]
 8016cd0:	b969      	cbnz	r1, 8016cee <localtime_r+0x82>
 8016cd2:	4293      	cmp	r3, r2
 8016cd4:	db0d      	blt.n	8016cf2 <localtime_r+0x86>
 8016cd6:	2301      	movs	r3, #1
 8016cd8:	e010      	b.n	8016cfc <localtime_r+0x90>
 8016cda:	2501      	movs	r5, #1
 8016cdc:	e7e6      	b.n	8016cac <localtime_r+0x40>
 8016cde:	4630      	mov	r0, r6
 8016ce0:	f002 f840 	bl	8018d64 <__tzcalc_limits>
 8016ce4:	2800      	cmp	r0, #0
 8016ce6:	d1ef      	bne.n	8016cc8 <localtime_r+0x5c>
 8016ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016cec:	e006      	b.n	8016cfc <localtime_r+0x90>
 8016cee:	4293      	cmp	r3, r2
 8016cf0:	db54      	blt.n	8016d9c <localtime_r+0x130>
 8016cf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016cf4:	4293      	cmp	r3, r2
 8016cf6:	bfac      	ite	ge
 8016cf8:	2300      	movge	r3, #0
 8016cfa:	2301      	movlt	r3, #1
 8016cfc:	6223      	str	r3, [r4, #32]
 8016cfe:	6a23      	ldr	r3, [r4, #32]
 8016d00:	203c      	movs	r0, #60	; 0x3c
 8016d02:	2b01      	cmp	r3, #1
 8016d04:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8016d08:	bf0c      	ite	eq
 8016d0a:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8016d0c:	6a39      	ldrne	r1, [r7, #32]
 8016d0e:	fb91 f6f3 	sdiv	r6, r1, r3
 8016d12:	fb03 1316 	mls	r3, r3, r6, r1
 8016d16:	fb93 f2f0 	sdiv	r2, r3, r0
 8016d1a:	fb00 3012 	mls	r0, r0, r2, r3
 8016d1e:	6861      	ldr	r1, [r4, #4]
 8016d20:	6823      	ldr	r3, [r4, #0]
 8016d22:	1a89      	subs	r1, r1, r2
 8016d24:	68a2      	ldr	r2, [r4, #8]
 8016d26:	1a1b      	subs	r3, r3, r0
 8016d28:	1b92      	subs	r2, r2, r6
 8016d2a:	2b3b      	cmp	r3, #59	; 0x3b
 8016d2c:	6023      	str	r3, [r4, #0]
 8016d2e:	6061      	str	r1, [r4, #4]
 8016d30:	60a2      	str	r2, [r4, #8]
 8016d32:	dd35      	ble.n	8016da0 <localtime_r+0x134>
 8016d34:	3101      	adds	r1, #1
 8016d36:	6061      	str	r1, [r4, #4]
 8016d38:	3b3c      	subs	r3, #60	; 0x3c
 8016d3a:	6023      	str	r3, [r4, #0]
 8016d3c:	6863      	ldr	r3, [r4, #4]
 8016d3e:	2b3b      	cmp	r3, #59	; 0x3b
 8016d40:	dd34      	ble.n	8016dac <localtime_r+0x140>
 8016d42:	3201      	adds	r2, #1
 8016d44:	60a2      	str	r2, [r4, #8]
 8016d46:	3b3c      	subs	r3, #60	; 0x3c
 8016d48:	6063      	str	r3, [r4, #4]
 8016d4a:	68a3      	ldr	r3, [r4, #8]
 8016d4c:	2b17      	cmp	r3, #23
 8016d4e:	dd33      	ble.n	8016db8 <localtime_r+0x14c>
 8016d50:	69e2      	ldr	r2, [r4, #28]
 8016d52:	3b18      	subs	r3, #24
 8016d54:	3201      	adds	r2, #1
 8016d56:	61e2      	str	r2, [r4, #28]
 8016d58:	69a2      	ldr	r2, [r4, #24]
 8016d5a:	60a3      	str	r3, [r4, #8]
 8016d5c:	3201      	adds	r2, #1
 8016d5e:	2a06      	cmp	r2, #6
 8016d60:	bfc8      	it	gt
 8016d62:	2200      	movgt	r2, #0
 8016d64:	61a2      	str	r2, [r4, #24]
 8016d66:	68e2      	ldr	r2, [r4, #12]
 8016d68:	6923      	ldr	r3, [r4, #16]
 8016d6a:	3201      	adds	r2, #1
 8016d6c:	60e2      	str	r2, [r4, #12]
 8016d6e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8016d72:	428a      	cmp	r2, r1
 8016d74:	dd0d      	ble.n	8016d92 <localtime_r+0x126>
 8016d76:	3301      	adds	r3, #1
 8016d78:	2b0c      	cmp	r3, #12
 8016d7a:	eba2 0201 	sub.w	r2, r2, r1
 8016d7e:	60e2      	str	r2, [r4, #12]
 8016d80:	bf05      	ittet	eq
 8016d82:	2200      	moveq	r2, #0
 8016d84:	6963      	ldreq	r3, [r4, #20]
 8016d86:	6123      	strne	r3, [r4, #16]
 8016d88:	3301      	addeq	r3, #1
 8016d8a:	bf02      	ittt	eq
 8016d8c:	6122      	streq	r2, [r4, #16]
 8016d8e:	6163      	streq	r3, [r4, #20]
 8016d90:	61e2      	streq	r2, [r4, #28]
 8016d92:	f002 f895 	bl	8018ec0 <__tz_unlock>
 8016d96:	4620      	mov	r0, r4
 8016d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	e7ad      	b.n	8016cfc <localtime_r+0x90>
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	dacb      	bge.n	8016d3c <localtime_r+0xd0>
 8016da4:	3901      	subs	r1, #1
 8016da6:	6061      	str	r1, [r4, #4]
 8016da8:	333c      	adds	r3, #60	; 0x3c
 8016daa:	e7c6      	b.n	8016d3a <localtime_r+0xce>
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	dacc      	bge.n	8016d4a <localtime_r+0xde>
 8016db0:	3a01      	subs	r2, #1
 8016db2:	60a2      	str	r2, [r4, #8]
 8016db4:	333c      	adds	r3, #60	; 0x3c
 8016db6:	e7c7      	b.n	8016d48 <localtime_r+0xdc>
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	daea      	bge.n	8016d92 <localtime_r+0x126>
 8016dbc:	69e2      	ldr	r2, [r4, #28]
 8016dbe:	3318      	adds	r3, #24
 8016dc0:	3a01      	subs	r2, #1
 8016dc2:	61e2      	str	r2, [r4, #28]
 8016dc4:	69a2      	ldr	r2, [r4, #24]
 8016dc6:	60a3      	str	r3, [r4, #8]
 8016dc8:	3a01      	subs	r2, #1
 8016dca:	bf48      	it	mi
 8016dcc:	2206      	movmi	r2, #6
 8016dce:	61a2      	str	r2, [r4, #24]
 8016dd0:	68e2      	ldr	r2, [r4, #12]
 8016dd2:	3a01      	subs	r2, #1
 8016dd4:	60e2      	str	r2, [r4, #12]
 8016dd6:	2a00      	cmp	r2, #0
 8016dd8:	d1db      	bne.n	8016d92 <localtime_r+0x126>
 8016dda:	6923      	ldr	r3, [r4, #16]
 8016ddc:	3b01      	subs	r3, #1
 8016dde:	d405      	bmi.n	8016dec <localtime_r+0x180>
 8016de0:	6123      	str	r3, [r4, #16]
 8016de2:	6923      	ldr	r3, [r4, #16]
 8016de4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8016de8:	60e3      	str	r3, [r4, #12]
 8016dea:	e7d2      	b.n	8016d92 <localtime_r+0x126>
 8016dec:	230b      	movs	r3, #11
 8016dee:	6123      	str	r3, [r4, #16]
 8016df0:	6963      	ldr	r3, [r4, #20]
 8016df2:	1e5a      	subs	r2, r3, #1
 8016df4:	f012 0f03 	tst.w	r2, #3
 8016df8:	6162      	str	r2, [r4, #20]
 8016dfa:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8016dfe:	d105      	bne.n	8016e0c <localtime_r+0x1a0>
 8016e00:	2164      	movs	r1, #100	; 0x64
 8016e02:	fb92 f3f1 	sdiv	r3, r2, r1
 8016e06:	fb01 2313 	mls	r3, r1, r3, r2
 8016e0a:	b963      	cbnz	r3, 8016e26 <localtime_r+0x1ba>
 8016e0c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8016e10:	fb92 f3f1 	sdiv	r3, r2, r1
 8016e14:	fb01 2313 	mls	r3, r1, r3, r2
 8016e18:	fab3 f383 	clz	r3, r3
 8016e1c:	095b      	lsrs	r3, r3, #5
 8016e1e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8016e22:	61e3      	str	r3, [r4, #28]
 8016e24:	e7dd      	b.n	8016de2 <localtime_r+0x176>
 8016e26:	2301      	movs	r3, #1
 8016e28:	e7f9      	b.n	8016e1e <localtime_r+0x1b2>
 8016e2a:	bf00      	nop
 8016e2c:	080232c0 	.word	0x080232c0
 8016e30:	200014bc 	.word	0x200014bc

08016e34 <__retarget_lock_init_recursive>:
 8016e34:	4770      	bx	lr

08016e36 <__retarget_lock_close_recursive>:
 8016e36:	4770      	bx	lr

08016e38 <__retarget_lock_acquire>:
 8016e38:	4770      	bx	lr

08016e3a <__retarget_lock_acquire_recursive>:
 8016e3a:	4770      	bx	lr

08016e3c <__retarget_lock_release>:
 8016e3c:	4770      	bx	lr

08016e3e <__retarget_lock_release_recursive>:
 8016e3e:	4770      	bx	lr

08016e40 <malloc>:
 8016e40:	4b02      	ldr	r3, [pc, #8]	; (8016e4c <malloc+0xc>)
 8016e42:	4601      	mov	r1, r0
 8016e44:	6818      	ldr	r0, [r3, #0]
 8016e46:	f000 b80b 	b.w	8016e60 <_malloc_r>
 8016e4a:	bf00      	nop
 8016e4c:	2000002c 	.word	0x2000002c

08016e50 <free>:
 8016e50:	4b02      	ldr	r3, [pc, #8]	; (8016e5c <free+0xc>)
 8016e52:	4601      	mov	r1, r0
 8016e54:	6818      	ldr	r0, [r3, #0]
 8016e56:	f003 bb9d 	b.w	801a594 <_free_r>
 8016e5a:	bf00      	nop
 8016e5c:	2000002c 	.word	0x2000002c

08016e60 <_malloc_r>:
 8016e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e64:	f101 040b 	add.w	r4, r1, #11
 8016e68:	2c16      	cmp	r4, #22
 8016e6a:	4681      	mov	r9, r0
 8016e6c:	d907      	bls.n	8016e7e <_malloc_r+0x1e>
 8016e6e:	f034 0407 	bics.w	r4, r4, #7
 8016e72:	d505      	bpl.n	8016e80 <_malloc_r+0x20>
 8016e74:	230c      	movs	r3, #12
 8016e76:	f8c9 3000 	str.w	r3, [r9]
 8016e7a:	2600      	movs	r6, #0
 8016e7c:	e131      	b.n	80170e2 <_malloc_r+0x282>
 8016e7e:	2410      	movs	r4, #16
 8016e80:	428c      	cmp	r4, r1
 8016e82:	d3f7      	bcc.n	8016e74 <_malloc_r+0x14>
 8016e84:	4648      	mov	r0, r9
 8016e86:	f000 fc9d 	bl	80177c4 <__malloc_lock>
 8016e8a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8016e8e:	4d9b      	ldr	r5, [pc, #620]	; (80170fc <_malloc_r+0x29c>)
 8016e90:	d236      	bcs.n	8016f00 <_malloc_r+0xa0>
 8016e92:	f104 0208 	add.w	r2, r4, #8
 8016e96:	442a      	add	r2, r5
 8016e98:	6856      	ldr	r6, [r2, #4]
 8016e9a:	f1a2 0108 	sub.w	r1, r2, #8
 8016e9e:	428e      	cmp	r6, r1
 8016ea0:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8016ea4:	d102      	bne.n	8016eac <_malloc_r+0x4c>
 8016ea6:	68d6      	ldr	r6, [r2, #12]
 8016ea8:	42b2      	cmp	r2, r6
 8016eaa:	d010      	beq.n	8016ece <_malloc_r+0x6e>
 8016eac:	6873      	ldr	r3, [r6, #4]
 8016eae:	68f2      	ldr	r2, [r6, #12]
 8016eb0:	68b1      	ldr	r1, [r6, #8]
 8016eb2:	f023 0303 	bic.w	r3, r3, #3
 8016eb6:	60ca      	str	r2, [r1, #12]
 8016eb8:	4433      	add	r3, r6
 8016eba:	6091      	str	r1, [r2, #8]
 8016ebc:	685a      	ldr	r2, [r3, #4]
 8016ebe:	f042 0201 	orr.w	r2, r2, #1
 8016ec2:	605a      	str	r2, [r3, #4]
 8016ec4:	4648      	mov	r0, r9
 8016ec6:	f000 fc83 	bl	80177d0 <__malloc_unlock>
 8016eca:	3608      	adds	r6, #8
 8016ecc:	e109      	b.n	80170e2 <_malloc_r+0x282>
 8016ece:	3302      	adds	r3, #2
 8016ed0:	4a8b      	ldr	r2, [pc, #556]	; (8017100 <_malloc_r+0x2a0>)
 8016ed2:	692e      	ldr	r6, [r5, #16]
 8016ed4:	4611      	mov	r1, r2
 8016ed6:	4296      	cmp	r6, r2
 8016ed8:	d06d      	beq.n	8016fb6 <_malloc_r+0x156>
 8016eda:	6870      	ldr	r0, [r6, #4]
 8016edc:	f020 0003 	bic.w	r0, r0, #3
 8016ee0:	1b07      	subs	r7, r0, r4
 8016ee2:	2f0f      	cmp	r7, #15
 8016ee4:	dd47      	ble.n	8016f76 <_malloc_r+0x116>
 8016ee6:	1933      	adds	r3, r6, r4
 8016ee8:	f044 0401 	orr.w	r4, r4, #1
 8016eec:	6074      	str	r4, [r6, #4]
 8016eee:	616b      	str	r3, [r5, #20]
 8016ef0:	612b      	str	r3, [r5, #16]
 8016ef2:	60da      	str	r2, [r3, #12]
 8016ef4:	609a      	str	r2, [r3, #8]
 8016ef6:	f047 0201 	orr.w	r2, r7, #1
 8016efa:	605a      	str	r2, [r3, #4]
 8016efc:	5037      	str	r7, [r6, r0]
 8016efe:	e7e1      	b.n	8016ec4 <_malloc_r+0x64>
 8016f00:	0a63      	lsrs	r3, r4, #9
 8016f02:	d02a      	beq.n	8016f5a <_malloc_r+0xfa>
 8016f04:	2b04      	cmp	r3, #4
 8016f06:	d812      	bhi.n	8016f2e <_malloc_r+0xce>
 8016f08:	09a3      	lsrs	r3, r4, #6
 8016f0a:	3338      	adds	r3, #56	; 0x38
 8016f0c:	1c5a      	adds	r2, r3, #1
 8016f0e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8016f12:	6856      	ldr	r6, [r2, #4]
 8016f14:	f1a2 0008 	sub.w	r0, r2, #8
 8016f18:	4286      	cmp	r6, r0
 8016f1a:	d006      	beq.n	8016f2a <_malloc_r+0xca>
 8016f1c:	6872      	ldr	r2, [r6, #4]
 8016f1e:	f022 0203 	bic.w	r2, r2, #3
 8016f22:	1b11      	subs	r1, r2, r4
 8016f24:	290f      	cmp	r1, #15
 8016f26:	dd1c      	ble.n	8016f62 <_malloc_r+0x102>
 8016f28:	3b01      	subs	r3, #1
 8016f2a:	3301      	adds	r3, #1
 8016f2c:	e7d0      	b.n	8016ed0 <_malloc_r+0x70>
 8016f2e:	2b14      	cmp	r3, #20
 8016f30:	d801      	bhi.n	8016f36 <_malloc_r+0xd6>
 8016f32:	335b      	adds	r3, #91	; 0x5b
 8016f34:	e7ea      	b.n	8016f0c <_malloc_r+0xac>
 8016f36:	2b54      	cmp	r3, #84	; 0x54
 8016f38:	d802      	bhi.n	8016f40 <_malloc_r+0xe0>
 8016f3a:	0b23      	lsrs	r3, r4, #12
 8016f3c:	336e      	adds	r3, #110	; 0x6e
 8016f3e:	e7e5      	b.n	8016f0c <_malloc_r+0xac>
 8016f40:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8016f44:	d802      	bhi.n	8016f4c <_malloc_r+0xec>
 8016f46:	0be3      	lsrs	r3, r4, #15
 8016f48:	3377      	adds	r3, #119	; 0x77
 8016f4a:	e7df      	b.n	8016f0c <_malloc_r+0xac>
 8016f4c:	f240 5254 	movw	r2, #1364	; 0x554
 8016f50:	4293      	cmp	r3, r2
 8016f52:	d804      	bhi.n	8016f5e <_malloc_r+0xfe>
 8016f54:	0ca3      	lsrs	r3, r4, #18
 8016f56:	337c      	adds	r3, #124	; 0x7c
 8016f58:	e7d8      	b.n	8016f0c <_malloc_r+0xac>
 8016f5a:	233f      	movs	r3, #63	; 0x3f
 8016f5c:	e7d6      	b.n	8016f0c <_malloc_r+0xac>
 8016f5e:	237e      	movs	r3, #126	; 0x7e
 8016f60:	e7d4      	b.n	8016f0c <_malloc_r+0xac>
 8016f62:	2900      	cmp	r1, #0
 8016f64:	68f1      	ldr	r1, [r6, #12]
 8016f66:	db04      	blt.n	8016f72 <_malloc_r+0x112>
 8016f68:	68b3      	ldr	r3, [r6, #8]
 8016f6a:	60d9      	str	r1, [r3, #12]
 8016f6c:	608b      	str	r3, [r1, #8]
 8016f6e:	18b3      	adds	r3, r6, r2
 8016f70:	e7a4      	b.n	8016ebc <_malloc_r+0x5c>
 8016f72:	460e      	mov	r6, r1
 8016f74:	e7d0      	b.n	8016f18 <_malloc_r+0xb8>
 8016f76:	2f00      	cmp	r7, #0
 8016f78:	616a      	str	r2, [r5, #20]
 8016f7a:	612a      	str	r2, [r5, #16]
 8016f7c:	db05      	blt.n	8016f8a <_malloc_r+0x12a>
 8016f7e:	4430      	add	r0, r6
 8016f80:	6843      	ldr	r3, [r0, #4]
 8016f82:	f043 0301 	orr.w	r3, r3, #1
 8016f86:	6043      	str	r3, [r0, #4]
 8016f88:	e79c      	b.n	8016ec4 <_malloc_r+0x64>
 8016f8a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8016f8e:	d244      	bcs.n	801701a <_malloc_r+0x1ba>
 8016f90:	2201      	movs	r2, #1
 8016f92:	08c0      	lsrs	r0, r0, #3
 8016f94:	1087      	asrs	r7, r0, #2
 8016f96:	fa02 f707 	lsl.w	r7, r2, r7
 8016f9a:	686a      	ldr	r2, [r5, #4]
 8016f9c:	3001      	adds	r0, #1
 8016f9e:	433a      	orrs	r2, r7
 8016fa0:	606a      	str	r2, [r5, #4]
 8016fa2:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8016fa6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8016faa:	3a08      	subs	r2, #8
 8016fac:	60f2      	str	r2, [r6, #12]
 8016fae:	60b7      	str	r7, [r6, #8]
 8016fb0:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8016fb4:	60fe      	str	r6, [r7, #12]
 8016fb6:	2001      	movs	r0, #1
 8016fb8:	109a      	asrs	r2, r3, #2
 8016fba:	fa00 f202 	lsl.w	r2, r0, r2
 8016fbe:	6868      	ldr	r0, [r5, #4]
 8016fc0:	4282      	cmp	r2, r0
 8016fc2:	f200 809f 	bhi.w	8017104 <_malloc_r+0x2a4>
 8016fc6:	4202      	tst	r2, r0
 8016fc8:	d106      	bne.n	8016fd8 <_malloc_r+0x178>
 8016fca:	f023 0303 	bic.w	r3, r3, #3
 8016fce:	0052      	lsls	r2, r2, #1
 8016fd0:	4202      	tst	r2, r0
 8016fd2:	f103 0304 	add.w	r3, r3, #4
 8016fd6:	d0fa      	beq.n	8016fce <_malloc_r+0x16e>
 8016fd8:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8016fdc:	46e0      	mov	r8, ip
 8016fde:	469e      	mov	lr, r3
 8016fe0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8016fe4:	4546      	cmp	r6, r8
 8016fe6:	d153      	bne.n	8017090 <_malloc_r+0x230>
 8016fe8:	f10e 0e01 	add.w	lr, lr, #1
 8016fec:	f01e 0f03 	tst.w	lr, #3
 8016ff0:	f108 0808 	add.w	r8, r8, #8
 8016ff4:	d1f4      	bne.n	8016fe0 <_malloc_r+0x180>
 8016ff6:	0798      	lsls	r0, r3, #30
 8016ff8:	d179      	bne.n	80170ee <_malloc_r+0x28e>
 8016ffa:	686b      	ldr	r3, [r5, #4]
 8016ffc:	ea23 0302 	bic.w	r3, r3, r2
 8017000:	606b      	str	r3, [r5, #4]
 8017002:	6868      	ldr	r0, [r5, #4]
 8017004:	0052      	lsls	r2, r2, #1
 8017006:	4282      	cmp	r2, r0
 8017008:	d87c      	bhi.n	8017104 <_malloc_r+0x2a4>
 801700a:	2a00      	cmp	r2, #0
 801700c:	d07a      	beq.n	8017104 <_malloc_r+0x2a4>
 801700e:	4673      	mov	r3, lr
 8017010:	4202      	tst	r2, r0
 8017012:	d1e1      	bne.n	8016fd8 <_malloc_r+0x178>
 8017014:	3304      	adds	r3, #4
 8017016:	0052      	lsls	r2, r2, #1
 8017018:	e7fa      	b.n	8017010 <_malloc_r+0x1b0>
 801701a:	0a42      	lsrs	r2, r0, #9
 801701c:	2a04      	cmp	r2, #4
 801701e:	d815      	bhi.n	801704c <_malloc_r+0x1ec>
 8017020:	0982      	lsrs	r2, r0, #6
 8017022:	3238      	adds	r2, #56	; 0x38
 8017024:	1c57      	adds	r7, r2, #1
 8017026:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 801702a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 801702e:	45be      	cmp	lr, r7
 8017030:	d126      	bne.n	8017080 <_malloc_r+0x220>
 8017032:	2001      	movs	r0, #1
 8017034:	1092      	asrs	r2, r2, #2
 8017036:	fa00 f202 	lsl.w	r2, r0, r2
 801703a:	6868      	ldr	r0, [r5, #4]
 801703c:	4310      	orrs	r0, r2
 801703e:	6068      	str	r0, [r5, #4]
 8017040:	f8c6 e00c 	str.w	lr, [r6, #12]
 8017044:	60b7      	str	r7, [r6, #8]
 8017046:	f8ce 6008 	str.w	r6, [lr, #8]
 801704a:	e7b3      	b.n	8016fb4 <_malloc_r+0x154>
 801704c:	2a14      	cmp	r2, #20
 801704e:	d801      	bhi.n	8017054 <_malloc_r+0x1f4>
 8017050:	325b      	adds	r2, #91	; 0x5b
 8017052:	e7e7      	b.n	8017024 <_malloc_r+0x1c4>
 8017054:	2a54      	cmp	r2, #84	; 0x54
 8017056:	d802      	bhi.n	801705e <_malloc_r+0x1fe>
 8017058:	0b02      	lsrs	r2, r0, #12
 801705a:	326e      	adds	r2, #110	; 0x6e
 801705c:	e7e2      	b.n	8017024 <_malloc_r+0x1c4>
 801705e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8017062:	d802      	bhi.n	801706a <_malloc_r+0x20a>
 8017064:	0bc2      	lsrs	r2, r0, #15
 8017066:	3277      	adds	r2, #119	; 0x77
 8017068:	e7dc      	b.n	8017024 <_malloc_r+0x1c4>
 801706a:	f240 5754 	movw	r7, #1364	; 0x554
 801706e:	42ba      	cmp	r2, r7
 8017070:	bf9a      	itte	ls
 8017072:	0c82      	lsrls	r2, r0, #18
 8017074:	327c      	addls	r2, #124	; 0x7c
 8017076:	227e      	movhi	r2, #126	; 0x7e
 8017078:	e7d4      	b.n	8017024 <_malloc_r+0x1c4>
 801707a:	68bf      	ldr	r7, [r7, #8]
 801707c:	45be      	cmp	lr, r7
 801707e:	d004      	beq.n	801708a <_malloc_r+0x22a>
 8017080:	687a      	ldr	r2, [r7, #4]
 8017082:	f022 0203 	bic.w	r2, r2, #3
 8017086:	4290      	cmp	r0, r2
 8017088:	d3f7      	bcc.n	801707a <_malloc_r+0x21a>
 801708a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 801708e:	e7d7      	b.n	8017040 <_malloc_r+0x1e0>
 8017090:	6870      	ldr	r0, [r6, #4]
 8017092:	68f7      	ldr	r7, [r6, #12]
 8017094:	f020 0003 	bic.w	r0, r0, #3
 8017098:	eba0 0a04 	sub.w	sl, r0, r4
 801709c:	f1ba 0f0f 	cmp.w	sl, #15
 80170a0:	dd10      	ble.n	80170c4 <_malloc_r+0x264>
 80170a2:	68b2      	ldr	r2, [r6, #8]
 80170a4:	1933      	adds	r3, r6, r4
 80170a6:	f044 0401 	orr.w	r4, r4, #1
 80170aa:	6074      	str	r4, [r6, #4]
 80170ac:	60d7      	str	r7, [r2, #12]
 80170ae:	60ba      	str	r2, [r7, #8]
 80170b0:	f04a 0201 	orr.w	r2, sl, #1
 80170b4:	616b      	str	r3, [r5, #20]
 80170b6:	612b      	str	r3, [r5, #16]
 80170b8:	60d9      	str	r1, [r3, #12]
 80170ba:	6099      	str	r1, [r3, #8]
 80170bc:	605a      	str	r2, [r3, #4]
 80170be:	f846 a000 	str.w	sl, [r6, r0]
 80170c2:	e6ff      	b.n	8016ec4 <_malloc_r+0x64>
 80170c4:	f1ba 0f00 	cmp.w	sl, #0
 80170c8:	db0f      	blt.n	80170ea <_malloc_r+0x28a>
 80170ca:	4430      	add	r0, r6
 80170cc:	6843      	ldr	r3, [r0, #4]
 80170ce:	f043 0301 	orr.w	r3, r3, #1
 80170d2:	6043      	str	r3, [r0, #4]
 80170d4:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80170d8:	4648      	mov	r0, r9
 80170da:	60df      	str	r7, [r3, #12]
 80170dc:	60bb      	str	r3, [r7, #8]
 80170de:	f000 fb77 	bl	80177d0 <__malloc_unlock>
 80170e2:	4630      	mov	r0, r6
 80170e4:	b003      	add	sp, #12
 80170e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170ea:	463e      	mov	r6, r7
 80170ec:	e77a      	b.n	8016fe4 <_malloc_r+0x184>
 80170ee:	f85c 0908 	ldr.w	r0, [ip], #-8
 80170f2:	3b01      	subs	r3, #1
 80170f4:	4584      	cmp	ip, r0
 80170f6:	f43f af7e 	beq.w	8016ff6 <_malloc_r+0x196>
 80170fa:	e782      	b.n	8017002 <_malloc_r+0x1a2>
 80170fc:	20000120 	.word	0x20000120
 8017100:	20000128 	.word	0x20000128
 8017104:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8017108:	f8db 6004 	ldr.w	r6, [fp, #4]
 801710c:	f026 0603 	bic.w	r6, r6, #3
 8017110:	42b4      	cmp	r4, r6
 8017112:	d803      	bhi.n	801711c <_malloc_r+0x2bc>
 8017114:	1b33      	subs	r3, r6, r4
 8017116:	2b0f      	cmp	r3, #15
 8017118:	f300 8095 	bgt.w	8017246 <_malloc_r+0x3e6>
 801711c:	4a4f      	ldr	r2, [pc, #316]	; (801725c <_malloc_r+0x3fc>)
 801711e:	eb0b 0306 	add.w	r3, fp, r6
 8017122:	6817      	ldr	r7, [r2, #0]
 8017124:	4a4e      	ldr	r2, [pc, #312]	; (8017260 <_malloc_r+0x400>)
 8017126:	3710      	adds	r7, #16
 8017128:	6811      	ldr	r1, [r2, #0]
 801712a:	4427      	add	r7, r4
 801712c:	3101      	adds	r1, #1
 801712e:	d005      	beq.n	801713c <_malloc_r+0x2dc>
 8017130:	494c      	ldr	r1, [pc, #304]	; (8017264 <_malloc_r+0x404>)
 8017132:	3901      	subs	r1, #1
 8017134:	440f      	add	r7, r1
 8017136:	3101      	adds	r1, #1
 8017138:	4249      	negs	r1, r1
 801713a:	400f      	ands	r7, r1
 801713c:	4639      	mov	r1, r7
 801713e:	4648      	mov	r0, r9
 8017140:	9201      	str	r2, [sp, #4]
 8017142:	9300      	str	r3, [sp, #0]
 8017144:	f000 fd1c 	bl	8017b80 <_sbrk_r>
 8017148:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801714c:	4680      	mov	r8, r0
 801714e:	d055      	beq.n	80171fc <_malloc_r+0x39c>
 8017150:	9b00      	ldr	r3, [sp, #0]
 8017152:	9a01      	ldr	r2, [sp, #4]
 8017154:	4283      	cmp	r3, r0
 8017156:	d901      	bls.n	801715c <_malloc_r+0x2fc>
 8017158:	45ab      	cmp	fp, r5
 801715a:	d14f      	bne.n	80171fc <_malloc_r+0x39c>
 801715c:	4842      	ldr	r0, [pc, #264]	; (8017268 <_malloc_r+0x408>)
 801715e:	4543      	cmp	r3, r8
 8017160:	6801      	ldr	r1, [r0, #0]
 8017162:	4682      	mov	sl, r0
 8017164:	eb07 0e01 	add.w	lr, r7, r1
 8017168:	f8c0 e000 	str.w	lr, [r0]
 801716c:	493f      	ldr	r1, [pc, #252]	; (801726c <_malloc_r+0x40c>)
 801716e:	d113      	bne.n	8017198 <_malloc_r+0x338>
 8017170:	420b      	tst	r3, r1
 8017172:	d111      	bne.n	8017198 <_malloc_r+0x338>
 8017174:	68ab      	ldr	r3, [r5, #8]
 8017176:	443e      	add	r6, r7
 8017178:	f046 0601 	orr.w	r6, r6, #1
 801717c:	605e      	str	r6, [r3, #4]
 801717e:	4a3c      	ldr	r2, [pc, #240]	; (8017270 <_malloc_r+0x410>)
 8017180:	f8da 3000 	ldr.w	r3, [sl]
 8017184:	6811      	ldr	r1, [r2, #0]
 8017186:	428b      	cmp	r3, r1
 8017188:	bf88      	it	hi
 801718a:	6013      	strhi	r3, [r2, #0]
 801718c:	4a39      	ldr	r2, [pc, #228]	; (8017274 <_malloc_r+0x414>)
 801718e:	6811      	ldr	r1, [r2, #0]
 8017190:	428b      	cmp	r3, r1
 8017192:	bf88      	it	hi
 8017194:	6013      	strhi	r3, [r2, #0]
 8017196:	e031      	b.n	80171fc <_malloc_r+0x39c>
 8017198:	6810      	ldr	r0, [r2, #0]
 801719a:	3001      	adds	r0, #1
 801719c:	bf1b      	ittet	ne
 801719e:	eba8 0303 	subne.w	r3, r8, r3
 80171a2:	4473      	addne	r3, lr
 80171a4:	f8c2 8000 	streq.w	r8, [r2]
 80171a8:	f8ca 3000 	strne.w	r3, [sl]
 80171ac:	f018 0007 	ands.w	r0, r8, #7
 80171b0:	bf1c      	itt	ne
 80171b2:	f1c0 0008 	rsbne	r0, r0, #8
 80171b6:	4480      	addne	r8, r0
 80171b8:	4b2a      	ldr	r3, [pc, #168]	; (8017264 <_malloc_r+0x404>)
 80171ba:	4447      	add	r7, r8
 80171bc:	4418      	add	r0, r3
 80171be:	400f      	ands	r7, r1
 80171c0:	1bc7      	subs	r7, r0, r7
 80171c2:	4639      	mov	r1, r7
 80171c4:	4648      	mov	r0, r9
 80171c6:	f000 fcdb 	bl	8017b80 <_sbrk_r>
 80171ca:	1c43      	adds	r3, r0, #1
 80171cc:	bf04      	itt	eq
 80171ce:	4640      	moveq	r0, r8
 80171d0:	2700      	moveq	r7, #0
 80171d2:	f8da 3000 	ldr.w	r3, [sl]
 80171d6:	eba0 0008 	sub.w	r0, r0, r8
 80171da:	443b      	add	r3, r7
 80171dc:	4407      	add	r7, r0
 80171de:	f047 0701 	orr.w	r7, r7, #1
 80171e2:	45ab      	cmp	fp, r5
 80171e4:	f8c5 8008 	str.w	r8, [r5, #8]
 80171e8:	f8ca 3000 	str.w	r3, [sl]
 80171ec:	f8c8 7004 	str.w	r7, [r8, #4]
 80171f0:	d0c5      	beq.n	801717e <_malloc_r+0x31e>
 80171f2:	2e0f      	cmp	r6, #15
 80171f4:	d810      	bhi.n	8017218 <_malloc_r+0x3b8>
 80171f6:	2301      	movs	r3, #1
 80171f8:	f8c8 3004 	str.w	r3, [r8, #4]
 80171fc:	68ab      	ldr	r3, [r5, #8]
 80171fe:	685a      	ldr	r2, [r3, #4]
 8017200:	f022 0203 	bic.w	r2, r2, #3
 8017204:	4294      	cmp	r4, r2
 8017206:	eba2 0304 	sub.w	r3, r2, r4
 801720a:	d801      	bhi.n	8017210 <_malloc_r+0x3b0>
 801720c:	2b0f      	cmp	r3, #15
 801720e:	dc1a      	bgt.n	8017246 <_malloc_r+0x3e6>
 8017210:	4648      	mov	r0, r9
 8017212:	f000 fadd 	bl	80177d0 <__malloc_unlock>
 8017216:	e630      	b.n	8016e7a <_malloc_r+0x1a>
 8017218:	2205      	movs	r2, #5
 801721a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801721e:	3e0c      	subs	r6, #12
 8017220:	f026 0607 	bic.w	r6, r6, #7
 8017224:	f003 0301 	and.w	r3, r3, #1
 8017228:	4333      	orrs	r3, r6
 801722a:	f8cb 3004 	str.w	r3, [fp, #4]
 801722e:	2e0f      	cmp	r6, #15
 8017230:	eb0b 0306 	add.w	r3, fp, r6
 8017234:	605a      	str	r2, [r3, #4]
 8017236:	609a      	str	r2, [r3, #8]
 8017238:	d9a1      	bls.n	801717e <_malloc_r+0x31e>
 801723a:	f10b 0108 	add.w	r1, fp, #8
 801723e:	4648      	mov	r0, r9
 8017240:	f003 f9a8 	bl	801a594 <_free_r>
 8017244:	e79b      	b.n	801717e <_malloc_r+0x31e>
 8017246:	68ae      	ldr	r6, [r5, #8]
 8017248:	f044 0201 	orr.w	r2, r4, #1
 801724c:	f043 0301 	orr.w	r3, r3, #1
 8017250:	4434      	add	r4, r6
 8017252:	6072      	str	r2, [r6, #4]
 8017254:	60ac      	str	r4, [r5, #8]
 8017256:	6063      	str	r3, [r4, #4]
 8017258:	e634      	b.n	8016ec4 <_malloc_r+0x64>
 801725a:	bf00      	nop
 801725c:	20001394 	.word	0x20001394
 8017260:	20000528 	.word	0x20000528
 8017264:	00001000 	.word	0x00001000
 8017268:	20001364 	.word	0x20001364
 801726c:	00000fff 	.word	0x00000fff
 8017270:	2000138c 	.word	0x2000138c
 8017274:	20001390 	.word	0x20001390

08017278 <memchr>:
 8017278:	b510      	push	{r4, lr}
 801727a:	b2c9      	uxtb	r1, r1
 801727c:	4402      	add	r2, r0
 801727e:	4290      	cmp	r0, r2
 8017280:	4603      	mov	r3, r0
 8017282:	d101      	bne.n	8017288 <memchr+0x10>
 8017284:	2000      	movs	r0, #0
 8017286:	bd10      	pop	{r4, pc}
 8017288:	781c      	ldrb	r4, [r3, #0]
 801728a:	3001      	adds	r0, #1
 801728c:	428c      	cmp	r4, r1
 801728e:	d1f6      	bne.n	801727e <memchr+0x6>
 8017290:	4618      	mov	r0, r3
 8017292:	bd10      	pop	{r4, pc}

08017294 <memcmp>:
 8017294:	b510      	push	{r4, lr}
 8017296:	3901      	subs	r1, #1
 8017298:	4402      	add	r2, r0
 801729a:	4290      	cmp	r0, r2
 801729c:	d101      	bne.n	80172a2 <memcmp+0xe>
 801729e:	2000      	movs	r0, #0
 80172a0:	bd10      	pop	{r4, pc}
 80172a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80172a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80172aa:	42a3      	cmp	r3, r4
 80172ac:	d0f5      	beq.n	801729a <memcmp+0x6>
 80172ae:	1b18      	subs	r0, r3, r4
 80172b0:	bd10      	pop	{r4, pc}

080172b2 <memcpy>:
 80172b2:	b510      	push	{r4, lr}
 80172b4:	1e43      	subs	r3, r0, #1
 80172b6:	440a      	add	r2, r1
 80172b8:	4291      	cmp	r1, r2
 80172ba:	d100      	bne.n	80172be <memcpy+0xc>
 80172bc:	bd10      	pop	{r4, pc}
 80172be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80172c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80172c6:	e7f7      	b.n	80172b8 <memcpy+0x6>

080172c8 <memmove>:
 80172c8:	4288      	cmp	r0, r1
 80172ca:	b510      	push	{r4, lr}
 80172cc:	eb01 0302 	add.w	r3, r1, r2
 80172d0:	d803      	bhi.n	80172da <memmove+0x12>
 80172d2:	1e42      	subs	r2, r0, #1
 80172d4:	4299      	cmp	r1, r3
 80172d6:	d10c      	bne.n	80172f2 <memmove+0x2a>
 80172d8:	bd10      	pop	{r4, pc}
 80172da:	4298      	cmp	r0, r3
 80172dc:	d2f9      	bcs.n	80172d2 <memmove+0xa>
 80172de:	1881      	adds	r1, r0, r2
 80172e0:	1ad2      	subs	r2, r2, r3
 80172e2:	42d3      	cmn	r3, r2
 80172e4:	d100      	bne.n	80172e8 <memmove+0x20>
 80172e6:	bd10      	pop	{r4, pc}
 80172e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80172ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80172f0:	e7f7      	b.n	80172e2 <memmove+0x1a>
 80172f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80172f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80172fa:	e7eb      	b.n	80172d4 <memmove+0xc>

080172fc <memset>:
 80172fc:	4603      	mov	r3, r0
 80172fe:	4402      	add	r2, r0
 8017300:	4293      	cmp	r3, r2
 8017302:	d100      	bne.n	8017306 <memset+0xa>
 8017304:	4770      	bx	lr
 8017306:	f803 1b01 	strb.w	r1, [r3], #1
 801730a:	e7f9      	b.n	8017300 <memset+0x4>

0801730c <validate_structure>:
 801730c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801730e:	6801      	ldr	r1, [r0, #0]
 8017310:	4604      	mov	r4, r0
 8017312:	293b      	cmp	r1, #59	; 0x3b
 8017314:	d911      	bls.n	801733a <validate_structure+0x2e>
 8017316:	223c      	movs	r2, #60	; 0x3c
 8017318:	4668      	mov	r0, sp
 801731a:	f002 f8c7 	bl	80194ac <div>
 801731e:	9a01      	ldr	r2, [sp, #4]
 8017320:	6863      	ldr	r3, [r4, #4]
 8017322:	9900      	ldr	r1, [sp, #0]
 8017324:	2a00      	cmp	r2, #0
 8017326:	440b      	add	r3, r1
 8017328:	6063      	str	r3, [r4, #4]
 801732a:	bfbb      	ittet	lt
 801732c:	323c      	addlt	r2, #60	; 0x3c
 801732e:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8017332:	6022      	strge	r2, [r4, #0]
 8017334:	6022      	strlt	r2, [r4, #0]
 8017336:	bfb8      	it	lt
 8017338:	6063      	strlt	r3, [r4, #4]
 801733a:	6861      	ldr	r1, [r4, #4]
 801733c:	293b      	cmp	r1, #59	; 0x3b
 801733e:	d911      	bls.n	8017364 <validate_structure+0x58>
 8017340:	223c      	movs	r2, #60	; 0x3c
 8017342:	4668      	mov	r0, sp
 8017344:	f002 f8b2 	bl	80194ac <div>
 8017348:	9a01      	ldr	r2, [sp, #4]
 801734a:	68a3      	ldr	r3, [r4, #8]
 801734c:	9900      	ldr	r1, [sp, #0]
 801734e:	2a00      	cmp	r2, #0
 8017350:	440b      	add	r3, r1
 8017352:	60a3      	str	r3, [r4, #8]
 8017354:	bfbb      	ittet	lt
 8017356:	323c      	addlt	r2, #60	; 0x3c
 8017358:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 801735c:	6062      	strge	r2, [r4, #4]
 801735e:	6062      	strlt	r2, [r4, #4]
 8017360:	bfb8      	it	lt
 8017362:	60a3      	strlt	r3, [r4, #8]
 8017364:	68a1      	ldr	r1, [r4, #8]
 8017366:	2917      	cmp	r1, #23
 8017368:	d911      	bls.n	801738e <validate_structure+0x82>
 801736a:	2218      	movs	r2, #24
 801736c:	4668      	mov	r0, sp
 801736e:	f002 f89d 	bl	80194ac <div>
 8017372:	9a01      	ldr	r2, [sp, #4]
 8017374:	68e3      	ldr	r3, [r4, #12]
 8017376:	9900      	ldr	r1, [sp, #0]
 8017378:	2a00      	cmp	r2, #0
 801737a:	440b      	add	r3, r1
 801737c:	60e3      	str	r3, [r4, #12]
 801737e:	bfbb      	ittet	lt
 8017380:	3218      	addlt	r2, #24
 8017382:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8017386:	60a2      	strge	r2, [r4, #8]
 8017388:	60a2      	strlt	r2, [r4, #8]
 801738a:	bfb8      	it	lt
 801738c:	60e3      	strlt	r3, [r4, #12]
 801738e:	6921      	ldr	r1, [r4, #16]
 8017390:	290b      	cmp	r1, #11
 8017392:	d911      	bls.n	80173b8 <validate_structure+0xac>
 8017394:	220c      	movs	r2, #12
 8017396:	4668      	mov	r0, sp
 8017398:	f002 f888 	bl	80194ac <div>
 801739c:	9a01      	ldr	r2, [sp, #4]
 801739e:	6963      	ldr	r3, [r4, #20]
 80173a0:	9900      	ldr	r1, [sp, #0]
 80173a2:	2a00      	cmp	r2, #0
 80173a4:	440b      	add	r3, r1
 80173a6:	6163      	str	r3, [r4, #20]
 80173a8:	bfbb      	ittet	lt
 80173aa:	320c      	addlt	r2, #12
 80173ac:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 80173b0:	6122      	strge	r2, [r4, #16]
 80173b2:	6122      	strlt	r2, [r4, #16]
 80173b4:	bfb8      	it	lt
 80173b6:	6163      	strlt	r3, [r4, #20]
 80173b8:	6963      	ldr	r3, [r4, #20]
 80173ba:	0799      	lsls	r1, r3, #30
 80173bc:	d143      	bne.n	8017446 <validate_structure+0x13a>
 80173be:	2164      	movs	r1, #100	; 0x64
 80173c0:	fb93 f2f1 	sdiv	r2, r3, r1
 80173c4:	fb01 3212 	mls	r2, r1, r2, r3
 80173c8:	2a00      	cmp	r2, #0
 80173ca:	d13e      	bne.n	801744a <validate_structure+0x13e>
 80173cc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80173d0:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80173d4:	fb93 f2f1 	sdiv	r2, r3, r1
 80173d8:	fb01 3312 	mls	r3, r1, r2, r3
 80173dc:	2b00      	cmp	r3, #0
 80173de:	bf14      	ite	ne
 80173e0:	231c      	movne	r3, #28
 80173e2:	231d      	moveq	r3, #29
 80173e4:	68e2      	ldr	r2, [r4, #12]
 80173e6:	2a00      	cmp	r2, #0
 80173e8:	dd31      	ble.n	801744e <validate_structure+0x142>
 80173ea:	2602      	movs	r6, #2
 80173ec:	f04f 0e00 	mov.w	lr, #0
 80173f0:	2064      	movs	r0, #100	; 0x64
 80173f2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80173f6:	4f34      	ldr	r7, [pc, #208]	; (80174c8 <validate_structure+0x1bc>)
 80173f8:	6921      	ldr	r1, [r4, #16]
 80173fa:	68e2      	ldr	r2, [r4, #12]
 80173fc:	2901      	cmp	r1, #1
 80173fe:	d05d      	beq.n	80174bc <validate_structure+0x1b0>
 8017400:	f857 c021 	ldr.w	ip, [r7, r1, lsl #2]
 8017404:	4562      	cmp	r2, ip
 8017406:	dd2c      	ble.n	8017462 <validate_structure+0x156>
 8017408:	3101      	adds	r1, #1
 801740a:	eba2 020c 	sub.w	r2, r2, ip
 801740e:	290c      	cmp	r1, #12
 8017410:	60e2      	str	r2, [r4, #12]
 8017412:	6121      	str	r1, [r4, #16]
 8017414:	d1f0      	bne.n	80173f8 <validate_structure+0xec>
 8017416:	6963      	ldr	r3, [r4, #20]
 8017418:	f8c4 e010 	str.w	lr, [r4, #16]
 801741c:	1c5a      	adds	r2, r3, #1
 801741e:	0791      	lsls	r1, r2, #30
 8017420:	6162      	str	r2, [r4, #20]
 8017422:	d147      	bne.n	80174b4 <validate_structure+0x1a8>
 8017424:	fb92 f1f0 	sdiv	r1, r2, r0
 8017428:	fb00 2211 	mls	r2, r0, r1, r2
 801742c:	2a00      	cmp	r2, #0
 801742e:	d143      	bne.n	80174b8 <validate_structure+0x1ac>
 8017430:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8017434:	fb93 f2f5 	sdiv	r2, r3, r5
 8017438:	fb05 3312 	mls	r3, r5, r2, r3
 801743c:	2b00      	cmp	r3, #0
 801743e:	bf14      	ite	ne
 8017440:	231c      	movne	r3, #28
 8017442:	231d      	moveq	r3, #29
 8017444:	e7d8      	b.n	80173f8 <validate_structure+0xec>
 8017446:	231c      	movs	r3, #28
 8017448:	e7cc      	b.n	80173e4 <validate_structure+0xd8>
 801744a:	231d      	movs	r3, #29
 801744c:	e7ca      	b.n	80173e4 <validate_structure+0xd8>
 801744e:	260b      	movs	r6, #11
 8017450:	2064      	movs	r0, #100	; 0x64
 8017452:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8017456:	4f1c      	ldr	r7, [pc, #112]	; (80174c8 <validate_structure+0x1bc>)
 8017458:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 801745c:	f1be 0f00 	cmp.w	lr, #0
 8017460:	dd01      	ble.n	8017466 <validate_structure+0x15a>
 8017462:	b003      	add	sp, #12
 8017464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017466:	6921      	ldr	r1, [r4, #16]
 8017468:	3901      	subs	r1, #1
 801746a:	6121      	str	r1, [r4, #16]
 801746c:	3101      	adds	r1, #1
 801746e:	d114      	bne.n	801749a <validate_structure+0x18e>
 8017470:	6963      	ldr	r3, [r4, #20]
 8017472:	6126      	str	r6, [r4, #16]
 8017474:	1e59      	subs	r1, r3, #1
 8017476:	078a      	lsls	r2, r1, #30
 8017478:	6161      	str	r1, [r4, #20]
 801747a:	d117      	bne.n	80174ac <validate_structure+0x1a0>
 801747c:	fb91 f2f0 	sdiv	r2, r1, r0
 8017480:	fb00 1112 	mls	r1, r0, r2, r1
 8017484:	b9a1      	cbnz	r1, 80174b0 <validate_structure+0x1a4>
 8017486:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801748a:	fb93 f2f5 	sdiv	r2, r3, r5
 801748e:	fb05 3312 	mls	r3, r5, r2, r3
 8017492:	2b00      	cmp	r3, #0
 8017494:	bf14      	ite	ne
 8017496:	231c      	movne	r3, #28
 8017498:	231d      	moveq	r3, #29
 801749a:	6922      	ldr	r2, [r4, #16]
 801749c:	2a01      	cmp	r2, #1
 801749e:	bf0c      	ite	eq
 80174a0:	461a      	moveq	r2, r3
 80174a2:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80174a6:	4472      	add	r2, lr
 80174a8:	60e2      	str	r2, [r4, #12]
 80174aa:	e7d5      	b.n	8017458 <validate_structure+0x14c>
 80174ac:	231c      	movs	r3, #28
 80174ae:	e7f4      	b.n	801749a <validate_structure+0x18e>
 80174b0:	231d      	movs	r3, #29
 80174b2:	e7f2      	b.n	801749a <validate_structure+0x18e>
 80174b4:	231c      	movs	r3, #28
 80174b6:	e79f      	b.n	80173f8 <validate_structure+0xec>
 80174b8:	231d      	movs	r3, #29
 80174ba:	e79d      	b.n	80173f8 <validate_structure+0xec>
 80174bc:	4293      	cmp	r3, r2
 80174be:	dad0      	bge.n	8017462 <validate_structure+0x156>
 80174c0:	1ad2      	subs	r2, r2, r3
 80174c2:	60e2      	str	r2, [r4, #12]
 80174c4:	6126      	str	r6, [r4, #16]
 80174c6:	e797      	b.n	80173f8 <validate_structure+0xec>
 80174c8:	08023260 	.word	0x08023260

080174cc <mktime>:
 80174cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174d0:	4681      	mov	r9, r0
 80174d2:	f003 f981 	bl	801a7d8 <__gettzinfo>
 80174d6:	253c      	movs	r5, #60	; 0x3c
 80174d8:	4680      	mov	r8, r0
 80174da:	4648      	mov	r0, r9
 80174dc:	f7ff ff16 	bl	801730c <validate_structure>
 80174e0:	e899 0081 	ldmia.w	r9, {r0, r7}
 80174e4:	fb05 0707 	mla	r7, r5, r7, r0
 80174e8:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 80174ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80174f0:	4ab1      	ldr	r2, [pc, #708]	; (80177b8 <mktime+0x2ec>)
 80174f2:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80174f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80174fa:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80174fe:	3c01      	subs	r4, #1
 8017500:	2b01      	cmp	r3, #1
 8017502:	fb05 7000 	mla	r0, r5, r0, r7
 8017506:	4414      	add	r4, r2
 8017508:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801750c:	dd11      	ble.n	8017532 <mktime+0x66>
 801750e:	0799      	lsls	r1, r3, #30
 8017510:	d10f      	bne.n	8017532 <mktime+0x66>
 8017512:	2164      	movs	r1, #100	; 0x64
 8017514:	fb93 f2f1 	sdiv	r2, r3, r1
 8017518:	fb01 3212 	mls	r2, r1, r2, r3
 801751c:	b942      	cbnz	r2, 8017530 <mktime+0x64>
 801751e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8017522:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8017526:	fb95 f2f1 	sdiv	r2, r5, r1
 801752a:	fb01 5212 	mls	r2, r1, r2, r5
 801752e:	b902      	cbnz	r2, 8017532 <mktime+0x66>
 8017530:	3401      	adds	r4, #1
 8017532:	f644 6120 	movw	r1, #20000	; 0x4e20
 8017536:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 801753a:	3210      	adds	r2, #16
 801753c:	428a      	cmp	r2, r1
 801753e:	f8c9 401c 	str.w	r4, [r9, #28]
 8017542:	f200 812d 	bhi.w	80177a0 <mktime+0x2d4>
 8017546:	2b46      	cmp	r3, #70	; 0x46
 8017548:	dd70      	ble.n	801762c <mktime+0x160>
 801754a:	2546      	movs	r5, #70	; 0x46
 801754c:	f240 176d 	movw	r7, #365	; 0x16d
 8017550:	2164      	movs	r1, #100	; 0x64
 8017552:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8017556:	07aa      	lsls	r2, r5, #30
 8017558:	d162      	bne.n	8017620 <mktime+0x154>
 801755a:	fb95 f2f1 	sdiv	r2, r5, r1
 801755e:	fb01 5212 	mls	r2, r1, r2, r5
 8017562:	2a00      	cmp	r2, #0
 8017564:	d15f      	bne.n	8017626 <mktime+0x15a>
 8017566:	f205 7e6c 	addw	lr, r5, #1900	; 0x76c
 801756a:	fb9e f2f6 	sdiv	r2, lr, r6
 801756e:	fb06 e212 	mls	r2, r6, r2, lr
 8017572:	2a00      	cmp	r2, #0
 8017574:	bf14      	ite	ne
 8017576:	463a      	movne	r2, r7
 8017578:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801757c:	3501      	adds	r5, #1
 801757e:	42ab      	cmp	r3, r5
 8017580:	4414      	add	r4, r2
 8017582:	d1e8      	bne.n	8017556 <mktime+0x8a>
 8017584:	4f8d      	ldr	r7, [pc, #564]	; (80177bc <mktime+0x2f0>)
 8017586:	fb07 0704 	mla	r7, r7, r4, r0
 801758a:	f001 fc93 	bl	8018eb4 <__tz_lock>
 801758e:	f001 fc9d 	bl	8018ecc <_tzset_unlocked>
 8017592:	4b8b      	ldr	r3, [pc, #556]	; (80177c0 <mktime+0x2f4>)
 8017594:	681e      	ldr	r6, [r3, #0]
 8017596:	2e00      	cmp	r6, #0
 8017598:	f000 810a 	beq.w	80177b0 <mktime+0x2e4>
 801759c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80175a0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80175a4:	2b01      	cmp	r3, #1
 80175a6:	bfa8      	it	ge
 80175a8:	2301      	movge	r3, #1
 80175aa:	469a      	mov	sl, r3
 80175ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80175b0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80175b4:	4298      	cmp	r0, r3
 80175b6:	d17c      	bne.n	80176b2 <mktime+0x1e6>
 80175b8:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 80175bc:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80175c0:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 80175c4:	f8d8 101c 	ldr.w	r1, [r8, #28]
 80175c8:	1ad6      	subs	r6, r2, r3
 80175ca:	42b7      	cmp	r7, r6
 80175cc:	eba1 0100 	sub.w	r1, r1, r0
 80175d0:	da76      	bge.n	80176c0 <mktime+0x1f4>
 80175d2:	f8d8 2000 	ldr.w	r2, [r8]
 80175d6:	2a00      	cmp	r2, #0
 80175d8:	d076      	beq.n	80176c8 <mktime+0x1fc>
 80175da:	428f      	cmp	r7, r1
 80175dc:	f2c0 80e3 	blt.w	80177a6 <mktime+0x2da>
 80175e0:	42b7      	cmp	r7, r6
 80175e2:	bfac      	ite	ge
 80175e4:	2600      	movge	r6, #0
 80175e6:	2601      	movlt	r6, #1
 80175e8:	f1ba 0f00 	cmp.w	sl, #0
 80175ec:	da72      	bge.n	80176d4 <mktime+0x208>
 80175ee:	2e01      	cmp	r6, #1
 80175f0:	f040 80de 	bne.w	80177b0 <mktime+0x2e4>
 80175f4:	2601      	movs	r6, #1
 80175f6:	f8d8 503c 	ldr.w	r5, [r8, #60]	; 0x3c
 80175fa:	443d      	add	r5, r7
 80175fc:	f001 fc60 	bl	8018ec0 <__tz_unlock>
 8017600:	2307      	movs	r3, #7
 8017602:	3404      	adds	r4, #4
 8017604:	fb94 f3f3 	sdiv	r3, r4, r3
 8017608:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801760c:	1ae4      	subs	r4, r4, r3
 801760e:	bf48      	it	mi
 8017610:	3407      	addmi	r4, #7
 8017612:	f8c9 6020 	str.w	r6, [r9, #32]
 8017616:	f8c9 4018 	str.w	r4, [r9, #24]
 801761a:	4628      	mov	r0, r5
 801761c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017620:	f240 126d 	movw	r2, #365	; 0x16d
 8017624:	e7aa      	b.n	801757c <mktime+0xb0>
 8017626:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801762a:	e7a7      	b.n	801757c <mktime+0xb0>
 801762c:	d01e      	beq.n	801766c <mktime+0x1a0>
 801762e:	2245      	movs	r2, #69	; 0x45
 8017630:	f240 176d 	movw	r7, #365	; 0x16d
 8017634:	2564      	movs	r5, #100	; 0x64
 8017636:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801763a:	429a      	cmp	r2, r3
 801763c:	dc18      	bgt.n	8017670 <mktime+0x1a4>
 801763e:	079d      	lsls	r5, r3, #30
 8017640:	d131      	bne.n	80176a6 <mktime+0x1da>
 8017642:	2164      	movs	r1, #100	; 0x64
 8017644:	fb93 f2f1 	sdiv	r2, r3, r1
 8017648:	fb01 3212 	mls	r2, r1, r2, r3
 801764c:	bb72      	cbnz	r2, 80176ac <mktime+0x1e0>
 801764e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8017652:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8017656:	fb95 f2f1 	sdiv	r2, r5, r1
 801765a:	fb01 5212 	mls	r2, r1, r2, r5
 801765e:	2a00      	cmp	r2, #0
 8017660:	f240 126d 	movw	r2, #365	; 0x16d
 8017664:	bf08      	it	eq
 8017666:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801766a:	1aa4      	subs	r4, r4, r2
 801766c:	461d      	mov	r5, r3
 801766e:	e789      	b.n	8017584 <mktime+0xb8>
 8017670:	0791      	lsls	r1, r2, #30
 8017672:	d112      	bne.n	801769a <mktime+0x1ce>
 8017674:	fb92 f1f5 	sdiv	r1, r2, r5
 8017678:	fb05 2111 	mls	r1, r5, r1, r2
 801767c:	b981      	cbnz	r1, 80176a0 <mktime+0x1d4>
 801767e:	f202 7e6c 	addw	lr, r2, #1900	; 0x76c
 8017682:	fb9e f1f6 	sdiv	r1, lr, r6
 8017686:	fb06 e111 	mls	r1, r6, r1, lr
 801768a:	2900      	cmp	r1, #0
 801768c:	bf14      	ite	ne
 801768e:	4639      	movne	r1, r7
 8017690:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
 8017694:	1a64      	subs	r4, r4, r1
 8017696:	3a01      	subs	r2, #1
 8017698:	e7cf      	b.n	801763a <mktime+0x16e>
 801769a:	f240 116d 	movw	r1, #365	; 0x16d
 801769e:	e7f9      	b.n	8017694 <mktime+0x1c8>
 80176a0:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80176a4:	e7f6      	b.n	8017694 <mktime+0x1c8>
 80176a6:	f240 126d 	movw	r2, #365	; 0x16d
 80176aa:	e7de      	b.n	801766a <mktime+0x19e>
 80176ac:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80176b0:	e7db      	b.n	801766a <mktime+0x19e>
 80176b2:	f001 fb57 	bl	8018d64 <__tzcalc_limits>
 80176b6:	2800      	cmp	r0, #0
 80176b8:	f47f af7e 	bne.w	80175b8 <mktime+0xec>
 80176bc:	4656      	mov	r6, sl
 80176be:	e796      	b.n	80175ee <mktime+0x122>
 80176c0:	1a12      	subs	r2, r2, r0
 80176c2:	4297      	cmp	r7, r2
 80176c4:	dbfa      	blt.n	80176bc <mktime+0x1f0>
 80176c6:	e784      	b.n	80175d2 <mktime+0x106>
 80176c8:	428f      	cmp	r7, r1
 80176ca:	db89      	blt.n	80175e0 <mktime+0x114>
 80176cc:	f1ba 0f00 	cmp.w	sl, #0
 80176d0:	db90      	blt.n	80175f4 <mktime+0x128>
 80176d2:	2601      	movs	r6, #1
 80176d4:	ea8a 0a06 	eor.w	sl, sl, r6
 80176d8:	f1ba 0f01 	cmp.w	sl, #1
 80176dc:	d187      	bne.n	80175ee <mktime+0x122>
 80176de:	1a1b      	subs	r3, r3, r0
 80176e0:	b906      	cbnz	r6, 80176e4 <mktime+0x218>
 80176e2:	425b      	negs	r3, r3
 80176e4:	f8d9 2000 	ldr.w	r2, [r9]
 80176e8:	4648      	mov	r0, r9
 80176ea:	441a      	add	r2, r3
 80176ec:	f8c9 2000 	str.w	r2, [r9]
 80176f0:	441f      	add	r7, r3
 80176f2:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 80176f6:	f7ff fe09 	bl	801730c <validate_structure>
 80176fa:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80176fe:	ebb3 030a 	subs.w	r3, r3, sl
 8017702:	f43f af74 	beq.w	80175ee <mktime+0x122>
 8017706:	2b01      	cmp	r3, #1
 8017708:	dc21      	bgt.n	801774e <mktime+0x282>
 801770a:	1c98      	adds	r0, r3, #2
 801770c:	bfd8      	it	le
 801770e:	2301      	movle	r3, #1
 8017710:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8017714:	441c      	add	r4, r3
 8017716:	189b      	adds	r3, r3, r2
 8017718:	d522      	bpl.n	8017760 <mktime+0x294>
 801771a:	1e6a      	subs	r2, r5, #1
 801771c:	0791      	lsls	r1, r2, #30
 801771e:	d119      	bne.n	8017754 <mktime+0x288>
 8017720:	2164      	movs	r1, #100	; 0x64
 8017722:	fb92 f3f1 	sdiv	r3, r2, r1
 8017726:	fb01 2313 	mls	r3, r1, r3, r2
 801772a:	b9b3      	cbnz	r3, 801775a <mktime+0x28e>
 801772c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8017730:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 8017734:	fb95 f3f2 	sdiv	r3, r5, r2
 8017738:	fb02 5513 	mls	r5, r2, r3, r5
 801773c:	2d00      	cmp	r5, #0
 801773e:	f240 136d 	movw	r3, #365	; 0x16d
 8017742:	bf18      	it	ne
 8017744:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8017748:	f8c9 301c 	str.w	r3, [r9, #28]
 801774c:	e74f      	b.n	80175ee <mktime+0x122>
 801774e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017752:	e7dd      	b.n	8017710 <mktime+0x244>
 8017754:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8017758:	e7f6      	b.n	8017748 <mktime+0x27c>
 801775a:	f240 136d 	movw	r3, #365	; 0x16d
 801775e:	e7f3      	b.n	8017748 <mktime+0x27c>
 8017760:	07aa      	lsls	r2, r5, #30
 8017762:	d117      	bne.n	8017794 <mktime+0x2c8>
 8017764:	2164      	movs	r1, #100	; 0x64
 8017766:	fb95 f2f1 	sdiv	r2, r5, r1
 801776a:	fb01 5212 	mls	r2, r1, r2, r5
 801776e:	b9a2      	cbnz	r2, 801779a <mktime+0x2ce>
 8017770:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8017774:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8017778:	fb95 f2f1 	sdiv	r2, r5, r1
 801777c:	fb01 5512 	mls	r5, r1, r2, r5
 8017780:	2d00      	cmp	r5, #0
 8017782:	f240 126d 	movw	r2, #365	; 0x16d
 8017786:	bf08      	it	eq
 8017788:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801778c:	429a      	cmp	r2, r3
 801778e:	bfd8      	it	le
 8017790:	1a9b      	suble	r3, r3, r2
 8017792:	e7d9      	b.n	8017748 <mktime+0x27c>
 8017794:	f240 126d 	movw	r2, #365	; 0x16d
 8017798:	e7f8      	b.n	801778c <mktime+0x2c0>
 801779a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801779e:	e7f5      	b.n	801778c <mktime+0x2c0>
 80177a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80177a4:	e739      	b.n	801761a <mktime+0x14e>
 80177a6:	f1ba 0f00 	cmp.w	sl, #0
 80177aa:	f04f 0600 	mov.w	r6, #0
 80177ae:	da91      	bge.n	80176d4 <mktime+0x208>
 80177b0:	f8d8 5020 	ldr.w	r5, [r8, #32]
 80177b4:	443d      	add	r5, r7
 80177b6:	e721      	b.n	80175fc <mktime+0x130>
 80177b8:	08023290 	.word	0x08023290
 80177bc:	00015180 	.word	0x00015180
 80177c0:	200014bc 	.word	0x200014bc

080177c4 <__malloc_lock>:
 80177c4:	4801      	ldr	r0, [pc, #4]	; (80177cc <__malloc_lock+0x8>)
 80177c6:	f7ff bb38 	b.w	8016e3a <__retarget_lock_acquire_recursive>
 80177ca:	bf00      	nop
 80177cc:	200014e0 	.word	0x200014e0

080177d0 <__malloc_unlock>:
 80177d0:	4801      	ldr	r0, [pc, #4]	; (80177d8 <__malloc_unlock+0x8>)
 80177d2:	f7ff bb34 	b.w	8016e3e <__retarget_lock_release_recursive>
 80177d6:	bf00      	nop
 80177d8:	200014e0 	.word	0x200014e0

080177dc <_putc_r>:
 80177dc:	b570      	push	{r4, r5, r6, lr}
 80177de:	460d      	mov	r5, r1
 80177e0:	4614      	mov	r4, r2
 80177e2:	4606      	mov	r6, r0
 80177e4:	b118      	cbz	r0, 80177ee <_putc_r+0x12>
 80177e6:	6983      	ldr	r3, [r0, #24]
 80177e8:	b90b      	cbnz	r3, 80177ee <_putc_r+0x12>
 80177ea:	f002 fdfb 	bl	801a3e4 <__sinit>
 80177ee:	4b1c      	ldr	r3, [pc, #112]	; (8017860 <_putc_r+0x84>)
 80177f0:	429c      	cmp	r4, r3
 80177f2:	d124      	bne.n	801783e <_putc_r+0x62>
 80177f4:	6874      	ldr	r4, [r6, #4]
 80177f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80177f8:	07d8      	lsls	r0, r3, #31
 80177fa:	d405      	bmi.n	8017808 <_putc_r+0x2c>
 80177fc:	89a3      	ldrh	r3, [r4, #12]
 80177fe:	0599      	lsls	r1, r3, #22
 8017800:	d402      	bmi.n	8017808 <_putc_r+0x2c>
 8017802:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017804:	f7ff fb19 	bl	8016e3a <__retarget_lock_acquire_recursive>
 8017808:	68a3      	ldr	r3, [r4, #8]
 801780a:	3b01      	subs	r3, #1
 801780c:	2b00      	cmp	r3, #0
 801780e:	60a3      	str	r3, [r4, #8]
 8017810:	da05      	bge.n	801781e <_putc_r+0x42>
 8017812:	69a2      	ldr	r2, [r4, #24]
 8017814:	4293      	cmp	r3, r2
 8017816:	db1c      	blt.n	8017852 <_putc_r+0x76>
 8017818:	b2eb      	uxtb	r3, r5
 801781a:	2b0a      	cmp	r3, #10
 801781c:	d019      	beq.n	8017852 <_putc_r+0x76>
 801781e:	6823      	ldr	r3, [r4, #0]
 8017820:	1c5a      	adds	r2, r3, #1
 8017822:	6022      	str	r2, [r4, #0]
 8017824:	701d      	strb	r5, [r3, #0]
 8017826:	b2ed      	uxtb	r5, r5
 8017828:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801782a:	07da      	lsls	r2, r3, #31
 801782c:	d405      	bmi.n	801783a <_putc_r+0x5e>
 801782e:	89a3      	ldrh	r3, [r4, #12]
 8017830:	059b      	lsls	r3, r3, #22
 8017832:	d402      	bmi.n	801783a <_putc_r+0x5e>
 8017834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017836:	f7ff fb02 	bl	8016e3e <__retarget_lock_release_recursive>
 801783a:	4628      	mov	r0, r5
 801783c:	bd70      	pop	{r4, r5, r6, pc}
 801783e:	4b09      	ldr	r3, [pc, #36]	; (8017864 <_putc_r+0x88>)
 8017840:	429c      	cmp	r4, r3
 8017842:	d101      	bne.n	8017848 <_putc_r+0x6c>
 8017844:	68b4      	ldr	r4, [r6, #8]
 8017846:	e7d6      	b.n	80177f6 <_putc_r+0x1a>
 8017848:	4b07      	ldr	r3, [pc, #28]	; (8017868 <_putc_r+0x8c>)
 801784a:	429c      	cmp	r4, r3
 801784c:	bf08      	it	eq
 801784e:	68f4      	ldreq	r4, [r6, #12]
 8017850:	e7d1      	b.n	80177f6 <_putc_r+0x1a>
 8017852:	4629      	mov	r1, r5
 8017854:	4622      	mov	r2, r4
 8017856:	4630      	mov	r0, r6
 8017858:	f001 fcc0 	bl	80191dc <__swbuf_r>
 801785c:	4605      	mov	r5, r0
 801785e:	e7e3      	b.n	8017828 <_putc_r+0x4c>
 8017860:	080233e4 	.word	0x080233e4
 8017864:	08023404 	.word	0x08023404
 8017868:	080233c4 	.word	0x080233c4

0801786c <realloc>:
 801786c:	4b02      	ldr	r3, [pc, #8]	; (8017878 <realloc+0xc>)
 801786e:	460a      	mov	r2, r1
 8017870:	4601      	mov	r1, r0
 8017872:	6818      	ldr	r0, [r3, #0]
 8017874:	f000 b802 	b.w	801787c <_realloc_r>
 8017878:	2000002c 	.word	0x2000002c

0801787c <_realloc_r>:
 801787c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017880:	4682      	mov	sl, r0
 8017882:	460c      	mov	r4, r1
 8017884:	b929      	cbnz	r1, 8017892 <_realloc_r+0x16>
 8017886:	4611      	mov	r1, r2
 8017888:	b003      	add	sp, #12
 801788a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801788e:	f7ff bae7 	b.w	8016e60 <_malloc_r>
 8017892:	9201      	str	r2, [sp, #4]
 8017894:	f7ff ff96 	bl	80177c4 <__malloc_lock>
 8017898:	9a01      	ldr	r2, [sp, #4]
 801789a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801789e:	f102 080b 	add.w	r8, r2, #11
 80178a2:	f1b8 0f16 	cmp.w	r8, #22
 80178a6:	f1a4 0908 	sub.w	r9, r4, #8
 80178aa:	f025 0603 	bic.w	r6, r5, #3
 80178ae:	d90a      	bls.n	80178c6 <_realloc_r+0x4a>
 80178b0:	f038 0807 	bics.w	r8, r8, #7
 80178b4:	d509      	bpl.n	80178ca <_realloc_r+0x4e>
 80178b6:	230c      	movs	r3, #12
 80178b8:	2700      	movs	r7, #0
 80178ba:	f8ca 3000 	str.w	r3, [sl]
 80178be:	4638      	mov	r0, r7
 80178c0:	b003      	add	sp, #12
 80178c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178c6:	f04f 0810 	mov.w	r8, #16
 80178ca:	4590      	cmp	r8, r2
 80178cc:	d3f3      	bcc.n	80178b6 <_realloc_r+0x3a>
 80178ce:	45b0      	cmp	r8, r6
 80178d0:	f340 8148 	ble.w	8017b64 <_realloc_r+0x2e8>
 80178d4:	4ba9      	ldr	r3, [pc, #676]	; (8017b7c <_realloc_r+0x300>)
 80178d6:	eb09 0106 	add.w	r1, r9, r6
 80178da:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80178de:	469b      	mov	fp, r3
 80178e0:	4571      	cmp	r1, lr
 80178e2:	684b      	ldr	r3, [r1, #4]
 80178e4:	d005      	beq.n	80178f2 <_realloc_r+0x76>
 80178e6:	f023 0001 	bic.w	r0, r3, #1
 80178ea:	4408      	add	r0, r1
 80178ec:	6840      	ldr	r0, [r0, #4]
 80178ee:	07c7      	lsls	r7, r0, #31
 80178f0:	d447      	bmi.n	8017982 <_realloc_r+0x106>
 80178f2:	f023 0303 	bic.w	r3, r3, #3
 80178f6:	4571      	cmp	r1, lr
 80178f8:	eb06 0703 	add.w	r7, r6, r3
 80178fc:	d119      	bne.n	8017932 <_realloc_r+0xb6>
 80178fe:	f108 0010 	add.w	r0, r8, #16
 8017902:	4287      	cmp	r7, r0
 8017904:	db3f      	blt.n	8017986 <_realloc_r+0x10a>
 8017906:	eba7 0708 	sub.w	r7, r7, r8
 801790a:	eb09 0308 	add.w	r3, r9, r8
 801790e:	f047 0701 	orr.w	r7, r7, #1
 8017912:	f8cb 3008 	str.w	r3, [fp, #8]
 8017916:	605f      	str	r7, [r3, #4]
 8017918:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801791c:	4650      	mov	r0, sl
 801791e:	f003 0301 	and.w	r3, r3, #1
 8017922:	ea43 0308 	orr.w	r3, r3, r8
 8017926:	f844 3c04 	str.w	r3, [r4, #-4]
 801792a:	f7ff ff51 	bl	80177d0 <__malloc_unlock>
 801792e:	4627      	mov	r7, r4
 8017930:	e7c5      	b.n	80178be <_realloc_r+0x42>
 8017932:	45b8      	cmp	r8, r7
 8017934:	dc27      	bgt.n	8017986 <_realloc_r+0x10a>
 8017936:	68cb      	ldr	r3, [r1, #12]
 8017938:	688a      	ldr	r2, [r1, #8]
 801793a:	60d3      	str	r3, [r2, #12]
 801793c:	609a      	str	r2, [r3, #8]
 801793e:	eba7 0008 	sub.w	r0, r7, r8
 8017942:	280f      	cmp	r0, #15
 8017944:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017948:	eb09 0207 	add.w	r2, r9, r7
 801794c:	f240 810c 	bls.w	8017b68 <_realloc_r+0x2ec>
 8017950:	f003 0301 	and.w	r3, r3, #1
 8017954:	eb09 0108 	add.w	r1, r9, r8
 8017958:	ea43 0308 	orr.w	r3, r3, r8
 801795c:	f040 0001 	orr.w	r0, r0, #1
 8017960:	f8c9 3004 	str.w	r3, [r9, #4]
 8017964:	6048      	str	r0, [r1, #4]
 8017966:	6853      	ldr	r3, [r2, #4]
 8017968:	3108      	adds	r1, #8
 801796a:	f043 0301 	orr.w	r3, r3, #1
 801796e:	6053      	str	r3, [r2, #4]
 8017970:	4650      	mov	r0, sl
 8017972:	f002 fe0f 	bl	801a594 <_free_r>
 8017976:	4650      	mov	r0, sl
 8017978:	f7ff ff2a 	bl	80177d0 <__malloc_unlock>
 801797c:	f109 0708 	add.w	r7, r9, #8
 8017980:	e79d      	b.n	80178be <_realloc_r+0x42>
 8017982:	2300      	movs	r3, #0
 8017984:	4619      	mov	r1, r3
 8017986:	07e8      	lsls	r0, r5, #31
 8017988:	f100 8085 	bmi.w	8017a96 <_realloc_r+0x21a>
 801798c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8017990:	eba9 0505 	sub.w	r5, r9, r5
 8017994:	6868      	ldr	r0, [r5, #4]
 8017996:	f020 0003 	bic.w	r0, r0, #3
 801799a:	4430      	add	r0, r6
 801799c:	2900      	cmp	r1, #0
 801799e:	d077      	beq.n	8017a90 <_realloc_r+0x214>
 80179a0:	4571      	cmp	r1, lr
 80179a2:	d151      	bne.n	8017a48 <_realloc_r+0x1cc>
 80179a4:	4403      	add	r3, r0
 80179a6:	f108 0110 	add.w	r1, r8, #16
 80179aa:	428b      	cmp	r3, r1
 80179ac:	db70      	blt.n	8017a90 <_realloc_r+0x214>
 80179ae:	462f      	mov	r7, r5
 80179b0:	68ea      	ldr	r2, [r5, #12]
 80179b2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80179b6:	60ca      	str	r2, [r1, #12]
 80179b8:	6091      	str	r1, [r2, #8]
 80179ba:	1f32      	subs	r2, r6, #4
 80179bc:	2a24      	cmp	r2, #36	; 0x24
 80179be:	d83c      	bhi.n	8017a3a <_realloc_r+0x1be>
 80179c0:	2a13      	cmp	r2, #19
 80179c2:	d937      	bls.n	8017a34 <_realloc_r+0x1b8>
 80179c4:	6821      	ldr	r1, [r4, #0]
 80179c6:	2a1b      	cmp	r2, #27
 80179c8:	60a9      	str	r1, [r5, #8]
 80179ca:	6861      	ldr	r1, [r4, #4]
 80179cc:	60e9      	str	r1, [r5, #12]
 80179ce:	d81c      	bhi.n	8017a0a <_realloc_r+0x18e>
 80179d0:	f105 0210 	add.w	r2, r5, #16
 80179d4:	f104 0108 	add.w	r1, r4, #8
 80179d8:	6808      	ldr	r0, [r1, #0]
 80179da:	6010      	str	r0, [r2, #0]
 80179dc:	6848      	ldr	r0, [r1, #4]
 80179de:	6050      	str	r0, [r2, #4]
 80179e0:	6889      	ldr	r1, [r1, #8]
 80179e2:	6091      	str	r1, [r2, #8]
 80179e4:	eba3 0308 	sub.w	r3, r3, r8
 80179e8:	eb05 0208 	add.w	r2, r5, r8
 80179ec:	f043 0301 	orr.w	r3, r3, #1
 80179f0:	f8cb 2008 	str.w	r2, [fp, #8]
 80179f4:	6053      	str	r3, [r2, #4]
 80179f6:	686b      	ldr	r3, [r5, #4]
 80179f8:	f003 0301 	and.w	r3, r3, #1
 80179fc:	ea43 0308 	orr.w	r3, r3, r8
 8017a00:	606b      	str	r3, [r5, #4]
 8017a02:	4650      	mov	r0, sl
 8017a04:	f7ff fee4 	bl	80177d0 <__malloc_unlock>
 8017a08:	e759      	b.n	80178be <_realloc_r+0x42>
 8017a0a:	68a1      	ldr	r1, [r4, #8]
 8017a0c:	2a24      	cmp	r2, #36	; 0x24
 8017a0e:	6129      	str	r1, [r5, #16]
 8017a10:	68e1      	ldr	r1, [r4, #12]
 8017a12:	bf18      	it	ne
 8017a14:	f105 0218 	addne.w	r2, r5, #24
 8017a18:	6169      	str	r1, [r5, #20]
 8017a1a:	bf09      	itett	eq
 8017a1c:	6922      	ldreq	r2, [r4, #16]
 8017a1e:	f104 0110 	addne.w	r1, r4, #16
 8017a22:	61aa      	streq	r2, [r5, #24]
 8017a24:	6960      	ldreq	r0, [r4, #20]
 8017a26:	bf02      	ittt	eq
 8017a28:	f105 0220 	addeq.w	r2, r5, #32
 8017a2c:	f104 0118 	addeq.w	r1, r4, #24
 8017a30:	61e8      	streq	r0, [r5, #28]
 8017a32:	e7d1      	b.n	80179d8 <_realloc_r+0x15c>
 8017a34:	463a      	mov	r2, r7
 8017a36:	4621      	mov	r1, r4
 8017a38:	e7ce      	b.n	80179d8 <_realloc_r+0x15c>
 8017a3a:	4621      	mov	r1, r4
 8017a3c:	4638      	mov	r0, r7
 8017a3e:	9301      	str	r3, [sp, #4]
 8017a40:	f7ff fc42 	bl	80172c8 <memmove>
 8017a44:	9b01      	ldr	r3, [sp, #4]
 8017a46:	e7cd      	b.n	80179e4 <_realloc_r+0x168>
 8017a48:	18c7      	adds	r7, r0, r3
 8017a4a:	45b8      	cmp	r8, r7
 8017a4c:	dc20      	bgt.n	8017a90 <_realloc_r+0x214>
 8017a4e:	68cb      	ldr	r3, [r1, #12]
 8017a50:	688a      	ldr	r2, [r1, #8]
 8017a52:	60d3      	str	r3, [r2, #12]
 8017a54:	609a      	str	r2, [r3, #8]
 8017a56:	4628      	mov	r0, r5
 8017a58:	68eb      	ldr	r3, [r5, #12]
 8017a5a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8017a5e:	60d3      	str	r3, [r2, #12]
 8017a60:	609a      	str	r2, [r3, #8]
 8017a62:	1f32      	subs	r2, r6, #4
 8017a64:	2a24      	cmp	r2, #36	; 0x24
 8017a66:	d843      	bhi.n	8017af0 <_realloc_r+0x274>
 8017a68:	2a13      	cmp	r2, #19
 8017a6a:	d93f      	bls.n	8017aec <_realloc_r+0x270>
 8017a6c:	6823      	ldr	r3, [r4, #0]
 8017a6e:	2a1b      	cmp	r2, #27
 8017a70:	60ab      	str	r3, [r5, #8]
 8017a72:	6863      	ldr	r3, [r4, #4]
 8017a74:	60eb      	str	r3, [r5, #12]
 8017a76:	d824      	bhi.n	8017ac2 <_realloc_r+0x246>
 8017a78:	f105 0010 	add.w	r0, r5, #16
 8017a7c:	f104 0308 	add.w	r3, r4, #8
 8017a80:	681a      	ldr	r2, [r3, #0]
 8017a82:	6002      	str	r2, [r0, #0]
 8017a84:	685a      	ldr	r2, [r3, #4]
 8017a86:	6042      	str	r2, [r0, #4]
 8017a88:	689b      	ldr	r3, [r3, #8]
 8017a8a:	6083      	str	r3, [r0, #8]
 8017a8c:	46a9      	mov	r9, r5
 8017a8e:	e756      	b.n	801793e <_realloc_r+0xc2>
 8017a90:	4580      	cmp	r8, r0
 8017a92:	4607      	mov	r7, r0
 8017a94:	dddf      	ble.n	8017a56 <_realloc_r+0x1da>
 8017a96:	4611      	mov	r1, r2
 8017a98:	4650      	mov	r0, sl
 8017a9a:	f7ff f9e1 	bl	8016e60 <_malloc_r>
 8017a9e:	4607      	mov	r7, r0
 8017aa0:	2800      	cmp	r0, #0
 8017aa2:	d0ae      	beq.n	8017a02 <_realloc_r+0x186>
 8017aa4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017aa8:	f1a0 0208 	sub.w	r2, r0, #8
 8017aac:	f023 0301 	bic.w	r3, r3, #1
 8017ab0:	444b      	add	r3, r9
 8017ab2:	429a      	cmp	r2, r3
 8017ab4:	d120      	bne.n	8017af8 <_realloc_r+0x27c>
 8017ab6:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8017aba:	f027 0703 	bic.w	r7, r7, #3
 8017abe:	4437      	add	r7, r6
 8017ac0:	e73d      	b.n	801793e <_realloc_r+0xc2>
 8017ac2:	68a3      	ldr	r3, [r4, #8]
 8017ac4:	2a24      	cmp	r2, #36	; 0x24
 8017ac6:	612b      	str	r3, [r5, #16]
 8017ac8:	68e3      	ldr	r3, [r4, #12]
 8017aca:	bf18      	it	ne
 8017acc:	f105 0018 	addne.w	r0, r5, #24
 8017ad0:	616b      	str	r3, [r5, #20]
 8017ad2:	bf09      	itett	eq
 8017ad4:	6923      	ldreq	r3, [r4, #16]
 8017ad6:	f104 0310 	addne.w	r3, r4, #16
 8017ada:	61ab      	streq	r3, [r5, #24]
 8017adc:	6962      	ldreq	r2, [r4, #20]
 8017ade:	bf02      	ittt	eq
 8017ae0:	f105 0020 	addeq.w	r0, r5, #32
 8017ae4:	f104 0318 	addeq.w	r3, r4, #24
 8017ae8:	61ea      	streq	r2, [r5, #28]
 8017aea:	e7c9      	b.n	8017a80 <_realloc_r+0x204>
 8017aec:	4623      	mov	r3, r4
 8017aee:	e7c7      	b.n	8017a80 <_realloc_r+0x204>
 8017af0:	4621      	mov	r1, r4
 8017af2:	f7ff fbe9 	bl	80172c8 <memmove>
 8017af6:	e7c9      	b.n	8017a8c <_realloc_r+0x210>
 8017af8:	1f32      	subs	r2, r6, #4
 8017afa:	2a24      	cmp	r2, #36	; 0x24
 8017afc:	d82e      	bhi.n	8017b5c <_realloc_r+0x2e0>
 8017afe:	2a13      	cmp	r2, #19
 8017b00:	d929      	bls.n	8017b56 <_realloc_r+0x2da>
 8017b02:	6823      	ldr	r3, [r4, #0]
 8017b04:	2a1b      	cmp	r2, #27
 8017b06:	6003      	str	r3, [r0, #0]
 8017b08:	6863      	ldr	r3, [r4, #4]
 8017b0a:	6043      	str	r3, [r0, #4]
 8017b0c:	d80e      	bhi.n	8017b2c <_realloc_r+0x2b0>
 8017b0e:	f100 0308 	add.w	r3, r0, #8
 8017b12:	f104 0208 	add.w	r2, r4, #8
 8017b16:	6811      	ldr	r1, [r2, #0]
 8017b18:	6019      	str	r1, [r3, #0]
 8017b1a:	6851      	ldr	r1, [r2, #4]
 8017b1c:	6059      	str	r1, [r3, #4]
 8017b1e:	6892      	ldr	r2, [r2, #8]
 8017b20:	609a      	str	r2, [r3, #8]
 8017b22:	4621      	mov	r1, r4
 8017b24:	4650      	mov	r0, sl
 8017b26:	f002 fd35 	bl	801a594 <_free_r>
 8017b2a:	e76a      	b.n	8017a02 <_realloc_r+0x186>
 8017b2c:	68a3      	ldr	r3, [r4, #8]
 8017b2e:	2a24      	cmp	r2, #36	; 0x24
 8017b30:	6083      	str	r3, [r0, #8]
 8017b32:	68e3      	ldr	r3, [r4, #12]
 8017b34:	bf18      	it	ne
 8017b36:	f104 0210 	addne.w	r2, r4, #16
 8017b3a:	60c3      	str	r3, [r0, #12]
 8017b3c:	bf09      	itett	eq
 8017b3e:	6923      	ldreq	r3, [r4, #16]
 8017b40:	f100 0310 	addne.w	r3, r0, #16
 8017b44:	6103      	streq	r3, [r0, #16]
 8017b46:	6961      	ldreq	r1, [r4, #20]
 8017b48:	bf02      	ittt	eq
 8017b4a:	f100 0318 	addeq.w	r3, r0, #24
 8017b4e:	f104 0218 	addeq.w	r2, r4, #24
 8017b52:	6141      	streq	r1, [r0, #20]
 8017b54:	e7df      	b.n	8017b16 <_realloc_r+0x29a>
 8017b56:	4603      	mov	r3, r0
 8017b58:	4622      	mov	r2, r4
 8017b5a:	e7dc      	b.n	8017b16 <_realloc_r+0x29a>
 8017b5c:	4621      	mov	r1, r4
 8017b5e:	f7ff fbb3 	bl	80172c8 <memmove>
 8017b62:	e7de      	b.n	8017b22 <_realloc_r+0x2a6>
 8017b64:	4637      	mov	r7, r6
 8017b66:	e6ea      	b.n	801793e <_realloc_r+0xc2>
 8017b68:	f003 0301 	and.w	r3, r3, #1
 8017b6c:	431f      	orrs	r7, r3
 8017b6e:	f8c9 7004 	str.w	r7, [r9, #4]
 8017b72:	6853      	ldr	r3, [r2, #4]
 8017b74:	f043 0301 	orr.w	r3, r3, #1
 8017b78:	6053      	str	r3, [r2, #4]
 8017b7a:	e6fc      	b.n	8017976 <_realloc_r+0xfa>
 8017b7c:	20000120 	.word	0x20000120

08017b80 <_sbrk_r>:
 8017b80:	b538      	push	{r3, r4, r5, lr}
 8017b82:	2300      	movs	r3, #0
 8017b84:	4c05      	ldr	r4, [pc, #20]	; (8017b9c <_sbrk_r+0x1c>)
 8017b86:	4605      	mov	r5, r0
 8017b88:	4608      	mov	r0, r1
 8017b8a:	6023      	str	r3, [r4, #0]
 8017b8c:	f7fd fae4 	bl	8015158 <_sbrk>
 8017b90:	1c43      	adds	r3, r0, #1
 8017b92:	d102      	bne.n	8017b9a <_sbrk_r+0x1a>
 8017b94:	6823      	ldr	r3, [r4, #0]
 8017b96:	b103      	cbz	r3, 8017b9a <_sbrk_r+0x1a>
 8017b98:	602b      	str	r3, [r5, #0]
 8017b9a:	bd38      	pop	{r3, r4, r5, pc}
 8017b9c:	200014e8 	.word	0x200014e8

08017ba0 <_raise_r>:
 8017ba0:	291f      	cmp	r1, #31
 8017ba2:	b538      	push	{r3, r4, r5, lr}
 8017ba4:	4604      	mov	r4, r0
 8017ba6:	460d      	mov	r5, r1
 8017ba8:	d904      	bls.n	8017bb4 <_raise_r+0x14>
 8017baa:	2316      	movs	r3, #22
 8017bac:	6003      	str	r3, [r0, #0]
 8017bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017bb2:	bd38      	pop	{r3, r4, r5, pc}
 8017bb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017bb6:	b112      	cbz	r2, 8017bbe <_raise_r+0x1e>
 8017bb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017bbc:	b94b      	cbnz	r3, 8017bd2 <_raise_r+0x32>
 8017bbe:	4620      	mov	r0, r4
 8017bc0:	f000 f830 	bl	8017c24 <_getpid_r>
 8017bc4:	462a      	mov	r2, r5
 8017bc6:	4601      	mov	r1, r0
 8017bc8:	4620      	mov	r0, r4
 8017bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017bce:	f000 b817 	b.w	8017c00 <_kill_r>
 8017bd2:	2b01      	cmp	r3, #1
 8017bd4:	d00a      	beq.n	8017bec <_raise_r+0x4c>
 8017bd6:	1c59      	adds	r1, r3, #1
 8017bd8:	d103      	bne.n	8017be2 <_raise_r+0x42>
 8017bda:	2316      	movs	r3, #22
 8017bdc:	6003      	str	r3, [r0, #0]
 8017bde:	2001      	movs	r0, #1
 8017be0:	bd38      	pop	{r3, r4, r5, pc}
 8017be2:	2400      	movs	r4, #0
 8017be4:	4628      	mov	r0, r5
 8017be6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017bea:	4798      	blx	r3
 8017bec:	2000      	movs	r0, #0
 8017bee:	bd38      	pop	{r3, r4, r5, pc}

08017bf0 <raise>:
 8017bf0:	4b02      	ldr	r3, [pc, #8]	; (8017bfc <raise+0xc>)
 8017bf2:	4601      	mov	r1, r0
 8017bf4:	6818      	ldr	r0, [r3, #0]
 8017bf6:	f7ff bfd3 	b.w	8017ba0 <_raise_r>
 8017bfa:	bf00      	nop
 8017bfc:	2000002c 	.word	0x2000002c

08017c00 <_kill_r>:
 8017c00:	b538      	push	{r3, r4, r5, lr}
 8017c02:	2300      	movs	r3, #0
 8017c04:	4c06      	ldr	r4, [pc, #24]	; (8017c20 <_kill_r+0x20>)
 8017c06:	4605      	mov	r5, r0
 8017c08:	4608      	mov	r0, r1
 8017c0a:	4611      	mov	r1, r2
 8017c0c:	6023      	str	r3, [r4, #0]
 8017c0e:	f7fd fa79 	bl	8015104 <_kill>
 8017c12:	1c43      	adds	r3, r0, #1
 8017c14:	d102      	bne.n	8017c1c <_kill_r+0x1c>
 8017c16:	6823      	ldr	r3, [r4, #0]
 8017c18:	b103      	cbz	r3, 8017c1c <_kill_r+0x1c>
 8017c1a:	602b      	str	r3, [r5, #0]
 8017c1c:	bd38      	pop	{r3, r4, r5, pc}
 8017c1e:	bf00      	nop
 8017c20:	200014e8 	.word	0x200014e8

08017c24 <_getpid_r>:
 8017c24:	f7fd ba6c 	b.w	8015100 <_getpid>

08017c28 <snprintf>:
 8017c28:	b40c      	push	{r2, r3}
 8017c2a:	b530      	push	{r4, r5, lr}
 8017c2c:	4b17      	ldr	r3, [pc, #92]	; (8017c8c <snprintf+0x64>)
 8017c2e:	1e0c      	subs	r4, r1, #0
 8017c30:	b09d      	sub	sp, #116	; 0x74
 8017c32:	681d      	ldr	r5, [r3, #0]
 8017c34:	da08      	bge.n	8017c48 <snprintf+0x20>
 8017c36:	238b      	movs	r3, #139	; 0x8b
 8017c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c3c:	602b      	str	r3, [r5, #0]
 8017c3e:	b01d      	add	sp, #116	; 0x74
 8017c40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017c44:	b002      	add	sp, #8
 8017c46:	4770      	bx	lr
 8017c48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017c4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017c50:	bf0c      	ite	eq
 8017c52:	4623      	moveq	r3, r4
 8017c54:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8017c58:	9304      	str	r3, [sp, #16]
 8017c5a:	9307      	str	r3, [sp, #28]
 8017c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017c60:	9002      	str	r0, [sp, #8]
 8017c62:	9006      	str	r0, [sp, #24]
 8017c64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017c68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017c6a:	ab21      	add	r3, sp, #132	; 0x84
 8017c6c:	a902      	add	r1, sp, #8
 8017c6e:	4628      	mov	r0, r5
 8017c70:	9301      	str	r3, [sp, #4]
 8017c72:	f000 f89d 	bl	8017db0 <_svfprintf_r>
 8017c76:	1c43      	adds	r3, r0, #1
 8017c78:	bfbc      	itt	lt
 8017c7a:	238b      	movlt	r3, #139	; 0x8b
 8017c7c:	602b      	strlt	r3, [r5, #0]
 8017c7e:	2c00      	cmp	r4, #0
 8017c80:	d0dd      	beq.n	8017c3e <snprintf+0x16>
 8017c82:	2200      	movs	r2, #0
 8017c84:	9b02      	ldr	r3, [sp, #8]
 8017c86:	701a      	strb	r2, [r3, #0]
 8017c88:	e7d9      	b.n	8017c3e <snprintf+0x16>
 8017c8a:	bf00      	nop
 8017c8c:	2000002c 	.word	0x2000002c

08017c90 <sprintf>:
 8017c90:	b40e      	push	{r1, r2, r3}
 8017c92:	f44f 7102 	mov.w	r1, #520	; 0x208
 8017c96:	b500      	push	{lr}
 8017c98:	b09c      	sub	sp, #112	; 0x70
 8017c9a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017c9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017ca2:	9104      	str	r1, [sp, #16]
 8017ca4:	9107      	str	r1, [sp, #28]
 8017ca6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017caa:	ab1d      	add	r3, sp, #116	; 0x74
 8017cac:	9002      	str	r0, [sp, #8]
 8017cae:	9006      	str	r0, [sp, #24]
 8017cb0:	4808      	ldr	r0, [pc, #32]	; (8017cd4 <sprintf+0x44>)
 8017cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8017cb6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017cba:	6800      	ldr	r0, [r0, #0]
 8017cbc:	a902      	add	r1, sp, #8
 8017cbe:	9301      	str	r3, [sp, #4]
 8017cc0:	f000 f876 	bl	8017db0 <_svfprintf_r>
 8017cc4:	2200      	movs	r2, #0
 8017cc6:	9b02      	ldr	r3, [sp, #8]
 8017cc8:	701a      	strb	r2, [r3, #0]
 8017cca:	b01c      	add	sp, #112	; 0x70
 8017ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017cd0:	b003      	add	sp, #12
 8017cd2:	4770      	bx	lr
 8017cd4:	2000002c 	.word	0x2000002c

08017cd8 <__sread>:
 8017cd8:	b510      	push	{r4, lr}
 8017cda:	460c      	mov	r4, r1
 8017cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ce0:	f003 f9e0 	bl	801b0a4 <_read_r>
 8017ce4:	2800      	cmp	r0, #0
 8017ce6:	bfab      	itete	ge
 8017ce8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017cea:	89a3      	ldrhlt	r3, [r4, #12]
 8017cec:	181b      	addge	r3, r3, r0
 8017cee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017cf2:	bfac      	ite	ge
 8017cf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8017cf6:	81a3      	strhlt	r3, [r4, #12]
 8017cf8:	bd10      	pop	{r4, pc}

08017cfa <__seofread>:
 8017cfa:	2000      	movs	r0, #0
 8017cfc:	4770      	bx	lr

08017cfe <__swrite>:
 8017cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d02:	461f      	mov	r7, r3
 8017d04:	898b      	ldrh	r3, [r1, #12]
 8017d06:	4605      	mov	r5, r0
 8017d08:	05db      	lsls	r3, r3, #23
 8017d0a:	460c      	mov	r4, r1
 8017d0c:	4616      	mov	r6, r2
 8017d0e:	d505      	bpl.n	8017d1c <__swrite+0x1e>
 8017d10:	2302      	movs	r3, #2
 8017d12:	2200      	movs	r2, #0
 8017d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d18:	f002 fe36 	bl	801a988 <_lseek_r>
 8017d1c:	89a3      	ldrh	r3, [r4, #12]
 8017d1e:	4632      	mov	r2, r6
 8017d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017d24:	81a3      	strh	r3, [r4, #12]
 8017d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d2a:	463b      	mov	r3, r7
 8017d2c:	4628      	mov	r0, r5
 8017d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d32:	f001 bab1 	b.w	8019298 <_write_r>

08017d36 <__sseek>:
 8017d36:	b510      	push	{r4, lr}
 8017d38:	460c      	mov	r4, r1
 8017d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d3e:	f002 fe23 	bl	801a988 <_lseek_r>
 8017d42:	1c43      	adds	r3, r0, #1
 8017d44:	89a3      	ldrh	r3, [r4, #12]
 8017d46:	bf15      	itete	ne
 8017d48:	6560      	strne	r0, [r4, #84]	; 0x54
 8017d4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017d4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017d52:	81a3      	strheq	r3, [r4, #12]
 8017d54:	bf18      	it	ne
 8017d56:	81a3      	strhne	r3, [r4, #12]
 8017d58:	bd10      	pop	{r4, pc}

08017d5a <__sclose>:
 8017d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d5e:	f001 bb95 	b.w	801948c <_close_r>

08017d62 <strncmp>:
 8017d62:	b510      	push	{r4, lr}
 8017d64:	b16a      	cbz	r2, 8017d82 <strncmp+0x20>
 8017d66:	3901      	subs	r1, #1
 8017d68:	1884      	adds	r4, r0, r2
 8017d6a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017d6e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017d72:	4293      	cmp	r3, r2
 8017d74:	d103      	bne.n	8017d7e <strncmp+0x1c>
 8017d76:	42a0      	cmp	r0, r4
 8017d78:	d001      	beq.n	8017d7e <strncmp+0x1c>
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d1f5      	bne.n	8017d6a <strncmp+0x8>
 8017d7e:	1a98      	subs	r0, r3, r2
 8017d80:	bd10      	pop	{r4, pc}
 8017d82:	4610      	mov	r0, r2
 8017d84:	bd10      	pop	{r4, pc}

08017d86 <strncpy>:
 8017d86:	b570      	push	{r4, r5, r6, lr}
 8017d88:	4604      	mov	r4, r0
 8017d8a:	b902      	cbnz	r2, 8017d8e <strncpy+0x8>
 8017d8c:	bd70      	pop	{r4, r5, r6, pc}
 8017d8e:	4623      	mov	r3, r4
 8017d90:	f811 5b01 	ldrb.w	r5, [r1], #1
 8017d94:	1e56      	subs	r6, r2, #1
 8017d96:	f803 5b01 	strb.w	r5, [r3], #1
 8017d9a:	b91d      	cbnz	r5, 8017da4 <strncpy+0x1e>
 8017d9c:	4414      	add	r4, r2
 8017d9e:	42a3      	cmp	r3, r4
 8017da0:	d103      	bne.n	8017daa <strncpy+0x24>
 8017da2:	bd70      	pop	{r4, r5, r6, pc}
 8017da4:	461c      	mov	r4, r3
 8017da6:	4632      	mov	r2, r6
 8017da8:	e7ef      	b.n	8017d8a <strncpy+0x4>
 8017daa:	f803 5b01 	strb.w	r5, [r3], #1
 8017dae:	e7f6      	b.n	8017d9e <strncpy+0x18>

08017db0 <_svfprintf_r>:
 8017db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017db4:	b0bf      	sub	sp, #252	; 0xfc
 8017db6:	4689      	mov	r9, r1
 8017db8:	4615      	mov	r5, r2
 8017dba:	461f      	mov	r7, r3
 8017dbc:	4682      	mov	sl, r0
 8017dbe:	f002 fdd5 	bl	801a96c <_localeconv_r>
 8017dc2:	6803      	ldr	r3, [r0, #0]
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	9311      	str	r3, [sp, #68]	; 0x44
 8017dc8:	f7ee fd86 	bl	80068d8 <strlen>
 8017dcc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8017dd0:	900a      	str	r0, [sp, #40]	; 0x28
 8017dd2:	061b      	lsls	r3, r3, #24
 8017dd4:	d518      	bpl.n	8017e08 <_svfprintf_r+0x58>
 8017dd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017dda:	b9ab      	cbnz	r3, 8017e08 <_svfprintf_r+0x58>
 8017ddc:	2140      	movs	r1, #64	; 0x40
 8017dde:	4650      	mov	r0, sl
 8017de0:	f7ff f83e 	bl	8016e60 <_malloc_r>
 8017de4:	f8c9 0000 	str.w	r0, [r9]
 8017de8:	f8c9 0010 	str.w	r0, [r9, #16]
 8017dec:	b948      	cbnz	r0, 8017e02 <_svfprintf_r+0x52>
 8017dee:	230c      	movs	r3, #12
 8017df0:	f8ca 3000 	str.w	r3, [sl]
 8017df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017df8:	930b      	str	r3, [sp, #44]	; 0x2c
 8017dfa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017dfc:	b03f      	add	sp, #252	; 0xfc
 8017dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e02:	2340      	movs	r3, #64	; 0x40
 8017e04:	f8c9 3014 	str.w	r3, [r9, #20]
 8017e08:	2300      	movs	r3, #0
 8017e0a:	ac2e      	add	r4, sp, #184	; 0xb8
 8017e0c:	9421      	str	r4, [sp, #132]	; 0x84
 8017e0e:	9323      	str	r3, [sp, #140]	; 0x8c
 8017e10:	9322      	str	r3, [sp, #136]	; 0x88
 8017e12:	9509      	str	r5, [sp, #36]	; 0x24
 8017e14:	9307      	str	r3, [sp, #28]
 8017e16:	930d      	str	r3, [sp, #52]	; 0x34
 8017e18:	930e      	str	r3, [sp, #56]	; 0x38
 8017e1a:	9315      	str	r3, [sp, #84]	; 0x54
 8017e1c:	9314      	str	r3, [sp, #80]	; 0x50
 8017e1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017e20:	9312      	str	r3, [sp, #72]	; 0x48
 8017e22:	9313      	str	r3, [sp, #76]	; 0x4c
 8017e24:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017e26:	462b      	mov	r3, r5
 8017e28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e2c:	b112      	cbz	r2, 8017e34 <_svfprintf_r+0x84>
 8017e2e:	2a25      	cmp	r2, #37	; 0x25
 8017e30:	f040 8083 	bne.w	8017f3a <_svfprintf_r+0x18a>
 8017e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e36:	1aee      	subs	r6, r5, r3
 8017e38:	d00d      	beq.n	8017e56 <_svfprintf_r+0xa6>
 8017e3a:	e884 0048 	stmia.w	r4, {r3, r6}
 8017e3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017e40:	4433      	add	r3, r6
 8017e42:	9323      	str	r3, [sp, #140]	; 0x8c
 8017e44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017e46:	3301      	adds	r3, #1
 8017e48:	2b07      	cmp	r3, #7
 8017e4a:	9322      	str	r3, [sp, #136]	; 0x88
 8017e4c:	dc77      	bgt.n	8017f3e <_svfprintf_r+0x18e>
 8017e4e:	3408      	adds	r4, #8
 8017e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e52:	4433      	add	r3, r6
 8017e54:	930b      	str	r3, [sp, #44]	; 0x2c
 8017e56:	782b      	ldrb	r3, [r5, #0]
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	f000 8725 	beq.w	8018ca8 <_svfprintf_r+0xef8>
 8017e5e:	2300      	movs	r3, #0
 8017e60:	1c69      	adds	r1, r5, #1
 8017e62:	461a      	mov	r2, r3
 8017e64:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8017e68:	461d      	mov	r5, r3
 8017e6a:	200a      	movs	r0, #10
 8017e6c:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8017e70:	930c      	str	r3, [sp, #48]	; 0x30
 8017e72:	1c4e      	adds	r6, r1, #1
 8017e74:	7809      	ldrb	r1, [r1, #0]
 8017e76:	9609      	str	r6, [sp, #36]	; 0x24
 8017e78:	9106      	str	r1, [sp, #24]
 8017e7a:	9906      	ldr	r1, [sp, #24]
 8017e7c:	3920      	subs	r1, #32
 8017e7e:	2958      	cmp	r1, #88	; 0x58
 8017e80:	f200 8414 	bhi.w	80186ac <_svfprintf_r+0x8fc>
 8017e84:	e8df f011 	tbh	[pc, r1, lsl #1]
 8017e88:	041200a5 	.word	0x041200a5
 8017e8c:	00aa0412 	.word	0x00aa0412
 8017e90:	04120412 	.word	0x04120412
 8017e94:	04120412 	.word	0x04120412
 8017e98:	04120412 	.word	0x04120412
 8017e9c:	006500ad 	.word	0x006500ad
 8017ea0:	00b50412 	.word	0x00b50412
 8017ea4:	041200b8 	.word	0x041200b8
 8017ea8:	00d800d5 	.word	0x00d800d5
 8017eac:	00d800d8 	.word	0x00d800d8
 8017eb0:	00d800d8 	.word	0x00d800d8
 8017eb4:	00d800d8 	.word	0x00d800d8
 8017eb8:	00d800d8 	.word	0x00d800d8
 8017ebc:	04120412 	.word	0x04120412
 8017ec0:	04120412 	.word	0x04120412
 8017ec4:	04120412 	.word	0x04120412
 8017ec8:	04120412 	.word	0x04120412
 8017ecc:	04120412 	.word	0x04120412
 8017ed0:	0122010c 	.word	0x0122010c
 8017ed4:	01220412 	.word	0x01220412
 8017ed8:	04120412 	.word	0x04120412
 8017edc:	04120412 	.word	0x04120412
 8017ee0:	041200eb 	.word	0x041200eb
 8017ee4:	033c0412 	.word	0x033c0412
 8017ee8:	04120412 	.word	0x04120412
 8017eec:	04120412 	.word	0x04120412
 8017ef0:	03a40412 	.word	0x03a40412
 8017ef4:	04120412 	.word	0x04120412
 8017ef8:	04120085 	.word	0x04120085
 8017efc:	04120412 	.word	0x04120412
 8017f00:	04120412 	.word	0x04120412
 8017f04:	04120412 	.word	0x04120412
 8017f08:	04120412 	.word	0x04120412
 8017f0c:	00fe0412 	.word	0x00fe0412
 8017f10:	0122006b 	.word	0x0122006b
 8017f14:	01220122 	.word	0x01220122
 8017f18:	006b00ee 	.word	0x006b00ee
 8017f1c:	04120412 	.word	0x04120412
 8017f20:	041200f1 	.word	0x041200f1
 8017f24:	033e031e 	.word	0x033e031e
 8017f28:	00f80372 	.word	0x00f80372
 8017f2c:	03830412 	.word	0x03830412
 8017f30:	03a60412 	.word	0x03a60412
 8017f34:	04120412 	.word	0x04120412
 8017f38:	03be      	.short	0x03be
 8017f3a:	461d      	mov	r5, r3
 8017f3c:	e773      	b.n	8017e26 <_svfprintf_r+0x76>
 8017f3e:	aa21      	add	r2, sp, #132	; 0x84
 8017f40:	4649      	mov	r1, r9
 8017f42:	4650      	mov	r0, sl
 8017f44:	f003 fbc2 	bl	801b6cc <__ssprint_r>
 8017f48:	2800      	cmp	r0, #0
 8017f4a:	f040 868e 	bne.w	8018c6a <_svfprintf_r+0xeba>
 8017f4e:	ac2e      	add	r4, sp, #184	; 0xb8
 8017f50:	e77e      	b.n	8017e50 <_svfprintf_r+0xa0>
 8017f52:	2301      	movs	r3, #1
 8017f54:	222b      	movs	r2, #43	; 0x2b
 8017f56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017f58:	e78b      	b.n	8017e72 <_svfprintf_r+0xc2>
 8017f5a:	460f      	mov	r7, r1
 8017f5c:	e7fb      	b.n	8017f56 <_svfprintf_r+0x1a6>
 8017f5e:	b10b      	cbz	r3, 8017f64 <_svfprintf_r+0x1b4>
 8017f60:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8017f64:	06ae      	lsls	r6, r5, #26
 8017f66:	f140 80a1 	bpl.w	80180ac <_svfprintf_r+0x2fc>
 8017f6a:	3707      	adds	r7, #7
 8017f6c:	f027 0707 	bic.w	r7, r7, #7
 8017f70:	f107 0308 	add.w	r3, r7, #8
 8017f74:	9308      	str	r3, [sp, #32]
 8017f76:	e9d7 6700 	ldrd	r6, r7, [r7]
 8017f7a:	2e00      	cmp	r6, #0
 8017f7c:	f177 0300 	sbcs.w	r3, r7, #0
 8017f80:	da05      	bge.n	8017f8e <_svfprintf_r+0x1de>
 8017f82:	232d      	movs	r3, #45	; 0x2d
 8017f84:	4276      	negs	r6, r6
 8017f86:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8017f8a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8017f8e:	2301      	movs	r3, #1
 8017f90:	e2c7      	b.n	8018522 <_svfprintf_r+0x772>
 8017f92:	b10b      	cbz	r3, 8017f98 <_svfprintf_r+0x1e8>
 8017f94:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8017f98:	4ba0      	ldr	r3, [pc, #640]	; (801821c <_svfprintf_r+0x46c>)
 8017f9a:	9315      	str	r3, [sp, #84]	; 0x54
 8017f9c:	06ab      	lsls	r3, r5, #26
 8017f9e:	f140 8336 	bpl.w	801860e <_svfprintf_r+0x85e>
 8017fa2:	3707      	adds	r7, #7
 8017fa4:	f027 0707 	bic.w	r7, r7, #7
 8017fa8:	f107 0308 	add.w	r3, r7, #8
 8017fac:	9308      	str	r3, [sp, #32]
 8017fae:	e9d7 6700 	ldrd	r6, r7, [r7]
 8017fb2:	07e8      	lsls	r0, r5, #31
 8017fb4:	d50b      	bpl.n	8017fce <_svfprintf_r+0x21e>
 8017fb6:	ea56 0307 	orrs.w	r3, r6, r7
 8017fba:	d008      	beq.n	8017fce <_svfprintf_r+0x21e>
 8017fbc:	2330      	movs	r3, #48	; 0x30
 8017fbe:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8017fc2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8017fc6:	f045 0502 	orr.w	r5, r5, #2
 8017fca:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 8017fce:	2302      	movs	r3, #2
 8017fd0:	e2a4      	b.n	801851c <_svfprintf_r+0x76c>
 8017fd2:	2a00      	cmp	r2, #0
 8017fd4:	d1bf      	bne.n	8017f56 <_svfprintf_r+0x1a6>
 8017fd6:	2301      	movs	r3, #1
 8017fd8:	2220      	movs	r2, #32
 8017fda:	e7bc      	b.n	8017f56 <_svfprintf_r+0x1a6>
 8017fdc:	f045 0501 	orr.w	r5, r5, #1
 8017fe0:	e7b9      	b.n	8017f56 <_svfprintf_r+0x1a6>
 8017fe2:	683e      	ldr	r6, [r7, #0]
 8017fe4:	1d39      	adds	r1, r7, #4
 8017fe6:	2e00      	cmp	r6, #0
 8017fe8:	960c      	str	r6, [sp, #48]	; 0x30
 8017fea:	dab6      	bge.n	8017f5a <_svfprintf_r+0x1aa>
 8017fec:	460f      	mov	r7, r1
 8017fee:	4276      	negs	r6, r6
 8017ff0:	960c      	str	r6, [sp, #48]	; 0x30
 8017ff2:	f045 0504 	orr.w	r5, r5, #4
 8017ff6:	e7ae      	b.n	8017f56 <_svfprintf_r+0x1a6>
 8017ff8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017ffa:	1c4e      	adds	r6, r1, #1
 8017ffc:	7809      	ldrb	r1, [r1, #0]
 8017ffe:	292a      	cmp	r1, #42	; 0x2a
 8018000:	9106      	str	r1, [sp, #24]
 8018002:	d010      	beq.n	8018026 <_svfprintf_r+0x276>
 8018004:	f04f 0b00 	mov.w	fp, #0
 8018008:	9609      	str	r6, [sp, #36]	; 0x24
 801800a:	9906      	ldr	r1, [sp, #24]
 801800c:	3930      	subs	r1, #48	; 0x30
 801800e:	2909      	cmp	r1, #9
 8018010:	f63f af33 	bhi.w	8017e7a <_svfprintf_r+0xca>
 8018014:	fb00 1b0b 	mla	fp, r0, fp, r1
 8018018:	9909      	ldr	r1, [sp, #36]	; 0x24
 801801a:	460e      	mov	r6, r1
 801801c:	f816 1b01 	ldrb.w	r1, [r6], #1
 8018020:	9106      	str	r1, [sp, #24]
 8018022:	9609      	str	r6, [sp, #36]	; 0x24
 8018024:	e7f1      	b.n	801800a <_svfprintf_r+0x25a>
 8018026:	6839      	ldr	r1, [r7, #0]
 8018028:	9609      	str	r6, [sp, #36]	; 0x24
 801802a:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 801802e:	3704      	adds	r7, #4
 8018030:	e791      	b.n	8017f56 <_svfprintf_r+0x1a6>
 8018032:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8018036:	e78e      	b.n	8017f56 <_svfprintf_r+0x1a6>
 8018038:	2100      	movs	r1, #0
 801803a:	910c      	str	r1, [sp, #48]	; 0x30
 801803c:	9906      	ldr	r1, [sp, #24]
 801803e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018040:	3930      	subs	r1, #48	; 0x30
 8018042:	fb00 1106 	mla	r1, r0, r6, r1
 8018046:	910c      	str	r1, [sp, #48]	; 0x30
 8018048:	9909      	ldr	r1, [sp, #36]	; 0x24
 801804a:	460e      	mov	r6, r1
 801804c:	f816 1b01 	ldrb.w	r1, [r6], #1
 8018050:	9106      	str	r1, [sp, #24]
 8018052:	9906      	ldr	r1, [sp, #24]
 8018054:	9609      	str	r6, [sp, #36]	; 0x24
 8018056:	3930      	subs	r1, #48	; 0x30
 8018058:	2909      	cmp	r1, #9
 801805a:	d9ef      	bls.n	801803c <_svfprintf_r+0x28c>
 801805c:	e70d      	b.n	8017e7a <_svfprintf_r+0xca>
 801805e:	f045 0508 	orr.w	r5, r5, #8
 8018062:	e778      	b.n	8017f56 <_svfprintf_r+0x1a6>
 8018064:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8018068:	e775      	b.n	8017f56 <_svfprintf_r+0x1a6>
 801806a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801806c:	7809      	ldrb	r1, [r1, #0]
 801806e:	296c      	cmp	r1, #108	; 0x6c
 8018070:	d105      	bne.n	801807e <_svfprintf_r+0x2ce>
 8018072:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018074:	3101      	adds	r1, #1
 8018076:	9109      	str	r1, [sp, #36]	; 0x24
 8018078:	f045 0520 	orr.w	r5, r5, #32
 801807c:	e76b      	b.n	8017f56 <_svfprintf_r+0x1a6>
 801807e:	f045 0510 	orr.w	r5, r5, #16
 8018082:	e768      	b.n	8017f56 <_svfprintf_r+0x1a6>
 8018084:	2600      	movs	r6, #0
 8018086:	1d3b      	adds	r3, r7, #4
 8018088:	9308      	str	r3, [sp, #32]
 801808a:	683b      	ldr	r3, [r7, #0]
 801808c:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8018090:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8018094:	f04f 0b01 	mov.w	fp, #1
 8018098:	4637      	mov	r7, r6
 801809a:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 801809e:	e11c      	b.n	80182da <_svfprintf_r+0x52a>
 80180a0:	b10b      	cbz	r3, 80180a6 <_svfprintf_r+0x2f6>
 80180a2:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80180a6:	f045 0510 	orr.w	r5, r5, #16
 80180aa:	e75b      	b.n	8017f64 <_svfprintf_r+0x1b4>
 80180ac:	f015 0f10 	tst.w	r5, #16
 80180b0:	f107 0304 	add.w	r3, r7, #4
 80180b4:	d003      	beq.n	80180be <_svfprintf_r+0x30e>
 80180b6:	683e      	ldr	r6, [r7, #0]
 80180b8:	9308      	str	r3, [sp, #32]
 80180ba:	17f7      	asrs	r7, r6, #31
 80180bc:	e75d      	b.n	8017f7a <_svfprintf_r+0x1ca>
 80180be:	683e      	ldr	r6, [r7, #0]
 80180c0:	f015 0f40 	tst.w	r5, #64	; 0x40
 80180c4:	9308      	str	r3, [sp, #32]
 80180c6:	bf18      	it	ne
 80180c8:	b236      	sxthne	r6, r6
 80180ca:	e7f6      	b.n	80180ba <_svfprintf_r+0x30a>
 80180cc:	b10b      	cbz	r3, 80180d2 <_svfprintf_r+0x322>
 80180ce:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80180d2:	3707      	adds	r7, #7
 80180d4:	f027 0707 	bic.w	r7, r7, #7
 80180d8:	f107 0308 	add.w	r3, r7, #8
 80180dc:	9308      	str	r3, [sp, #32]
 80180de:	683b      	ldr	r3, [r7, #0]
 80180e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80180e4:	930d      	str	r3, [sp, #52]	; 0x34
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80180ea:	930e      	str	r3, [sp, #56]	; 0x38
 80180ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80180ee:	4638      	mov	r0, r7
 80180f0:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80180f4:	4631      	mov	r1, r6
 80180f6:	4b4a      	ldr	r3, [pc, #296]	; (8018220 <_svfprintf_r+0x470>)
 80180f8:	f7ef f848 	bl	800718c <__aeabi_dcmpun>
 80180fc:	2800      	cmp	r0, #0
 80180fe:	f040 85dc 	bne.w	8018cba <_svfprintf_r+0xf0a>
 8018102:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018106:	4b46      	ldr	r3, [pc, #280]	; (8018220 <_svfprintf_r+0x470>)
 8018108:	4638      	mov	r0, r7
 801810a:	4631      	mov	r1, r6
 801810c:	f7ef f820 	bl	8007150 <__aeabi_dcmple>
 8018110:	2800      	cmp	r0, #0
 8018112:	f040 85d2 	bne.w	8018cba <_svfprintf_r+0xf0a>
 8018116:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018118:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801811a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801811c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801811e:	f7ef f80d 	bl	800713c <__aeabi_dcmplt>
 8018122:	b110      	cbz	r0, 801812a <_svfprintf_r+0x37a>
 8018124:	232d      	movs	r3, #45	; 0x2d
 8018126:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 801812a:	4b3e      	ldr	r3, [pc, #248]	; (8018224 <_svfprintf_r+0x474>)
 801812c:	4a3e      	ldr	r2, [pc, #248]	; (8018228 <_svfprintf_r+0x478>)
 801812e:	9906      	ldr	r1, [sp, #24]
 8018130:	f04f 0b03 	mov.w	fp, #3
 8018134:	2947      	cmp	r1, #71	; 0x47
 8018136:	bfcc      	ite	gt
 8018138:	4690      	movgt	r8, r2
 801813a:	4698      	movle	r8, r3
 801813c:	2600      	movs	r6, #0
 801813e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8018142:	4637      	mov	r7, r6
 8018144:	e0c9      	b.n	80182da <_svfprintf_r+0x52a>
 8018146:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 801814a:	d026      	beq.n	801819a <_svfprintf_r+0x3ea>
 801814c:	9b06      	ldr	r3, [sp, #24]
 801814e:	f023 0320 	bic.w	r3, r3, #32
 8018152:	2b47      	cmp	r3, #71	; 0x47
 8018154:	d104      	bne.n	8018160 <_svfprintf_r+0x3b0>
 8018156:	f1bb 0f00 	cmp.w	fp, #0
 801815a:	bf08      	it	eq
 801815c:	f04f 0b01 	moveq.w	fp, #1
 8018160:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8018164:	9317      	str	r3, [sp, #92]	; 0x5c
 8018166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018168:	1e1f      	subs	r7, r3, #0
 801816a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801816c:	bfa8      	it	ge
 801816e:	9710      	strge	r7, [sp, #64]	; 0x40
 8018170:	930f      	str	r3, [sp, #60]	; 0x3c
 8018172:	bfbd      	ittte	lt
 8018174:	463b      	movlt	r3, r7
 8018176:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 801817a:	9310      	strlt	r3, [sp, #64]	; 0x40
 801817c:	2300      	movge	r3, #0
 801817e:	bfb8      	it	lt
 8018180:	232d      	movlt	r3, #45	; 0x2d
 8018182:	9316      	str	r3, [sp, #88]	; 0x58
 8018184:	9b06      	ldr	r3, [sp, #24]
 8018186:	f023 0720 	bic.w	r7, r3, #32
 801818a:	2f46      	cmp	r7, #70	; 0x46
 801818c:	d008      	beq.n	80181a0 <_svfprintf_r+0x3f0>
 801818e:	2f45      	cmp	r7, #69	; 0x45
 8018190:	d142      	bne.n	8018218 <_svfprintf_r+0x468>
 8018192:	f10b 0601 	add.w	r6, fp, #1
 8018196:	2302      	movs	r3, #2
 8018198:	e004      	b.n	80181a4 <_svfprintf_r+0x3f4>
 801819a:	f04f 0b06 	mov.w	fp, #6
 801819e:	e7df      	b.n	8018160 <_svfprintf_r+0x3b0>
 80181a0:	465e      	mov	r6, fp
 80181a2:	2303      	movs	r3, #3
 80181a4:	aa1f      	add	r2, sp, #124	; 0x7c
 80181a6:	9204      	str	r2, [sp, #16]
 80181a8:	aa1c      	add	r2, sp, #112	; 0x70
 80181aa:	9203      	str	r2, [sp, #12]
 80181ac:	aa1b      	add	r2, sp, #108	; 0x6c
 80181ae:	9202      	str	r2, [sp, #8]
 80181b0:	e88d 0048 	stmia.w	sp, {r3, r6}
 80181b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80181b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80181b8:	4650      	mov	r0, sl
 80181ba:	f001 fa19 	bl	80195f0 <_dtoa_r>
 80181be:	2f47      	cmp	r7, #71	; 0x47
 80181c0:	4680      	mov	r8, r0
 80181c2:	d102      	bne.n	80181ca <_svfprintf_r+0x41a>
 80181c4:	07e8      	lsls	r0, r5, #31
 80181c6:	f140 8585 	bpl.w	8018cd4 <_svfprintf_r+0xf24>
 80181ca:	eb08 0306 	add.w	r3, r8, r6
 80181ce:	2f46      	cmp	r7, #70	; 0x46
 80181d0:	9307      	str	r3, [sp, #28]
 80181d2:	d111      	bne.n	80181f8 <_svfprintf_r+0x448>
 80181d4:	f898 3000 	ldrb.w	r3, [r8]
 80181d8:	2b30      	cmp	r3, #48	; 0x30
 80181da:	d109      	bne.n	80181f0 <_svfprintf_r+0x440>
 80181dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80181de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80181e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80181e2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80181e4:	f7ee ffa0 	bl	8007128 <__aeabi_dcmpeq>
 80181e8:	b910      	cbnz	r0, 80181f0 <_svfprintf_r+0x440>
 80181ea:	f1c6 0601 	rsb	r6, r6, #1
 80181ee:	961b      	str	r6, [sp, #108]	; 0x6c
 80181f0:	9a07      	ldr	r2, [sp, #28]
 80181f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80181f4:	441a      	add	r2, r3
 80181f6:	9207      	str	r2, [sp, #28]
 80181f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80181fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80181fc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80181fe:	9910      	ldr	r1, [sp, #64]	; 0x40
 8018200:	f7ee ff92 	bl	8007128 <__aeabi_dcmpeq>
 8018204:	b990      	cbnz	r0, 801822c <_svfprintf_r+0x47c>
 8018206:	2230      	movs	r2, #48	; 0x30
 8018208:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801820a:	9907      	ldr	r1, [sp, #28]
 801820c:	4299      	cmp	r1, r3
 801820e:	d90f      	bls.n	8018230 <_svfprintf_r+0x480>
 8018210:	1c59      	adds	r1, r3, #1
 8018212:	911f      	str	r1, [sp, #124]	; 0x7c
 8018214:	701a      	strb	r2, [r3, #0]
 8018216:	e7f7      	b.n	8018208 <_svfprintf_r+0x458>
 8018218:	465e      	mov	r6, fp
 801821a:	e7bc      	b.n	8018196 <_svfprintf_r+0x3e6>
 801821c:	08023334 	.word	0x08023334
 8018220:	7fefffff 	.word	0x7fefffff
 8018224:	08023324 	.word	0x08023324
 8018228:	08023328 	.word	0x08023328
 801822c:	9b07      	ldr	r3, [sp, #28]
 801822e:	931f      	str	r3, [sp, #124]	; 0x7c
 8018230:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018232:	2f47      	cmp	r7, #71	; 0x47
 8018234:	eba3 0308 	sub.w	r3, r3, r8
 8018238:	9307      	str	r3, [sp, #28]
 801823a:	f040 8100 	bne.w	801843e <_svfprintf_r+0x68e>
 801823e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018240:	1cd9      	adds	r1, r3, #3
 8018242:	db02      	blt.n	801824a <_svfprintf_r+0x49a>
 8018244:	459b      	cmp	fp, r3
 8018246:	f280 8126 	bge.w	8018496 <_svfprintf_r+0x6e6>
 801824a:	9b06      	ldr	r3, [sp, #24]
 801824c:	3b02      	subs	r3, #2
 801824e:	9306      	str	r3, [sp, #24]
 8018250:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018252:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8018256:	1e53      	subs	r3, r2, #1
 8018258:	2b00      	cmp	r3, #0
 801825a:	bfa8      	it	ge
 801825c:	222b      	movge	r2, #43	; 0x2b
 801825e:	931b      	str	r3, [sp, #108]	; 0x6c
 8018260:	bfbc      	itt	lt
 8018262:	f1c2 0301 	rsblt	r3, r2, #1
 8018266:	222d      	movlt	r2, #45	; 0x2d
 8018268:	2b09      	cmp	r3, #9
 801826a:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 801826e:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8018272:	f340 8100 	ble.w	8018476 <_svfprintf_r+0x6c6>
 8018276:	260a      	movs	r6, #10
 8018278:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 801827c:	fb93 f0f6 	sdiv	r0, r3, r6
 8018280:	fb06 3310 	mls	r3, r6, r0, r3
 8018284:	2809      	cmp	r0, #9
 8018286:	f103 0330 	add.w	r3, r3, #48	; 0x30
 801828a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801828e:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8018292:	4603      	mov	r3, r0
 8018294:	f300 80e8 	bgt.w	8018468 <_svfprintf_r+0x6b8>
 8018298:	3330      	adds	r3, #48	; 0x30
 801829a:	f801 3c01 	strb.w	r3, [r1, #-1]
 801829e:	3a02      	subs	r2, #2
 80182a0:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 80182a4:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 80182a8:	4282      	cmp	r2, r0
 80182aa:	4619      	mov	r1, r3
 80182ac:	f0c0 80de 	bcc.w	801846c <_svfprintf_r+0x6bc>
 80182b0:	9a07      	ldr	r2, [sp, #28]
 80182b2:	ab1d      	add	r3, sp, #116	; 0x74
 80182b4:	1acb      	subs	r3, r1, r3
 80182b6:	2a01      	cmp	r2, #1
 80182b8:	9314      	str	r3, [sp, #80]	; 0x50
 80182ba:	eb03 0b02 	add.w	fp, r3, r2
 80182be:	dc02      	bgt.n	80182c6 <_svfprintf_r+0x516>
 80182c0:	f015 0701 	ands.w	r7, r5, #1
 80182c4:	d002      	beq.n	80182cc <_svfprintf_r+0x51c>
 80182c6:	2700      	movs	r7, #0
 80182c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182ca:	449b      	add	fp, r3
 80182cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80182ce:	b113      	cbz	r3, 80182d6 <_svfprintf_r+0x526>
 80182d0:	232d      	movs	r3, #45	; 0x2d
 80182d2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80182d6:	2600      	movs	r6, #0
 80182d8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80182da:	455e      	cmp	r6, fp
 80182dc:	4633      	mov	r3, r6
 80182de:	bfb8      	it	lt
 80182e0:	465b      	movlt	r3, fp
 80182e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80182e4:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 80182e8:	b113      	cbz	r3, 80182f0 <_svfprintf_r+0x540>
 80182ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80182ec:	3301      	adds	r3, #1
 80182ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80182f0:	f015 0302 	ands.w	r3, r5, #2
 80182f4:	9316      	str	r3, [sp, #88]	; 0x58
 80182f6:	bf1e      	ittt	ne
 80182f8:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 80182fa:	3302      	addne	r3, #2
 80182fc:	930f      	strne	r3, [sp, #60]	; 0x3c
 80182fe:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8018302:	9317      	str	r3, [sp, #92]	; 0x5c
 8018304:	d118      	bne.n	8018338 <_svfprintf_r+0x588>
 8018306:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018308:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801830a:	1a9b      	subs	r3, r3, r2
 801830c:	2b00      	cmp	r3, #0
 801830e:	9310      	str	r3, [sp, #64]	; 0x40
 8018310:	dd12      	ble.n	8018338 <_svfprintf_r+0x588>
 8018312:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018314:	2b10      	cmp	r3, #16
 8018316:	4bab      	ldr	r3, [pc, #684]	; (80185c4 <_svfprintf_r+0x814>)
 8018318:	6023      	str	r3, [r4, #0]
 801831a:	f300 81d9 	bgt.w	80186d0 <_svfprintf_r+0x920>
 801831e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018320:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018322:	6063      	str	r3, [r4, #4]
 8018324:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018326:	4413      	add	r3, r2
 8018328:	9323      	str	r3, [sp, #140]	; 0x8c
 801832a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801832c:	3301      	adds	r3, #1
 801832e:	2b07      	cmp	r3, #7
 8018330:	9322      	str	r3, [sp, #136]	; 0x88
 8018332:	f300 81e6 	bgt.w	8018702 <_svfprintf_r+0x952>
 8018336:	3408      	adds	r4, #8
 8018338:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 801833c:	b173      	cbz	r3, 801835c <_svfprintf_r+0x5ac>
 801833e:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8018342:	6023      	str	r3, [r4, #0]
 8018344:	2301      	movs	r3, #1
 8018346:	6063      	str	r3, [r4, #4]
 8018348:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801834a:	3301      	adds	r3, #1
 801834c:	9323      	str	r3, [sp, #140]	; 0x8c
 801834e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018350:	3301      	adds	r3, #1
 8018352:	2b07      	cmp	r3, #7
 8018354:	9322      	str	r3, [sp, #136]	; 0x88
 8018356:	f300 81de 	bgt.w	8018716 <_svfprintf_r+0x966>
 801835a:	3408      	adds	r4, #8
 801835c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801835e:	b16b      	cbz	r3, 801837c <_svfprintf_r+0x5cc>
 8018360:	ab1a      	add	r3, sp, #104	; 0x68
 8018362:	6023      	str	r3, [r4, #0]
 8018364:	2302      	movs	r3, #2
 8018366:	6063      	str	r3, [r4, #4]
 8018368:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801836a:	3302      	adds	r3, #2
 801836c:	9323      	str	r3, [sp, #140]	; 0x8c
 801836e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018370:	3301      	adds	r3, #1
 8018372:	2b07      	cmp	r3, #7
 8018374:	9322      	str	r3, [sp, #136]	; 0x88
 8018376:	f300 81d8 	bgt.w	801872a <_svfprintf_r+0x97a>
 801837a:	3408      	adds	r4, #8
 801837c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801837e:	2b80      	cmp	r3, #128	; 0x80
 8018380:	d118      	bne.n	80183b4 <_svfprintf_r+0x604>
 8018382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018384:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018386:	1a9b      	subs	r3, r3, r2
 8018388:	2b00      	cmp	r3, #0
 801838a:	9310      	str	r3, [sp, #64]	; 0x40
 801838c:	dd12      	ble.n	80183b4 <_svfprintf_r+0x604>
 801838e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018390:	2b10      	cmp	r3, #16
 8018392:	4b8d      	ldr	r3, [pc, #564]	; (80185c8 <_svfprintf_r+0x818>)
 8018394:	6023      	str	r3, [r4, #0]
 8018396:	f300 81d2 	bgt.w	801873e <_svfprintf_r+0x98e>
 801839a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801839c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801839e:	6063      	str	r3, [r4, #4]
 80183a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80183a2:	4413      	add	r3, r2
 80183a4:	9323      	str	r3, [sp, #140]	; 0x8c
 80183a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80183a8:	3301      	adds	r3, #1
 80183aa:	2b07      	cmp	r3, #7
 80183ac:	9322      	str	r3, [sp, #136]	; 0x88
 80183ae:	f300 81df 	bgt.w	8018770 <_svfprintf_r+0x9c0>
 80183b2:	3408      	adds	r4, #8
 80183b4:	eba6 060b 	sub.w	r6, r6, fp
 80183b8:	2e00      	cmp	r6, #0
 80183ba:	dd0f      	ble.n	80183dc <_svfprintf_r+0x62c>
 80183bc:	4b82      	ldr	r3, [pc, #520]	; (80185c8 <_svfprintf_r+0x818>)
 80183be:	2e10      	cmp	r6, #16
 80183c0:	6023      	str	r3, [r4, #0]
 80183c2:	f300 81df 	bgt.w	8018784 <_svfprintf_r+0x9d4>
 80183c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80183c8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80183ca:	3301      	adds	r3, #1
 80183cc:	6066      	str	r6, [r4, #4]
 80183ce:	2b07      	cmp	r3, #7
 80183d0:	4406      	add	r6, r0
 80183d2:	9623      	str	r6, [sp, #140]	; 0x8c
 80183d4:	9322      	str	r3, [sp, #136]	; 0x88
 80183d6:	f300 81ec 	bgt.w	80187b2 <_svfprintf_r+0xa02>
 80183da:	3408      	adds	r4, #8
 80183dc:	05eb      	lsls	r3, r5, #23
 80183de:	f100 81f2 	bmi.w	80187c6 <_svfprintf_r+0xa16>
 80183e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80183e4:	e884 0900 	stmia.w	r4, {r8, fp}
 80183e8:	445b      	add	r3, fp
 80183ea:	9323      	str	r3, [sp, #140]	; 0x8c
 80183ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80183ee:	3301      	adds	r3, #1
 80183f0:	2b07      	cmp	r3, #7
 80183f2:	9322      	str	r3, [sp, #136]	; 0x88
 80183f4:	f340 8419 	ble.w	8018c2a <_svfprintf_r+0xe7a>
 80183f8:	aa21      	add	r2, sp, #132	; 0x84
 80183fa:	4649      	mov	r1, r9
 80183fc:	4650      	mov	r0, sl
 80183fe:	f003 f965 	bl	801b6cc <__ssprint_r>
 8018402:	2800      	cmp	r0, #0
 8018404:	f040 8431 	bne.w	8018c6a <_svfprintf_r+0xeba>
 8018408:	ac2e      	add	r4, sp, #184	; 0xb8
 801840a:	076b      	lsls	r3, r5, #29
 801840c:	f100 8410 	bmi.w	8018c30 <_svfprintf_r+0xe80>
 8018410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018412:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018414:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018416:	428a      	cmp	r2, r1
 8018418:	bfac      	ite	ge
 801841a:	189b      	addge	r3, r3, r2
 801841c:	185b      	addlt	r3, r3, r1
 801841e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018420:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018422:	b13b      	cbz	r3, 8018434 <_svfprintf_r+0x684>
 8018424:	aa21      	add	r2, sp, #132	; 0x84
 8018426:	4649      	mov	r1, r9
 8018428:	4650      	mov	r0, sl
 801842a:	f003 f94f 	bl	801b6cc <__ssprint_r>
 801842e:	2800      	cmp	r0, #0
 8018430:	f040 841b 	bne.w	8018c6a <_svfprintf_r+0xeba>
 8018434:	2300      	movs	r3, #0
 8018436:	9f08      	ldr	r7, [sp, #32]
 8018438:	9322      	str	r3, [sp, #136]	; 0x88
 801843a:	ac2e      	add	r4, sp, #184	; 0xb8
 801843c:	e4f2      	b.n	8017e24 <_svfprintf_r+0x74>
 801843e:	9b06      	ldr	r3, [sp, #24]
 8018440:	2b65      	cmp	r3, #101	; 0x65
 8018442:	f77f af05 	ble.w	8018250 <_svfprintf_r+0x4a0>
 8018446:	9b06      	ldr	r3, [sp, #24]
 8018448:	2b66      	cmp	r3, #102	; 0x66
 801844a:	d124      	bne.n	8018496 <_svfprintf_r+0x6e6>
 801844c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801844e:	2b00      	cmp	r3, #0
 8018450:	dd19      	ble.n	8018486 <_svfprintf_r+0x6d6>
 8018452:	f1bb 0f00 	cmp.w	fp, #0
 8018456:	d101      	bne.n	801845c <_svfprintf_r+0x6ac>
 8018458:	07ea      	lsls	r2, r5, #31
 801845a:	d502      	bpl.n	8018462 <_svfprintf_r+0x6b2>
 801845c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801845e:	4413      	add	r3, r2
 8018460:	445b      	add	r3, fp
 8018462:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8018464:	469b      	mov	fp, r3
 8018466:	e731      	b.n	80182cc <_svfprintf_r+0x51c>
 8018468:	460a      	mov	r2, r1
 801846a:	e707      	b.n	801827c <_svfprintf_r+0x4cc>
 801846c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8018470:	f803 1b01 	strb.w	r1, [r3], #1
 8018474:	e718      	b.n	80182a8 <_svfprintf_r+0x4f8>
 8018476:	2230      	movs	r2, #48	; 0x30
 8018478:	4413      	add	r3, r2
 801847a:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 801847e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8018482:	a91e      	add	r1, sp, #120	; 0x78
 8018484:	e714      	b.n	80182b0 <_svfprintf_r+0x500>
 8018486:	f1bb 0f00 	cmp.w	fp, #0
 801848a:	d101      	bne.n	8018490 <_svfprintf_r+0x6e0>
 801848c:	07eb      	lsls	r3, r5, #31
 801848e:	d515      	bpl.n	80184bc <_svfprintf_r+0x70c>
 8018490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018492:	3301      	adds	r3, #1
 8018494:	e7e4      	b.n	8018460 <_svfprintf_r+0x6b0>
 8018496:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018498:	9b07      	ldr	r3, [sp, #28]
 801849a:	429a      	cmp	r2, r3
 801849c:	db06      	blt.n	80184ac <_svfprintf_r+0x6fc>
 801849e:	07ef      	lsls	r7, r5, #31
 80184a0:	d50e      	bpl.n	80184c0 <_svfprintf_r+0x710>
 80184a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80184a4:	4413      	add	r3, r2
 80184a6:	2267      	movs	r2, #103	; 0x67
 80184a8:	9206      	str	r2, [sp, #24]
 80184aa:	e7da      	b.n	8018462 <_svfprintf_r+0x6b2>
 80184ac:	9b07      	ldr	r3, [sp, #28]
 80184ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80184b0:	2a00      	cmp	r2, #0
 80184b2:	440b      	add	r3, r1
 80184b4:	dcf7      	bgt.n	80184a6 <_svfprintf_r+0x6f6>
 80184b6:	f1c2 0201 	rsb	r2, r2, #1
 80184ba:	e7f3      	b.n	80184a4 <_svfprintf_r+0x6f4>
 80184bc:	2301      	movs	r3, #1
 80184be:	e7d0      	b.n	8018462 <_svfprintf_r+0x6b2>
 80184c0:	4613      	mov	r3, r2
 80184c2:	e7f0      	b.n	80184a6 <_svfprintf_r+0x6f6>
 80184c4:	b10b      	cbz	r3, 80184ca <_svfprintf_r+0x71a>
 80184c6:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80184ca:	f015 0f20 	tst.w	r5, #32
 80184ce:	f107 0304 	add.w	r3, r7, #4
 80184d2:	d008      	beq.n	80184e6 <_svfprintf_r+0x736>
 80184d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80184d6:	683a      	ldr	r2, [r7, #0]
 80184d8:	17ce      	asrs	r6, r1, #31
 80184da:	4608      	mov	r0, r1
 80184dc:	4631      	mov	r1, r6
 80184de:	e9c2 0100 	strd	r0, r1, [r2]
 80184e2:	461f      	mov	r7, r3
 80184e4:	e49e      	b.n	8017e24 <_svfprintf_r+0x74>
 80184e6:	06ee      	lsls	r6, r5, #27
 80184e8:	d503      	bpl.n	80184f2 <_svfprintf_r+0x742>
 80184ea:	683a      	ldr	r2, [r7, #0]
 80184ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80184ee:	6011      	str	r1, [r2, #0]
 80184f0:	e7f7      	b.n	80184e2 <_svfprintf_r+0x732>
 80184f2:	0668      	lsls	r0, r5, #25
 80184f4:	d5f9      	bpl.n	80184ea <_svfprintf_r+0x73a>
 80184f6:	683a      	ldr	r2, [r7, #0]
 80184f8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80184fc:	8011      	strh	r1, [r2, #0]
 80184fe:	e7f0      	b.n	80184e2 <_svfprintf_r+0x732>
 8018500:	f045 0510 	orr.w	r5, r5, #16
 8018504:	f015 0320 	ands.w	r3, r5, #32
 8018508:	d022      	beq.n	8018550 <_svfprintf_r+0x7a0>
 801850a:	3707      	adds	r7, #7
 801850c:	f027 0707 	bic.w	r7, r7, #7
 8018510:	f107 0308 	add.w	r3, r7, #8
 8018514:	9308      	str	r3, [sp, #32]
 8018516:	e9d7 6700 	ldrd	r6, r7, [r7]
 801851a:	2300      	movs	r3, #0
 801851c:	2200      	movs	r2, #0
 801851e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8018522:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8018526:	f000 83db 	beq.w	8018ce0 <_svfprintf_r+0xf30>
 801852a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 801852e:	920f      	str	r2, [sp, #60]	; 0x3c
 8018530:	ea56 0207 	orrs.w	r2, r6, r7
 8018534:	f040 83d9 	bne.w	8018cea <_svfprintf_r+0xf3a>
 8018538:	f1bb 0f00 	cmp.w	fp, #0
 801853c:	f000 80aa 	beq.w	8018694 <_svfprintf_r+0x8e4>
 8018540:	2b01      	cmp	r3, #1
 8018542:	d076      	beq.n	8018632 <_svfprintf_r+0x882>
 8018544:	2b02      	cmp	r3, #2
 8018546:	f000 8091 	beq.w	801866c <_svfprintf_r+0x8bc>
 801854a:	2600      	movs	r6, #0
 801854c:	2700      	movs	r7, #0
 801854e:	e3d2      	b.n	8018cf6 <_svfprintf_r+0xf46>
 8018550:	1d3a      	adds	r2, r7, #4
 8018552:	f015 0110 	ands.w	r1, r5, #16
 8018556:	9208      	str	r2, [sp, #32]
 8018558:	d002      	beq.n	8018560 <_svfprintf_r+0x7b0>
 801855a:	683e      	ldr	r6, [r7, #0]
 801855c:	2700      	movs	r7, #0
 801855e:	e7dd      	b.n	801851c <_svfprintf_r+0x76c>
 8018560:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8018564:	d0f9      	beq.n	801855a <_svfprintf_r+0x7aa>
 8018566:	883e      	ldrh	r6, [r7, #0]
 8018568:	2700      	movs	r7, #0
 801856a:	e7d6      	b.n	801851a <_svfprintf_r+0x76a>
 801856c:	1d3b      	adds	r3, r7, #4
 801856e:	9308      	str	r3, [sp, #32]
 8018570:	2330      	movs	r3, #48	; 0x30
 8018572:	2278      	movs	r2, #120	; 0x78
 8018574:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8018578:	4b14      	ldr	r3, [pc, #80]	; (80185cc <_svfprintf_r+0x81c>)
 801857a:	683e      	ldr	r6, [r7, #0]
 801857c:	9315      	str	r3, [sp, #84]	; 0x54
 801857e:	2700      	movs	r7, #0
 8018580:	f045 0502 	orr.w	r5, r5, #2
 8018584:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8018588:	2302      	movs	r3, #2
 801858a:	9206      	str	r2, [sp, #24]
 801858c:	e7c6      	b.n	801851c <_svfprintf_r+0x76c>
 801858e:	2600      	movs	r6, #0
 8018590:	1d3b      	adds	r3, r7, #4
 8018592:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8018596:	9308      	str	r3, [sp, #32]
 8018598:	f8d7 8000 	ldr.w	r8, [r7]
 801859c:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 80185a0:	d00a      	beq.n	80185b8 <_svfprintf_r+0x808>
 80185a2:	465a      	mov	r2, fp
 80185a4:	4631      	mov	r1, r6
 80185a6:	4640      	mov	r0, r8
 80185a8:	f7fe fe66 	bl	8017278 <memchr>
 80185ac:	2800      	cmp	r0, #0
 80185ae:	f000 808d 	beq.w	80186cc <_svfprintf_r+0x91c>
 80185b2:	eba0 0b08 	sub.w	fp, r0, r8
 80185b6:	e5c4      	b.n	8018142 <_svfprintf_r+0x392>
 80185b8:	4640      	mov	r0, r8
 80185ba:	f7ee f98d 	bl	80068d8 <strlen>
 80185be:	4683      	mov	fp, r0
 80185c0:	e5bf      	b.n	8018142 <_svfprintf_r+0x392>
 80185c2:	bf00      	nop
 80185c4:	08023358 	.word	0x08023358
 80185c8:	08023368 	.word	0x08023368
 80185cc:	08023345 	.word	0x08023345
 80185d0:	f045 0510 	orr.w	r5, r5, #16
 80185d4:	06a9      	lsls	r1, r5, #26
 80185d6:	d509      	bpl.n	80185ec <_svfprintf_r+0x83c>
 80185d8:	3707      	adds	r7, #7
 80185da:	f027 0707 	bic.w	r7, r7, #7
 80185de:	f107 0308 	add.w	r3, r7, #8
 80185e2:	9308      	str	r3, [sp, #32]
 80185e4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80185e8:	2301      	movs	r3, #1
 80185ea:	e797      	b.n	801851c <_svfprintf_r+0x76c>
 80185ec:	1d3b      	adds	r3, r7, #4
 80185ee:	f015 0f10 	tst.w	r5, #16
 80185f2:	9308      	str	r3, [sp, #32]
 80185f4:	d001      	beq.n	80185fa <_svfprintf_r+0x84a>
 80185f6:	683e      	ldr	r6, [r7, #0]
 80185f8:	e002      	b.n	8018600 <_svfprintf_r+0x850>
 80185fa:	066a      	lsls	r2, r5, #25
 80185fc:	d5fb      	bpl.n	80185f6 <_svfprintf_r+0x846>
 80185fe:	883e      	ldrh	r6, [r7, #0]
 8018600:	2700      	movs	r7, #0
 8018602:	e7f1      	b.n	80185e8 <_svfprintf_r+0x838>
 8018604:	b10b      	cbz	r3, 801860a <_svfprintf_r+0x85a>
 8018606:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 801860a:	4ba3      	ldr	r3, [pc, #652]	; (8018898 <_svfprintf_r+0xae8>)
 801860c:	e4c5      	b.n	8017f9a <_svfprintf_r+0x1ea>
 801860e:	1d3b      	adds	r3, r7, #4
 8018610:	f015 0f10 	tst.w	r5, #16
 8018614:	9308      	str	r3, [sp, #32]
 8018616:	d001      	beq.n	801861c <_svfprintf_r+0x86c>
 8018618:	683e      	ldr	r6, [r7, #0]
 801861a:	e002      	b.n	8018622 <_svfprintf_r+0x872>
 801861c:	066e      	lsls	r6, r5, #25
 801861e:	d5fb      	bpl.n	8018618 <_svfprintf_r+0x868>
 8018620:	883e      	ldrh	r6, [r7, #0]
 8018622:	2700      	movs	r7, #0
 8018624:	e4c5      	b.n	8017fb2 <_svfprintf_r+0x202>
 8018626:	4643      	mov	r3, r8
 8018628:	e366      	b.n	8018cf8 <_svfprintf_r+0xf48>
 801862a:	2f00      	cmp	r7, #0
 801862c:	bf08      	it	eq
 801862e:	2e0a      	cmpeq	r6, #10
 8018630:	d205      	bcs.n	801863e <_svfprintf_r+0x88e>
 8018632:	3630      	adds	r6, #48	; 0x30
 8018634:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8018638:	f808 6d41 	strb.w	r6, [r8, #-65]!
 801863c:	e377      	b.n	8018d2e <_svfprintf_r+0xf7e>
 801863e:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8018642:	4630      	mov	r0, r6
 8018644:	4639      	mov	r1, r7
 8018646:	220a      	movs	r2, #10
 8018648:	2300      	movs	r3, #0
 801864a:	f7ee fddd 	bl	8007208 <__aeabi_uldivmod>
 801864e:	3230      	adds	r2, #48	; 0x30
 8018650:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8018654:	2300      	movs	r3, #0
 8018656:	4630      	mov	r0, r6
 8018658:	4639      	mov	r1, r7
 801865a:	220a      	movs	r2, #10
 801865c:	f7ee fdd4 	bl	8007208 <__aeabi_uldivmod>
 8018660:	4606      	mov	r6, r0
 8018662:	460f      	mov	r7, r1
 8018664:	ea56 0307 	orrs.w	r3, r6, r7
 8018668:	d1eb      	bne.n	8018642 <_svfprintf_r+0x892>
 801866a:	e360      	b.n	8018d2e <_svfprintf_r+0xf7e>
 801866c:	2600      	movs	r6, #0
 801866e:	2700      	movs	r7, #0
 8018670:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8018674:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018676:	f006 030f 	and.w	r3, r6, #15
 801867a:	5cd3      	ldrb	r3, [r2, r3]
 801867c:	093a      	lsrs	r2, r7, #4
 801867e:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8018682:	0933      	lsrs	r3, r6, #4
 8018684:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8018688:	461e      	mov	r6, r3
 801868a:	4617      	mov	r7, r2
 801868c:	ea56 0307 	orrs.w	r3, r6, r7
 8018690:	d1f0      	bne.n	8018674 <_svfprintf_r+0x8c4>
 8018692:	e34c      	b.n	8018d2e <_svfprintf_r+0xf7e>
 8018694:	b93b      	cbnz	r3, 80186a6 <_svfprintf_r+0x8f6>
 8018696:	07ea      	lsls	r2, r5, #31
 8018698:	d505      	bpl.n	80186a6 <_svfprintf_r+0x8f6>
 801869a:	2330      	movs	r3, #48	; 0x30
 801869c:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 80186a0:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80186a4:	e343      	b.n	8018d2e <_svfprintf_r+0xf7e>
 80186a6:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80186aa:	e340      	b.n	8018d2e <_svfprintf_r+0xf7e>
 80186ac:	b10b      	cbz	r3, 80186b2 <_svfprintf_r+0x902>
 80186ae:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80186b2:	9b06      	ldr	r3, [sp, #24]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	f000 82f7 	beq.w	8018ca8 <_svfprintf_r+0xef8>
 80186ba:	2600      	movs	r6, #0
 80186bc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80186c0:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 80186c4:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 80186c8:	9708      	str	r7, [sp, #32]
 80186ca:	e4e3      	b.n	8018094 <_svfprintf_r+0x2e4>
 80186cc:	4606      	mov	r6, r0
 80186ce:	e538      	b.n	8018142 <_svfprintf_r+0x392>
 80186d0:	2310      	movs	r3, #16
 80186d2:	6063      	str	r3, [r4, #4]
 80186d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80186d6:	3310      	adds	r3, #16
 80186d8:	9323      	str	r3, [sp, #140]	; 0x8c
 80186da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80186dc:	3301      	adds	r3, #1
 80186de:	2b07      	cmp	r3, #7
 80186e0:	9322      	str	r3, [sp, #136]	; 0x88
 80186e2:	dc04      	bgt.n	80186ee <_svfprintf_r+0x93e>
 80186e4:	3408      	adds	r4, #8
 80186e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80186e8:	3b10      	subs	r3, #16
 80186ea:	9310      	str	r3, [sp, #64]	; 0x40
 80186ec:	e611      	b.n	8018312 <_svfprintf_r+0x562>
 80186ee:	aa21      	add	r2, sp, #132	; 0x84
 80186f0:	4649      	mov	r1, r9
 80186f2:	4650      	mov	r0, sl
 80186f4:	f002 ffea 	bl	801b6cc <__ssprint_r>
 80186f8:	2800      	cmp	r0, #0
 80186fa:	f040 82b6 	bne.w	8018c6a <_svfprintf_r+0xeba>
 80186fe:	ac2e      	add	r4, sp, #184	; 0xb8
 8018700:	e7f1      	b.n	80186e6 <_svfprintf_r+0x936>
 8018702:	aa21      	add	r2, sp, #132	; 0x84
 8018704:	4649      	mov	r1, r9
 8018706:	4650      	mov	r0, sl
 8018708:	f002 ffe0 	bl	801b6cc <__ssprint_r>
 801870c:	2800      	cmp	r0, #0
 801870e:	f040 82ac 	bne.w	8018c6a <_svfprintf_r+0xeba>
 8018712:	ac2e      	add	r4, sp, #184	; 0xb8
 8018714:	e610      	b.n	8018338 <_svfprintf_r+0x588>
 8018716:	aa21      	add	r2, sp, #132	; 0x84
 8018718:	4649      	mov	r1, r9
 801871a:	4650      	mov	r0, sl
 801871c:	f002 ffd6 	bl	801b6cc <__ssprint_r>
 8018720:	2800      	cmp	r0, #0
 8018722:	f040 82a2 	bne.w	8018c6a <_svfprintf_r+0xeba>
 8018726:	ac2e      	add	r4, sp, #184	; 0xb8
 8018728:	e618      	b.n	801835c <_svfprintf_r+0x5ac>
 801872a:	aa21      	add	r2, sp, #132	; 0x84
 801872c:	4649      	mov	r1, r9
 801872e:	4650      	mov	r0, sl
 8018730:	f002 ffcc 	bl	801b6cc <__ssprint_r>
 8018734:	2800      	cmp	r0, #0
 8018736:	f040 8298 	bne.w	8018c6a <_svfprintf_r+0xeba>
 801873a:	ac2e      	add	r4, sp, #184	; 0xb8
 801873c:	e61e      	b.n	801837c <_svfprintf_r+0x5cc>
 801873e:	2310      	movs	r3, #16
 8018740:	6063      	str	r3, [r4, #4]
 8018742:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018744:	3310      	adds	r3, #16
 8018746:	9323      	str	r3, [sp, #140]	; 0x8c
 8018748:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801874a:	3301      	adds	r3, #1
 801874c:	2b07      	cmp	r3, #7
 801874e:	9322      	str	r3, [sp, #136]	; 0x88
 8018750:	dc04      	bgt.n	801875c <_svfprintf_r+0x9ac>
 8018752:	3408      	adds	r4, #8
 8018754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018756:	3b10      	subs	r3, #16
 8018758:	9310      	str	r3, [sp, #64]	; 0x40
 801875a:	e618      	b.n	801838e <_svfprintf_r+0x5de>
 801875c:	aa21      	add	r2, sp, #132	; 0x84
 801875e:	4649      	mov	r1, r9
 8018760:	4650      	mov	r0, sl
 8018762:	f002 ffb3 	bl	801b6cc <__ssprint_r>
 8018766:	2800      	cmp	r0, #0
 8018768:	f040 827f 	bne.w	8018c6a <_svfprintf_r+0xeba>
 801876c:	ac2e      	add	r4, sp, #184	; 0xb8
 801876e:	e7f1      	b.n	8018754 <_svfprintf_r+0x9a4>
 8018770:	aa21      	add	r2, sp, #132	; 0x84
 8018772:	4649      	mov	r1, r9
 8018774:	4650      	mov	r0, sl
 8018776:	f002 ffa9 	bl	801b6cc <__ssprint_r>
 801877a:	2800      	cmp	r0, #0
 801877c:	f040 8275 	bne.w	8018c6a <_svfprintf_r+0xeba>
 8018780:	ac2e      	add	r4, sp, #184	; 0xb8
 8018782:	e617      	b.n	80183b4 <_svfprintf_r+0x604>
 8018784:	2310      	movs	r3, #16
 8018786:	6063      	str	r3, [r4, #4]
 8018788:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801878a:	3310      	adds	r3, #16
 801878c:	9323      	str	r3, [sp, #140]	; 0x8c
 801878e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018790:	3301      	adds	r3, #1
 8018792:	2b07      	cmp	r3, #7
 8018794:	9322      	str	r3, [sp, #136]	; 0x88
 8018796:	dc02      	bgt.n	801879e <_svfprintf_r+0x9ee>
 8018798:	3408      	adds	r4, #8
 801879a:	3e10      	subs	r6, #16
 801879c:	e60e      	b.n	80183bc <_svfprintf_r+0x60c>
 801879e:	aa21      	add	r2, sp, #132	; 0x84
 80187a0:	4649      	mov	r1, r9
 80187a2:	4650      	mov	r0, sl
 80187a4:	f002 ff92 	bl	801b6cc <__ssprint_r>
 80187a8:	2800      	cmp	r0, #0
 80187aa:	f040 825e 	bne.w	8018c6a <_svfprintf_r+0xeba>
 80187ae:	ac2e      	add	r4, sp, #184	; 0xb8
 80187b0:	e7f3      	b.n	801879a <_svfprintf_r+0x9ea>
 80187b2:	aa21      	add	r2, sp, #132	; 0x84
 80187b4:	4649      	mov	r1, r9
 80187b6:	4650      	mov	r0, sl
 80187b8:	f002 ff88 	bl	801b6cc <__ssprint_r>
 80187bc:	2800      	cmp	r0, #0
 80187be:	f040 8254 	bne.w	8018c6a <_svfprintf_r+0xeba>
 80187c2:	ac2e      	add	r4, sp, #184	; 0xb8
 80187c4:	e60a      	b.n	80183dc <_svfprintf_r+0x62c>
 80187c6:	9b06      	ldr	r3, [sp, #24]
 80187c8:	2b65      	cmp	r3, #101	; 0x65
 80187ca:	f340 81a9 	ble.w	8018b20 <_svfprintf_r+0xd70>
 80187ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80187d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80187d2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80187d4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80187d6:	f7ee fca7 	bl	8007128 <__aeabi_dcmpeq>
 80187da:	2800      	cmp	r0, #0
 80187dc:	d062      	beq.n	80188a4 <_svfprintf_r+0xaf4>
 80187de:	4b2f      	ldr	r3, [pc, #188]	; (801889c <_svfprintf_r+0xaec>)
 80187e0:	6023      	str	r3, [r4, #0]
 80187e2:	2301      	movs	r3, #1
 80187e4:	6063      	str	r3, [r4, #4]
 80187e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80187e8:	3301      	adds	r3, #1
 80187ea:	9323      	str	r3, [sp, #140]	; 0x8c
 80187ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80187ee:	3301      	adds	r3, #1
 80187f0:	2b07      	cmp	r3, #7
 80187f2:	9322      	str	r3, [sp, #136]	; 0x88
 80187f4:	dc25      	bgt.n	8018842 <_svfprintf_r+0xa92>
 80187f6:	3408      	adds	r4, #8
 80187f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80187fa:	9a07      	ldr	r2, [sp, #28]
 80187fc:	4293      	cmp	r3, r2
 80187fe:	db02      	blt.n	8018806 <_svfprintf_r+0xa56>
 8018800:	07ee      	lsls	r6, r5, #31
 8018802:	f57f ae02 	bpl.w	801840a <_svfprintf_r+0x65a>
 8018806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801880a:	6023      	str	r3, [r4, #0]
 801880c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801880e:	6063      	str	r3, [r4, #4]
 8018810:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018812:	4413      	add	r3, r2
 8018814:	9323      	str	r3, [sp, #140]	; 0x8c
 8018816:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018818:	3301      	adds	r3, #1
 801881a:	2b07      	cmp	r3, #7
 801881c:	9322      	str	r3, [sp, #136]	; 0x88
 801881e:	dc1a      	bgt.n	8018856 <_svfprintf_r+0xaa6>
 8018820:	3408      	adds	r4, #8
 8018822:	9b07      	ldr	r3, [sp, #28]
 8018824:	1e5e      	subs	r6, r3, #1
 8018826:	2e00      	cmp	r6, #0
 8018828:	f77f adef 	ble.w	801840a <_svfprintf_r+0x65a>
 801882c:	f04f 0810 	mov.w	r8, #16
 8018830:	4f1b      	ldr	r7, [pc, #108]	; (80188a0 <_svfprintf_r+0xaf0>)
 8018832:	2e10      	cmp	r6, #16
 8018834:	6027      	str	r7, [r4, #0]
 8018836:	dc18      	bgt.n	801886a <_svfprintf_r+0xaba>
 8018838:	6066      	str	r6, [r4, #4]
 801883a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801883c:	441e      	add	r6, r3
 801883e:	9623      	str	r6, [sp, #140]	; 0x8c
 8018840:	e5d4      	b.n	80183ec <_svfprintf_r+0x63c>
 8018842:	aa21      	add	r2, sp, #132	; 0x84
 8018844:	4649      	mov	r1, r9
 8018846:	4650      	mov	r0, sl
 8018848:	f002 ff40 	bl	801b6cc <__ssprint_r>
 801884c:	2800      	cmp	r0, #0
 801884e:	f040 820c 	bne.w	8018c6a <_svfprintf_r+0xeba>
 8018852:	ac2e      	add	r4, sp, #184	; 0xb8
 8018854:	e7d0      	b.n	80187f8 <_svfprintf_r+0xa48>
 8018856:	aa21      	add	r2, sp, #132	; 0x84
 8018858:	4649      	mov	r1, r9
 801885a:	4650      	mov	r0, sl
 801885c:	f002 ff36 	bl	801b6cc <__ssprint_r>
 8018860:	2800      	cmp	r0, #0
 8018862:	f040 8202 	bne.w	8018c6a <_svfprintf_r+0xeba>
 8018866:	ac2e      	add	r4, sp, #184	; 0xb8
 8018868:	e7db      	b.n	8018822 <_svfprintf_r+0xa72>
 801886a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801886c:	f8c4 8004 	str.w	r8, [r4, #4]
 8018870:	3310      	adds	r3, #16
 8018872:	9323      	str	r3, [sp, #140]	; 0x8c
 8018874:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018876:	3301      	adds	r3, #1
 8018878:	2b07      	cmp	r3, #7
 801887a:	9322      	str	r3, [sp, #136]	; 0x88
 801887c:	dc02      	bgt.n	8018884 <_svfprintf_r+0xad4>
 801887e:	3408      	adds	r4, #8
 8018880:	3e10      	subs	r6, #16
 8018882:	e7d6      	b.n	8018832 <_svfprintf_r+0xa82>
 8018884:	aa21      	add	r2, sp, #132	; 0x84
 8018886:	4649      	mov	r1, r9
 8018888:	4650      	mov	r0, sl
 801888a:	f002 ff1f 	bl	801b6cc <__ssprint_r>
 801888e:	2800      	cmp	r0, #0
 8018890:	f040 81eb 	bne.w	8018c6a <_svfprintf_r+0xeba>
 8018894:	ac2e      	add	r4, sp, #184	; 0xb8
 8018896:	e7f3      	b.n	8018880 <_svfprintf_r+0xad0>
 8018898:	08023345 	.word	0x08023345
 801889c:	08023356 	.word	0x08023356
 80188a0:	08023368 	.word	0x08023368
 80188a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	dc7a      	bgt.n	80189a0 <_svfprintf_r+0xbf0>
 80188aa:	4b9b      	ldr	r3, [pc, #620]	; (8018b18 <_svfprintf_r+0xd68>)
 80188ac:	6023      	str	r3, [r4, #0]
 80188ae:	2301      	movs	r3, #1
 80188b0:	6063      	str	r3, [r4, #4]
 80188b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80188b4:	3301      	adds	r3, #1
 80188b6:	9323      	str	r3, [sp, #140]	; 0x8c
 80188b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80188ba:	3301      	adds	r3, #1
 80188bc:	2b07      	cmp	r3, #7
 80188be:	9322      	str	r3, [sp, #136]	; 0x88
 80188c0:	dc44      	bgt.n	801894c <_svfprintf_r+0xb9c>
 80188c2:	3408      	adds	r4, #8
 80188c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80188c6:	b923      	cbnz	r3, 80188d2 <_svfprintf_r+0xb22>
 80188c8:	9b07      	ldr	r3, [sp, #28]
 80188ca:	b913      	cbnz	r3, 80188d2 <_svfprintf_r+0xb22>
 80188cc:	07e8      	lsls	r0, r5, #31
 80188ce:	f57f ad9c 	bpl.w	801840a <_svfprintf_r+0x65a>
 80188d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80188d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80188d6:	6023      	str	r3, [r4, #0]
 80188d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80188da:	6063      	str	r3, [r4, #4]
 80188dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80188de:	4413      	add	r3, r2
 80188e0:	9323      	str	r3, [sp, #140]	; 0x8c
 80188e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80188e4:	3301      	adds	r3, #1
 80188e6:	2b07      	cmp	r3, #7
 80188e8:	9322      	str	r3, [sp, #136]	; 0x88
 80188ea:	dc39      	bgt.n	8018960 <_svfprintf_r+0xbb0>
 80188ec:	f104 0308 	add.w	r3, r4, #8
 80188f0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80188f2:	2e00      	cmp	r6, #0
 80188f4:	da19      	bge.n	801892a <_svfprintf_r+0xb7a>
 80188f6:	2410      	movs	r4, #16
 80188f8:	4f88      	ldr	r7, [pc, #544]	; (8018b1c <_svfprintf_r+0xd6c>)
 80188fa:	4276      	negs	r6, r6
 80188fc:	2e10      	cmp	r6, #16
 80188fe:	601f      	str	r7, [r3, #0]
 8018900:	dc38      	bgt.n	8018974 <_svfprintf_r+0xbc4>
 8018902:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8018904:	605e      	str	r6, [r3, #4]
 8018906:	4416      	add	r6, r2
 8018908:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801890a:	9623      	str	r6, [sp, #140]	; 0x8c
 801890c:	3201      	adds	r2, #1
 801890e:	2a07      	cmp	r2, #7
 8018910:	f103 0308 	add.w	r3, r3, #8
 8018914:	9222      	str	r2, [sp, #136]	; 0x88
 8018916:	dd08      	ble.n	801892a <_svfprintf_r+0xb7a>
 8018918:	aa21      	add	r2, sp, #132	; 0x84
 801891a:	4649      	mov	r1, r9
 801891c:	4650      	mov	r0, sl
 801891e:	f002 fed5 	bl	801b6cc <__ssprint_r>
 8018922:	2800      	cmp	r0, #0
 8018924:	f040 81a1 	bne.w	8018c6a <_svfprintf_r+0xeba>
 8018928:	ab2e      	add	r3, sp, #184	; 0xb8
 801892a:	9a07      	ldr	r2, [sp, #28]
 801892c:	9907      	ldr	r1, [sp, #28]
 801892e:	605a      	str	r2, [r3, #4]
 8018930:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8018932:	f8c3 8000 	str.w	r8, [r3]
 8018936:	440a      	add	r2, r1
 8018938:	9223      	str	r2, [sp, #140]	; 0x8c
 801893a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801893c:	3201      	adds	r2, #1
 801893e:	2a07      	cmp	r2, #7
 8018940:	9222      	str	r2, [sp, #136]	; 0x88
 8018942:	f73f ad59 	bgt.w	80183f8 <_svfprintf_r+0x648>
 8018946:	f103 0408 	add.w	r4, r3, #8
 801894a:	e55e      	b.n	801840a <_svfprintf_r+0x65a>
 801894c:	aa21      	add	r2, sp, #132	; 0x84
 801894e:	4649      	mov	r1, r9
 8018950:	4650      	mov	r0, sl
 8018952:	f002 febb 	bl	801b6cc <__ssprint_r>
 8018956:	2800      	cmp	r0, #0
 8018958:	f040 8187 	bne.w	8018c6a <_svfprintf_r+0xeba>
 801895c:	ac2e      	add	r4, sp, #184	; 0xb8
 801895e:	e7b1      	b.n	80188c4 <_svfprintf_r+0xb14>
 8018960:	aa21      	add	r2, sp, #132	; 0x84
 8018962:	4649      	mov	r1, r9
 8018964:	4650      	mov	r0, sl
 8018966:	f002 feb1 	bl	801b6cc <__ssprint_r>
 801896a:	2800      	cmp	r0, #0
 801896c:	f040 817d 	bne.w	8018c6a <_svfprintf_r+0xeba>
 8018970:	ab2e      	add	r3, sp, #184	; 0xb8
 8018972:	e7bd      	b.n	80188f0 <_svfprintf_r+0xb40>
 8018974:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8018976:	605c      	str	r4, [r3, #4]
 8018978:	3210      	adds	r2, #16
 801897a:	9223      	str	r2, [sp, #140]	; 0x8c
 801897c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801897e:	3201      	adds	r2, #1
 8018980:	2a07      	cmp	r2, #7
 8018982:	9222      	str	r2, [sp, #136]	; 0x88
 8018984:	dc02      	bgt.n	801898c <_svfprintf_r+0xbdc>
 8018986:	3308      	adds	r3, #8
 8018988:	3e10      	subs	r6, #16
 801898a:	e7b7      	b.n	80188fc <_svfprintf_r+0xb4c>
 801898c:	aa21      	add	r2, sp, #132	; 0x84
 801898e:	4649      	mov	r1, r9
 8018990:	4650      	mov	r0, sl
 8018992:	f002 fe9b 	bl	801b6cc <__ssprint_r>
 8018996:	2800      	cmp	r0, #0
 8018998:	f040 8167 	bne.w	8018c6a <_svfprintf_r+0xeba>
 801899c:	ab2e      	add	r3, sp, #184	; 0xb8
 801899e:	e7f3      	b.n	8018988 <_svfprintf_r+0xbd8>
 80189a0:	9b07      	ldr	r3, [sp, #28]
 80189a2:	42bb      	cmp	r3, r7
 80189a4:	bfa8      	it	ge
 80189a6:	463b      	movge	r3, r7
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	461e      	mov	r6, r3
 80189ac:	dd0b      	ble.n	80189c6 <_svfprintf_r+0xc16>
 80189ae:	6063      	str	r3, [r4, #4]
 80189b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80189b2:	f8c4 8000 	str.w	r8, [r4]
 80189b6:	4433      	add	r3, r6
 80189b8:	9323      	str	r3, [sp, #140]	; 0x8c
 80189ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80189bc:	3301      	adds	r3, #1
 80189be:	2b07      	cmp	r3, #7
 80189c0:	9322      	str	r3, [sp, #136]	; 0x88
 80189c2:	dc5f      	bgt.n	8018a84 <_svfprintf_r+0xcd4>
 80189c4:	3408      	adds	r4, #8
 80189c6:	2e00      	cmp	r6, #0
 80189c8:	bfb4      	ite	lt
 80189ca:	463e      	movlt	r6, r7
 80189cc:	1bbe      	subge	r6, r7, r6
 80189ce:	2e00      	cmp	r6, #0
 80189d0:	dd0f      	ble.n	80189f2 <_svfprintf_r+0xc42>
 80189d2:	f8df b148 	ldr.w	fp, [pc, #328]	; 8018b1c <_svfprintf_r+0xd6c>
 80189d6:	2e10      	cmp	r6, #16
 80189d8:	f8c4 b000 	str.w	fp, [r4]
 80189dc:	dc5c      	bgt.n	8018a98 <_svfprintf_r+0xce8>
 80189de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80189e0:	6066      	str	r6, [r4, #4]
 80189e2:	441e      	add	r6, r3
 80189e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80189e6:	9623      	str	r6, [sp, #140]	; 0x8c
 80189e8:	3301      	adds	r3, #1
 80189ea:	2b07      	cmp	r3, #7
 80189ec:	9322      	str	r3, [sp, #136]	; 0x88
 80189ee:	dc6a      	bgt.n	8018ac6 <_svfprintf_r+0xd16>
 80189f0:	3408      	adds	r4, #8
 80189f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80189f4:	9a07      	ldr	r2, [sp, #28]
 80189f6:	4293      	cmp	r3, r2
 80189f8:	db01      	blt.n	80189fe <_svfprintf_r+0xc4e>
 80189fa:	07e9      	lsls	r1, r5, #31
 80189fc:	d50d      	bpl.n	8018a1a <_svfprintf_r+0xc6a>
 80189fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018a00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a02:	6023      	str	r3, [r4, #0]
 8018a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018a06:	6063      	str	r3, [r4, #4]
 8018a08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018a0a:	4413      	add	r3, r2
 8018a0c:	9323      	str	r3, [sp, #140]	; 0x8c
 8018a0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018a10:	3301      	adds	r3, #1
 8018a12:	2b07      	cmp	r3, #7
 8018a14:	9322      	str	r3, [sp, #136]	; 0x88
 8018a16:	dc60      	bgt.n	8018ada <_svfprintf_r+0xd2a>
 8018a18:	3408      	adds	r4, #8
 8018a1a:	9b07      	ldr	r3, [sp, #28]
 8018a1c:	9a07      	ldr	r2, [sp, #28]
 8018a1e:	1bde      	subs	r6, r3, r7
 8018a20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018a22:	1ad3      	subs	r3, r2, r3
 8018a24:	429e      	cmp	r6, r3
 8018a26:	bfa8      	it	ge
 8018a28:	461e      	movge	r6, r3
 8018a2a:	2e00      	cmp	r6, #0
 8018a2c:	dd0b      	ble.n	8018a46 <_svfprintf_r+0xc96>
 8018a2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018a30:	4447      	add	r7, r8
 8018a32:	4433      	add	r3, r6
 8018a34:	9323      	str	r3, [sp, #140]	; 0x8c
 8018a36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018a38:	6027      	str	r7, [r4, #0]
 8018a3a:	3301      	adds	r3, #1
 8018a3c:	2b07      	cmp	r3, #7
 8018a3e:	6066      	str	r6, [r4, #4]
 8018a40:	9322      	str	r3, [sp, #136]	; 0x88
 8018a42:	dc54      	bgt.n	8018aee <_svfprintf_r+0xd3e>
 8018a44:	3408      	adds	r4, #8
 8018a46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018a48:	9a07      	ldr	r2, [sp, #28]
 8018a4a:	2e00      	cmp	r6, #0
 8018a4c:	eba2 0303 	sub.w	r3, r2, r3
 8018a50:	bfb4      	ite	lt
 8018a52:	461e      	movlt	r6, r3
 8018a54:	1b9e      	subge	r6, r3, r6
 8018a56:	2e00      	cmp	r6, #0
 8018a58:	f77f acd7 	ble.w	801840a <_svfprintf_r+0x65a>
 8018a5c:	f04f 0810 	mov.w	r8, #16
 8018a60:	4f2e      	ldr	r7, [pc, #184]	; (8018b1c <_svfprintf_r+0xd6c>)
 8018a62:	2e10      	cmp	r6, #16
 8018a64:	6027      	str	r7, [r4, #0]
 8018a66:	f77f aee7 	ble.w	8018838 <_svfprintf_r+0xa88>
 8018a6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018a6c:	f8c4 8004 	str.w	r8, [r4, #4]
 8018a70:	3310      	adds	r3, #16
 8018a72:	9323      	str	r3, [sp, #140]	; 0x8c
 8018a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018a76:	3301      	adds	r3, #1
 8018a78:	2b07      	cmp	r3, #7
 8018a7a:	9322      	str	r3, [sp, #136]	; 0x88
 8018a7c:	dc41      	bgt.n	8018b02 <_svfprintf_r+0xd52>
 8018a7e:	3408      	adds	r4, #8
 8018a80:	3e10      	subs	r6, #16
 8018a82:	e7ee      	b.n	8018a62 <_svfprintf_r+0xcb2>
 8018a84:	aa21      	add	r2, sp, #132	; 0x84
 8018a86:	4649      	mov	r1, r9
 8018a88:	4650      	mov	r0, sl
 8018a8a:	f002 fe1f 	bl	801b6cc <__ssprint_r>
 8018a8e:	2800      	cmp	r0, #0
 8018a90:	f040 80eb 	bne.w	8018c6a <_svfprintf_r+0xeba>
 8018a94:	ac2e      	add	r4, sp, #184	; 0xb8
 8018a96:	e796      	b.n	80189c6 <_svfprintf_r+0xc16>
 8018a98:	2310      	movs	r3, #16
 8018a9a:	6063      	str	r3, [r4, #4]
 8018a9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018a9e:	3310      	adds	r3, #16
 8018aa0:	9323      	str	r3, [sp, #140]	; 0x8c
 8018aa2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018aa4:	3301      	adds	r3, #1
 8018aa6:	2b07      	cmp	r3, #7
 8018aa8:	9322      	str	r3, [sp, #136]	; 0x88
 8018aaa:	dc02      	bgt.n	8018ab2 <_svfprintf_r+0xd02>
 8018aac:	3408      	adds	r4, #8
 8018aae:	3e10      	subs	r6, #16
 8018ab0:	e791      	b.n	80189d6 <_svfprintf_r+0xc26>
 8018ab2:	aa21      	add	r2, sp, #132	; 0x84
 8018ab4:	4649      	mov	r1, r9
 8018ab6:	4650      	mov	r0, sl
 8018ab8:	f002 fe08 	bl	801b6cc <__ssprint_r>
 8018abc:	2800      	cmp	r0, #0
 8018abe:	f040 80d4 	bne.w	8018c6a <_svfprintf_r+0xeba>
 8018ac2:	ac2e      	add	r4, sp, #184	; 0xb8
 8018ac4:	e7f3      	b.n	8018aae <_svfprintf_r+0xcfe>
 8018ac6:	aa21      	add	r2, sp, #132	; 0x84
 8018ac8:	4649      	mov	r1, r9
 8018aca:	4650      	mov	r0, sl
 8018acc:	f002 fdfe 	bl	801b6cc <__ssprint_r>
 8018ad0:	2800      	cmp	r0, #0
 8018ad2:	f040 80ca 	bne.w	8018c6a <_svfprintf_r+0xeba>
 8018ad6:	ac2e      	add	r4, sp, #184	; 0xb8
 8018ad8:	e78b      	b.n	80189f2 <_svfprintf_r+0xc42>
 8018ada:	aa21      	add	r2, sp, #132	; 0x84
 8018adc:	4649      	mov	r1, r9
 8018ade:	4650      	mov	r0, sl
 8018ae0:	f002 fdf4 	bl	801b6cc <__ssprint_r>
 8018ae4:	2800      	cmp	r0, #0
 8018ae6:	f040 80c0 	bne.w	8018c6a <_svfprintf_r+0xeba>
 8018aea:	ac2e      	add	r4, sp, #184	; 0xb8
 8018aec:	e795      	b.n	8018a1a <_svfprintf_r+0xc6a>
 8018aee:	aa21      	add	r2, sp, #132	; 0x84
 8018af0:	4649      	mov	r1, r9
 8018af2:	4650      	mov	r0, sl
 8018af4:	f002 fdea 	bl	801b6cc <__ssprint_r>
 8018af8:	2800      	cmp	r0, #0
 8018afa:	f040 80b6 	bne.w	8018c6a <_svfprintf_r+0xeba>
 8018afe:	ac2e      	add	r4, sp, #184	; 0xb8
 8018b00:	e7a1      	b.n	8018a46 <_svfprintf_r+0xc96>
 8018b02:	aa21      	add	r2, sp, #132	; 0x84
 8018b04:	4649      	mov	r1, r9
 8018b06:	4650      	mov	r0, sl
 8018b08:	f002 fde0 	bl	801b6cc <__ssprint_r>
 8018b0c:	2800      	cmp	r0, #0
 8018b0e:	f040 80ac 	bne.w	8018c6a <_svfprintf_r+0xeba>
 8018b12:	ac2e      	add	r4, sp, #184	; 0xb8
 8018b14:	e7b4      	b.n	8018a80 <_svfprintf_r+0xcd0>
 8018b16:	bf00      	nop
 8018b18:	08023356 	.word	0x08023356
 8018b1c:	08023368 	.word	0x08023368
 8018b20:	9b07      	ldr	r3, [sp, #28]
 8018b22:	2b01      	cmp	r3, #1
 8018b24:	dc01      	bgt.n	8018b2a <_svfprintf_r+0xd7a>
 8018b26:	07ea      	lsls	r2, r5, #31
 8018b28:	d576      	bpl.n	8018c18 <_svfprintf_r+0xe68>
 8018b2a:	2301      	movs	r3, #1
 8018b2c:	6063      	str	r3, [r4, #4]
 8018b2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018b30:	f8c4 8000 	str.w	r8, [r4]
 8018b34:	3301      	adds	r3, #1
 8018b36:	9323      	str	r3, [sp, #140]	; 0x8c
 8018b38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018b3a:	3301      	adds	r3, #1
 8018b3c:	2b07      	cmp	r3, #7
 8018b3e:	9322      	str	r3, [sp, #136]	; 0x88
 8018b40:	dc36      	bgt.n	8018bb0 <_svfprintf_r+0xe00>
 8018b42:	3408      	adds	r4, #8
 8018b44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018b46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018b48:	6023      	str	r3, [r4, #0]
 8018b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018b4c:	6063      	str	r3, [r4, #4]
 8018b4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018b50:	4413      	add	r3, r2
 8018b52:	9323      	str	r3, [sp, #140]	; 0x8c
 8018b54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018b56:	3301      	adds	r3, #1
 8018b58:	2b07      	cmp	r3, #7
 8018b5a:	9322      	str	r3, [sp, #136]	; 0x88
 8018b5c:	dc31      	bgt.n	8018bc2 <_svfprintf_r+0xe12>
 8018b5e:	3408      	adds	r4, #8
 8018b60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018b62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018b64:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018b66:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018b68:	f7ee fade 	bl	8007128 <__aeabi_dcmpeq>
 8018b6c:	9b07      	ldr	r3, [sp, #28]
 8018b6e:	1e5e      	subs	r6, r3, #1
 8018b70:	2800      	cmp	r0, #0
 8018b72:	d12f      	bne.n	8018bd4 <_svfprintf_r+0xe24>
 8018b74:	f108 0301 	add.w	r3, r8, #1
 8018b78:	e884 0048 	stmia.w	r4, {r3, r6}
 8018b7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018b7e:	9a07      	ldr	r2, [sp, #28]
 8018b80:	3b01      	subs	r3, #1
 8018b82:	4413      	add	r3, r2
 8018b84:	9323      	str	r3, [sp, #140]	; 0x8c
 8018b86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018b88:	3301      	adds	r3, #1
 8018b8a:	2b07      	cmp	r3, #7
 8018b8c:	9322      	str	r3, [sp, #136]	; 0x88
 8018b8e:	dd4a      	ble.n	8018c26 <_svfprintf_r+0xe76>
 8018b90:	aa21      	add	r2, sp, #132	; 0x84
 8018b92:	4649      	mov	r1, r9
 8018b94:	4650      	mov	r0, sl
 8018b96:	f002 fd99 	bl	801b6cc <__ssprint_r>
 8018b9a:	2800      	cmp	r0, #0
 8018b9c:	d165      	bne.n	8018c6a <_svfprintf_r+0xeba>
 8018b9e:	ac2e      	add	r4, sp, #184	; 0xb8
 8018ba0:	ab1d      	add	r3, sp, #116	; 0x74
 8018ba2:	6023      	str	r3, [r4, #0]
 8018ba4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018ba6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018ba8:	6063      	str	r3, [r4, #4]
 8018baa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018bac:	4413      	add	r3, r2
 8018bae:	e41c      	b.n	80183ea <_svfprintf_r+0x63a>
 8018bb0:	aa21      	add	r2, sp, #132	; 0x84
 8018bb2:	4649      	mov	r1, r9
 8018bb4:	4650      	mov	r0, sl
 8018bb6:	f002 fd89 	bl	801b6cc <__ssprint_r>
 8018bba:	2800      	cmp	r0, #0
 8018bbc:	d155      	bne.n	8018c6a <_svfprintf_r+0xeba>
 8018bbe:	ac2e      	add	r4, sp, #184	; 0xb8
 8018bc0:	e7c0      	b.n	8018b44 <_svfprintf_r+0xd94>
 8018bc2:	aa21      	add	r2, sp, #132	; 0x84
 8018bc4:	4649      	mov	r1, r9
 8018bc6:	4650      	mov	r0, sl
 8018bc8:	f002 fd80 	bl	801b6cc <__ssprint_r>
 8018bcc:	2800      	cmp	r0, #0
 8018bce:	d14c      	bne.n	8018c6a <_svfprintf_r+0xeba>
 8018bd0:	ac2e      	add	r4, sp, #184	; 0xb8
 8018bd2:	e7c5      	b.n	8018b60 <_svfprintf_r+0xdb0>
 8018bd4:	2e00      	cmp	r6, #0
 8018bd6:	dde3      	ble.n	8018ba0 <_svfprintf_r+0xdf0>
 8018bd8:	f04f 0810 	mov.w	r8, #16
 8018bdc:	4f58      	ldr	r7, [pc, #352]	; (8018d40 <_svfprintf_r+0xf90>)
 8018bde:	2e10      	cmp	r6, #16
 8018be0:	6027      	str	r7, [r4, #0]
 8018be2:	dc04      	bgt.n	8018bee <_svfprintf_r+0xe3e>
 8018be4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018be6:	6066      	str	r6, [r4, #4]
 8018be8:	441e      	add	r6, r3
 8018bea:	9623      	str	r6, [sp, #140]	; 0x8c
 8018bec:	e7cb      	b.n	8018b86 <_svfprintf_r+0xdd6>
 8018bee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018bf0:	f8c4 8004 	str.w	r8, [r4, #4]
 8018bf4:	3310      	adds	r3, #16
 8018bf6:	9323      	str	r3, [sp, #140]	; 0x8c
 8018bf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018bfa:	3301      	adds	r3, #1
 8018bfc:	2b07      	cmp	r3, #7
 8018bfe:	9322      	str	r3, [sp, #136]	; 0x88
 8018c00:	dc02      	bgt.n	8018c08 <_svfprintf_r+0xe58>
 8018c02:	3408      	adds	r4, #8
 8018c04:	3e10      	subs	r6, #16
 8018c06:	e7ea      	b.n	8018bde <_svfprintf_r+0xe2e>
 8018c08:	aa21      	add	r2, sp, #132	; 0x84
 8018c0a:	4649      	mov	r1, r9
 8018c0c:	4650      	mov	r0, sl
 8018c0e:	f002 fd5d 	bl	801b6cc <__ssprint_r>
 8018c12:	bb50      	cbnz	r0, 8018c6a <_svfprintf_r+0xeba>
 8018c14:	ac2e      	add	r4, sp, #184	; 0xb8
 8018c16:	e7f5      	b.n	8018c04 <_svfprintf_r+0xe54>
 8018c18:	2301      	movs	r3, #1
 8018c1a:	6063      	str	r3, [r4, #4]
 8018c1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018c1e:	f8c4 8000 	str.w	r8, [r4]
 8018c22:	3301      	adds	r3, #1
 8018c24:	e7ae      	b.n	8018b84 <_svfprintf_r+0xdd4>
 8018c26:	3408      	adds	r4, #8
 8018c28:	e7ba      	b.n	8018ba0 <_svfprintf_r+0xdf0>
 8018c2a:	3408      	adds	r4, #8
 8018c2c:	f7ff bbed 	b.w	801840a <_svfprintf_r+0x65a>
 8018c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018c32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018c34:	1a9d      	subs	r5, r3, r2
 8018c36:	2d00      	cmp	r5, #0
 8018c38:	f77f abea 	ble.w	8018410 <_svfprintf_r+0x660>
 8018c3c:	2610      	movs	r6, #16
 8018c3e:	4b41      	ldr	r3, [pc, #260]	; (8018d44 <_svfprintf_r+0xf94>)
 8018c40:	2d10      	cmp	r5, #16
 8018c42:	6023      	str	r3, [r4, #0]
 8018c44:	dc1b      	bgt.n	8018c7e <_svfprintf_r+0xece>
 8018c46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018c48:	6065      	str	r5, [r4, #4]
 8018c4a:	441d      	add	r5, r3
 8018c4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018c4e:	9523      	str	r5, [sp, #140]	; 0x8c
 8018c50:	3301      	adds	r3, #1
 8018c52:	2b07      	cmp	r3, #7
 8018c54:	9322      	str	r3, [sp, #136]	; 0x88
 8018c56:	f77f abdb 	ble.w	8018410 <_svfprintf_r+0x660>
 8018c5a:	aa21      	add	r2, sp, #132	; 0x84
 8018c5c:	4649      	mov	r1, r9
 8018c5e:	4650      	mov	r0, sl
 8018c60:	f002 fd34 	bl	801b6cc <__ssprint_r>
 8018c64:	2800      	cmp	r0, #0
 8018c66:	f43f abd3 	beq.w	8018410 <_svfprintf_r+0x660>
 8018c6a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8018c6e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018c72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018c74:	bf18      	it	ne
 8018c76:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8018c7a:	f7ff b8bd 	b.w	8017df8 <_svfprintf_r+0x48>
 8018c7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018c80:	6066      	str	r6, [r4, #4]
 8018c82:	3310      	adds	r3, #16
 8018c84:	9323      	str	r3, [sp, #140]	; 0x8c
 8018c86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018c88:	3301      	adds	r3, #1
 8018c8a:	2b07      	cmp	r3, #7
 8018c8c:	9322      	str	r3, [sp, #136]	; 0x88
 8018c8e:	dc02      	bgt.n	8018c96 <_svfprintf_r+0xee6>
 8018c90:	3408      	adds	r4, #8
 8018c92:	3d10      	subs	r5, #16
 8018c94:	e7d3      	b.n	8018c3e <_svfprintf_r+0xe8e>
 8018c96:	aa21      	add	r2, sp, #132	; 0x84
 8018c98:	4649      	mov	r1, r9
 8018c9a:	4650      	mov	r0, sl
 8018c9c:	f002 fd16 	bl	801b6cc <__ssprint_r>
 8018ca0:	2800      	cmp	r0, #0
 8018ca2:	d1e2      	bne.n	8018c6a <_svfprintf_r+0xeba>
 8018ca4:	ac2e      	add	r4, sp, #184	; 0xb8
 8018ca6:	e7f4      	b.n	8018c92 <_svfprintf_r+0xee2>
 8018ca8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d0dd      	beq.n	8018c6a <_svfprintf_r+0xeba>
 8018cae:	aa21      	add	r2, sp, #132	; 0x84
 8018cb0:	4649      	mov	r1, r9
 8018cb2:	4650      	mov	r0, sl
 8018cb4:	f002 fd0a 	bl	801b6cc <__ssprint_r>
 8018cb8:	e7d7      	b.n	8018c6a <_svfprintf_r+0xeba>
 8018cba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018cbe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018cc0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018cc2:	f7ee fa63 	bl	800718c <__aeabi_dcmpun>
 8018cc6:	2800      	cmp	r0, #0
 8018cc8:	f43f aa3d 	beq.w	8018146 <_svfprintf_r+0x396>
 8018ccc:	4b1e      	ldr	r3, [pc, #120]	; (8018d48 <_svfprintf_r+0xf98>)
 8018cce:	4a1f      	ldr	r2, [pc, #124]	; (8018d4c <_svfprintf_r+0xf9c>)
 8018cd0:	f7ff ba2d 	b.w	801812e <_svfprintf_r+0x37e>
 8018cd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018cd6:	eba3 0308 	sub.w	r3, r3, r8
 8018cda:	9307      	str	r3, [sp, #28]
 8018cdc:	f7ff baaf 	b.w	801823e <_svfprintf_r+0x48e>
 8018ce0:	ea56 0207 	orrs.w	r2, r6, r7
 8018ce4:	950f      	str	r5, [sp, #60]	; 0x3c
 8018ce6:	f43f ac2b 	beq.w	8018540 <_svfprintf_r+0x790>
 8018cea:	2b01      	cmp	r3, #1
 8018cec:	f43f ac9d 	beq.w	801862a <_svfprintf_r+0x87a>
 8018cf0:	2b02      	cmp	r3, #2
 8018cf2:	f43f acbd 	beq.w	8018670 <_svfprintf_r+0x8c0>
 8018cf6:	ab2e      	add	r3, sp, #184	; 0xb8
 8018cf8:	08f1      	lsrs	r1, r6, #3
 8018cfa:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8018cfe:	08f8      	lsrs	r0, r7, #3
 8018d00:	f006 0207 	and.w	r2, r6, #7
 8018d04:	4607      	mov	r7, r0
 8018d06:	460e      	mov	r6, r1
 8018d08:	3230      	adds	r2, #48	; 0x30
 8018d0a:	ea56 0107 	orrs.w	r1, r6, r7
 8018d0e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8018d12:	f803 2c01 	strb.w	r2, [r3, #-1]
 8018d16:	f47f ac86 	bne.w	8018626 <_svfprintf_r+0x876>
 8018d1a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018d1c:	07c9      	lsls	r1, r1, #31
 8018d1e:	d506      	bpl.n	8018d2e <_svfprintf_r+0xf7e>
 8018d20:	2a30      	cmp	r2, #48	; 0x30
 8018d22:	d004      	beq.n	8018d2e <_svfprintf_r+0xf7e>
 8018d24:	2230      	movs	r2, #48	; 0x30
 8018d26:	f808 2c01 	strb.w	r2, [r8, #-1]
 8018d2a:	f1a3 0802 	sub.w	r8, r3, #2
 8018d2e:	ab2e      	add	r3, sp, #184	; 0xb8
 8018d30:	465e      	mov	r6, fp
 8018d32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8018d34:	eba3 0b08 	sub.w	fp, r3, r8
 8018d38:	2700      	movs	r7, #0
 8018d3a:	f7ff bace 	b.w	80182da <_svfprintf_r+0x52a>
 8018d3e:	bf00      	nop
 8018d40:	08023368 	.word	0x08023368
 8018d44:	08023358 	.word	0x08023358
 8018d48:	0802332c 	.word	0x0802332c
 8018d4c:	08023330 	.word	0x08023330

08018d50 <write>:
 8018d50:	4613      	mov	r3, r2
 8018d52:	460a      	mov	r2, r1
 8018d54:	4601      	mov	r1, r0
 8018d56:	4802      	ldr	r0, [pc, #8]	; (8018d60 <write+0x10>)
 8018d58:	6800      	ldr	r0, [r0, #0]
 8018d5a:	f000 ba9d 	b.w	8019298 <_write_r>
 8018d5e:	bf00      	nop
 8018d60:	2000002c 	.word	0x2000002c

08018d64 <__tzcalc_limits>:
 8018d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d68:	4604      	mov	r4, r0
 8018d6a:	f001 fd35 	bl	801a7d8 <__gettzinfo>
 8018d6e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8018d72:	429c      	cmp	r4, r3
 8018d74:	f340 8098 	ble.w	8018ea8 <__tzcalc_limits+0x144>
 8018d78:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8018d7c:	f240 126d 	movw	r2, #365	; 0x16d
 8018d80:	18e3      	adds	r3, r4, r3
 8018d82:	109b      	asrs	r3, r3, #2
 8018d84:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 8018d88:	fb02 3505 	mla	r5, r2, r5, r3
 8018d8c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8018d90:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 8018d94:	fb93 f3f2 	sdiv	r3, r3, r2
 8018d98:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8018d9c:	441d      	add	r5, r3
 8018d9e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8018da2:	18a2      	adds	r2, r4, r2
 8018da4:	fb92 f2f3 	sdiv	r2, r2, r3
 8018da8:	fb94 f7f3 	sdiv	r7, r4, r3
 8018dac:	4415      	add	r5, r2
 8018dae:	2264      	movs	r2, #100	; 0x64
 8018db0:	fb03 4717 	mls	r7, r3, r7, r4
 8018db4:	fb94 f6f2 	sdiv	r6, r4, r2
 8018db8:	fab7 fe87 	clz	lr, r7
 8018dbc:	4601      	mov	r1, r0
 8018dbe:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 8018dc2:	fb02 4616 	mls	r6, r2, r6, r4
 8018dc6:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8018dca:	9301      	str	r3, [sp, #4]
 8018dcc:	f004 0303 	and.w	r3, r4, #3
 8018dd0:	6044      	str	r4, [r0, #4]
 8018dd2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8018dd6:	9300      	str	r3, [sp, #0]
 8018dd8:	7a0b      	ldrb	r3, [r1, #8]
 8018dda:	2b4a      	cmp	r3, #74	; 0x4a
 8018ddc:	d123      	bne.n	8018e26 <__tzcalc_limits+0xc2>
 8018dde:	694c      	ldr	r4, [r1, #20]
 8018de0:	9a00      	ldr	r2, [sp, #0]
 8018de2:	192b      	adds	r3, r5, r4
 8018de4:	b902      	cbnz	r2, 8018de8 <__tzcalc_limits+0x84>
 8018de6:	b906      	cbnz	r6, 8018dea <__tzcalc_limits+0x86>
 8018de8:	b9df      	cbnz	r7, 8018e22 <__tzcalc_limits+0xbe>
 8018dea:	2c3b      	cmp	r4, #59	; 0x3b
 8018dec:	bfd4      	ite	le
 8018dee:	2400      	movle	r4, #0
 8018df0:	2401      	movgt	r4, #1
 8018df2:	441c      	add	r4, r3
 8018df4:	3c01      	subs	r4, #1
 8018df6:	4b2d      	ldr	r3, [pc, #180]	; (8018eac <__tzcalc_limits+0x148>)
 8018df8:	698a      	ldr	r2, [r1, #24]
 8018dfa:	fb03 2404 	mla	r4, r3, r4, r2
 8018dfe:	6a0b      	ldr	r3, [r1, #32]
 8018e00:	441c      	add	r4, r3
 8018e02:	9b01      	ldr	r3, [sp, #4]
 8018e04:	f841 4f1c 	str.w	r4, [r1, #28]!
 8018e08:	428b      	cmp	r3, r1
 8018e0a:	d1e5      	bne.n	8018dd8 <__tzcalc_limits+0x74>
 8018e0c:	69c3      	ldr	r3, [r0, #28]
 8018e0e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8018e10:	4293      	cmp	r3, r2
 8018e12:	bfac      	ite	ge
 8018e14:	2300      	movge	r3, #0
 8018e16:	2301      	movlt	r3, #1
 8018e18:	6003      	str	r3, [r0, #0]
 8018e1a:	2001      	movs	r0, #1
 8018e1c:	b003      	add	sp, #12
 8018e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e22:	2400      	movs	r4, #0
 8018e24:	e7e5      	b.n	8018df2 <__tzcalc_limits+0x8e>
 8018e26:	2b44      	cmp	r3, #68	; 0x44
 8018e28:	d102      	bne.n	8018e30 <__tzcalc_limits+0xcc>
 8018e2a:	694b      	ldr	r3, [r1, #20]
 8018e2c:	18ec      	adds	r4, r5, r3
 8018e2e:	e7e2      	b.n	8018df6 <__tzcalc_limits+0x92>
 8018e30:	9b00      	ldr	r3, [sp, #0]
 8018e32:	bb7b      	cbnz	r3, 8018e94 <__tzcalc_limits+0x130>
 8018e34:	2e00      	cmp	r6, #0
 8018e36:	bf0c      	ite	eq
 8018e38:	46f0      	moveq	r8, lr
 8018e3a:	f04f 0801 	movne.w	r8, #1
 8018e3e:	2230      	movs	r2, #48	; 0x30
 8018e40:	4b1b      	ldr	r3, [pc, #108]	; (8018eb0 <__tzcalc_limits+0x14c>)
 8018e42:	f04f 0901 	mov.w	r9, #1
 8018e46:	fb02 3808 	mla	r8, r2, r8, r3
 8018e4a:	462b      	mov	r3, r5
 8018e4c:	68cc      	ldr	r4, [r1, #12]
 8018e4e:	f1a8 0a04 	sub.w	sl, r8, #4
 8018e52:	45a1      	cmp	r9, r4
 8018e54:	db20      	blt.n	8018e98 <__tzcalc_limits+0x134>
 8018e56:	2207      	movs	r2, #7
 8018e58:	2c01      	cmp	r4, #1
 8018e5a:	bfb8      	it	lt
 8018e5c:	2401      	movlt	r4, #1
 8018e5e:	f103 0b04 	add.w	fp, r3, #4
 8018e62:	fb9b faf2 	sdiv	sl, fp, r2
 8018e66:	46a1      	mov	r9, r4
 8018e68:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8018e6c:	694c      	ldr	r4, [r1, #20]
 8018e6e:	ebab 0a0a 	sub.w	sl, fp, sl
 8018e72:	ebb4 0a0a 	subs.w	sl, r4, sl
 8018e76:	690c      	ldr	r4, [r1, #16]
 8018e78:	44e1      	add	r9, ip
 8018e7a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8018e7e:	bf48      	it	mi
 8018e80:	4492      	addmi	sl, r2
 8018e82:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8018e86:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 8018e8a:	4454      	add	r4, sl
 8018e8c:	4544      	cmp	r4, r8
 8018e8e:	da09      	bge.n	8018ea4 <__tzcalc_limits+0x140>
 8018e90:	441c      	add	r4, r3
 8018e92:	e7b0      	b.n	8018df6 <__tzcalc_limits+0x92>
 8018e94:	46f0      	mov	r8, lr
 8018e96:	e7d2      	b.n	8018e3e <__tzcalc_limits+0xda>
 8018e98:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8018e9c:	f109 0901 	add.w	r9, r9, #1
 8018ea0:	445b      	add	r3, fp
 8018ea2:	e7d6      	b.n	8018e52 <__tzcalc_limits+0xee>
 8018ea4:	3c07      	subs	r4, #7
 8018ea6:	e7f1      	b.n	8018e8c <__tzcalc_limits+0x128>
 8018ea8:	2000      	movs	r0, #0
 8018eaa:	e7b7      	b.n	8018e1c <__tzcalc_limits+0xb8>
 8018eac:	00015180 	.word	0x00015180
 8018eb0:	080232c0 	.word	0x080232c0

08018eb4 <__tz_lock>:
 8018eb4:	4801      	ldr	r0, [pc, #4]	; (8018ebc <__tz_lock+0x8>)
 8018eb6:	f7fd bfbf 	b.w	8016e38 <__retarget_lock_acquire>
 8018eba:	bf00      	nop
 8018ebc:	200014e3 	.word	0x200014e3

08018ec0 <__tz_unlock>:
 8018ec0:	4801      	ldr	r0, [pc, #4]	; (8018ec8 <__tz_unlock+0x8>)
 8018ec2:	f7fd bfbb 	b.w	8016e3c <__retarget_lock_release>
 8018ec6:	bf00      	nop
 8018ec8:	200014e3 	.word	0x200014e3

08018ecc <_tzset_unlocked>:
 8018ecc:	4b01      	ldr	r3, [pc, #4]	; (8018ed4 <_tzset_unlocked+0x8>)
 8018ece:	6818      	ldr	r0, [r3, #0]
 8018ed0:	f000 b802 	b.w	8018ed8 <_tzset_unlocked_r>
 8018ed4:	2000002c 	.word	0x2000002c

08018ed8 <_tzset_unlocked_r>:
 8018ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018edc:	b08d      	sub	sp, #52	; 0x34
 8018ede:	4607      	mov	r7, r0
 8018ee0:	f001 fc7a 	bl	801a7d8 <__gettzinfo>
 8018ee4:	49b1      	ldr	r1, [pc, #708]	; (80191ac <_tzset_unlocked_r+0x2d4>)
 8018ee6:	4605      	mov	r5, r0
 8018ee8:	4638      	mov	r0, r7
 8018eea:	f001 fc6d 	bl	801a7c8 <_getenv_r>
 8018eee:	4eb0      	ldr	r6, [pc, #704]	; (80191b0 <_tzset_unlocked_r+0x2d8>)
 8018ef0:	4604      	mov	r4, r0
 8018ef2:	b970      	cbnz	r0, 8018f12 <_tzset_unlocked_r+0x3a>
 8018ef4:	4baf      	ldr	r3, [pc, #700]	; (80191b4 <_tzset_unlocked_r+0x2dc>)
 8018ef6:	4ab0      	ldr	r2, [pc, #704]	; (80191b8 <_tzset_unlocked_r+0x2e0>)
 8018ef8:	6018      	str	r0, [r3, #0]
 8018efa:	4bb0      	ldr	r3, [pc, #704]	; (80191bc <_tzset_unlocked_r+0x2e4>)
 8018efc:	6018      	str	r0, [r3, #0]
 8018efe:	4bb0      	ldr	r3, [pc, #704]	; (80191c0 <_tzset_unlocked_r+0x2e8>)
 8018f00:	6830      	ldr	r0, [r6, #0]
 8018f02:	601a      	str	r2, [r3, #0]
 8018f04:	605a      	str	r2, [r3, #4]
 8018f06:	f7fd ffa3 	bl	8016e50 <free>
 8018f0a:	6034      	str	r4, [r6, #0]
 8018f0c:	b00d      	add	sp, #52	; 0x34
 8018f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f12:	6831      	ldr	r1, [r6, #0]
 8018f14:	2900      	cmp	r1, #0
 8018f16:	d160      	bne.n	8018fda <_tzset_unlocked_r+0x102>
 8018f18:	6830      	ldr	r0, [r6, #0]
 8018f1a:	f7fd ff99 	bl	8016e50 <free>
 8018f1e:	4620      	mov	r0, r4
 8018f20:	f7ed fcda 	bl	80068d8 <strlen>
 8018f24:	1c41      	adds	r1, r0, #1
 8018f26:	4638      	mov	r0, r7
 8018f28:	f7fd ff9a 	bl	8016e60 <_malloc_r>
 8018f2c:	6030      	str	r0, [r6, #0]
 8018f2e:	2800      	cmp	r0, #0
 8018f30:	d158      	bne.n	8018fe4 <_tzset_unlocked_r+0x10c>
 8018f32:	7823      	ldrb	r3, [r4, #0]
 8018f34:	ae0a      	add	r6, sp, #40	; 0x28
 8018f36:	2b3a      	cmp	r3, #58	; 0x3a
 8018f38:	bf08      	it	eq
 8018f3a:	3401      	addeq	r4, #1
 8018f3c:	4633      	mov	r3, r6
 8018f3e:	4aa1      	ldr	r2, [pc, #644]	; (80191c4 <_tzset_unlocked_r+0x2ec>)
 8018f40:	49a1      	ldr	r1, [pc, #644]	; (80191c8 <_tzset_unlocked_r+0x2f0>)
 8018f42:	4620      	mov	r0, r4
 8018f44:	f002 f8f0 	bl	801b128 <siscanf>
 8018f48:	2800      	cmp	r0, #0
 8018f4a:	dddf      	ble.n	8018f0c <_tzset_unlocked_r+0x34>
 8018f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018f4e:	18e7      	adds	r7, r4, r3
 8018f50:	5ce3      	ldrb	r3, [r4, r3]
 8018f52:	2b2d      	cmp	r3, #45	; 0x2d
 8018f54:	d14a      	bne.n	8018fec <_tzset_unlocked_r+0x114>
 8018f56:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018f5a:	3701      	adds	r7, #1
 8018f5c:	f04f 0800 	mov.w	r8, #0
 8018f60:	f10d 0a20 	add.w	sl, sp, #32
 8018f64:	f10d 0b1e 	add.w	fp, sp, #30
 8018f68:	9603      	str	r6, [sp, #12]
 8018f6a:	f8cd a008 	str.w	sl, [sp, #8]
 8018f6e:	9601      	str	r6, [sp, #4]
 8018f70:	f8cd b000 	str.w	fp, [sp]
 8018f74:	4633      	mov	r3, r6
 8018f76:	aa07      	add	r2, sp, #28
 8018f78:	4994      	ldr	r1, [pc, #592]	; (80191cc <_tzset_unlocked_r+0x2f4>)
 8018f7a:	4638      	mov	r0, r7
 8018f7c:	f8ad 801e 	strh.w	r8, [sp, #30]
 8018f80:	f8ad 8020 	strh.w	r8, [sp, #32]
 8018f84:	f002 f8d0 	bl	801b128 <siscanf>
 8018f88:	4540      	cmp	r0, r8
 8018f8a:	ddbf      	ble.n	8018f0c <_tzset_unlocked_r+0x34>
 8018f8c:	213c      	movs	r1, #60	; 0x3c
 8018f8e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018f92:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8018f96:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80191d8 <_tzset_unlocked_r+0x300>
 8018f9a:	fb01 2203 	mla	r2, r1, r3, r2
 8018f9e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8018fa2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8018fa6:	fb01 2303 	mla	r3, r1, r3, r2
 8018faa:	435c      	muls	r4, r3
 8018fac:	4b85      	ldr	r3, [pc, #532]	; (80191c4 <_tzset_unlocked_r+0x2ec>)
 8018fae:	622c      	str	r4, [r5, #32]
 8018fb0:	4c83      	ldr	r4, [pc, #524]	; (80191c0 <_tzset_unlocked_r+0x2e8>)
 8018fb2:	464a      	mov	r2, r9
 8018fb4:	6023      	str	r3, [r4, #0]
 8018fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018fb8:	4983      	ldr	r1, [pc, #524]	; (80191c8 <_tzset_unlocked_r+0x2f0>)
 8018fba:	441f      	add	r7, r3
 8018fbc:	4638      	mov	r0, r7
 8018fbe:	4633      	mov	r3, r6
 8018fc0:	f002 f8b2 	bl	801b128 <siscanf>
 8018fc4:	4540      	cmp	r0, r8
 8018fc6:	dc16      	bgt.n	8018ff6 <_tzset_unlocked_r+0x11e>
 8018fc8:	6823      	ldr	r3, [r4, #0]
 8018fca:	6a2a      	ldr	r2, [r5, #32]
 8018fcc:	6063      	str	r3, [r4, #4]
 8018fce:	4b79      	ldr	r3, [pc, #484]	; (80191b4 <_tzset_unlocked_r+0x2dc>)
 8018fd0:	601a      	str	r2, [r3, #0]
 8018fd2:	4b7a      	ldr	r3, [pc, #488]	; (80191bc <_tzset_unlocked_r+0x2e4>)
 8018fd4:	f8c3 8000 	str.w	r8, [r3]
 8018fd8:	e798      	b.n	8018f0c <_tzset_unlocked_r+0x34>
 8018fda:	f7ed fc73 	bl	80068c4 <strcmp>
 8018fde:	2800      	cmp	r0, #0
 8018fe0:	d094      	beq.n	8018f0c <_tzset_unlocked_r+0x34>
 8018fe2:	e799      	b.n	8018f18 <_tzset_unlocked_r+0x40>
 8018fe4:	4621      	mov	r1, r4
 8018fe6:	f002 f8c9 	bl	801b17c <strcpy>
 8018fea:	e7a2      	b.n	8018f32 <_tzset_unlocked_r+0x5a>
 8018fec:	2b2b      	cmp	r3, #43	; 0x2b
 8018fee:	bf08      	it	eq
 8018ff0:	3701      	addeq	r7, #1
 8018ff2:	2401      	movs	r4, #1
 8018ff4:	e7b2      	b.n	8018f5c <_tzset_unlocked_r+0x84>
 8018ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018ff8:	f8c4 9004 	str.w	r9, [r4, #4]
 8018ffc:	18fc      	adds	r4, r7, r3
 8018ffe:	5cfb      	ldrb	r3, [r7, r3]
 8019000:	2b2d      	cmp	r3, #45	; 0x2d
 8019002:	f040 8092 	bne.w	801912a <_tzset_unlocked_r+0x252>
 8019006:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801900a:	3401      	adds	r4, #1
 801900c:	2300      	movs	r3, #0
 801900e:	9603      	str	r6, [sp, #12]
 8019010:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019014:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019018:	f8ad 3020 	strh.w	r3, [sp, #32]
 801901c:	930a      	str	r3, [sp, #40]	; 0x28
 801901e:	f8cd a008 	str.w	sl, [sp, #8]
 8019022:	9601      	str	r6, [sp, #4]
 8019024:	f8cd b000 	str.w	fp, [sp]
 8019028:	4633      	mov	r3, r6
 801902a:	aa07      	add	r2, sp, #28
 801902c:	4967      	ldr	r1, [pc, #412]	; (80191cc <_tzset_unlocked_r+0x2f4>)
 801902e:	4620      	mov	r0, r4
 8019030:	f002 f87a 	bl	801b128 <siscanf>
 8019034:	2800      	cmp	r0, #0
 8019036:	dc7d      	bgt.n	8019134 <_tzset_unlocked_r+0x25c>
 8019038:	6a2b      	ldr	r3, [r5, #32]
 801903a:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801903e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8019040:	462f      	mov	r7, r5
 8019042:	f04f 0900 	mov.w	r9, #0
 8019046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019048:	441c      	add	r4, r3
 801904a:	7823      	ldrb	r3, [r4, #0]
 801904c:	2b2c      	cmp	r3, #44	; 0x2c
 801904e:	bf08      	it	eq
 8019050:	3401      	addeq	r4, #1
 8019052:	f894 8000 	ldrb.w	r8, [r4]
 8019056:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801905a:	d17b      	bne.n	8019154 <_tzset_unlocked_r+0x27c>
 801905c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8019060:	9302      	str	r3, [sp, #8]
 8019062:	ab09      	add	r3, sp, #36	; 0x24
 8019064:	9300      	str	r3, [sp, #0]
 8019066:	9603      	str	r6, [sp, #12]
 8019068:	9601      	str	r6, [sp, #4]
 801906a:	4633      	mov	r3, r6
 801906c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8019070:	4957      	ldr	r1, [pc, #348]	; (80191d0 <_tzset_unlocked_r+0x2f8>)
 8019072:	4620      	mov	r0, r4
 8019074:	f002 f858 	bl	801b128 <siscanf>
 8019078:	2803      	cmp	r0, #3
 801907a:	f47f af47 	bne.w	8018f0c <_tzset_unlocked_r+0x34>
 801907e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8019082:	1e4b      	subs	r3, r1, #1
 8019084:	2b0b      	cmp	r3, #11
 8019086:	f63f af41 	bhi.w	8018f0c <_tzset_unlocked_r+0x34>
 801908a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801908e:	1e53      	subs	r3, r2, #1
 8019090:	2b04      	cmp	r3, #4
 8019092:	f63f af3b 	bhi.w	8018f0c <_tzset_unlocked_r+0x34>
 8019096:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801909a:	2b06      	cmp	r3, #6
 801909c:	f63f af36 	bhi.w	8018f0c <_tzset_unlocked_r+0x34>
 80190a0:	f887 8008 	strb.w	r8, [r7, #8]
 80190a4:	60f9      	str	r1, [r7, #12]
 80190a6:	613a      	str	r2, [r7, #16]
 80190a8:	617b      	str	r3, [r7, #20]
 80190aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80190ac:	eb04 0803 	add.w	r8, r4, r3
 80190b0:	2302      	movs	r3, #2
 80190b2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80190b6:	2300      	movs	r3, #0
 80190b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80190bc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80190c0:	930a      	str	r3, [sp, #40]	; 0x28
 80190c2:	f898 3000 	ldrb.w	r3, [r8]
 80190c6:	2b2f      	cmp	r3, #47	; 0x2f
 80190c8:	d10b      	bne.n	80190e2 <_tzset_unlocked_r+0x20a>
 80190ca:	9603      	str	r6, [sp, #12]
 80190cc:	f8cd a008 	str.w	sl, [sp, #8]
 80190d0:	9601      	str	r6, [sp, #4]
 80190d2:	f8cd b000 	str.w	fp, [sp]
 80190d6:	4633      	mov	r3, r6
 80190d8:	aa07      	add	r2, sp, #28
 80190da:	493e      	ldr	r1, [pc, #248]	; (80191d4 <_tzset_unlocked_r+0x2fc>)
 80190dc:	4640      	mov	r0, r8
 80190de:	f002 f823 	bl	801b128 <siscanf>
 80190e2:	213c      	movs	r1, #60	; 0x3c
 80190e4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80190e8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80190ec:	f109 0901 	add.w	r9, r9, #1
 80190f0:	fb01 2203 	mla	r2, r1, r3, r2
 80190f4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80190f8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80190fc:	f1b9 0f02 	cmp.w	r9, #2
 8019100:	fb01 2303 	mla	r3, r1, r3, r2
 8019104:	61bb      	str	r3, [r7, #24]
 8019106:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019108:	f107 071c 	add.w	r7, r7, #28
 801910c:	4444      	add	r4, r8
 801910e:	d19c      	bne.n	801904a <_tzset_unlocked_r+0x172>
 8019110:	6868      	ldr	r0, [r5, #4]
 8019112:	f7ff fe27 	bl	8018d64 <__tzcalc_limits>
 8019116:	6a2a      	ldr	r2, [r5, #32]
 8019118:	4b26      	ldr	r3, [pc, #152]	; (80191b4 <_tzset_unlocked_r+0x2dc>)
 801911a:	601a      	str	r2, [r3, #0]
 801911c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801911e:	1a9b      	subs	r3, r3, r2
 8019120:	bf18      	it	ne
 8019122:	2301      	movne	r3, #1
 8019124:	4a25      	ldr	r2, [pc, #148]	; (80191bc <_tzset_unlocked_r+0x2e4>)
 8019126:	6013      	str	r3, [r2, #0]
 8019128:	e6f0      	b.n	8018f0c <_tzset_unlocked_r+0x34>
 801912a:	2b2b      	cmp	r3, #43	; 0x2b
 801912c:	bf08      	it	eq
 801912e:	3401      	addeq	r4, #1
 8019130:	2701      	movs	r7, #1
 8019132:	e76b      	b.n	801900c <_tzset_unlocked_r+0x134>
 8019134:	213c      	movs	r1, #60	; 0x3c
 8019136:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801913a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801913e:	fb01 2203 	mla	r2, r1, r3, r2
 8019142:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8019146:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801914a:	fb01 2303 	mla	r3, r1, r3, r2
 801914e:	435f      	muls	r7, r3
 8019150:	63ef      	str	r7, [r5, #60]	; 0x3c
 8019152:	e775      	b.n	8019040 <_tzset_unlocked_r+0x168>
 8019154:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8019158:	bf0a      	itet	eq
 801915a:	4643      	moveq	r3, r8
 801915c:	2344      	movne	r3, #68	; 0x44
 801915e:	3401      	addeq	r4, #1
 8019160:	220a      	movs	r2, #10
 8019162:	a90b      	add	r1, sp, #44	; 0x2c
 8019164:	4620      	mov	r0, r4
 8019166:	9305      	str	r3, [sp, #20]
 8019168:	f002 f9e8 	bl	801b53c <strtoul>
 801916c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8019170:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8019174:	4544      	cmp	r4, r8
 8019176:	9b05      	ldr	r3, [sp, #20]
 8019178:	d114      	bne.n	80191a4 <_tzset_unlocked_r+0x2cc>
 801917a:	234d      	movs	r3, #77	; 0x4d
 801917c:	f1b9 0f00 	cmp.w	r9, #0
 8019180:	d107      	bne.n	8019192 <_tzset_unlocked_r+0x2ba>
 8019182:	722b      	strb	r3, [r5, #8]
 8019184:	2303      	movs	r3, #3
 8019186:	60eb      	str	r3, [r5, #12]
 8019188:	2302      	movs	r3, #2
 801918a:	f8c5 9014 	str.w	r9, [r5, #20]
 801918e:	612b      	str	r3, [r5, #16]
 8019190:	e78e      	b.n	80190b0 <_tzset_unlocked_r+0x1d8>
 8019192:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8019196:	230b      	movs	r3, #11
 8019198:	62ab      	str	r3, [r5, #40]	; 0x28
 801919a:	2301      	movs	r3, #1
 801919c:	62eb      	str	r3, [r5, #44]	; 0x2c
 801919e:	2300      	movs	r3, #0
 80191a0:	632b      	str	r3, [r5, #48]	; 0x30
 80191a2:	e785      	b.n	80190b0 <_tzset_unlocked_r+0x1d8>
 80191a4:	b280      	uxth	r0, r0
 80191a6:	723b      	strb	r3, [r7, #8]
 80191a8:	6178      	str	r0, [r7, #20]
 80191aa:	e781      	b.n	80190b0 <_tzset_unlocked_r+0x1d8>
 80191ac:	08023378 	.word	0x08023378
 80191b0:	200014b8 	.word	0x200014b8
 80191b4:	200014c0 	.word	0x200014c0
 80191b8:	0802337b 	.word	0x0802337b
 80191bc:	200014bc 	.word	0x200014bc
 80191c0:	20000530 	.word	0x20000530
 80191c4:	200014ab 	.word	0x200014ab
 80191c8:	0802337f 	.word	0x0802337f
 80191cc:	080233a2 	.word	0x080233a2
 80191d0:	0802338e 	.word	0x0802338e
 80191d4:	080233a1 	.word	0x080233a1
 80191d8:	200014a0 	.word	0x200014a0

080191dc <__swbuf_r>:
 80191dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191de:	460e      	mov	r6, r1
 80191e0:	4614      	mov	r4, r2
 80191e2:	4605      	mov	r5, r0
 80191e4:	b118      	cbz	r0, 80191ee <__swbuf_r+0x12>
 80191e6:	6983      	ldr	r3, [r0, #24]
 80191e8:	b90b      	cbnz	r3, 80191ee <__swbuf_r+0x12>
 80191ea:	f001 f8fb 	bl	801a3e4 <__sinit>
 80191ee:	4b27      	ldr	r3, [pc, #156]	; (801928c <__swbuf_r+0xb0>)
 80191f0:	429c      	cmp	r4, r3
 80191f2:	d12f      	bne.n	8019254 <__swbuf_r+0x78>
 80191f4:	686c      	ldr	r4, [r5, #4]
 80191f6:	69a3      	ldr	r3, [r4, #24]
 80191f8:	60a3      	str	r3, [r4, #8]
 80191fa:	89a3      	ldrh	r3, [r4, #12]
 80191fc:	0719      	lsls	r1, r3, #28
 80191fe:	d533      	bpl.n	8019268 <__swbuf_r+0x8c>
 8019200:	6923      	ldr	r3, [r4, #16]
 8019202:	2b00      	cmp	r3, #0
 8019204:	d030      	beq.n	8019268 <__swbuf_r+0x8c>
 8019206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801920a:	b2f6      	uxtb	r6, r6
 801920c:	049a      	lsls	r2, r3, #18
 801920e:	4637      	mov	r7, r6
 8019210:	d534      	bpl.n	801927c <__swbuf_r+0xa0>
 8019212:	6923      	ldr	r3, [r4, #16]
 8019214:	6820      	ldr	r0, [r4, #0]
 8019216:	1ac0      	subs	r0, r0, r3
 8019218:	6963      	ldr	r3, [r4, #20]
 801921a:	4298      	cmp	r0, r3
 801921c:	db04      	blt.n	8019228 <__swbuf_r+0x4c>
 801921e:	4621      	mov	r1, r4
 8019220:	4628      	mov	r0, r5
 8019222:	f001 f84b 	bl	801a2bc <_fflush_r>
 8019226:	bb28      	cbnz	r0, 8019274 <__swbuf_r+0x98>
 8019228:	68a3      	ldr	r3, [r4, #8]
 801922a:	3001      	adds	r0, #1
 801922c:	3b01      	subs	r3, #1
 801922e:	60a3      	str	r3, [r4, #8]
 8019230:	6823      	ldr	r3, [r4, #0]
 8019232:	1c5a      	adds	r2, r3, #1
 8019234:	6022      	str	r2, [r4, #0]
 8019236:	701e      	strb	r6, [r3, #0]
 8019238:	6963      	ldr	r3, [r4, #20]
 801923a:	4298      	cmp	r0, r3
 801923c:	d004      	beq.n	8019248 <__swbuf_r+0x6c>
 801923e:	89a3      	ldrh	r3, [r4, #12]
 8019240:	07db      	lsls	r3, r3, #31
 8019242:	d519      	bpl.n	8019278 <__swbuf_r+0x9c>
 8019244:	2e0a      	cmp	r6, #10
 8019246:	d117      	bne.n	8019278 <__swbuf_r+0x9c>
 8019248:	4621      	mov	r1, r4
 801924a:	4628      	mov	r0, r5
 801924c:	f001 f836 	bl	801a2bc <_fflush_r>
 8019250:	b190      	cbz	r0, 8019278 <__swbuf_r+0x9c>
 8019252:	e00f      	b.n	8019274 <__swbuf_r+0x98>
 8019254:	4b0e      	ldr	r3, [pc, #56]	; (8019290 <__swbuf_r+0xb4>)
 8019256:	429c      	cmp	r4, r3
 8019258:	d101      	bne.n	801925e <__swbuf_r+0x82>
 801925a:	68ac      	ldr	r4, [r5, #8]
 801925c:	e7cb      	b.n	80191f6 <__swbuf_r+0x1a>
 801925e:	4b0d      	ldr	r3, [pc, #52]	; (8019294 <__swbuf_r+0xb8>)
 8019260:	429c      	cmp	r4, r3
 8019262:	bf08      	it	eq
 8019264:	68ec      	ldreq	r4, [r5, #12]
 8019266:	e7c6      	b.n	80191f6 <__swbuf_r+0x1a>
 8019268:	4621      	mov	r1, r4
 801926a:	4628      	mov	r0, r5
 801926c:	f000 f826 	bl	80192bc <__swsetup_r>
 8019270:	2800      	cmp	r0, #0
 8019272:	d0c8      	beq.n	8019206 <__swbuf_r+0x2a>
 8019274:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019278:	4638      	mov	r0, r7
 801927a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801927c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019280:	81a3      	strh	r3, [r4, #12]
 8019282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8019288:	6663      	str	r3, [r4, #100]	; 0x64
 801928a:	e7c2      	b.n	8019212 <__swbuf_r+0x36>
 801928c:	080233e4 	.word	0x080233e4
 8019290:	08023404 	.word	0x08023404
 8019294:	080233c4 	.word	0x080233c4

08019298 <_write_r>:
 8019298:	b538      	push	{r3, r4, r5, lr}
 801929a:	4605      	mov	r5, r0
 801929c:	4608      	mov	r0, r1
 801929e:	4611      	mov	r1, r2
 80192a0:	2200      	movs	r2, #0
 80192a2:	4c05      	ldr	r4, [pc, #20]	; (80192b8 <_write_r+0x20>)
 80192a4:	6022      	str	r2, [r4, #0]
 80192a6:	461a      	mov	r2, r3
 80192a8:	f7fb ff48 	bl	801513c <_write>
 80192ac:	1c43      	adds	r3, r0, #1
 80192ae:	d102      	bne.n	80192b6 <_write_r+0x1e>
 80192b0:	6823      	ldr	r3, [r4, #0]
 80192b2:	b103      	cbz	r3, 80192b6 <_write_r+0x1e>
 80192b4:	602b      	str	r3, [r5, #0]
 80192b6:	bd38      	pop	{r3, r4, r5, pc}
 80192b8:	200014e8 	.word	0x200014e8

080192bc <__swsetup_r>:
 80192bc:	4b32      	ldr	r3, [pc, #200]	; (8019388 <__swsetup_r+0xcc>)
 80192be:	b570      	push	{r4, r5, r6, lr}
 80192c0:	681d      	ldr	r5, [r3, #0]
 80192c2:	4606      	mov	r6, r0
 80192c4:	460c      	mov	r4, r1
 80192c6:	b125      	cbz	r5, 80192d2 <__swsetup_r+0x16>
 80192c8:	69ab      	ldr	r3, [r5, #24]
 80192ca:	b913      	cbnz	r3, 80192d2 <__swsetup_r+0x16>
 80192cc:	4628      	mov	r0, r5
 80192ce:	f001 f889 	bl	801a3e4 <__sinit>
 80192d2:	4b2e      	ldr	r3, [pc, #184]	; (801938c <__swsetup_r+0xd0>)
 80192d4:	429c      	cmp	r4, r3
 80192d6:	d10f      	bne.n	80192f8 <__swsetup_r+0x3c>
 80192d8:	686c      	ldr	r4, [r5, #4]
 80192da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80192de:	b29a      	uxth	r2, r3
 80192e0:	0715      	lsls	r5, r2, #28
 80192e2:	d42c      	bmi.n	801933e <__swsetup_r+0x82>
 80192e4:	06d0      	lsls	r0, r2, #27
 80192e6:	d411      	bmi.n	801930c <__swsetup_r+0x50>
 80192e8:	2209      	movs	r2, #9
 80192ea:	6032      	str	r2, [r6, #0]
 80192ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192f0:	81a3      	strh	r3, [r4, #12]
 80192f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80192f6:	bd70      	pop	{r4, r5, r6, pc}
 80192f8:	4b25      	ldr	r3, [pc, #148]	; (8019390 <__swsetup_r+0xd4>)
 80192fa:	429c      	cmp	r4, r3
 80192fc:	d101      	bne.n	8019302 <__swsetup_r+0x46>
 80192fe:	68ac      	ldr	r4, [r5, #8]
 8019300:	e7eb      	b.n	80192da <__swsetup_r+0x1e>
 8019302:	4b24      	ldr	r3, [pc, #144]	; (8019394 <__swsetup_r+0xd8>)
 8019304:	429c      	cmp	r4, r3
 8019306:	bf08      	it	eq
 8019308:	68ec      	ldreq	r4, [r5, #12]
 801930a:	e7e6      	b.n	80192da <__swsetup_r+0x1e>
 801930c:	0751      	lsls	r1, r2, #29
 801930e:	d512      	bpl.n	8019336 <__swsetup_r+0x7a>
 8019310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019312:	b141      	cbz	r1, 8019326 <__swsetup_r+0x6a>
 8019314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019318:	4299      	cmp	r1, r3
 801931a:	d002      	beq.n	8019322 <__swsetup_r+0x66>
 801931c:	4630      	mov	r0, r6
 801931e:	f001 f939 	bl	801a594 <_free_r>
 8019322:	2300      	movs	r3, #0
 8019324:	6363      	str	r3, [r4, #52]	; 0x34
 8019326:	89a3      	ldrh	r3, [r4, #12]
 8019328:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801932c:	81a3      	strh	r3, [r4, #12]
 801932e:	2300      	movs	r3, #0
 8019330:	6063      	str	r3, [r4, #4]
 8019332:	6923      	ldr	r3, [r4, #16]
 8019334:	6023      	str	r3, [r4, #0]
 8019336:	89a3      	ldrh	r3, [r4, #12]
 8019338:	f043 0308 	orr.w	r3, r3, #8
 801933c:	81a3      	strh	r3, [r4, #12]
 801933e:	6923      	ldr	r3, [r4, #16]
 8019340:	b94b      	cbnz	r3, 8019356 <__swsetup_r+0x9a>
 8019342:	89a3      	ldrh	r3, [r4, #12]
 8019344:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801934c:	d003      	beq.n	8019356 <__swsetup_r+0x9a>
 801934e:	4621      	mov	r1, r4
 8019350:	4630      	mov	r0, r6
 8019352:	f001 fb57 	bl	801aa04 <__smakebuf_r>
 8019356:	89a2      	ldrh	r2, [r4, #12]
 8019358:	f012 0301 	ands.w	r3, r2, #1
 801935c:	d00c      	beq.n	8019378 <__swsetup_r+0xbc>
 801935e:	2300      	movs	r3, #0
 8019360:	60a3      	str	r3, [r4, #8]
 8019362:	6963      	ldr	r3, [r4, #20]
 8019364:	425b      	negs	r3, r3
 8019366:	61a3      	str	r3, [r4, #24]
 8019368:	6923      	ldr	r3, [r4, #16]
 801936a:	b953      	cbnz	r3, 8019382 <__swsetup_r+0xc6>
 801936c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019370:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8019374:	d1ba      	bne.n	80192ec <__swsetup_r+0x30>
 8019376:	bd70      	pop	{r4, r5, r6, pc}
 8019378:	0792      	lsls	r2, r2, #30
 801937a:	bf58      	it	pl
 801937c:	6963      	ldrpl	r3, [r4, #20]
 801937e:	60a3      	str	r3, [r4, #8]
 8019380:	e7f2      	b.n	8019368 <__swsetup_r+0xac>
 8019382:	2000      	movs	r0, #0
 8019384:	e7f7      	b.n	8019376 <__swsetup_r+0xba>
 8019386:	bf00      	nop
 8019388:	2000002c 	.word	0x2000002c
 801938c:	080233e4 	.word	0x080233e4
 8019390:	08023404 	.word	0x08023404
 8019394:	080233c4 	.word	0x080233c4

08019398 <__register_exitproc>:
 8019398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801939c:	4d37      	ldr	r5, [pc, #220]	; (801947c <__register_exitproc+0xe4>)
 801939e:	4680      	mov	r8, r0
 80193a0:	6828      	ldr	r0, [r5, #0]
 80193a2:	4699      	mov	r9, r3
 80193a4:	460f      	mov	r7, r1
 80193a6:	4692      	mov	sl, r2
 80193a8:	f7fd fd47 	bl	8016e3a <__retarget_lock_acquire_recursive>
 80193ac:	4b34      	ldr	r3, [pc, #208]	; (8019480 <__register_exitproc+0xe8>)
 80193ae:	681e      	ldr	r6, [r3, #0]
 80193b0:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80193b2:	b93c      	cbnz	r4, 80193c4 <__register_exitproc+0x2c>
 80193b4:	4b33      	ldr	r3, [pc, #204]	; (8019484 <__register_exitproc+0xec>)
 80193b6:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 80193ba:	64b4      	str	r4, [r6, #72]	; 0x48
 80193bc:	b113      	cbz	r3, 80193c4 <__register_exitproc+0x2c>
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 80193c4:	6863      	ldr	r3, [r4, #4]
 80193c6:	2b1f      	cmp	r3, #31
 80193c8:	dd49      	ble.n	801945e <__register_exitproc+0xc6>
 80193ca:	4b2f      	ldr	r3, [pc, #188]	; (8019488 <__register_exitproc+0xf0>)
 80193cc:	b933      	cbnz	r3, 80193dc <__register_exitproc+0x44>
 80193ce:	6828      	ldr	r0, [r5, #0]
 80193d0:	f7fd fd35 	bl	8016e3e <__retarget_lock_release_recursive>
 80193d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80193d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193dc:	208c      	movs	r0, #140	; 0x8c
 80193de:	f7fd fd2f 	bl	8016e40 <malloc>
 80193e2:	4604      	mov	r4, r0
 80193e4:	2800      	cmp	r0, #0
 80193e6:	d0f2      	beq.n	80193ce <__register_exitproc+0x36>
 80193e8:	2200      	movs	r2, #0
 80193ea:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80193ec:	6042      	str	r2, [r0, #4]
 80193ee:	6003      	str	r3, [r0, #0]
 80193f0:	64b0      	str	r0, [r6, #72]	; 0x48
 80193f2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 80193f6:	f1b8 0f00 	cmp.w	r8, #0
 80193fa:	d024      	beq.n	8019446 <__register_exitproc+0xae>
 80193fc:	f44f 7084 	mov.w	r0, #264	; 0x108
 8019400:	f7fd fd1e 	bl	8016e40 <malloc>
 8019404:	2800      	cmp	r0, #0
 8019406:	d034      	beq.n	8019472 <__register_exitproc+0xda>
 8019408:	2300      	movs	r3, #0
 801940a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801940e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8019412:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8019416:	2301      	movs	r3, #1
 8019418:	6862      	ldr	r2, [r4, #4]
 801941a:	f1b8 0f02 	cmp.w	r8, #2
 801941e:	f840 a022 	str.w	sl, [r0, r2, lsl #2]
 8019422:	fa03 f302 	lsl.w	r3, r3, r2
 8019426:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801942a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 801942e:	ea42 0203 	orr.w	r2, r2, r3
 8019432:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8019436:	f8c1 9080 	str.w	r9, [r1, #128]	; 0x80
 801943a:	bf02      	ittt	eq
 801943c:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8019440:	4313      	orreq	r3, r2
 8019442:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8019446:	6863      	ldr	r3, [r4, #4]
 8019448:	6828      	ldr	r0, [r5, #0]
 801944a:	1c5a      	adds	r2, r3, #1
 801944c:	3302      	adds	r3, #2
 801944e:	6062      	str	r2, [r4, #4]
 8019450:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 8019454:	f7fd fcf3 	bl	8016e3e <__retarget_lock_release_recursive>
 8019458:	2000      	movs	r0, #0
 801945a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801945e:	f1b8 0f00 	cmp.w	r8, #0
 8019462:	d0f0      	beq.n	8019446 <__register_exitproc+0xae>
 8019464:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8019468:	2800      	cmp	r0, #0
 801946a:	d1d4      	bne.n	8019416 <__register_exitproc+0x7e>
 801946c:	4b06      	ldr	r3, [pc, #24]	; (8019488 <__register_exitproc+0xf0>)
 801946e:	2b00      	cmp	r3, #0
 8019470:	d1c4      	bne.n	80193fc <__register_exitproc+0x64>
 8019472:	6828      	ldr	r0, [r5, #0]
 8019474:	f7fd fce2 	bl	8016e3c <__retarget_lock_release>
 8019478:	e7ac      	b.n	80193d4 <__register_exitproc+0x3c>
 801947a:	bf00      	nop
 801947c:	20000538 	.word	0x20000538
 8019480:	0802325c 	.word	0x0802325c
 8019484:	08023320 	.word	0x08023320
 8019488:	08016e41 	.word	0x08016e41

0801948c <_close_r>:
 801948c:	b538      	push	{r3, r4, r5, lr}
 801948e:	2300      	movs	r3, #0
 8019490:	4c05      	ldr	r4, [pc, #20]	; (80194a8 <_close_r+0x1c>)
 8019492:	4605      	mov	r5, r0
 8019494:	4608      	mov	r0, r1
 8019496:	6023      	str	r3, [r4, #0]
 8019498:	f7fb fe78 	bl	801518c <_close>
 801949c:	1c43      	adds	r3, r0, #1
 801949e:	d102      	bne.n	80194a6 <_close_r+0x1a>
 80194a0:	6823      	ldr	r3, [r4, #0]
 80194a2:	b103      	cbz	r3, 80194a6 <_close_r+0x1a>
 80194a4:	602b      	str	r3, [r5, #0]
 80194a6:	bd38      	pop	{r3, r4, r5, pc}
 80194a8:	200014e8 	.word	0x200014e8

080194ac <div>:
 80194ac:	b510      	push	{r4, lr}
 80194ae:	fb91 f4f2 	sdiv	r4, r1, r2
 80194b2:	2900      	cmp	r1, #0
 80194b4:	fb02 1314 	mls	r3, r2, r4, r1
 80194b8:	db06      	blt.n	80194c8 <div+0x1c>
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	da01      	bge.n	80194c2 <div+0x16>
 80194be:	3401      	adds	r4, #1
 80194c0:	1a9b      	subs	r3, r3, r2
 80194c2:	6004      	str	r4, [r0, #0]
 80194c4:	6043      	str	r3, [r0, #4]
 80194c6:	bd10      	pop	{r4, pc}
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	bfc4      	itt	gt
 80194cc:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 80194d0:	189b      	addgt	r3, r3, r2
 80194d2:	e7f6      	b.n	80194c2 <div+0x16>

080194d4 <quorem>:
 80194d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194d8:	6903      	ldr	r3, [r0, #16]
 80194da:	690c      	ldr	r4, [r1, #16]
 80194dc:	4680      	mov	r8, r0
 80194de:	429c      	cmp	r4, r3
 80194e0:	f300 8082 	bgt.w	80195e8 <quorem+0x114>
 80194e4:	3c01      	subs	r4, #1
 80194e6:	f101 0714 	add.w	r7, r1, #20
 80194ea:	f100 0614 	add.w	r6, r0, #20
 80194ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80194f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80194f6:	3501      	adds	r5, #1
 80194f8:	fbb0 f5f5 	udiv	r5, r0, r5
 80194fc:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8019500:	eb06 030e 	add.w	r3, r6, lr
 8019504:	eb07 090e 	add.w	r9, r7, lr
 8019508:	9301      	str	r3, [sp, #4]
 801950a:	b38d      	cbz	r5, 8019570 <quorem+0x9c>
 801950c:	f04f 0a00 	mov.w	sl, #0
 8019510:	4638      	mov	r0, r7
 8019512:	46b4      	mov	ip, r6
 8019514:	46d3      	mov	fp, sl
 8019516:	f850 2b04 	ldr.w	r2, [r0], #4
 801951a:	b293      	uxth	r3, r2
 801951c:	fb05 a303 	mla	r3, r5, r3, sl
 8019520:	0c12      	lsrs	r2, r2, #16
 8019522:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019526:	fb05 a202 	mla	r2, r5, r2, sl
 801952a:	b29b      	uxth	r3, r3
 801952c:	ebab 0303 	sub.w	r3, fp, r3
 8019530:	f8bc b000 	ldrh.w	fp, [ip]
 8019534:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8019538:	445b      	add	r3, fp
 801953a:	fa1f fb82 	uxth.w	fp, r2
 801953e:	f8dc 2000 	ldr.w	r2, [ip]
 8019542:	4581      	cmp	r9, r0
 8019544:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8019548:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801954c:	b29b      	uxth	r3, r3
 801954e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019552:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8019556:	f84c 3b04 	str.w	r3, [ip], #4
 801955a:	d2dc      	bcs.n	8019516 <quorem+0x42>
 801955c:	f856 300e 	ldr.w	r3, [r6, lr]
 8019560:	b933      	cbnz	r3, 8019570 <quorem+0x9c>
 8019562:	9b01      	ldr	r3, [sp, #4]
 8019564:	3b04      	subs	r3, #4
 8019566:	429e      	cmp	r6, r3
 8019568:	461a      	mov	r2, r3
 801956a:	d331      	bcc.n	80195d0 <quorem+0xfc>
 801956c:	f8c8 4010 	str.w	r4, [r8, #16]
 8019570:	4640      	mov	r0, r8
 8019572:	f001 fcce 	bl	801af12 <__mcmp>
 8019576:	2800      	cmp	r0, #0
 8019578:	db26      	blt.n	80195c8 <quorem+0xf4>
 801957a:	4630      	mov	r0, r6
 801957c:	f04f 0e00 	mov.w	lr, #0
 8019580:	3501      	adds	r5, #1
 8019582:	f857 1b04 	ldr.w	r1, [r7], #4
 8019586:	f8d0 c000 	ldr.w	ip, [r0]
 801958a:	b28b      	uxth	r3, r1
 801958c:	ebae 0303 	sub.w	r3, lr, r3
 8019590:	fa1f f28c 	uxth.w	r2, ip
 8019594:	4413      	add	r3, r2
 8019596:	0c0a      	lsrs	r2, r1, #16
 8019598:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801959c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80195a0:	b29b      	uxth	r3, r3
 80195a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80195a6:	45b9      	cmp	r9, r7
 80195a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80195ac:	f840 3b04 	str.w	r3, [r0], #4
 80195b0:	d2e7      	bcs.n	8019582 <quorem+0xae>
 80195b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80195b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80195ba:	b92a      	cbnz	r2, 80195c8 <quorem+0xf4>
 80195bc:	3b04      	subs	r3, #4
 80195be:	429e      	cmp	r6, r3
 80195c0:	461a      	mov	r2, r3
 80195c2:	d30b      	bcc.n	80195dc <quorem+0x108>
 80195c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80195c8:	4628      	mov	r0, r5
 80195ca:	b003      	add	sp, #12
 80195cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195d0:	6812      	ldr	r2, [r2, #0]
 80195d2:	3b04      	subs	r3, #4
 80195d4:	2a00      	cmp	r2, #0
 80195d6:	d1c9      	bne.n	801956c <quorem+0x98>
 80195d8:	3c01      	subs	r4, #1
 80195da:	e7c4      	b.n	8019566 <quorem+0x92>
 80195dc:	6812      	ldr	r2, [r2, #0]
 80195de:	3b04      	subs	r3, #4
 80195e0:	2a00      	cmp	r2, #0
 80195e2:	d1ef      	bne.n	80195c4 <quorem+0xf0>
 80195e4:	3c01      	subs	r4, #1
 80195e6:	e7ea      	b.n	80195be <quorem+0xea>
 80195e8:	2000      	movs	r0, #0
 80195ea:	e7ee      	b.n	80195ca <quorem+0xf6>
 80195ec:	0000      	movs	r0, r0
	...

080195f0 <_dtoa_r>:
 80195f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195f4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80195f6:	b095      	sub	sp, #84	; 0x54
 80195f8:	4604      	mov	r4, r0
 80195fa:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80195fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019600:	b93e      	cbnz	r6, 8019612 <_dtoa_r+0x22>
 8019602:	2010      	movs	r0, #16
 8019604:	f7fd fc1c 	bl	8016e40 <malloc>
 8019608:	6260      	str	r0, [r4, #36]	; 0x24
 801960a:	6046      	str	r6, [r0, #4]
 801960c:	6086      	str	r6, [r0, #8]
 801960e:	6006      	str	r6, [r0, #0]
 8019610:	60c6      	str	r6, [r0, #12]
 8019612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019614:	6819      	ldr	r1, [r3, #0]
 8019616:	b151      	cbz	r1, 801962e <_dtoa_r+0x3e>
 8019618:	685a      	ldr	r2, [r3, #4]
 801961a:	2301      	movs	r3, #1
 801961c:	4093      	lsls	r3, r2
 801961e:	604a      	str	r2, [r1, #4]
 8019620:	608b      	str	r3, [r1, #8]
 8019622:	4620      	mov	r0, r4
 8019624:	f001 faa0 	bl	801ab68 <_Bfree>
 8019628:	2200      	movs	r2, #0
 801962a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801962c:	601a      	str	r2, [r3, #0]
 801962e:	9b03      	ldr	r3, [sp, #12]
 8019630:	2b00      	cmp	r3, #0
 8019632:	bfb7      	itett	lt
 8019634:	2301      	movlt	r3, #1
 8019636:	2300      	movge	r3, #0
 8019638:	602b      	strlt	r3, [r5, #0]
 801963a:	9b03      	ldrlt	r3, [sp, #12]
 801963c:	bfae      	itee	ge
 801963e:	602b      	strge	r3, [r5, #0]
 8019640:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8019644:	9303      	strlt	r3, [sp, #12]
 8019646:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801964a:	4bab      	ldr	r3, [pc, #684]	; (80198f8 <_dtoa_r+0x308>)
 801964c:	ea33 0309 	bics.w	r3, r3, r9
 8019650:	d11b      	bne.n	801968a <_dtoa_r+0x9a>
 8019652:	f242 730f 	movw	r3, #9999	; 0x270f
 8019656:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019658:	6013      	str	r3, [r2, #0]
 801965a:	9b02      	ldr	r3, [sp, #8]
 801965c:	b923      	cbnz	r3, 8019668 <_dtoa_r+0x78>
 801965e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8019662:	2800      	cmp	r0, #0
 8019664:	f000 8583 	beq.w	801a16e <_dtoa_r+0xb7e>
 8019668:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801966a:	b953      	cbnz	r3, 8019682 <_dtoa_r+0x92>
 801966c:	4ba3      	ldr	r3, [pc, #652]	; (80198fc <_dtoa_r+0x30c>)
 801966e:	e021      	b.n	80196b4 <_dtoa_r+0xc4>
 8019670:	4ba3      	ldr	r3, [pc, #652]	; (8019900 <_dtoa_r+0x310>)
 8019672:	9306      	str	r3, [sp, #24]
 8019674:	3308      	adds	r3, #8
 8019676:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8019678:	6013      	str	r3, [r2, #0]
 801967a:	9806      	ldr	r0, [sp, #24]
 801967c:	b015      	add	sp, #84	; 0x54
 801967e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019682:	4b9e      	ldr	r3, [pc, #632]	; (80198fc <_dtoa_r+0x30c>)
 8019684:	9306      	str	r3, [sp, #24]
 8019686:	3303      	adds	r3, #3
 8019688:	e7f5      	b.n	8019676 <_dtoa_r+0x86>
 801968a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801968e:	2200      	movs	r2, #0
 8019690:	2300      	movs	r3, #0
 8019692:	4630      	mov	r0, r6
 8019694:	4639      	mov	r1, r7
 8019696:	f7ed fd47 	bl	8007128 <__aeabi_dcmpeq>
 801969a:	4680      	mov	r8, r0
 801969c:	b160      	cbz	r0, 80196b8 <_dtoa_r+0xc8>
 801969e:	2301      	movs	r3, #1
 80196a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80196a2:	6013      	str	r3, [r2, #0]
 80196a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	f000 855e 	beq.w	801a168 <_dtoa_r+0xb78>
 80196ac:	4b95      	ldr	r3, [pc, #596]	; (8019904 <_dtoa_r+0x314>)
 80196ae:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80196b0:	6013      	str	r3, [r2, #0]
 80196b2:	3b01      	subs	r3, #1
 80196b4:	9306      	str	r3, [sp, #24]
 80196b6:	e7e0      	b.n	801967a <_dtoa_r+0x8a>
 80196b8:	ab12      	add	r3, sp, #72	; 0x48
 80196ba:	9301      	str	r3, [sp, #4]
 80196bc:	ab13      	add	r3, sp, #76	; 0x4c
 80196be:	9300      	str	r3, [sp, #0]
 80196c0:	4632      	mov	r2, r6
 80196c2:	463b      	mov	r3, r7
 80196c4:	4620      	mov	r0, r4
 80196c6:	f001 fc9d 	bl	801b004 <__d2b>
 80196ca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80196ce:	4682      	mov	sl, r0
 80196d0:	2d00      	cmp	r5, #0
 80196d2:	d07d      	beq.n	80197d0 <_dtoa_r+0x1e0>
 80196d4:	4630      	mov	r0, r6
 80196d6:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80196da:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80196de:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80196e2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80196e6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80196ea:	2200      	movs	r2, #0
 80196ec:	4b86      	ldr	r3, [pc, #536]	; (8019908 <_dtoa_r+0x318>)
 80196ee:	f7ed f8ff 	bl	80068f0 <__aeabi_dsub>
 80196f2:	a37b      	add	r3, pc, #492	; (adr r3, 80198e0 <_dtoa_r+0x2f0>)
 80196f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196f8:	f7ed faae 	bl	8006c58 <__aeabi_dmul>
 80196fc:	a37a      	add	r3, pc, #488	; (adr r3, 80198e8 <_dtoa_r+0x2f8>)
 80196fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019702:	f7ed f8f7 	bl	80068f4 <__adddf3>
 8019706:	4606      	mov	r6, r0
 8019708:	4628      	mov	r0, r5
 801970a:	460f      	mov	r7, r1
 801970c:	f7ed fa3e 	bl	8006b8c <__aeabi_i2d>
 8019710:	a377      	add	r3, pc, #476	; (adr r3, 80198f0 <_dtoa_r+0x300>)
 8019712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019716:	f7ed fa9f 	bl	8006c58 <__aeabi_dmul>
 801971a:	4602      	mov	r2, r0
 801971c:	460b      	mov	r3, r1
 801971e:	4630      	mov	r0, r6
 8019720:	4639      	mov	r1, r7
 8019722:	f7ed f8e7 	bl	80068f4 <__adddf3>
 8019726:	4606      	mov	r6, r0
 8019728:	460f      	mov	r7, r1
 801972a:	f7ed fd45 	bl	80071b8 <__aeabi_d2iz>
 801972e:	2200      	movs	r2, #0
 8019730:	4683      	mov	fp, r0
 8019732:	2300      	movs	r3, #0
 8019734:	4630      	mov	r0, r6
 8019736:	4639      	mov	r1, r7
 8019738:	f7ed fd00 	bl	800713c <__aeabi_dcmplt>
 801973c:	b158      	cbz	r0, 8019756 <_dtoa_r+0x166>
 801973e:	4658      	mov	r0, fp
 8019740:	f7ed fa24 	bl	8006b8c <__aeabi_i2d>
 8019744:	4602      	mov	r2, r0
 8019746:	460b      	mov	r3, r1
 8019748:	4630      	mov	r0, r6
 801974a:	4639      	mov	r1, r7
 801974c:	f7ed fcec 	bl	8007128 <__aeabi_dcmpeq>
 8019750:	b908      	cbnz	r0, 8019756 <_dtoa_r+0x166>
 8019752:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8019756:	f1bb 0f16 	cmp.w	fp, #22
 801975a:	d858      	bhi.n	801980e <_dtoa_r+0x21e>
 801975c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019760:	496a      	ldr	r1, [pc, #424]	; (801990c <_dtoa_r+0x31c>)
 8019762:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8019766:	e9d1 0100 	ldrd	r0, r1, [r1]
 801976a:	f7ed fd05 	bl	8007178 <__aeabi_dcmpgt>
 801976e:	2800      	cmp	r0, #0
 8019770:	d04f      	beq.n	8019812 <_dtoa_r+0x222>
 8019772:	2300      	movs	r3, #0
 8019774:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8019778:	930d      	str	r3, [sp, #52]	; 0x34
 801977a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801977c:	1b5d      	subs	r5, r3, r5
 801977e:	1e6b      	subs	r3, r5, #1
 8019780:	9307      	str	r3, [sp, #28]
 8019782:	bf43      	ittte	mi
 8019784:	2300      	movmi	r3, #0
 8019786:	f1c5 0801 	rsbmi	r8, r5, #1
 801978a:	9307      	strmi	r3, [sp, #28]
 801978c:	f04f 0800 	movpl.w	r8, #0
 8019790:	f1bb 0f00 	cmp.w	fp, #0
 8019794:	db3f      	blt.n	8019816 <_dtoa_r+0x226>
 8019796:	9b07      	ldr	r3, [sp, #28]
 8019798:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 801979c:	445b      	add	r3, fp
 801979e:	9307      	str	r3, [sp, #28]
 80197a0:	2300      	movs	r3, #0
 80197a2:	9308      	str	r3, [sp, #32]
 80197a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80197a6:	2b09      	cmp	r3, #9
 80197a8:	f200 80b4 	bhi.w	8019914 <_dtoa_r+0x324>
 80197ac:	2b05      	cmp	r3, #5
 80197ae:	bfc4      	itt	gt
 80197b0:	3b04      	subgt	r3, #4
 80197b2:	931e      	strgt	r3, [sp, #120]	; 0x78
 80197b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80197b6:	bfc8      	it	gt
 80197b8:	2600      	movgt	r6, #0
 80197ba:	f1a3 0302 	sub.w	r3, r3, #2
 80197be:	bfd8      	it	le
 80197c0:	2601      	movle	r6, #1
 80197c2:	2b03      	cmp	r3, #3
 80197c4:	f200 80b2 	bhi.w	801992c <_dtoa_r+0x33c>
 80197c8:	e8df f003 	tbb	[pc, r3]
 80197cc:	782d8684 	.word	0x782d8684
 80197d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80197d2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80197d4:	441d      	add	r5, r3
 80197d6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80197da:	2b20      	cmp	r3, #32
 80197dc:	dd11      	ble.n	8019802 <_dtoa_r+0x212>
 80197de:	9a02      	ldr	r2, [sp, #8]
 80197e0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80197e4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80197e8:	fa22 f000 	lsr.w	r0, r2, r0
 80197ec:	fa09 f303 	lsl.w	r3, r9, r3
 80197f0:	4318      	orrs	r0, r3
 80197f2:	f7ed f9bb 	bl	8006b6c <__aeabi_ui2d>
 80197f6:	2301      	movs	r3, #1
 80197f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80197fc:	3d01      	subs	r5, #1
 80197fe:	9310      	str	r3, [sp, #64]	; 0x40
 8019800:	e773      	b.n	80196ea <_dtoa_r+0xfa>
 8019802:	f1c3 0020 	rsb	r0, r3, #32
 8019806:	9b02      	ldr	r3, [sp, #8]
 8019808:	fa03 f000 	lsl.w	r0, r3, r0
 801980c:	e7f1      	b.n	80197f2 <_dtoa_r+0x202>
 801980e:	2301      	movs	r3, #1
 8019810:	e7b2      	b.n	8019778 <_dtoa_r+0x188>
 8019812:	900d      	str	r0, [sp, #52]	; 0x34
 8019814:	e7b1      	b.n	801977a <_dtoa_r+0x18a>
 8019816:	f1cb 0300 	rsb	r3, fp, #0
 801981a:	9308      	str	r3, [sp, #32]
 801981c:	2300      	movs	r3, #0
 801981e:	eba8 080b 	sub.w	r8, r8, fp
 8019822:	930c      	str	r3, [sp, #48]	; 0x30
 8019824:	e7be      	b.n	80197a4 <_dtoa_r+0x1b4>
 8019826:	2301      	movs	r3, #1
 8019828:	9309      	str	r3, [sp, #36]	; 0x24
 801982a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801982c:	2b00      	cmp	r3, #0
 801982e:	f340 8080 	ble.w	8019932 <_dtoa_r+0x342>
 8019832:	4699      	mov	r9, r3
 8019834:	9304      	str	r3, [sp, #16]
 8019836:	2200      	movs	r2, #0
 8019838:	2104      	movs	r1, #4
 801983a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801983c:	606a      	str	r2, [r5, #4]
 801983e:	f101 0214 	add.w	r2, r1, #20
 8019842:	429a      	cmp	r2, r3
 8019844:	d97a      	bls.n	801993c <_dtoa_r+0x34c>
 8019846:	6869      	ldr	r1, [r5, #4]
 8019848:	4620      	mov	r0, r4
 801984a:	f001 f959 	bl	801ab00 <_Balloc>
 801984e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019850:	6028      	str	r0, [r5, #0]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	f1b9 0f0e 	cmp.w	r9, #14
 8019858:	9306      	str	r3, [sp, #24]
 801985a:	f200 80f0 	bhi.w	8019a3e <_dtoa_r+0x44e>
 801985e:	2e00      	cmp	r6, #0
 8019860:	f000 80ed 	beq.w	8019a3e <_dtoa_r+0x44e>
 8019864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019868:	f1bb 0f00 	cmp.w	fp, #0
 801986c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8019870:	dd79      	ble.n	8019966 <_dtoa_r+0x376>
 8019872:	4a26      	ldr	r2, [pc, #152]	; (801990c <_dtoa_r+0x31c>)
 8019874:	f00b 030f 	and.w	r3, fp, #15
 8019878:	ea4f 162b 	mov.w	r6, fp, asr #4
 801987c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019880:	06f0      	lsls	r0, r6, #27
 8019882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019886:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801988a:	d55c      	bpl.n	8019946 <_dtoa_r+0x356>
 801988c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019890:	4b1f      	ldr	r3, [pc, #124]	; (8019910 <_dtoa_r+0x320>)
 8019892:	2503      	movs	r5, #3
 8019894:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8019898:	f7ed fb08 	bl	8006eac <__aeabi_ddiv>
 801989c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80198a0:	f006 060f 	and.w	r6, r6, #15
 80198a4:	4f1a      	ldr	r7, [pc, #104]	; (8019910 <_dtoa_r+0x320>)
 80198a6:	2e00      	cmp	r6, #0
 80198a8:	d14f      	bne.n	801994a <_dtoa_r+0x35a>
 80198aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80198ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80198b2:	f7ed fafb 	bl	8006eac <__aeabi_ddiv>
 80198b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80198ba:	e06e      	b.n	801999a <_dtoa_r+0x3aa>
 80198bc:	2301      	movs	r3, #1
 80198be:	9309      	str	r3, [sp, #36]	; 0x24
 80198c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80198c2:	445b      	add	r3, fp
 80198c4:	f103 0901 	add.w	r9, r3, #1
 80198c8:	9304      	str	r3, [sp, #16]
 80198ca:	464b      	mov	r3, r9
 80198cc:	2b01      	cmp	r3, #1
 80198ce:	bfb8      	it	lt
 80198d0:	2301      	movlt	r3, #1
 80198d2:	e7b0      	b.n	8019836 <_dtoa_r+0x246>
 80198d4:	2300      	movs	r3, #0
 80198d6:	e7a7      	b.n	8019828 <_dtoa_r+0x238>
 80198d8:	2300      	movs	r3, #0
 80198da:	e7f0      	b.n	80198be <_dtoa_r+0x2ce>
 80198dc:	f3af 8000 	nop.w
 80198e0:	636f4361 	.word	0x636f4361
 80198e4:	3fd287a7 	.word	0x3fd287a7
 80198e8:	8b60c8b3 	.word	0x8b60c8b3
 80198ec:	3fc68a28 	.word	0x3fc68a28
 80198f0:	509f79fb 	.word	0x509f79fb
 80198f4:	3fd34413 	.word	0x3fd34413
 80198f8:	7ff00000 	.word	0x7ff00000
 80198fc:	080233bd 	.word	0x080233bd
 8019900:	080233b4 	.word	0x080233b4
 8019904:	08023357 	.word	0x08023357
 8019908:	3ff80000 	.word	0x3ff80000
 801990c:	08023458 	.word	0x08023458
 8019910:	08023430 	.word	0x08023430
 8019914:	2601      	movs	r6, #1
 8019916:	2300      	movs	r3, #0
 8019918:	9609      	str	r6, [sp, #36]	; 0x24
 801991a:	931e      	str	r3, [sp, #120]	; 0x78
 801991c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019920:	2200      	movs	r2, #0
 8019922:	9304      	str	r3, [sp, #16]
 8019924:	4699      	mov	r9, r3
 8019926:	2312      	movs	r3, #18
 8019928:	921f      	str	r2, [sp, #124]	; 0x7c
 801992a:	e784      	b.n	8019836 <_dtoa_r+0x246>
 801992c:	2301      	movs	r3, #1
 801992e:	9309      	str	r3, [sp, #36]	; 0x24
 8019930:	e7f4      	b.n	801991c <_dtoa_r+0x32c>
 8019932:	2301      	movs	r3, #1
 8019934:	9304      	str	r3, [sp, #16]
 8019936:	4699      	mov	r9, r3
 8019938:	461a      	mov	r2, r3
 801993a:	e7f5      	b.n	8019928 <_dtoa_r+0x338>
 801993c:	686a      	ldr	r2, [r5, #4]
 801993e:	0049      	lsls	r1, r1, #1
 8019940:	3201      	adds	r2, #1
 8019942:	606a      	str	r2, [r5, #4]
 8019944:	e77b      	b.n	801983e <_dtoa_r+0x24e>
 8019946:	2502      	movs	r5, #2
 8019948:	e7ac      	b.n	80198a4 <_dtoa_r+0x2b4>
 801994a:	07f1      	lsls	r1, r6, #31
 801994c:	d508      	bpl.n	8019960 <_dtoa_r+0x370>
 801994e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019956:	f7ed f97f 	bl	8006c58 <__aeabi_dmul>
 801995a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801995e:	3501      	adds	r5, #1
 8019960:	1076      	asrs	r6, r6, #1
 8019962:	3708      	adds	r7, #8
 8019964:	e79f      	b.n	80198a6 <_dtoa_r+0x2b6>
 8019966:	f000 80a5 	beq.w	8019ab4 <_dtoa_r+0x4c4>
 801996a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801996e:	f1cb 0600 	rsb	r6, fp, #0
 8019972:	4ba2      	ldr	r3, [pc, #648]	; (8019bfc <_dtoa_r+0x60c>)
 8019974:	f006 020f 	and.w	r2, r6, #15
 8019978:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019980:	f7ed f96a 	bl	8006c58 <__aeabi_dmul>
 8019984:	2502      	movs	r5, #2
 8019986:	2300      	movs	r3, #0
 8019988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801998c:	4f9c      	ldr	r7, [pc, #624]	; (8019c00 <_dtoa_r+0x610>)
 801998e:	1136      	asrs	r6, r6, #4
 8019990:	2e00      	cmp	r6, #0
 8019992:	f040 8084 	bne.w	8019a9e <_dtoa_r+0x4ae>
 8019996:	2b00      	cmp	r3, #0
 8019998:	d18d      	bne.n	80198b6 <_dtoa_r+0x2c6>
 801999a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801999c:	2b00      	cmp	r3, #0
 801999e:	f000 808b 	beq.w	8019ab8 <_dtoa_r+0x4c8>
 80199a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80199a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80199aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80199ae:	2200      	movs	r2, #0
 80199b0:	4b94      	ldr	r3, [pc, #592]	; (8019c04 <_dtoa_r+0x614>)
 80199b2:	f7ed fbc3 	bl	800713c <__aeabi_dcmplt>
 80199b6:	2800      	cmp	r0, #0
 80199b8:	d07e      	beq.n	8019ab8 <_dtoa_r+0x4c8>
 80199ba:	f1b9 0f00 	cmp.w	r9, #0
 80199be:	d07b      	beq.n	8019ab8 <_dtoa_r+0x4c8>
 80199c0:	9b04      	ldr	r3, [sp, #16]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	dd37      	ble.n	8019a36 <_dtoa_r+0x446>
 80199c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80199ca:	2200      	movs	r2, #0
 80199cc:	4b8e      	ldr	r3, [pc, #568]	; (8019c08 <_dtoa_r+0x618>)
 80199ce:	f7ed f943 	bl	8006c58 <__aeabi_dmul>
 80199d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80199d6:	9e04      	ldr	r6, [sp, #16]
 80199d8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80199dc:	3501      	adds	r5, #1
 80199de:	4628      	mov	r0, r5
 80199e0:	f7ed f8d4 	bl	8006b8c <__aeabi_i2d>
 80199e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80199e8:	f7ed f936 	bl	8006c58 <__aeabi_dmul>
 80199ec:	4b87      	ldr	r3, [pc, #540]	; (8019c0c <_dtoa_r+0x61c>)
 80199ee:	2200      	movs	r2, #0
 80199f0:	f7ec ff80 	bl	80068f4 <__adddf3>
 80199f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80199f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80199fa:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 80199fe:	950b      	str	r5, [sp, #44]	; 0x2c
 8019a00:	2e00      	cmp	r6, #0
 8019a02:	d15c      	bne.n	8019abe <_dtoa_r+0x4ce>
 8019a04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019a08:	2200      	movs	r2, #0
 8019a0a:	4b81      	ldr	r3, [pc, #516]	; (8019c10 <_dtoa_r+0x620>)
 8019a0c:	f7ec ff70 	bl	80068f0 <__aeabi_dsub>
 8019a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019a12:	462b      	mov	r3, r5
 8019a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019a18:	f7ed fbae 	bl	8007178 <__aeabi_dcmpgt>
 8019a1c:	2800      	cmp	r0, #0
 8019a1e:	f040 82f7 	bne.w	801a010 <_dtoa_r+0xa20>
 8019a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019a26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019a28:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8019a2c:	f7ed fb86 	bl	800713c <__aeabi_dcmplt>
 8019a30:	2800      	cmp	r0, #0
 8019a32:	f040 82eb 	bne.w	801a00c <_dtoa_r+0xa1c>
 8019a36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8019a3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019a3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	f2c0 8150 	blt.w	8019ce6 <_dtoa_r+0x6f6>
 8019a46:	f1bb 0f0e 	cmp.w	fp, #14
 8019a4a:	f300 814c 	bgt.w	8019ce6 <_dtoa_r+0x6f6>
 8019a4e:	4b6b      	ldr	r3, [pc, #428]	; (8019bfc <_dtoa_r+0x60c>)
 8019a50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019a5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	f280 80da 	bge.w	8019c18 <_dtoa_r+0x628>
 8019a64:	f1b9 0f00 	cmp.w	r9, #0
 8019a68:	f300 80d6 	bgt.w	8019c18 <_dtoa_r+0x628>
 8019a6c:	f040 82cd 	bne.w	801a00a <_dtoa_r+0xa1a>
 8019a70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019a74:	2200      	movs	r2, #0
 8019a76:	4b66      	ldr	r3, [pc, #408]	; (8019c10 <_dtoa_r+0x620>)
 8019a78:	f7ed f8ee 	bl	8006c58 <__aeabi_dmul>
 8019a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019a80:	f7ed fb70 	bl	8007164 <__aeabi_dcmpge>
 8019a84:	464e      	mov	r6, r9
 8019a86:	464f      	mov	r7, r9
 8019a88:	2800      	cmp	r0, #0
 8019a8a:	f040 82a4 	bne.w	8019fd6 <_dtoa_r+0x9e6>
 8019a8e:	9b06      	ldr	r3, [sp, #24]
 8019a90:	9a06      	ldr	r2, [sp, #24]
 8019a92:	1c5d      	adds	r5, r3, #1
 8019a94:	2331      	movs	r3, #49	; 0x31
 8019a96:	f10b 0b01 	add.w	fp, fp, #1
 8019a9a:	7013      	strb	r3, [r2, #0]
 8019a9c:	e29f      	b.n	8019fde <_dtoa_r+0x9ee>
 8019a9e:	07f2      	lsls	r2, r6, #31
 8019aa0:	d505      	bpl.n	8019aae <_dtoa_r+0x4be>
 8019aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019aa6:	f7ed f8d7 	bl	8006c58 <__aeabi_dmul>
 8019aaa:	2301      	movs	r3, #1
 8019aac:	3501      	adds	r5, #1
 8019aae:	1076      	asrs	r6, r6, #1
 8019ab0:	3708      	adds	r7, #8
 8019ab2:	e76d      	b.n	8019990 <_dtoa_r+0x3a0>
 8019ab4:	2502      	movs	r5, #2
 8019ab6:	e770      	b.n	801999a <_dtoa_r+0x3aa>
 8019ab8:	465f      	mov	r7, fp
 8019aba:	464e      	mov	r6, r9
 8019abc:	e78f      	b.n	80199de <_dtoa_r+0x3ee>
 8019abe:	9a06      	ldr	r2, [sp, #24]
 8019ac0:	4b4e      	ldr	r3, [pc, #312]	; (8019bfc <_dtoa_r+0x60c>)
 8019ac2:	4432      	add	r2, r6
 8019ac4:	9211      	str	r2, [sp, #68]	; 0x44
 8019ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ac8:	1e71      	subs	r1, r6, #1
 8019aca:	2a00      	cmp	r2, #0
 8019acc:	d048      	beq.n	8019b60 <_dtoa_r+0x570>
 8019ace:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8019ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ad6:	2000      	movs	r0, #0
 8019ad8:	494e      	ldr	r1, [pc, #312]	; (8019c14 <_dtoa_r+0x624>)
 8019ada:	f7ed f9e7 	bl	8006eac <__aeabi_ddiv>
 8019ade:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019ae2:	f7ec ff05 	bl	80068f0 <__aeabi_dsub>
 8019ae6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019aea:	9d06      	ldr	r5, [sp, #24]
 8019aec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019af0:	f7ed fb62 	bl	80071b8 <__aeabi_d2iz>
 8019af4:	4606      	mov	r6, r0
 8019af6:	f7ed f849 	bl	8006b8c <__aeabi_i2d>
 8019afa:	4602      	mov	r2, r0
 8019afc:	460b      	mov	r3, r1
 8019afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019b02:	f7ec fef5 	bl	80068f0 <__aeabi_dsub>
 8019b06:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019b0a:	3630      	adds	r6, #48	; 0x30
 8019b0c:	f805 6b01 	strb.w	r6, [r5], #1
 8019b10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019b14:	f7ed fb12 	bl	800713c <__aeabi_dcmplt>
 8019b18:	2800      	cmp	r0, #0
 8019b1a:	d164      	bne.n	8019be6 <_dtoa_r+0x5f6>
 8019b1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019b20:	2000      	movs	r0, #0
 8019b22:	4938      	ldr	r1, [pc, #224]	; (8019c04 <_dtoa_r+0x614>)
 8019b24:	f7ec fee4 	bl	80068f0 <__aeabi_dsub>
 8019b28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019b2c:	f7ed fb06 	bl	800713c <__aeabi_dcmplt>
 8019b30:	2800      	cmp	r0, #0
 8019b32:	f040 80b9 	bne.w	8019ca8 <_dtoa_r+0x6b8>
 8019b36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019b38:	429d      	cmp	r5, r3
 8019b3a:	f43f af7c 	beq.w	8019a36 <_dtoa_r+0x446>
 8019b3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019b42:	2200      	movs	r2, #0
 8019b44:	4b30      	ldr	r3, [pc, #192]	; (8019c08 <_dtoa_r+0x618>)
 8019b46:	f7ed f887 	bl	8006c58 <__aeabi_dmul>
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019b50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019b54:	4b2c      	ldr	r3, [pc, #176]	; (8019c08 <_dtoa_r+0x618>)
 8019b56:	f7ed f87f 	bl	8006c58 <__aeabi_dmul>
 8019b5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019b5e:	e7c5      	b.n	8019aec <_dtoa_r+0x4fc>
 8019b60:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8019b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019b6c:	f7ed f874 	bl	8006c58 <__aeabi_dmul>
 8019b70:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019b74:	9d06      	ldr	r5, [sp, #24]
 8019b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019b7a:	f7ed fb1d 	bl	80071b8 <__aeabi_d2iz>
 8019b7e:	4606      	mov	r6, r0
 8019b80:	f7ed f804 	bl	8006b8c <__aeabi_i2d>
 8019b84:	4602      	mov	r2, r0
 8019b86:	460b      	mov	r3, r1
 8019b88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019b8c:	f7ec feb0 	bl	80068f0 <__aeabi_dsub>
 8019b90:	3630      	adds	r6, #48	; 0x30
 8019b92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019b94:	f805 6b01 	strb.w	r6, [r5], #1
 8019b98:	42ab      	cmp	r3, r5
 8019b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019b9e:	f04f 0200 	mov.w	r2, #0
 8019ba2:	d124      	bne.n	8019bee <_dtoa_r+0x5fe>
 8019ba4:	4b1b      	ldr	r3, [pc, #108]	; (8019c14 <_dtoa_r+0x624>)
 8019ba6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019baa:	f7ec fea3 	bl	80068f4 <__adddf3>
 8019bae:	4602      	mov	r2, r0
 8019bb0:	460b      	mov	r3, r1
 8019bb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019bb6:	f7ed fadf 	bl	8007178 <__aeabi_dcmpgt>
 8019bba:	2800      	cmp	r0, #0
 8019bbc:	d174      	bne.n	8019ca8 <_dtoa_r+0x6b8>
 8019bbe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019bc2:	2000      	movs	r0, #0
 8019bc4:	4913      	ldr	r1, [pc, #76]	; (8019c14 <_dtoa_r+0x624>)
 8019bc6:	f7ec fe93 	bl	80068f0 <__aeabi_dsub>
 8019bca:	4602      	mov	r2, r0
 8019bcc:	460b      	mov	r3, r1
 8019bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019bd2:	f7ed fab3 	bl	800713c <__aeabi_dcmplt>
 8019bd6:	2800      	cmp	r0, #0
 8019bd8:	f43f af2d 	beq.w	8019a36 <_dtoa_r+0x446>
 8019bdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019be0:	1e6a      	subs	r2, r5, #1
 8019be2:	2b30      	cmp	r3, #48	; 0x30
 8019be4:	d001      	beq.n	8019bea <_dtoa_r+0x5fa>
 8019be6:	46bb      	mov	fp, r7
 8019be8:	e04d      	b.n	8019c86 <_dtoa_r+0x696>
 8019bea:	4615      	mov	r5, r2
 8019bec:	e7f6      	b.n	8019bdc <_dtoa_r+0x5ec>
 8019bee:	4b06      	ldr	r3, [pc, #24]	; (8019c08 <_dtoa_r+0x618>)
 8019bf0:	f7ed f832 	bl	8006c58 <__aeabi_dmul>
 8019bf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019bf8:	e7bd      	b.n	8019b76 <_dtoa_r+0x586>
 8019bfa:	bf00      	nop
 8019bfc:	08023458 	.word	0x08023458
 8019c00:	08023430 	.word	0x08023430
 8019c04:	3ff00000 	.word	0x3ff00000
 8019c08:	40240000 	.word	0x40240000
 8019c0c:	401c0000 	.word	0x401c0000
 8019c10:	40140000 	.word	0x40140000
 8019c14:	3fe00000 	.word	0x3fe00000
 8019c18:	9d06      	ldr	r5, [sp, #24]
 8019c1a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019c1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019c22:	4630      	mov	r0, r6
 8019c24:	4639      	mov	r1, r7
 8019c26:	f7ed f941 	bl	8006eac <__aeabi_ddiv>
 8019c2a:	f7ed fac5 	bl	80071b8 <__aeabi_d2iz>
 8019c2e:	4680      	mov	r8, r0
 8019c30:	f7ec ffac 	bl	8006b8c <__aeabi_i2d>
 8019c34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019c38:	f7ed f80e 	bl	8006c58 <__aeabi_dmul>
 8019c3c:	4602      	mov	r2, r0
 8019c3e:	460b      	mov	r3, r1
 8019c40:	4630      	mov	r0, r6
 8019c42:	4639      	mov	r1, r7
 8019c44:	f7ec fe54 	bl	80068f0 <__aeabi_dsub>
 8019c48:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8019c4c:	f805 6b01 	strb.w	r6, [r5], #1
 8019c50:	9e06      	ldr	r6, [sp, #24]
 8019c52:	4602      	mov	r2, r0
 8019c54:	1bae      	subs	r6, r5, r6
 8019c56:	45b1      	cmp	r9, r6
 8019c58:	460b      	mov	r3, r1
 8019c5a:	d137      	bne.n	8019ccc <_dtoa_r+0x6dc>
 8019c5c:	f7ec fe4a 	bl	80068f4 <__adddf3>
 8019c60:	4606      	mov	r6, r0
 8019c62:	460f      	mov	r7, r1
 8019c64:	4602      	mov	r2, r0
 8019c66:	460b      	mov	r3, r1
 8019c68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019c6c:	f7ed fa66 	bl	800713c <__aeabi_dcmplt>
 8019c70:	b9c8      	cbnz	r0, 8019ca6 <_dtoa_r+0x6b6>
 8019c72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019c76:	4632      	mov	r2, r6
 8019c78:	463b      	mov	r3, r7
 8019c7a:	f7ed fa55 	bl	8007128 <__aeabi_dcmpeq>
 8019c7e:	b110      	cbz	r0, 8019c86 <_dtoa_r+0x696>
 8019c80:	f018 0f01 	tst.w	r8, #1
 8019c84:	d10f      	bne.n	8019ca6 <_dtoa_r+0x6b6>
 8019c86:	4651      	mov	r1, sl
 8019c88:	4620      	mov	r0, r4
 8019c8a:	f000 ff6d 	bl	801ab68 <_Bfree>
 8019c8e:	2300      	movs	r3, #0
 8019c90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019c92:	702b      	strb	r3, [r5, #0]
 8019c94:	f10b 0301 	add.w	r3, fp, #1
 8019c98:	6013      	str	r3, [r2, #0]
 8019c9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	f43f acec 	beq.w	801967a <_dtoa_r+0x8a>
 8019ca2:	601d      	str	r5, [r3, #0]
 8019ca4:	e4e9      	b.n	801967a <_dtoa_r+0x8a>
 8019ca6:	465f      	mov	r7, fp
 8019ca8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019cac:	1e6b      	subs	r3, r5, #1
 8019cae:	2a39      	cmp	r2, #57	; 0x39
 8019cb0:	d106      	bne.n	8019cc0 <_dtoa_r+0x6d0>
 8019cb2:	9a06      	ldr	r2, [sp, #24]
 8019cb4:	429a      	cmp	r2, r3
 8019cb6:	d107      	bne.n	8019cc8 <_dtoa_r+0x6d8>
 8019cb8:	2330      	movs	r3, #48	; 0x30
 8019cba:	7013      	strb	r3, [r2, #0]
 8019cbc:	4613      	mov	r3, r2
 8019cbe:	3701      	adds	r7, #1
 8019cc0:	781a      	ldrb	r2, [r3, #0]
 8019cc2:	3201      	adds	r2, #1
 8019cc4:	701a      	strb	r2, [r3, #0]
 8019cc6:	e78e      	b.n	8019be6 <_dtoa_r+0x5f6>
 8019cc8:	461d      	mov	r5, r3
 8019cca:	e7ed      	b.n	8019ca8 <_dtoa_r+0x6b8>
 8019ccc:	2200      	movs	r2, #0
 8019cce:	4bb5      	ldr	r3, [pc, #724]	; (8019fa4 <_dtoa_r+0x9b4>)
 8019cd0:	f7ec ffc2 	bl	8006c58 <__aeabi_dmul>
 8019cd4:	2200      	movs	r2, #0
 8019cd6:	2300      	movs	r3, #0
 8019cd8:	4606      	mov	r6, r0
 8019cda:	460f      	mov	r7, r1
 8019cdc:	f7ed fa24 	bl	8007128 <__aeabi_dcmpeq>
 8019ce0:	2800      	cmp	r0, #0
 8019ce2:	d09c      	beq.n	8019c1e <_dtoa_r+0x62e>
 8019ce4:	e7cf      	b.n	8019c86 <_dtoa_r+0x696>
 8019ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ce8:	2a00      	cmp	r2, #0
 8019cea:	f000 8129 	beq.w	8019f40 <_dtoa_r+0x950>
 8019cee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8019cf0:	2a01      	cmp	r2, #1
 8019cf2:	f300 810e 	bgt.w	8019f12 <_dtoa_r+0x922>
 8019cf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019cf8:	2a00      	cmp	r2, #0
 8019cfa:	f000 8106 	beq.w	8019f0a <_dtoa_r+0x91a>
 8019cfe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019d02:	4645      	mov	r5, r8
 8019d04:	9e08      	ldr	r6, [sp, #32]
 8019d06:	9a07      	ldr	r2, [sp, #28]
 8019d08:	2101      	movs	r1, #1
 8019d0a:	441a      	add	r2, r3
 8019d0c:	4620      	mov	r0, r4
 8019d0e:	4498      	add	r8, r3
 8019d10:	9207      	str	r2, [sp, #28]
 8019d12:	f000 ffc9 	bl	801aca8 <__i2b>
 8019d16:	4607      	mov	r7, r0
 8019d18:	2d00      	cmp	r5, #0
 8019d1a:	dd0b      	ble.n	8019d34 <_dtoa_r+0x744>
 8019d1c:	9b07      	ldr	r3, [sp, #28]
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	dd08      	ble.n	8019d34 <_dtoa_r+0x744>
 8019d22:	42ab      	cmp	r3, r5
 8019d24:	bfa8      	it	ge
 8019d26:	462b      	movge	r3, r5
 8019d28:	9a07      	ldr	r2, [sp, #28]
 8019d2a:	eba8 0803 	sub.w	r8, r8, r3
 8019d2e:	1aed      	subs	r5, r5, r3
 8019d30:	1ad3      	subs	r3, r2, r3
 8019d32:	9307      	str	r3, [sp, #28]
 8019d34:	9b08      	ldr	r3, [sp, #32]
 8019d36:	b1fb      	cbz	r3, 8019d78 <_dtoa_r+0x788>
 8019d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	f000 8104 	beq.w	8019f48 <_dtoa_r+0x958>
 8019d40:	2e00      	cmp	r6, #0
 8019d42:	dd11      	ble.n	8019d68 <_dtoa_r+0x778>
 8019d44:	4639      	mov	r1, r7
 8019d46:	4632      	mov	r2, r6
 8019d48:	4620      	mov	r0, r4
 8019d4a:	f001 f843 	bl	801add4 <__pow5mult>
 8019d4e:	4652      	mov	r2, sl
 8019d50:	4601      	mov	r1, r0
 8019d52:	4607      	mov	r7, r0
 8019d54:	4620      	mov	r0, r4
 8019d56:	f000 ffb0 	bl	801acba <__multiply>
 8019d5a:	4651      	mov	r1, sl
 8019d5c:	900a      	str	r0, [sp, #40]	; 0x28
 8019d5e:	4620      	mov	r0, r4
 8019d60:	f000 ff02 	bl	801ab68 <_Bfree>
 8019d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d66:	469a      	mov	sl, r3
 8019d68:	9b08      	ldr	r3, [sp, #32]
 8019d6a:	1b9a      	subs	r2, r3, r6
 8019d6c:	d004      	beq.n	8019d78 <_dtoa_r+0x788>
 8019d6e:	4651      	mov	r1, sl
 8019d70:	4620      	mov	r0, r4
 8019d72:	f001 f82f 	bl	801add4 <__pow5mult>
 8019d76:	4682      	mov	sl, r0
 8019d78:	2101      	movs	r1, #1
 8019d7a:	4620      	mov	r0, r4
 8019d7c:	f000 ff94 	bl	801aca8 <__i2b>
 8019d80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019d82:	4606      	mov	r6, r0
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	f340 80e1 	ble.w	8019f4c <_dtoa_r+0x95c>
 8019d8a:	461a      	mov	r2, r3
 8019d8c:	4601      	mov	r1, r0
 8019d8e:	4620      	mov	r0, r4
 8019d90:	f001 f820 	bl	801add4 <__pow5mult>
 8019d94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019d96:	4606      	mov	r6, r0
 8019d98:	2b01      	cmp	r3, #1
 8019d9a:	f340 80da 	ble.w	8019f52 <_dtoa_r+0x962>
 8019d9e:	2300      	movs	r3, #0
 8019da0:	9308      	str	r3, [sp, #32]
 8019da2:	6933      	ldr	r3, [r6, #16]
 8019da4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019da8:	6918      	ldr	r0, [r3, #16]
 8019daa:	f000 ff2f 	bl	801ac0c <__hi0bits>
 8019dae:	f1c0 0020 	rsb	r0, r0, #32
 8019db2:	9b07      	ldr	r3, [sp, #28]
 8019db4:	4418      	add	r0, r3
 8019db6:	f010 001f 	ands.w	r0, r0, #31
 8019dba:	f000 80f0 	beq.w	8019f9e <_dtoa_r+0x9ae>
 8019dbe:	f1c0 0320 	rsb	r3, r0, #32
 8019dc2:	2b04      	cmp	r3, #4
 8019dc4:	f340 80e2 	ble.w	8019f8c <_dtoa_r+0x99c>
 8019dc8:	9b07      	ldr	r3, [sp, #28]
 8019dca:	f1c0 001c 	rsb	r0, r0, #28
 8019dce:	4480      	add	r8, r0
 8019dd0:	4405      	add	r5, r0
 8019dd2:	4403      	add	r3, r0
 8019dd4:	9307      	str	r3, [sp, #28]
 8019dd6:	f1b8 0f00 	cmp.w	r8, #0
 8019dda:	dd05      	ble.n	8019de8 <_dtoa_r+0x7f8>
 8019ddc:	4651      	mov	r1, sl
 8019dde:	4642      	mov	r2, r8
 8019de0:	4620      	mov	r0, r4
 8019de2:	f001 f845 	bl	801ae70 <__lshift>
 8019de6:	4682      	mov	sl, r0
 8019de8:	9b07      	ldr	r3, [sp, #28]
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	dd05      	ble.n	8019dfa <_dtoa_r+0x80a>
 8019dee:	4631      	mov	r1, r6
 8019df0:	461a      	mov	r2, r3
 8019df2:	4620      	mov	r0, r4
 8019df4:	f001 f83c 	bl	801ae70 <__lshift>
 8019df8:	4606      	mov	r6, r0
 8019dfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	f000 80d3 	beq.w	8019fa8 <_dtoa_r+0x9b8>
 8019e02:	4631      	mov	r1, r6
 8019e04:	4650      	mov	r0, sl
 8019e06:	f001 f884 	bl	801af12 <__mcmp>
 8019e0a:	2800      	cmp	r0, #0
 8019e0c:	f280 80cc 	bge.w	8019fa8 <_dtoa_r+0x9b8>
 8019e10:	2300      	movs	r3, #0
 8019e12:	4651      	mov	r1, sl
 8019e14:	220a      	movs	r2, #10
 8019e16:	4620      	mov	r0, r4
 8019e18:	f000 febd 	bl	801ab96 <__multadd>
 8019e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e1e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8019e22:	4682      	mov	sl, r0
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	f000 81a9 	beq.w	801a17c <_dtoa_r+0xb8c>
 8019e2a:	2300      	movs	r3, #0
 8019e2c:	4639      	mov	r1, r7
 8019e2e:	220a      	movs	r2, #10
 8019e30:	4620      	mov	r0, r4
 8019e32:	f000 feb0 	bl	801ab96 <__multadd>
 8019e36:	9b04      	ldr	r3, [sp, #16]
 8019e38:	4607      	mov	r7, r0
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	dc03      	bgt.n	8019e46 <_dtoa_r+0x856>
 8019e3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019e40:	2b02      	cmp	r3, #2
 8019e42:	f300 80b9 	bgt.w	8019fb8 <_dtoa_r+0x9c8>
 8019e46:	2d00      	cmp	r5, #0
 8019e48:	dd05      	ble.n	8019e56 <_dtoa_r+0x866>
 8019e4a:	4639      	mov	r1, r7
 8019e4c:	462a      	mov	r2, r5
 8019e4e:	4620      	mov	r0, r4
 8019e50:	f001 f80e 	bl	801ae70 <__lshift>
 8019e54:	4607      	mov	r7, r0
 8019e56:	9b08      	ldr	r3, [sp, #32]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	f000 8110 	beq.w	801a07e <_dtoa_r+0xa8e>
 8019e5e:	6879      	ldr	r1, [r7, #4]
 8019e60:	4620      	mov	r0, r4
 8019e62:	f000 fe4d 	bl	801ab00 <_Balloc>
 8019e66:	4605      	mov	r5, r0
 8019e68:	693a      	ldr	r2, [r7, #16]
 8019e6a:	f107 010c 	add.w	r1, r7, #12
 8019e6e:	3202      	adds	r2, #2
 8019e70:	0092      	lsls	r2, r2, #2
 8019e72:	300c      	adds	r0, #12
 8019e74:	f7fd fa1d 	bl	80172b2 <memcpy>
 8019e78:	2201      	movs	r2, #1
 8019e7a:	4629      	mov	r1, r5
 8019e7c:	4620      	mov	r0, r4
 8019e7e:	f000 fff7 	bl	801ae70 <__lshift>
 8019e82:	9707      	str	r7, [sp, #28]
 8019e84:	4607      	mov	r7, r0
 8019e86:	9b02      	ldr	r3, [sp, #8]
 8019e88:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8019e8c:	f003 0301 	and.w	r3, r3, #1
 8019e90:	9308      	str	r3, [sp, #32]
 8019e92:	4631      	mov	r1, r6
 8019e94:	4650      	mov	r0, sl
 8019e96:	f7ff fb1d 	bl	80194d4 <quorem>
 8019e9a:	9907      	ldr	r1, [sp, #28]
 8019e9c:	4605      	mov	r5, r0
 8019e9e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8019ea2:	4650      	mov	r0, sl
 8019ea4:	f001 f835 	bl	801af12 <__mcmp>
 8019ea8:	463a      	mov	r2, r7
 8019eaa:	9002      	str	r0, [sp, #8]
 8019eac:	4631      	mov	r1, r6
 8019eae:	4620      	mov	r0, r4
 8019eb0:	f001 f849 	bl	801af46 <__mdiff>
 8019eb4:	68c3      	ldr	r3, [r0, #12]
 8019eb6:	4602      	mov	r2, r0
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	f040 80e2 	bne.w	801a082 <_dtoa_r+0xa92>
 8019ebe:	4601      	mov	r1, r0
 8019ec0:	9009      	str	r0, [sp, #36]	; 0x24
 8019ec2:	4650      	mov	r0, sl
 8019ec4:	f001 f825 	bl	801af12 <__mcmp>
 8019ec8:	4603      	mov	r3, r0
 8019eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ecc:	4611      	mov	r1, r2
 8019ece:	4620      	mov	r0, r4
 8019ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8019ed2:	f000 fe49 	bl	801ab68 <_Bfree>
 8019ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	f040 80d4 	bne.w	801a086 <_dtoa_r+0xa96>
 8019ede:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8019ee0:	2a00      	cmp	r2, #0
 8019ee2:	f040 80d0 	bne.w	801a086 <_dtoa_r+0xa96>
 8019ee6:	9a08      	ldr	r2, [sp, #32]
 8019ee8:	2a00      	cmp	r2, #0
 8019eea:	f040 80cc 	bne.w	801a086 <_dtoa_r+0xa96>
 8019eee:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8019ef2:	f000 80e8 	beq.w	801a0c6 <_dtoa_r+0xad6>
 8019ef6:	9b02      	ldr	r3, [sp, #8]
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	dd01      	ble.n	8019f00 <_dtoa_r+0x910>
 8019efc:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8019f00:	f108 0501 	add.w	r5, r8, #1
 8019f04:	f888 9000 	strb.w	r9, [r8]
 8019f08:	e06b      	b.n	8019fe2 <_dtoa_r+0x9f2>
 8019f0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019f0c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8019f10:	e6f7      	b.n	8019d02 <_dtoa_r+0x712>
 8019f12:	9b08      	ldr	r3, [sp, #32]
 8019f14:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8019f18:	42b3      	cmp	r3, r6
 8019f1a:	bfb7      	itett	lt
 8019f1c:	9b08      	ldrlt	r3, [sp, #32]
 8019f1e:	1b9e      	subge	r6, r3, r6
 8019f20:	1af2      	sublt	r2, r6, r3
 8019f22:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8019f24:	bfbf      	itttt	lt
 8019f26:	9608      	strlt	r6, [sp, #32]
 8019f28:	189b      	addlt	r3, r3, r2
 8019f2a:	930c      	strlt	r3, [sp, #48]	; 0x30
 8019f2c:	2600      	movlt	r6, #0
 8019f2e:	f1b9 0f00 	cmp.w	r9, #0
 8019f32:	bfb9      	ittee	lt
 8019f34:	eba8 0509 	sublt.w	r5, r8, r9
 8019f38:	2300      	movlt	r3, #0
 8019f3a:	4645      	movge	r5, r8
 8019f3c:	464b      	movge	r3, r9
 8019f3e:	e6e2      	b.n	8019d06 <_dtoa_r+0x716>
 8019f40:	9e08      	ldr	r6, [sp, #32]
 8019f42:	4645      	mov	r5, r8
 8019f44:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019f46:	e6e7      	b.n	8019d18 <_dtoa_r+0x728>
 8019f48:	9a08      	ldr	r2, [sp, #32]
 8019f4a:	e710      	b.n	8019d6e <_dtoa_r+0x77e>
 8019f4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019f4e:	2b01      	cmp	r3, #1
 8019f50:	dc18      	bgt.n	8019f84 <_dtoa_r+0x994>
 8019f52:	9b02      	ldr	r3, [sp, #8]
 8019f54:	b9b3      	cbnz	r3, 8019f84 <_dtoa_r+0x994>
 8019f56:	9b03      	ldr	r3, [sp, #12]
 8019f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019f5c:	b9a3      	cbnz	r3, 8019f88 <_dtoa_r+0x998>
 8019f5e:	9b03      	ldr	r3, [sp, #12]
 8019f60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019f64:	0d1b      	lsrs	r3, r3, #20
 8019f66:	051b      	lsls	r3, r3, #20
 8019f68:	b12b      	cbz	r3, 8019f76 <_dtoa_r+0x986>
 8019f6a:	9b07      	ldr	r3, [sp, #28]
 8019f6c:	f108 0801 	add.w	r8, r8, #1
 8019f70:	3301      	adds	r3, #1
 8019f72:	9307      	str	r3, [sp, #28]
 8019f74:	2301      	movs	r3, #1
 8019f76:	9308      	str	r3, [sp, #32]
 8019f78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	f47f af11 	bne.w	8019da2 <_dtoa_r+0x7b2>
 8019f80:	2001      	movs	r0, #1
 8019f82:	e716      	b.n	8019db2 <_dtoa_r+0x7c2>
 8019f84:	2300      	movs	r3, #0
 8019f86:	e7f6      	b.n	8019f76 <_dtoa_r+0x986>
 8019f88:	9b02      	ldr	r3, [sp, #8]
 8019f8a:	e7f4      	b.n	8019f76 <_dtoa_r+0x986>
 8019f8c:	f43f af23 	beq.w	8019dd6 <_dtoa_r+0x7e6>
 8019f90:	9a07      	ldr	r2, [sp, #28]
 8019f92:	331c      	adds	r3, #28
 8019f94:	441a      	add	r2, r3
 8019f96:	4498      	add	r8, r3
 8019f98:	441d      	add	r5, r3
 8019f9a:	4613      	mov	r3, r2
 8019f9c:	e71a      	b.n	8019dd4 <_dtoa_r+0x7e4>
 8019f9e:	4603      	mov	r3, r0
 8019fa0:	e7f6      	b.n	8019f90 <_dtoa_r+0x9a0>
 8019fa2:	bf00      	nop
 8019fa4:	40240000 	.word	0x40240000
 8019fa8:	f1b9 0f00 	cmp.w	r9, #0
 8019fac:	dc33      	bgt.n	801a016 <_dtoa_r+0xa26>
 8019fae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019fb0:	2b02      	cmp	r3, #2
 8019fb2:	dd30      	ble.n	801a016 <_dtoa_r+0xa26>
 8019fb4:	f8cd 9010 	str.w	r9, [sp, #16]
 8019fb8:	9b04      	ldr	r3, [sp, #16]
 8019fba:	b963      	cbnz	r3, 8019fd6 <_dtoa_r+0x9e6>
 8019fbc:	4631      	mov	r1, r6
 8019fbe:	2205      	movs	r2, #5
 8019fc0:	4620      	mov	r0, r4
 8019fc2:	f000 fde8 	bl	801ab96 <__multadd>
 8019fc6:	4601      	mov	r1, r0
 8019fc8:	4606      	mov	r6, r0
 8019fca:	4650      	mov	r0, sl
 8019fcc:	f000 ffa1 	bl	801af12 <__mcmp>
 8019fd0:	2800      	cmp	r0, #0
 8019fd2:	f73f ad5c 	bgt.w	8019a8e <_dtoa_r+0x49e>
 8019fd6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019fd8:	9d06      	ldr	r5, [sp, #24]
 8019fda:	ea6f 0b03 	mvn.w	fp, r3
 8019fde:	2300      	movs	r3, #0
 8019fe0:	9307      	str	r3, [sp, #28]
 8019fe2:	4631      	mov	r1, r6
 8019fe4:	4620      	mov	r0, r4
 8019fe6:	f000 fdbf 	bl	801ab68 <_Bfree>
 8019fea:	2f00      	cmp	r7, #0
 8019fec:	f43f ae4b 	beq.w	8019c86 <_dtoa_r+0x696>
 8019ff0:	9b07      	ldr	r3, [sp, #28]
 8019ff2:	b12b      	cbz	r3, 801a000 <_dtoa_r+0xa10>
 8019ff4:	42bb      	cmp	r3, r7
 8019ff6:	d003      	beq.n	801a000 <_dtoa_r+0xa10>
 8019ff8:	4619      	mov	r1, r3
 8019ffa:	4620      	mov	r0, r4
 8019ffc:	f000 fdb4 	bl	801ab68 <_Bfree>
 801a000:	4639      	mov	r1, r7
 801a002:	4620      	mov	r0, r4
 801a004:	f000 fdb0 	bl	801ab68 <_Bfree>
 801a008:	e63d      	b.n	8019c86 <_dtoa_r+0x696>
 801a00a:	2600      	movs	r6, #0
 801a00c:	4637      	mov	r7, r6
 801a00e:	e7e2      	b.n	8019fd6 <_dtoa_r+0x9e6>
 801a010:	46bb      	mov	fp, r7
 801a012:	4637      	mov	r7, r6
 801a014:	e53b      	b.n	8019a8e <_dtoa_r+0x49e>
 801a016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a018:	f8cd 9010 	str.w	r9, [sp, #16]
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	f47f af12 	bne.w	8019e46 <_dtoa_r+0x856>
 801a022:	9d06      	ldr	r5, [sp, #24]
 801a024:	4631      	mov	r1, r6
 801a026:	4650      	mov	r0, sl
 801a028:	f7ff fa54 	bl	80194d4 <quorem>
 801a02c:	9b06      	ldr	r3, [sp, #24]
 801a02e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801a032:	f805 9b01 	strb.w	r9, [r5], #1
 801a036:	9a04      	ldr	r2, [sp, #16]
 801a038:	1aeb      	subs	r3, r5, r3
 801a03a:	429a      	cmp	r2, r3
 801a03c:	f300 8081 	bgt.w	801a142 <_dtoa_r+0xb52>
 801a040:	9b06      	ldr	r3, [sp, #24]
 801a042:	2a01      	cmp	r2, #1
 801a044:	bfac      	ite	ge
 801a046:	189b      	addge	r3, r3, r2
 801a048:	3301      	addlt	r3, #1
 801a04a:	4698      	mov	r8, r3
 801a04c:	2300      	movs	r3, #0
 801a04e:	9307      	str	r3, [sp, #28]
 801a050:	4651      	mov	r1, sl
 801a052:	2201      	movs	r2, #1
 801a054:	4620      	mov	r0, r4
 801a056:	f000 ff0b 	bl	801ae70 <__lshift>
 801a05a:	4631      	mov	r1, r6
 801a05c:	4682      	mov	sl, r0
 801a05e:	f000 ff58 	bl	801af12 <__mcmp>
 801a062:	2800      	cmp	r0, #0
 801a064:	dc34      	bgt.n	801a0d0 <_dtoa_r+0xae0>
 801a066:	d102      	bne.n	801a06e <_dtoa_r+0xa7e>
 801a068:	f019 0f01 	tst.w	r9, #1
 801a06c:	d130      	bne.n	801a0d0 <_dtoa_r+0xae0>
 801a06e:	4645      	mov	r5, r8
 801a070:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a074:	1e6a      	subs	r2, r5, #1
 801a076:	2b30      	cmp	r3, #48	; 0x30
 801a078:	d1b3      	bne.n	8019fe2 <_dtoa_r+0x9f2>
 801a07a:	4615      	mov	r5, r2
 801a07c:	e7f8      	b.n	801a070 <_dtoa_r+0xa80>
 801a07e:	4638      	mov	r0, r7
 801a080:	e6ff      	b.n	8019e82 <_dtoa_r+0x892>
 801a082:	2301      	movs	r3, #1
 801a084:	e722      	b.n	8019ecc <_dtoa_r+0x8dc>
 801a086:	9a02      	ldr	r2, [sp, #8]
 801a088:	2a00      	cmp	r2, #0
 801a08a:	db04      	blt.n	801a096 <_dtoa_r+0xaa6>
 801a08c:	d128      	bne.n	801a0e0 <_dtoa_r+0xaf0>
 801a08e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a090:	bb32      	cbnz	r2, 801a0e0 <_dtoa_r+0xaf0>
 801a092:	9a08      	ldr	r2, [sp, #32]
 801a094:	bb22      	cbnz	r2, 801a0e0 <_dtoa_r+0xaf0>
 801a096:	2b00      	cmp	r3, #0
 801a098:	f77f af32 	ble.w	8019f00 <_dtoa_r+0x910>
 801a09c:	4651      	mov	r1, sl
 801a09e:	2201      	movs	r2, #1
 801a0a0:	4620      	mov	r0, r4
 801a0a2:	f000 fee5 	bl	801ae70 <__lshift>
 801a0a6:	4631      	mov	r1, r6
 801a0a8:	4682      	mov	sl, r0
 801a0aa:	f000 ff32 	bl	801af12 <__mcmp>
 801a0ae:	2800      	cmp	r0, #0
 801a0b0:	dc05      	bgt.n	801a0be <_dtoa_r+0xace>
 801a0b2:	f47f af25 	bne.w	8019f00 <_dtoa_r+0x910>
 801a0b6:	f019 0f01 	tst.w	r9, #1
 801a0ba:	f43f af21 	beq.w	8019f00 <_dtoa_r+0x910>
 801a0be:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801a0c2:	f47f af1b 	bne.w	8019efc <_dtoa_r+0x90c>
 801a0c6:	2339      	movs	r3, #57	; 0x39
 801a0c8:	f108 0801 	add.w	r8, r8, #1
 801a0cc:	f808 3c01 	strb.w	r3, [r8, #-1]
 801a0d0:	4645      	mov	r5, r8
 801a0d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a0d6:	1e6a      	subs	r2, r5, #1
 801a0d8:	2b39      	cmp	r3, #57	; 0x39
 801a0da:	d03a      	beq.n	801a152 <_dtoa_r+0xb62>
 801a0dc:	3301      	adds	r3, #1
 801a0de:	e03f      	b.n	801a160 <_dtoa_r+0xb70>
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	f108 0501 	add.w	r5, r8, #1
 801a0e6:	dd05      	ble.n	801a0f4 <_dtoa_r+0xb04>
 801a0e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801a0ec:	d0eb      	beq.n	801a0c6 <_dtoa_r+0xad6>
 801a0ee:	f109 0901 	add.w	r9, r9, #1
 801a0f2:	e707      	b.n	8019f04 <_dtoa_r+0x914>
 801a0f4:	9b06      	ldr	r3, [sp, #24]
 801a0f6:	9a04      	ldr	r2, [sp, #16]
 801a0f8:	1aeb      	subs	r3, r5, r3
 801a0fa:	4293      	cmp	r3, r2
 801a0fc:	46a8      	mov	r8, r5
 801a0fe:	f805 9c01 	strb.w	r9, [r5, #-1]
 801a102:	d0a5      	beq.n	801a050 <_dtoa_r+0xa60>
 801a104:	4651      	mov	r1, sl
 801a106:	2300      	movs	r3, #0
 801a108:	220a      	movs	r2, #10
 801a10a:	4620      	mov	r0, r4
 801a10c:	f000 fd43 	bl	801ab96 <__multadd>
 801a110:	9b07      	ldr	r3, [sp, #28]
 801a112:	4682      	mov	sl, r0
 801a114:	42bb      	cmp	r3, r7
 801a116:	f04f 020a 	mov.w	r2, #10
 801a11a:	f04f 0300 	mov.w	r3, #0
 801a11e:	9907      	ldr	r1, [sp, #28]
 801a120:	4620      	mov	r0, r4
 801a122:	d104      	bne.n	801a12e <_dtoa_r+0xb3e>
 801a124:	f000 fd37 	bl	801ab96 <__multadd>
 801a128:	9007      	str	r0, [sp, #28]
 801a12a:	4607      	mov	r7, r0
 801a12c:	e6b1      	b.n	8019e92 <_dtoa_r+0x8a2>
 801a12e:	f000 fd32 	bl	801ab96 <__multadd>
 801a132:	2300      	movs	r3, #0
 801a134:	9007      	str	r0, [sp, #28]
 801a136:	220a      	movs	r2, #10
 801a138:	4639      	mov	r1, r7
 801a13a:	4620      	mov	r0, r4
 801a13c:	f000 fd2b 	bl	801ab96 <__multadd>
 801a140:	e7f3      	b.n	801a12a <_dtoa_r+0xb3a>
 801a142:	4651      	mov	r1, sl
 801a144:	2300      	movs	r3, #0
 801a146:	220a      	movs	r2, #10
 801a148:	4620      	mov	r0, r4
 801a14a:	f000 fd24 	bl	801ab96 <__multadd>
 801a14e:	4682      	mov	sl, r0
 801a150:	e768      	b.n	801a024 <_dtoa_r+0xa34>
 801a152:	9b06      	ldr	r3, [sp, #24]
 801a154:	4293      	cmp	r3, r2
 801a156:	d105      	bne.n	801a164 <_dtoa_r+0xb74>
 801a158:	2331      	movs	r3, #49	; 0x31
 801a15a:	9a06      	ldr	r2, [sp, #24]
 801a15c:	f10b 0b01 	add.w	fp, fp, #1
 801a160:	7013      	strb	r3, [r2, #0]
 801a162:	e73e      	b.n	8019fe2 <_dtoa_r+0x9f2>
 801a164:	4615      	mov	r5, r2
 801a166:	e7b4      	b.n	801a0d2 <_dtoa_r+0xae2>
 801a168:	4b09      	ldr	r3, [pc, #36]	; (801a190 <_dtoa_r+0xba0>)
 801a16a:	f7ff baa3 	b.w	80196b4 <_dtoa_r+0xc4>
 801a16e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a170:	2b00      	cmp	r3, #0
 801a172:	f47f aa7d 	bne.w	8019670 <_dtoa_r+0x80>
 801a176:	4b07      	ldr	r3, [pc, #28]	; (801a194 <_dtoa_r+0xba4>)
 801a178:	f7ff ba9c 	b.w	80196b4 <_dtoa_r+0xc4>
 801a17c:	9b04      	ldr	r3, [sp, #16]
 801a17e:	2b00      	cmp	r3, #0
 801a180:	f73f af4f 	bgt.w	801a022 <_dtoa_r+0xa32>
 801a184:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a186:	2b02      	cmp	r3, #2
 801a188:	f77f af4b 	ble.w	801a022 <_dtoa_r+0xa32>
 801a18c:	e714      	b.n	8019fb8 <_dtoa_r+0x9c8>
 801a18e:	bf00      	nop
 801a190:	08023356 	.word	0x08023356
 801a194:	080233b4 	.word	0x080233b4

0801a198 <__sflush_r>:
 801a198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1a0:	b293      	uxth	r3, r2
 801a1a2:	4605      	mov	r5, r0
 801a1a4:	0718      	lsls	r0, r3, #28
 801a1a6:	460c      	mov	r4, r1
 801a1a8:	d461      	bmi.n	801a26e <__sflush_r+0xd6>
 801a1aa:	684b      	ldr	r3, [r1, #4]
 801a1ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	818a      	strh	r2, [r1, #12]
 801a1b4:	dc05      	bgt.n	801a1c2 <__sflush_r+0x2a>
 801a1b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	dc02      	bgt.n	801a1c2 <__sflush_r+0x2a>
 801a1bc:	2000      	movs	r0, #0
 801a1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a1c4:	2e00      	cmp	r6, #0
 801a1c6:	d0f9      	beq.n	801a1bc <__sflush_r+0x24>
 801a1c8:	2300      	movs	r3, #0
 801a1ca:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a1ce:	682f      	ldr	r7, [r5, #0]
 801a1d0:	602b      	str	r3, [r5, #0]
 801a1d2:	d037      	beq.n	801a244 <__sflush_r+0xac>
 801a1d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a1d6:	89a3      	ldrh	r3, [r4, #12]
 801a1d8:	075a      	lsls	r2, r3, #29
 801a1da:	d505      	bpl.n	801a1e8 <__sflush_r+0x50>
 801a1dc:	6863      	ldr	r3, [r4, #4]
 801a1de:	1ac0      	subs	r0, r0, r3
 801a1e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a1e2:	b10b      	cbz	r3, 801a1e8 <__sflush_r+0x50>
 801a1e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a1e6:	1ac0      	subs	r0, r0, r3
 801a1e8:	2300      	movs	r3, #0
 801a1ea:	4602      	mov	r2, r0
 801a1ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a1ee:	6a21      	ldr	r1, [r4, #32]
 801a1f0:	4628      	mov	r0, r5
 801a1f2:	47b0      	blx	r6
 801a1f4:	1c43      	adds	r3, r0, #1
 801a1f6:	89a3      	ldrh	r3, [r4, #12]
 801a1f8:	d106      	bne.n	801a208 <__sflush_r+0x70>
 801a1fa:	6829      	ldr	r1, [r5, #0]
 801a1fc:	291d      	cmp	r1, #29
 801a1fe:	d84f      	bhi.n	801a2a0 <__sflush_r+0x108>
 801a200:	4a2d      	ldr	r2, [pc, #180]	; (801a2b8 <__sflush_r+0x120>)
 801a202:	40ca      	lsrs	r2, r1
 801a204:	07d6      	lsls	r6, r2, #31
 801a206:	d54b      	bpl.n	801a2a0 <__sflush_r+0x108>
 801a208:	2200      	movs	r2, #0
 801a20a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a20e:	b21b      	sxth	r3, r3
 801a210:	6062      	str	r2, [r4, #4]
 801a212:	6922      	ldr	r2, [r4, #16]
 801a214:	04d9      	lsls	r1, r3, #19
 801a216:	81a3      	strh	r3, [r4, #12]
 801a218:	6022      	str	r2, [r4, #0]
 801a21a:	d504      	bpl.n	801a226 <__sflush_r+0x8e>
 801a21c:	1c42      	adds	r2, r0, #1
 801a21e:	d101      	bne.n	801a224 <__sflush_r+0x8c>
 801a220:	682b      	ldr	r3, [r5, #0]
 801a222:	b903      	cbnz	r3, 801a226 <__sflush_r+0x8e>
 801a224:	6560      	str	r0, [r4, #84]	; 0x54
 801a226:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a228:	602f      	str	r7, [r5, #0]
 801a22a:	2900      	cmp	r1, #0
 801a22c:	d0c6      	beq.n	801a1bc <__sflush_r+0x24>
 801a22e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a232:	4299      	cmp	r1, r3
 801a234:	d002      	beq.n	801a23c <__sflush_r+0xa4>
 801a236:	4628      	mov	r0, r5
 801a238:	f000 f9ac 	bl	801a594 <_free_r>
 801a23c:	2000      	movs	r0, #0
 801a23e:	6360      	str	r0, [r4, #52]	; 0x34
 801a240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a244:	6a21      	ldr	r1, [r4, #32]
 801a246:	2301      	movs	r3, #1
 801a248:	4628      	mov	r0, r5
 801a24a:	47b0      	blx	r6
 801a24c:	1c41      	adds	r1, r0, #1
 801a24e:	d1c2      	bne.n	801a1d6 <__sflush_r+0x3e>
 801a250:	682b      	ldr	r3, [r5, #0]
 801a252:	2b00      	cmp	r3, #0
 801a254:	d0bf      	beq.n	801a1d6 <__sflush_r+0x3e>
 801a256:	2b1d      	cmp	r3, #29
 801a258:	d001      	beq.n	801a25e <__sflush_r+0xc6>
 801a25a:	2b16      	cmp	r3, #22
 801a25c:	d101      	bne.n	801a262 <__sflush_r+0xca>
 801a25e:	602f      	str	r7, [r5, #0]
 801a260:	e7ac      	b.n	801a1bc <__sflush_r+0x24>
 801a262:	89a3      	ldrh	r3, [r4, #12]
 801a264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a268:	81a3      	strh	r3, [r4, #12]
 801a26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a26e:	690f      	ldr	r7, [r1, #16]
 801a270:	2f00      	cmp	r7, #0
 801a272:	d0a3      	beq.n	801a1bc <__sflush_r+0x24>
 801a274:	079b      	lsls	r3, r3, #30
 801a276:	bf18      	it	ne
 801a278:	2300      	movne	r3, #0
 801a27a:	680e      	ldr	r6, [r1, #0]
 801a27c:	bf08      	it	eq
 801a27e:	694b      	ldreq	r3, [r1, #20]
 801a280:	eba6 0807 	sub.w	r8, r6, r7
 801a284:	600f      	str	r7, [r1, #0]
 801a286:	608b      	str	r3, [r1, #8]
 801a288:	f1b8 0f00 	cmp.w	r8, #0
 801a28c:	dd96      	ble.n	801a1bc <__sflush_r+0x24>
 801a28e:	4643      	mov	r3, r8
 801a290:	463a      	mov	r2, r7
 801a292:	6a21      	ldr	r1, [r4, #32]
 801a294:	4628      	mov	r0, r5
 801a296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a298:	47b0      	blx	r6
 801a29a:	2800      	cmp	r0, #0
 801a29c:	dc07      	bgt.n	801a2ae <__sflush_r+0x116>
 801a29e:	89a3      	ldrh	r3, [r4, #12]
 801a2a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a2a4:	81a3      	strh	r3, [r4, #12]
 801a2a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2ae:	4407      	add	r7, r0
 801a2b0:	eba8 0800 	sub.w	r8, r8, r0
 801a2b4:	e7e8      	b.n	801a288 <__sflush_r+0xf0>
 801a2b6:	bf00      	nop
 801a2b8:	20400001 	.word	0x20400001

0801a2bc <_fflush_r>:
 801a2bc:	b538      	push	{r3, r4, r5, lr}
 801a2be:	690b      	ldr	r3, [r1, #16]
 801a2c0:	4605      	mov	r5, r0
 801a2c2:	460c      	mov	r4, r1
 801a2c4:	b913      	cbnz	r3, 801a2cc <_fflush_r+0x10>
 801a2c6:	2500      	movs	r5, #0
 801a2c8:	4628      	mov	r0, r5
 801a2ca:	bd38      	pop	{r3, r4, r5, pc}
 801a2cc:	b118      	cbz	r0, 801a2d6 <_fflush_r+0x1a>
 801a2ce:	6983      	ldr	r3, [r0, #24]
 801a2d0:	b90b      	cbnz	r3, 801a2d6 <_fflush_r+0x1a>
 801a2d2:	f000 f887 	bl	801a3e4 <__sinit>
 801a2d6:	4b14      	ldr	r3, [pc, #80]	; (801a328 <_fflush_r+0x6c>)
 801a2d8:	429c      	cmp	r4, r3
 801a2da:	d11b      	bne.n	801a314 <_fflush_r+0x58>
 801a2dc:	686c      	ldr	r4, [r5, #4]
 801a2de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d0ef      	beq.n	801a2c6 <_fflush_r+0xa>
 801a2e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a2e8:	07d0      	lsls	r0, r2, #31
 801a2ea:	d404      	bmi.n	801a2f6 <_fflush_r+0x3a>
 801a2ec:	0599      	lsls	r1, r3, #22
 801a2ee:	d402      	bmi.n	801a2f6 <_fflush_r+0x3a>
 801a2f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a2f2:	f7fc fda2 	bl	8016e3a <__retarget_lock_acquire_recursive>
 801a2f6:	4628      	mov	r0, r5
 801a2f8:	4621      	mov	r1, r4
 801a2fa:	f7ff ff4d 	bl	801a198 <__sflush_r>
 801a2fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a300:	4605      	mov	r5, r0
 801a302:	07da      	lsls	r2, r3, #31
 801a304:	d4e0      	bmi.n	801a2c8 <_fflush_r+0xc>
 801a306:	89a3      	ldrh	r3, [r4, #12]
 801a308:	059b      	lsls	r3, r3, #22
 801a30a:	d4dd      	bmi.n	801a2c8 <_fflush_r+0xc>
 801a30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a30e:	f7fc fd96 	bl	8016e3e <__retarget_lock_release_recursive>
 801a312:	e7d9      	b.n	801a2c8 <_fflush_r+0xc>
 801a314:	4b05      	ldr	r3, [pc, #20]	; (801a32c <_fflush_r+0x70>)
 801a316:	429c      	cmp	r4, r3
 801a318:	d101      	bne.n	801a31e <_fflush_r+0x62>
 801a31a:	68ac      	ldr	r4, [r5, #8]
 801a31c:	e7df      	b.n	801a2de <_fflush_r+0x22>
 801a31e:	4b04      	ldr	r3, [pc, #16]	; (801a330 <_fflush_r+0x74>)
 801a320:	429c      	cmp	r4, r3
 801a322:	bf08      	it	eq
 801a324:	68ec      	ldreq	r4, [r5, #12]
 801a326:	e7da      	b.n	801a2de <_fflush_r+0x22>
 801a328:	080233e4 	.word	0x080233e4
 801a32c:	08023404 	.word	0x08023404
 801a330:	080233c4 	.word	0x080233c4

0801a334 <_cleanup_r>:
 801a334:	4901      	ldr	r1, [pc, #4]	; (801a33c <_cleanup_r+0x8>)
 801a336:	f000 b9e9 	b.w	801a70c <_fwalk_reent>
 801a33a:	bf00      	nop
 801a33c:	0801c101 	.word	0x0801c101

0801a340 <std.isra.0>:
 801a340:	2300      	movs	r3, #0
 801a342:	b510      	push	{r4, lr}
 801a344:	4604      	mov	r4, r0
 801a346:	6003      	str	r3, [r0, #0]
 801a348:	6043      	str	r3, [r0, #4]
 801a34a:	6083      	str	r3, [r0, #8]
 801a34c:	8181      	strh	r1, [r0, #12]
 801a34e:	6643      	str	r3, [r0, #100]	; 0x64
 801a350:	81c2      	strh	r2, [r0, #14]
 801a352:	6103      	str	r3, [r0, #16]
 801a354:	6143      	str	r3, [r0, #20]
 801a356:	6183      	str	r3, [r0, #24]
 801a358:	4619      	mov	r1, r3
 801a35a:	2208      	movs	r2, #8
 801a35c:	305c      	adds	r0, #92	; 0x5c
 801a35e:	f7fc ffcd 	bl	80172fc <memset>
 801a362:	4b05      	ldr	r3, [pc, #20]	; (801a378 <std.isra.0+0x38>)
 801a364:	6224      	str	r4, [r4, #32]
 801a366:	6263      	str	r3, [r4, #36]	; 0x24
 801a368:	4b04      	ldr	r3, [pc, #16]	; (801a37c <std.isra.0+0x3c>)
 801a36a:	62a3      	str	r3, [r4, #40]	; 0x28
 801a36c:	4b04      	ldr	r3, [pc, #16]	; (801a380 <std.isra.0+0x40>)
 801a36e:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a370:	4b04      	ldr	r3, [pc, #16]	; (801a384 <std.isra.0+0x44>)
 801a372:	6323      	str	r3, [r4, #48]	; 0x30
 801a374:	bd10      	pop	{r4, pc}
 801a376:	bf00      	nop
 801a378:	08017cd9 	.word	0x08017cd9
 801a37c:	08017cff 	.word	0x08017cff
 801a380:	08017d37 	.word	0x08017d37
 801a384:	08017d5b 	.word	0x08017d5b

0801a388 <__sfmoreglue>:
 801a388:	b570      	push	{r4, r5, r6, lr}
 801a38a:	2568      	movs	r5, #104	; 0x68
 801a38c:	1e4a      	subs	r2, r1, #1
 801a38e:	4355      	muls	r5, r2
 801a390:	460e      	mov	r6, r1
 801a392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a396:	f7fc fd63 	bl	8016e60 <_malloc_r>
 801a39a:	4604      	mov	r4, r0
 801a39c:	b140      	cbz	r0, 801a3b0 <__sfmoreglue+0x28>
 801a39e:	2100      	movs	r1, #0
 801a3a0:	e880 0042 	stmia.w	r0, {r1, r6}
 801a3a4:	300c      	adds	r0, #12
 801a3a6:	60a0      	str	r0, [r4, #8]
 801a3a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a3ac:	f7fc ffa6 	bl	80172fc <memset>
 801a3b0:	4620      	mov	r0, r4
 801a3b2:	bd70      	pop	{r4, r5, r6, pc}

0801a3b4 <__sfp_lock_acquire>:
 801a3b4:	4801      	ldr	r0, [pc, #4]	; (801a3bc <__sfp_lock_acquire+0x8>)
 801a3b6:	f7fc bd40 	b.w	8016e3a <__retarget_lock_acquire_recursive>
 801a3ba:	bf00      	nop
 801a3bc:	200014e4 	.word	0x200014e4

0801a3c0 <__sfp_lock_release>:
 801a3c0:	4801      	ldr	r0, [pc, #4]	; (801a3c8 <__sfp_lock_release+0x8>)
 801a3c2:	f7fc bd3c 	b.w	8016e3e <__retarget_lock_release_recursive>
 801a3c6:	bf00      	nop
 801a3c8:	200014e4 	.word	0x200014e4

0801a3cc <__sinit_lock_acquire>:
 801a3cc:	4801      	ldr	r0, [pc, #4]	; (801a3d4 <__sinit_lock_acquire+0x8>)
 801a3ce:	f7fc bd34 	b.w	8016e3a <__retarget_lock_acquire_recursive>
 801a3d2:	bf00      	nop
 801a3d4:	200014df 	.word	0x200014df

0801a3d8 <__sinit_lock_release>:
 801a3d8:	4801      	ldr	r0, [pc, #4]	; (801a3e0 <__sinit_lock_release+0x8>)
 801a3da:	f7fc bd30 	b.w	8016e3e <__retarget_lock_release_recursive>
 801a3de:	bf00      	nop
 801a3e0:	200014df 	.word	0x200014df

0801a3e4 <__sinit>:
 801a3e4:	b510      	push	{r4, lr}
 801a3e6:	4604      	mov	r4, r0
 801a3e8:	f7ff fff0 	bl	801a3cc <__sinit_lock_acquire>
 801a3ec:	69a3      	ldr	r3, [r4, #24]
 801a3ee:	b11b      	cbz	r3, 801a3f8 <__sinit+0x14>
 801a3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a3f4:	f7ff bff0 	b.w	801a3d8 <__sinit_lock_release>
 801a3f8:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 801a3fc:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 801a400:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 801a404:	4b13      	ldr	r3, [pc, #76]	; (801a454 <__sinit+0x70>)
 801a406:	4a14      	ldr	r2, [pc, #80]	; (801a458 <__sinit+0x74>)
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	62a2      	str	r2, [r4, #40]	; 0x28
 801a40c:	429c      	cmp	r4, r3
 801a40e:	bf08      	it	eq
 801a410:	2301      	moveq	r3, #1
 801a412:	4620      	mov	r0, r4
 801a414:	bf08      	it	eq
 801a416:	61a3      	streq	r3, [r4, #24]
 801a418:	f000 f820 	bl	801a45c <__sfp>
 801a41c:	6060      	str	r0, [r4, #4]
 801a41e:	4620      	mov	r0, r4
 801a420:	f000 f81c 	bl	801a45c <__sfp>
 801a424:	60a0      	str	r0, [r4, #8]
 801a426:	4620      	mov	r0, r4
 801a428:	f000 f818 	bl	801a45c <__sfp>
 801a42c:	2200      	movs	r2, #0
 801a42e:	60e0      	str	r0, [r4, #12]
 801a430:	2104      	movs	r1, #4
 801a432:	6860      	ldr	r0, [r4, #4]
 801a434:	f7ff ff84 	bl	801a340 <std.isra.0>
 801a438:	2201      	movs	r2, #1
 801a43a:	2109      	movs	r1, #9
 801a43c:	68a0      	ldr	r0, [r4, #8]
 801a43e:	f7ff ff7f 	bl	801a340 <std.isra.0>
 801a442:	2202      	movs	r2, #2
 801a444:	2112      	movs	r1, #18
 801a446:	68e0      	ldr	r0, [r4, #12]
 801a448:	f7ff ff7a 	bl	801a340 <std.isra.0>
 801a44c:	2301      	movs	r3, #1
 801a44e:	61a3      	str	r3, [r4, #24]
 801a450:	e7ce      	b.n	801a3f0 <__sinit+0xc>
 801a452:	bf00      	nop
 801a454:	0802325c 	.word	0x0802325c
 801a458:	0801a335 	.word	0x0801a335

0801a45c <__sfp>:
 801a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a45e:	4607      	mov	r7, r0
 801a460:	f7ff ffa8 	bl	801a3b4 <__sfp_lock_acquire>
 801a464:	4b1f      	ldr	r3, [pc, #124]	; (801a4e4 <__sfp+0x88>)
 801a466:	681e      	ldr	r6, [r3, #0]
 801a468:	69b3      	ldr	r3, [r6, #24]
 801a46a:	b913      	cbnz	r3, 801a472 <__sfp+0x16>
 801a46c:	4630      	mov	r0, r6
 801a46e:	f7ff ffb9 	bl	801a3e4 <__sinit>
 801a472:	36d8      	adds	r6, #216	; 0xd8
 801a474:	68b4      	ldr	r4, [r6, #8]
 801a476:	6873      	ldr	r3, [r6, #4]
 801a478:	3b01      	subs	r3, #1
 801a47a:	d503      	bpl.n	801a484 <__sfp+0x28>
 801a47c:	6833      	ldr	r3, [r6, #0]
 801a47e:	b133      	cbz	r3, 801a48e <__sfp+0x32>
 801a480:	6836      	ldr	r6, [r6, #0]
 801a482:	e7f7      	b.n	801a474 <__sfp+0x18>
 801a484:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a488:	b17d      	cbz	r5, 801a4aa <__sfp+0x4e>
 801a48a:	3468      	adds	r4, #104	; 0x68
 801a48c:	e7f4      	b.n	801a478 <__sfp+0x1c>
 801a48e:	2104      	movs	r1, #4
 801a490:	4638      	mov	r0, r7
 801a492:	f7ff ff79 	bl	801a388 <__sfmoreglue>
 801a496:	4604      	mov	r4, r0
 801a498:	6030      	str	r0, [r6, #0]
 801a49a:	2800      	cmp	r0, #0
 801a49c:	d1f0      	bne.n	801a480 <__sfp+0x24>
 801a49e:	f7ff ff8f 	bl	801a3c0 <__sfp_lock_release>
 801a4a2:	230c      	movs	r3, #12
 801a4a4:	603b      	str	r3, [r7, #0]
 801a4a6:	4620      	mov	r0, r4
 801a4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a4ae:	81e3      	strh	r3, [r4, #14]
 801a4b0:	2301      	movs	r3, #1
 801a4b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a4b6:	81a3      	strh	r3, [r4, #12]
 801a4b8:	6665      	str	r5, [r4, #100]	; 0x64
 801a4ba:	f7fc fcbb 	bl	8016e34 <__retarget_lock_init_recursive>
 801a4be:	f7ff ff7f 	bl	801a3c0 <__sfp_lock_release>
 801a4c2:	6025      	str	r5, [r4, #0]
 801a4c4:	60a5      	str	r5, [r4, #8]
 801a4c6:	6065      	str	r5, [r4, #4]
 801a4c8:	6125      	str	r5, [r4, #16]
 801a4ca:	6165      	str	r5, [r4, #20]
 801a4cc:	61a5      	str	r5, [r4, #24]
 801a4ce:	2208      	movs	r2, #8
 801a4d0:	4629      	mov	r1, r5
 801a4d2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a4d6:	f7fc ff11 	bl	80172fc <memset>
 801a4da:	6365      	str	r5, [r4, #52]	; 0x34
 801a4dc:	63a5      	str	r5, [r4, #56]	; 0x38
 801a4de:	64a5      	str	r5, [r4, #72]	; 0x48
 801a4e0:	64e5      	str	r5, [r4, #76]	; 0x4c
 801a4e2:	e7e0      	b.n	801a4a6 <__sfp+0x4a>
 801a4e4:	0802325c 	.word	0x0802325c

0801a4e8 <_malloc_trim_r>:
 801a4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a4ec:	4689      	mov	r9, r1
 801a4ee:	4f25      	ldr	r7, [pc, #148]	; (801a584 <_malloc_trim_r+0x9c>)
 801a4f0:	4606      	mov	r6, r0
 801a4f2:	f7fd f967 	bl	80177c4 <__malloc_lock>
 801a4f6:	68bb      	ldr	r3, [r7, #8]
 801a4f8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 801a590 <_malloc_trim_r+0xa8>
 801a4fc:	685d      	ldr	r5, [r3, #4]
 801a4fe:	f1a8 0411 	sub.w	r4, r8, #17
 801a502:	f025 0503 	bic.w	r5, r5, #3
 801a506:	eba4 0409 	sub.w	r4, r4, r9
 801a50a:	442c      	add	r4, r5
 801a50c:	fbb4 f4f8 	udiv	r4, r4, r8
 801a510:	3c01      	subs	r4, #1
 801a512:	fb08 f404 	mul.w	r4, r8, r4
 801a516:	4544      	cmp	r4, r8
 801a518:	da05      	bge.n	801a526 <_malloc_trim_r+0x3e>
 801a51a:	4630      	mov	r0, r6
 801a51c:	f7fd f958 	bl	80177d0 <__malloc_unlock>
 801a520:	2000      	movs	r0, #0
 801a522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a526:	2100      	movs	r1, #0
 801a528:	4630      	mov	r0, r6
 801a52a:	f7fd fb29 	bl	8017b80 <_sbrk_r>
 801a52e:	68bb      	ldr	r3, [r7, #8]
 801a530:	442b      	add	r3, r5
 801a532:	4298      	cmp	r0, r3
 801a534:	d1f1      	bne.n	801a51a <_malloc_trim_r+0x32>
 801a536:	4261      	negs	r1, r4
 801a538:	4630      	mov	r0, r6
 801a53a:	f7fd fb21 	bl	8017b80 <_sbrk_r>
 801a53e:	3001      	adds	r0, #1
 801a540:	d110      	bne.n	801a564 <_malloc_trim_r+0x7c>
 801a542:	2100      	movs	r1, #0
 801a544:	4630      	mov	r0, r6
 801a546:	f7fd fb1b 	bl	8017b80 <_sbrk_r>
 801a54a:	68ba      	ldr	r2, [r7, #8]
 801a54c:	1a83      	subs	r3, r0, r2
 801a54e:	2b0f      	cmp	r3, #15
 801a550:	dde3      	ble.n	801a51a <_malloc_trim_r+0x32>
 801a552:	490d      	ldr	r1, [pc, #52]	; (801a588 <_malloc_trim_r+0xa0>)
 801a554:	f043 0301 	orr.w	r3, r3, #1
 801a558:	6809      	ldr	r1, [r1, #0]
 801a55a:	6053      	str	r3, [r2, #4]
 801a55c:	1a40      	subs	r0, r0, r1
 801a55e:	490b      	ldr	r1, [pc, #44]	; (801a58c <_malloc_trim_r+0xa4>)
 801a560:	6008      	str	r0, [r1, #0]
 801a562:	e7da      	b.n	801a51a <_malloc_trim_r+0x32>
 801a564:	68bb      	ldr	r3, [r7, #8]
 801a566:	4a09      	ldr	r2, [pc, #36]	; (801a58c <_malloc_trim_r+0xa4>)
 801a568:	1b2d      	subs	r5, r5, r4
 801a56a:	f045 0501 	orr.w	r5, r5, #1
 801a56e:	605d      	str	r5, [r3, #4]
 801a570:	6813      	ldr	r3, [r2, #0]
 801a572:	4630      	mov	r0, r6
 801a574:	1b1c      	subs	r4, r3, r4
 801a576:	6014      	str	r4, [r2, #0]
 801a578:	f7fd f92a 	bl	80177d0 <__malloc_unlock>
 801a57c:	2001      	movs	r0, #1
 801a57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a582:	bf00      	nop
 801a584:	20000120 	.word	0x20000120
 801a588:	20000528 	.word	0x20000528
 801a58c:	20001364 	.word	0x20001364
 801a590:	00001000 	.word	0x00001000

0801a594 <_free_r>:
 801a594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a598:	4604      	mov	r4, r0
 801a59a:	4688      	mov	r8, r1
 801a59c:	2900      	cmp	r1, #0
 801a59e:	f000 80ab 	beq.w	801a6f8 <_free_r+0x164>
 801a5a2:	f7fd f90f 	bl	80177c4 <__malloc_lock>
 801a5a6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 801a5aa:	4d54      	ldr	r5, [pc, #336]	; (801a6fc <_free_r+0x168>)
 801a5ac:	f022 0001 	bic.w	r0, r2, #1
 801a5b0:	f1a8 0308 	sub.w	r3, r8, #8
 801a5b4:	181f      	adds	r7, r3, r0
 801a5b6:	68a9      	ldr	r1, [r5, #8]
 801a5b8:	687e      	ldr	r6, [r7, #4]
 801a5ba:	428f      	cmp	r7, r1
 801a5bc:	f026 0603 	bic.w	r6, r6, #3
 801a5c0:	f002 0201 	and.w	r2, r2, #1
 801a5c4:	d11b      	bne.n	801a5fe <_free_r+0x6a>
 801a5c6:	4430      	add	r0, r6
 801a5c8:	b93a      	cbnz	r2, 801a5da <_free_r+0x46>
 801a5ca:	f858 2c08 	ldr.w	r2, [r8, #-8]
 801a5ce:	1a9b      	subs	r3, r3, r2
 801a5d0:	6899      	ldr	r1, [r3, #8]
 801a5d2:	4410      	add	r0, r2
 801a5d4:	68da      	ldr	r2, [r3, #12]
 801a5d6:	60ca      	str	r2, [r1, #12]
 801a5d8:	6091      	str	r1, [r2, #8]
 801a5da:	f040 0201 	orr.w	r2, r0, #1
 801a5de:	605a      	str	r2, [r3, #4]
 801a5e0:	60ab      	str	r3, [r5, #8]
 801a5e2:	4b47      	ldr	r3, [pc, #284]	; (801a700 <_free_r+0x16c>)
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	4298      	cmp	r0, r3
 801a5e8:	d304      	bcc.n	801a5f4 <_free_r+0x60>
 801a5ea:	4b46      	ldr	r3, [pc, #280]	; (801a704 <_free_r+0x170>)
 801a5ec:	4620      	mov	r0, r4
 801a5ee:	6819      	ldr	r1, [r3, #0]
 801a5f0:	f7ff ff7a 	bl	801a4e8 <_malloc_trim_r>
 801a5f4:	4620      	mov	r0, r4
 801a5f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a5fa:	f7fd b8e9 	b.w	80177d0 <__malloc_unlock>
 801a5fe:	607e      	str	r6, [r7, #4]
 801a600:	2a00      	cmp	r2, #0
 801a602:	d139      	bne.n	801a678 <_free_r+0xe4>
 801a604:	f858 1c08 	ldr.w	r1, [r8, #-8]
 801a608:	f105 0e08 	add.w	lr, r5, #8
 801a60c:	1a5b      	subs	r3, r3, r1
 801a60e:	4408      	add	r0, r1
 801a610:	6899      	ldr	r1, [r3, #8]
 801a612:	4571      	cmp	r1, lr
 801a614:	d032      	beq.n	801a67c <_free_r+0xe8>
 801a616:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801a61a:	f8c1 e00c 	str.w	lr, [r1, #12]
 801a61e:	f8ce 1008 	str.w	r1, [lr, #8]
 801a622:	19b9      	adds	r1, r7, r6
 801a624:	6849      	ldr	r1, [r1, #4]
 801a626:	07c9      	lsls	r1, r1, #31
 801a628:	d40a      	bmi.n	801a640 <_free_r+0xac>
 801a62a:	4430      	add	r0, r6
 801a62c:	68b9      	ldr	r1, [r7, #8]
 801a62e:	bb3a      	cbnz	r2, 801a680 <_free_r+0xec>
 801a630:	4e35      	ldr	r6, [pc, #212]	; (801a708 <_free_r+0x174>)
 801a632:	42b1      	cmp	r1, r6
 801a634:	d124      	bne.n	801a680 <_free_r+0xec>
 801a636:	2201      	movs	r2, #1
 801a638:	616b      	str	r3, [r5, #20]
 801a63a:	612b      	str	r3, [r5, #16]
 801a63c:	60d9      	str	r1, [r3, #12]
 801a63e:	6099      	str	r1, [r3, #8]
 801a640:	f040 0101 	orr.w	r1, r0, #1
 801a644:	6059      	str	r1, [r3, #4]
 801a646:	5018      	str	r0, [r3, r0]
 801a648:	2a00      	cmp	r2, #0
 801a64a:	d1d3      	bne.n	801a5f4 <_free_r+0x60>
 801a64c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 801a650:	d21a      	bcs.n	801a688 <_free_r+0xf4>
 801a652:	2201      	movs	r2, #1
 801a654:	08c0      	lsrs	r0, r0, #3
 801a656:	1081      	asrs	r1, r0, #2
 801a658:	408a      	lsls	r2, r1
 801a65a:	6869      	ldr	r1, [r5, #4]
 801a65c:	3001      	adds	r0, #1
 801a65e:	430a      	orrs	r2, r1
 801a660:	606a      	str	r2, [r5, #4]
 801a662:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 801a666:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 801a66a:	3a08      	subs	r2, #8
 801a66c:	60da      	str	r2, [r3, #12]
 801a66e:	6099      	str	r1, [r3, #8]
 801a670:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 801a674:	60cb      	str	r3, [r1, #12]
 801a676:	e7bd      	b.n	801a5f4 <_free_r+0x60>
 801a678:	2200      	movs	r2, #0
 801a67a:	e7d2      	b.n	801a622 <_free_r+0x8e>
 801a67c:	2201      	movs	r2, #1
 801a67e:	e7d0      	b.n	801a622 <_free_r+0x8e>
 801a680:	68fe      	ldr	r6, [r7, #12]
 801a682:	60ce      	str	r6, [r1, #12]
 801a684:	60b1      	str	r1, [r6, #8]
 801a686:	e7db      	b.n	801a640 <_free_r+0xac>
 801a688:	0a42      	lsrs	r2, r0, #9
 801a68a:	2a04      	cmp	r2, #4
 801a68c:	d813      	bhi.n	801a6b6 <_free_r+0x122>
 801a68e:	0982      	lsrs	r2, r0, #6
 801a690:	3238      	adds	r2, #56	; 0x38
 801a692:	1c51      	adds	r1, r2, #1
 801a694:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 801a698:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 801a69c:	428e      	cmp	r6, r1
 801a69e:	d124      	bne.n	801a6ea <_free_r+0x156>
 801a6a0:	2001      	movs	r0, #1
 801a6a2:	1092      	asrs	r2, r2, #2
 801a6a4:	fa00 f202 	lsl.w	r2, r0, r2
 801a6a8:	6868      	ldr	r0, [r5, #4]
 801a6aa:	4302      	orrs	r2, r0
 801a6ac:	606a      	str	r2, [r5, #4]
 801a6ae:	60de      	str	r6, [r3, #12]
 801a6b0:	6099      	str	r1, [r3, #8]
 801a6b2:	60b3      	str	r3, [r6, #8]
 801a6b4:	e7de      	b.n	801a674 <_free_r+0xe0>
 801a6b6:	2a14      	cmp	r2, #20
 801a6b8:	d801      	bhi.n	801a6be <_free_r+0x12a>
 801a6ba:	325b      	adds	r2, #91	; 0x5b
 801a6bc:	e7e9      	b.n	801a692 <_free_r+0xfe>
 801a6be:	2a54      	cmp	r2, #84	; 0x54
 801a6c0:	d802      	bhi.n	801a6c8 <_free_r+0x134>
 801a6c2:	0b02      	lsrs	r2, r0, #12
 801a6c4:	326e      	adds	r2, #110	; 0x6e
 801a6c6:	e7e4      	b.n	801a692 <_free_r+0xfe>
 801a6c8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801a6cc:	d802      	bhi.n	801a6d4 <_free_r+0x140>
 801a6ce:	0bc2      	lsrs	r2, r0, #15
 801a6d0:	3277      	adds	r2, #119	; 0x77
 801a6d2:	e7de      	b.n	801a692 <_free_r+0xfe>
 801a6d4:	f240 5154 	movw	r1, #1364	; 0x554
 801a6d8:	428a      	cmp	r2, r1
 801a6da:	bf9a      	itte	ls
 801a6dc:	0c82      	lsrls	r2, r0, #18
 801a6de:	327c      	addls	r2, #124	; 0x7c
 801a6e0:	227e      	movhi	r2, #126	; 0x7e
 801a6e2:	e7d6      	b.n	801a692 <_free_r+0xfe>
 801a6e4:	6889      	ldr	r1, [r1, #8]
 801a6e6:	428e      	cmp	r6, r1
 801a6e8:	d004      	beq.n	801a6f4 <_free_r+0x160>
 801a6ea:	684a      	ldr	r2, [r1, #4]
 801a6ec:	f022 0203 	bic.w	r2, r2, #3
 801a6f0:	4290      	cmp	r0, r2
 801a6f2:	d3f7      	bcc.n	801a6e4 <_free_r+0x150>
 801a6f4:	68ce      	ldr	r6, [r1, #12]
 801a6f6:	e7da      	b.n	801a6ae <_free_r+0x11a>
 801a6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6fc:	20000120 	.word	0x20000120
 801a700:	2000052c 	.word	0x2000052c
 801a704:	20001394 	.word	0x20001394
 801a708:	20000128 	.word	0x20000128

0801a70c <_fwalk_reent>:
 801a70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a710:	4680      	mov	r8, r0
 801a712:	4689      	mov	r9, r1
 801a714:	2600      	movs	r6, #0
 801a716:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 801a71a:	b914      	cbnz	r4, 801a722 <_fwalk_reent+0x16>
 801a71c:	4630      	mov	r0, r6
 801a71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a722:	68a5      	ldr	r5, [r4, #8]
 801a724:	6867      	ldr	r7, [r4, #4]
 801a726:	3f01      	subs	r7, #1
 801a728:	d501      	bpl.n	801a72e <_fwalk_reent+0x22>
 801a72a:	6824      	ldr	r4, [r4, #0]
 801a72c:	e7f5      	b.n	801a71a <_fwalk_reent+0xe>
 801a72e:	89ab      	ldrh	r3, [r5, #12]
 801a730:	2b01      	cmp	r3, #1
 801a732:	d907      	bls.n	801a744 <_fwalk_reent+0x38>
 801a734:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a738:	3301      	adds	r3, #1
 801a73a:	d003      	beq.n	801a744 <_fwalk_reent+0x38>
 801a73c:	4629      	mov	r1, r5
 801a73e:	4640      	mov	r0, r8
 801a740:	47c8      	blx	r9
 801a742:	4306      	orrs	r6, r0
 801a744:	3568      	adds	r5, #104	; 0x68
 801a746:	e7ee      	b.n	801a726 <_fwalk_reent+0x1a>

0801a748 <_findenv_r>:
 801a748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a74c:	4606      	mov	r6, r0
 801a74e:	468a      	mov	sl, r1
 801a750:	4617      	mov	r7, r2
 801a752:	f001 fcc9 	bl	801c0e8 <__env_lock>
 801a756:	4b1b      	ldr	r3, [pc, #108]	; (801a7c4 <_findenv_r+0x7c>)
 801a758:	f8d3 8000 	ldr.w	r8, [r3]
 801a75c:	4699      	mov	r9, r3
 801a75e:	f1b8 0f00 	cmp.w	r8, #0
 801a762:	d007      	beq.n	801a774 <_findenv_r+0x2c>
 801a764:	4654      	mov	r4, sl
 801a766:	4623      	mov	r3, r4
 801a768:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a76c:	b332      	cbz	r2, 801a7bc <_findenv_r+0x74>
 801a76e:	2a3d      	cmp	r2, #61	; 0x3d
 801a770:	461c      	mov	r4, r3
 801a772:	d1f8      	bne.n	801a766 <_findenv_r+0x1e>
 801a774:	4630      	mov	r0, r6
 801a776:	f001 fcbd 	bl	801c0f4 <__env_unlock>
 801a77a:	2000      	movs	r0, #0
 801a77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a780:	f108 0804 	add.w	r8, r8, #4
 801a784:	f8d8 0000 	ldr.w	r0, [r8]
 801a788:	2800      	cmp	r0, #0
 801a78a:	d0f3      	beq.n	801a774 <_findenv_r+0x2c>
 801a78c:	4622      	mov	r2, r4
 801a78e:	4651      	mov	r1, sl
 801a790:	f7fd fae7 	bl	8017d62 <strncmp>
 801a794:	2800      	cmp	r0, #0
 801a796:	d1f3      	bne.n	801a780 <_findenv_r+0x38>
 801a798:	f8d8 3000 	ldr.w	r3, [r8]
 801a79c:	191d      	adds	r5, r3, r4
 801a79e:	5d1b      	ldrb	r3, [r3, r4]
 801a7a0:	2b3d      	cmp	r3, #61	; 0x3d
 801a7a2:	d1ed      	bne.n	801a780 <_findenv_r+0x38>
 801a7a4:	f8d9 3000 	ldr.w	r3, [r9]
 801a7a8:	4630      	mov	r0, r6
 801a7aa:	eba8 0303 	sub.w	r3, r8, r3
 801a7ae:	109b      	asrs	r3, r3, #2
 801a7b0:	603b      	str	r3, [r7, #0]
 801a7b2:	f001 fc9f 	bl	801c0f4 <__env_unlock>
 801a7b6:	1c68      	adds	r0, r5, #1
 801a7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7bc:	eba4 040a 	sub.w	r4, r4, sl
 801a7c0:	e7e0      	b.n	801a784 <_findenv_r+0x3c>
 801a7c2:	bf00      	nop
 801a7c4:	2000001c 	.word	0x2000001c

0801a7c8 <_getenv_r>:
 801a7c8:	b507      	push	{r0, r1, r2, lr}
 801a7ca:	aa01      	add	r2, sp, #4
 801a7cc:	f7ff ffbc 	bl	801a748 <_findenv_r>
 801a7d0:	b003      	add	sp, #12
 801a7d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801a7d8 <__gettzinfo>:
 801a7d8:	4800      	ldr	r0, [pc, #0]	; (801a7dc <__gettzinfo+0x4>)
 801a7da:	4770      	bx	lr
 801a7dc:	2000053c 	.word	0x2000053c

0801a7e0 <gmtime_r>:
 801a7e0:	6802      	ldr	r2, [r0, #0]
 801a7e2:	4847      	ldr	r0, [pc, #284]	; (801a900 <gmtime_r+0x120>)
 801a7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a7e6:	fb92 f3f0 	sdiv	r3, r2, r0
 801a7ea:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 801a7ee:	fb00 2013 	mls	r0, r0, r3, r2
 801a7f2:	2800      	cmp	r0, #0
 801a7f4:	bfbc      	itt	lt
 801a7f6:	f500 30a8 	addlt.w	r0, r0, #86016	; 0x15000
 801a7fa:	f500 70c0 	addlt.w	r0, r0, #384	; 0x180
 801a7fe:	fb90 f2f4 	sdiv	r2, r0, r4
 801a802:	fb04 0012 	mls	r0, r4, r2, r0
 801a806:	f04f 043c 	mov.w	r4, #60	; 0x3c
 801a80a:	608a      	str	r2, [r1, #8]
 801a80c:	fb90 f2f4 	sdiv	r2, r0, r4
 801a810:	fb04 0012 	mls	r0, r4, r2, r0
 801a814:	604a      	str	r2, [r1, #4]
 801a816:	f04f 0207 	mov.w	r2, #7
 801a81a:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 801a81e:	bfac      	ite	ge
 801a820:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 801a824:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 801a828:	6008      	str	r0, [r1, #0]
 801a82a:	1cd8      	adds	r0, r3, #3
 801a82c:	fb90 f2f2 	sdiv	r2, r0, r2
 801a830:	4c34      	ldr	r4, [pc, #208]	; (801a904 <gmtime_r+0x124>)
 801a832:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801a836:	fb93 f4f4 	sdiv	r4, r3, r4
 801a83a:	1a82      	subs	r2, r0, r2
 801a83c:	f648 60ac 	movw	r0, #36524	; 0x8eac
 801a840:	f240 57b4 	movw	r7, #1460	; 0x5b4
 801a844:	618a      	str	r2, [r1, #24]
 801a846:	4a30      	ldr	r2, [pc, #192]	; (801a908 <gmtime_r+0x128>)
 801a848:	f240 166d 	movw	r6, #365	; 0x16d
 801a84c:	fb02 3304 	mla	r3, r2, r4, r3
 801a850:	fbb3 f0f0 	udiv	r0, r3, r0
 801a854:	fbb3 f2f7 	udiv	r2, r3, r7
 801a858:	4418      	add	r0, r3
 801a85a:	1a80      	subs	r0, r0, r2
 801a85c:	4a2b      	ldr	r2, [pc, #172]	; (801a90c <gmtime_r+0x12c>)
 801a85e:	fbb3 f2f2 	udiv	r2, r3, r2
 801a862:	1a82      	subs	r2, r0, r2
 801a864:	f648 6094 	movw	r0, #36500	; 0x8e94
 801a868:	fbb2 f0f0 	udiv	r0, r2, r0
 801a86c:	fbb2 f5f6 	udiv	r5, r2, r6
 801a870:	fbb2 f2f7 	udiv	r2, r2, r7
 801a874:	4403      	add	r3, r0
 801a876:	2099      	movs	r0, #153	; 0x99
 801a878:	1a9a      	subs	r2, r3, r2
 801a87a:	fb06 2315 	mls	r3, r6, r5, r2
 801a87e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801a882:	3202      	adds	r2, #2
 801a884:	fbb2 f2f0 	udiv	r2, r2, r0
 801a888:	2705      	movs	r7, #5
 801a88a:	4350      	muls	r0, r2
 801a88c:	3002      	adds	r0, #2
 801a88e:	fbb0 f0f7 	udiv	r0, r0, r7
 801a892:	2a0a      	cmp	r2, #10
 801a894:	f103 0601 	add.w	r6, r3, #1
 801a898:	eba6 0000 	sub.w	r0, r6, r0
 801a89c:	bf34      	ite	cc
 801a89e:	2602      	movcc	r6, #2
 801a8a0:	f06f 0609 	mvncs.w	r6, #9
 801a8a4:	4416      	add	r6, r2
 801a8a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801a8aa:	fb02 5404 	mla	r4, r2, r4, r5
 801a8ae:	2e01      	cmp	r6, #1
 801a8b0:	bf98      	it	ls
 801a8b2:	3401      	addls	r4, #1
 801a8b4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801a8b8:	d30b      	bcc.n	801a8d2 <gmtime_r+0xf2>
 801a8ba:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801a8be:	61cb      	str	r3, [r1, #28]
 801a8c0:	2300      	movs	r3, #0
 801a8c2:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
 801a8c6:	60c8      	str	r0, [r1, #12]
 801a8c8:	614c      	str	r4, [r1, #20]
 801a8ca:	610e      	str	r6, [r1, #16]
 801a8cc:	620b      	str	r3, [r1, #32]
 801a8ce:	4608      	mov	r0, r1
 801a8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8d2:	07aa      	lsls	r2, r5, #30
 801a8d4:	d105      	bne.n	801a8e2 <gmtime_r+0x102>
 801a8d6:	2764      	movs	r7, #100	; 0x64
 801a8d8:	fbb5 f2f7 	udiv	r2, r5, r7
 801a8dc:	fb07 5212 	mls	r2, r7, r2, r5
 801a8e0:	b95a      	cbnz	r2, 801a8fa <gmtime_r+0x11a>
 801a8e2:	f44f 77c8 	mov.w	r7, #400	; 0x190
 801a8e6:	fbb5 f2f7 	udiv	r2, r5, r7
 801a8ea:	fb07 5212 	mls	r2, r7, r2, r5
 801a8ee:	fab2 f282 	clz	r2, r2
 801a8f2:	0952      	lsrs	r2, r2, #5
 801a8f4:	333b      	adds	r3, #59	; 0x3b
 801a8f6:	4413      	add	r3, r2
 801a8f8:	e7e1      	b.n	801a8be <gmtime_r+0xde>
 801a8fa:	2201      	movs	r2, #1
 801a8fc:	e7fa      	b.n	801a8f4 <gmtime_r+0x114>
 801a8fe:	bf00      	nop
 801a900:	00015180 	.word	0x00015180
 801a904:	00023ab1 	.word	0x00023ab1
 801a908:	fffdc54f 	.word	0xfffdc54f
 801a90c:	00023ab0 	.word	0x00023ab0

0801a910 <iswspace>:
 801a910:	28ff      	cmp	r0, #255	; 0xff
 801a912:	b510      	push	{r4, lr}
 801a914:	4604      	mov	r4, r0
 801a916:	d806      	bhi.n	801a926 <iswspace+0x16>
 801a918:	f000 f81a 	bl	801a950 <__locale_ctype_ptr>
 801a91c:	4420      	add	r0, r4
 801a91e:	7840      	ldrb	r0, [r0, #1]
 801a920:	f000 0008 	and.w	r0, r0, #8
 801a924:	bd10      	pop	{r4, pc}
 801a926:	2000      	movs	r0, #0
 801a928:	bd10      	pop	{r4, pc}
	...

0801a92c <__locale_mb_cur_max>:
 801a92c:	4b04      	ldr	r3, [pc, #16]	; (801a940 <__locale_mb_cur_max+0x14>)
 801a92e:	4a05      	ldr	r2, [pc, #20]	; (801a944 <__locale_mb_cur_max+0x18>)
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	6a1b      	ldr	r3, [r3, #32]
 801a934:	2b00      	cmp	r3, #0
 801a936:	bf08      	it	eq
 801a938:	4613      	moveq	r3, r2
 801a93a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 801a93e:	4770      	bx	lr
 801a940:	2000002c 	.word	0x2000002c
 801a944:	2000057c 	.word	0x2000057c

0801a948 <__locale_ctype_ptr_l>:
 801a948:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801a94c:	4770      	bx	lr
	...

0801a950 <__locale_ctype_ptr>:
 801a950:	4b04      	ldr	r3, [pc, #16]	; (801a964 <__locale_ctype_ptr+0x14>)
 801a952:	4a05      	ldr	r2, [pc, #20]	; (801a968 <__locale_ctype_ptr+0x18>)
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	6a1b      	ldr	r3, [r3, #32]
 801a958:	2b00      	cmp	r3, #0
 801a95a:	bf08      	it	eq
 801a95c:	4613      	moveq	r3, r2
 801a95e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801a962:	4770      	bx	lr
 801a964:	2000002c 	.word	0x2000002c
 801a968:	2000057c 	.word	0x2000057c

0801a96c <_localeconv_r>:
 801a96c:	4b04      	ldr	r3, [pc, #16]	; (801a980 <_localeconv_r+0x14>)
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	6a18      	ldr	r0, [r3, #32]
 801a972:	4b04      	ldr	r3, [pc, #16]	; (801a984 <_localeconv_r+0x18>)
 801a974:	2800      	cmp	r0, #0
 801a976:	bf08      	it	eq
 801a978:	4618      	moveq	r0, r3
 801a97a:	30f0      	adds	r0, #240	; 0xf0
 801a97c:	4770      	bx	lr
 801a97e:	bf00      	nop
 801a980:	2000002c 	.word	0x2000002c
 801a984:	2000057c 	.word	0x2000057c

0801a988 <_lseek_r>:
 801a988:	b538      	push	{r3, r4, r5, lr}
 801a98a:	4605      	mov	r5, r0
 801a98c:	4608      	mov	r0, r1
 801a98e:	4611      	mov	r1, r2
 801a990:	2200      	movs	r2, #0
 801a992:	4c05      	ldr	r4, [pc, #20]	; (801a9a8 <_lseek_r+0x20>)
 801a994:	6022      	str	r2, [r4, #0]
 801a996:	461a      	mov	r2, r3
 801a998:	f7fa fc02 	bl	80151a0 <_lseek>
 801a99c:	1c43      	adds	r3, r0, #1
 801a99e:	d102      	bne.n	801a9a6 <_lseek_r+0x1e>
 801a9a0:	6823      	ldr	r3, [r4, #0]
 801a9a2:	b103      	cbz	r3, 801a9a6 <_lseek_r+0x1e>
 801a9a4:	602b      	str	r3, [r5, #0]
 801a9a6:	bd38      	pop	{r3, r4, r5, pc}
 801a9a8:	200014e8 	.word	0x200014e8

0801a9ac <__swhatbuf_r>:
 801a9ac:	b570      	push	{r4, r5, r6, lr}
 801a9ae:	460e      	mov	r6, r1
 801a9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a9b4:	b090      	sub	sp, #64	; 0x40
 801a9b6:	2900      	cmp	r1, #0
 801a9b8:	4614      	mov	r4, r2
 801a9ba:	461d      	mov	r5, r3
 801a9bc:	da09      	bge.n	801a9d2 <__swhatbuf_r+0x26>
 801a9be:	2200      	movs	r2, #0
 801a9c0:	89b3      	ldrh	r3, [r6, #12]
 801a9c2:	602a      	str	r2, [r5, #0]
 801a9c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801a9c8:	d116      	bne.n	801a9f8 <__swhatbuf_r+0x4c>
 801a9ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a9ce:	6023      	str	r3, [r4, #0]
 801a9d0:	e015      	b.n	801a9fe <__swhatbuf_r+0x52>
 801a9d2:	aa01      	add	r2, sp, #4
 801a9d4:	f001 fc00 	bl	801c1d8 <_fstat_r>
 801a9d8:	2800      	cmp	r0, #0
 801a9da:	dbf0      	blt.n	801a9be <__swhatbuf_r+0x12>
 801a9dc:	9a02      	ldr	r2, [sp, #8]
 801a9de:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801a9e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a9e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a9ea:	425a      	negs	r2, r3
 801a9ec:	415a      	adcs	r2, r3
 801a9ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a9f2:	602a      	str	r2, [r5, #0]
 801a9f4:	6023      	str	r3, [r4, #0]
 801a9f6:	e002      	b.n	801a9fe <__swhatbuf_r+0x52>
 801a9f8:	2340      	movs	r3, #64	; 0x40
 801a9fa:	4610      	mov	r0, r2
 801a9fc:	6023      	str	r3, [r4, #0]
 801a9fe:	b010      	add	sp, #64	; 0x40
 801aa00:	bd70      	pop	{r4, r5, r6, pc}
	...

0801aa04 <__smakebuf_r>:
 801aa04:	898b      	ldrh	r3, [r1, #12]
 801aa06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801aa08:	079d      	lsls	r5, r3, #30
 801aa0a:	4606      	mov	r6, r0
 801aa0c:	460c      	mov	r4, r1
 801aa0e:	d507      	bpl.n	801aa20 <__smakebuf_r+0x1c>
 801aa10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801aa14:	6023      	str	r3, [r4, #0]
 801aa16:	6123      	str	r3, [r4, #16]
 801aa18:	2301      	movs	r3, #1
 801aa1a:	6163      	str	r3, [r4, #20]
 801aa1c:	b002      	add	sp, #8
 801aa1e:	bd70      	pop	{r4, r5, r6, pc}
 801aa20:	ab01      	add	r3, sp, #4
 801aa22:	466a      	mov	r2, sp
 801aa24:	f7ff ffc2 	bl	801a9ac <__swhatbuf_r>
 801aa28:	9900      	ldr	r1, [sp, #0]
 801aa2a:	4605      	mov	r5, r0
 801aa2c:	4630      	mov	r0, r6
 801aa2e:	f7fc fa17 	bl	8016e60 <_malloc_r>
 801aa32:	b948      	cbnz	r0, 801aa48 <__smakebuf_r+0x44>
 801aa34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aa38:	059a      	lsls	r2, r3, #22
 801aa3a:	d4ef      	bmi.n	801aa1c <__smakebuf_r+0x18>
 801aa3c:	f023 0303 	bic.w	r3, r3, #3
 801aa40:	f043 0302 	orr.w	r3, r3, #2
 801aa44:	81a3      	strh	r3, [r4, #12]
 801aa46:	e7e3      	b.n	801aa10 <__smakebuf_r+0xc>
 801aa48:	4b0d      	ldr	r3, [pc, #52]	; (801aa80 <__smakebuf_r+0x7c>)
 801aa4a:	62b3      	str	r3, [r6, #40]	; 0x28
 801aa4c:	89a3      	ldrh	r3, [r4, #12]
 801aa4e:	6020      	str	r0, [r4, #0]
 801aa50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aa54:	81a3      	strh	r3, [r4, #12]
 801aa56:	9b00      	ldr	r3, [sp, #0]
 801aa58:	6120      	str	r0, [r4, #16]
 801aa5a:	6163      	str	r3, [r4, #20]
 801aa5c:	9b01      	ldr	r3, [sp, #4]
 801aa5e:	b15b      	cbz	r3, 801aa78 <__smakebuf_r+0x74>
 801aa60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aa64:	4630      	mov	r0, r6
 801aa66:	f001 fbc9 	bl	801c1fc <_isatty_r>
 801aa6a:	b128      	cbz	r0, 801aa78 <__smakebuf_r+0x74>
 801aa6c:	89a3      	ldrh	r3, [r4, #12]
 801aa6e:	f023 0303 	bic.w	r3, r3, #3
 801aa72:	f043 0301 	orr.w	r3, r3, #1
 801aa76:	81a3      	strh	r3, [r4, #12]
 801aa78:	89a3      	ldrh	r3, [r4, #12]
 801aa7a:	431d      	orrs	r5, r3
 801aa7c:	81a5      	strh	r5, [r4, #12]
 801aa7e:	e7cd      	b.n	801aa1c <__smakebuf_r+0x18>
 801aa80:	0801a335 	.word	0x0801a335

0801aa84 <_mbrtowc_r>:
 801aa84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aa86:	9d08      	ldr	r5, [sp, #32]
 801aa88:	4606      	mov	r6, r0
 801aa8a:	4617      	mov	r7, r2
 801aa8c:	4c10      	ldr	r4, [pc, #64]	; (801aad0 <_mbrtowc_r+0x4c>)
 801aa8e:	b9a2      	cbnz	r2, 801aaba <_mbrtowc_r+0x36>
 801aa90:	6823      	ldr	r3, [r4, #0]
 801aa92:	4a10      	ldr	r2, [pc, #64]	; (801aad4 <_mbrtowc_r+0x50>)
 801aa94:	6a1b      	ldr	r3, [r3, #32]
 801aa96:	9500      	str	r5, [sp, #0]
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	bf08      	it	eq
 801aa9c:	4613      	moveq	r3, r2
 801aa9e:	4639      	mov	r1, r7
 801aaa0:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 801aaa4:	2301      	movs	r3, #1
 801aaa6:	4a0c      	ldr	r2, [pc, #48]	; (801aad8 <_mbrtowc_r+0x54>)
 801aaa8:	47a0      	blx	r4
 801aaaa:	1c43      	adds	r3, r0, #1
 801aaac:	bf01      	itttt	eq
 801aaae:	2300      	moveq	r3, #0
 801aab0:	602b      	streq	r3, [r5, #0]
 801aab2:	238a      	moveq	r3, #138	; 0x8a
 801aab4:	6033      	streq	r3, [r6, #0]
 801aab6:	b003      	add	sp, #12
 801aab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aaba:	6824      	ldr	r4, [r4, #0]
 801aabc:	4f05      	ldr	r7, [pc, #20]	; (801aad4 <_mbrtowc_r+0x50>)
 801aabe:	6a24      	ldr	r4, [r4, #32]
 801aac0:	9500      	str	r5, [sp, #0]
 801aac2:	2c00      	cmp	r4, #0
 801aac4:	bf08      	it	eq
 801aac6:	463c      	moveq	r4, r7
 801aac8:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 801aacc:	e7ec      	b.n	801aaa8 <_mbrtowc_r+0x24>
 801aace:	bf00      	nop
 801aad0:	2000002c 	.word	0x2000002c
 801aad4:	2000057c 	.word	0x2000057c
 801aad8:	0802342d 	.word	0x0802342d

0801aadc <__ascii_mbtowc>:
 801aadc:	b082      	sub	sp, #8
 801aade:	b901      	cbnz	r1, 801aae2 <__ascii_mbtowc+0x6>
 801aae0:	a901      	add	r1, sp, #4
 801aae2:	b142      	cbz	r2, 801aaf6 <__ascii_mbtowc+0x1a>
 801aae4:	b14b      	cbz	r3, 801aafa <__ascii_mbtowc+0x1e>
 801aae6:	7813      	ldrb	r3, [r2, #0]
 801aae8:	600b      	str	r3, [r1, #0]
 801aaea:	7812      	ldrb	r2, [r2, #0]
 801aaec:	1c10      	adds	r0, r2, #0
 801aaee:	bf18      	it	ne
 801aaf0:	2001      	movne	r0, #1
 801aaf2:	b002      	add	sp, #8
 801aaf4:	4770      	bx	lr
 801aaf6:	4610      	mov	r0, r2
 801aaf8:	e7fb      	b.n	801aaf2 <__ascii_mbtowc+0x16>
 801aafa:	f06f 0001 	mvn.w	r0, #1
 801aafe:	e7f8      	b.n	801aaf2 <__ascii_mbtowc+0x16>

0801ab00 <_Balloc>:
 801ab00:	b570      	push	{r4, r5, r6, lr}
 801ab02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ab04:	4604      	mov	r4, r0
 801ab06:	460e      	mov	r6, r1
 801ab08:	b93d      	cbnz	r5, 801ab1a <_Balloc+0x1a>
 801ab0a:	2010      	movs	r0, #16
 801ab0c:	f7fc f998 	bl	8016e40 <malloc>
 801ab10:	6260      	str	r0, [r4, #36]	; 0x24
 801ab12:	6045      	str	r5, [r0, #4]
 801ab14:	6085      	str	r5, [r0, #8]
 801ab16:	6005      	str	r5, [r0, #0]
 801ab18:	60c5      	str	r5, [r0, #12]
 801ab1a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801ab1c:	68eb      	ldr	r3, [r5, #12]
 801ab1e:	b183      	cbz	r3, 801ab42 <_Balloc+0x42>
 801ab20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ab22:	68db      	ldr	r3, [r3, #12]
 801ab24:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801ab28:	b9b8      	cbnz	r0, 801ab5a <_Balloc+0x5a>
 801ab2a:	2101      	movs	r1, #1
 801ab2c:	fa01 f506 	lsl.w	r5, r1, r6
 801ab30:	1d6a      	adds	r2, r5, #5
 801ab32:	0092      	lsls	r2, r2, #2
 801ab34:	4620      	mov	r0, r4
 801ab36:	f001 faa9 	bl	801c08c <_calloc_r>
 801ab3a:	b160      	cbz	r0, 801ab56 <_Balloc+0x56>
 801ab3c:	6046      	str	r6, [r0, #4]
 801ab3e:	6085      	str	r5, [r0, #8]
 801ab40:	e00e      	b.n	801ab60 <_Balloc+0x60>
 801ab42:	2221      	movs	r2, #33	; 0x21
 801ab44:	2104      	movs	r1, #4
 801ab46:	4620      	mov	r0, r4
 801ab48:	f001 faa0 	bl	801c08c <_calloc_r>
 801ab4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ab4e:	60e8      	str	r0, [r5, #12]
 801ab50:	68db      	ldr	r3, [r3, #12]
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d1e4      	bne.n	801ab20 <_Balloc+0x20>
 801ab56:	2000      	movs	r0, #0
 801ab58:	bd70      	pop	{r4, r5, r6, pc}
 801ab5a:	6802      	ldr	r2, [r0, #0]
 801ab5c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801ab60:	2300      	movs	r3, #0
 801ab62:	6103      	str	r3, [r0, #16]
 801ab64:	60c3      	str	r3, [r0, #12]
 801ab66:	bd70      	pop	{r4, r5, r6, pc}

0801ab68 <_Bfree>:
 801ab68:	b570      	push	{r4, r5, r6, lr}
 801ab6a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801ab6c:	4606      	mov	r6, r0
 801ab6e:	460d      	mov	r5, r1
 801ab70:	b93c      	cbnz	r4, 801ab82 <_Bfree+0x1a>
 801ab72:	2010      	movs	r0, #16
 801ab74:	f7fc f964 	bl	8016e40 <malloc>
 801ab78:	6270      	str	r0, [r6, #36]	; 0x24
 801ab7a:	6044      	str	r4, [r0, #4]
 801ab7c:	6084      	str	r4, [r0, #8]
 801ab7e:	6004      	str	r4, [r0, #0]
 801ab80:	60c4      	str	r4, [r0, #12]
 801ab82:	b13d      	cbz	r5, 801ab94 <_Bfree+0x2c>
 801ab84:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801ab86:	686a      	ldr	r2, [r5, #4]
 801ab88:	68db      	ldr	r3, [r3, #12]
 801ab8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ab8e:	6029      	str	r1, [r5, #0]
 801ab90:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801ab94:	bd70      	pop	{r4, r5, r6, pc}

0801ab96 <__multadd>:
 801ab96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab9a:	461f      	mov	r7, r3
 801ab9c:	4606      	mov	r6, r0
 801ab9e:	460c      	mov	r4, r1
 801aba0:	2300      	movs	r3, #0
 801aba2:	690d      	ldr	r5, [r1, #16]
 801aba4:	f101 0e14 	add.w	lr, r1, #20
 801aba8:	f8de 0000 	ldr.w	r0, [lr]
 801abac:	3301      	adds	r3, #1
 801abae:	b281      	uxth	r1, r0
 801abb0:	fb02 7101 	mla	r1, r2, r1, r7
 801abb4:	0c00      	lsrs	r0, r0, #16
 801abb6:	0c0f      	lsrs	r7, r1, #16
 801abb8:	fb02 7000 	mla	r0, r2, r0, r7
 801abbc:	b289      	uxth	r1, r1
 801abbe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801abc2:	429d      	cmp	r5, r3
 801abc4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801abc8:	f84e 1b04 	str.w	r1, [lr], #4
 801abcc:	dcec      	bgt.n	801aba8 <__multadd+0x12>
 801abce:	b1d7      	cbz	r7, 801ac06 <__multadd+0x70>
 801abd0:	68a3      	ldr	r3, [r4, #8]
 801abd2:	429d      	cmp	r5, r3
 801abd4:	db12      	blt.n	801abfc <__multadd+0x66>
 801abd6:	6861      	ldr	r1, [r4, #4]
 801abd8:	4630      	mov	r0, r6
 801abda:	3101      	adds	r1, #1
 801abdc:	f7ff ff90 	bl	801ab00 <_Balloc>
 801abe0:	4680      	mov	r8, r0
 801abe2:	6922      	ldr	r2, [r4, #16]
 801abe4:	f104 010c 	add.w	r1, r4, #12
 801abe8:	3202      	adds	r2, #2
 801abea:	0092      	lsls	r2, r2, #2
 801abec:	300c      	adds	r0, #12
 801abee:	f7fc fb60 	bl	80172b2 <memcpy>
 801abf2:	4621      	mov	r1, r4
 801abf4:	4630      	mov	r0, r6
 801abf6:	f7ff ffb7 	bl	801ab68 <_Bfree>
 801abfa:	4644      	mov	r4, r8
 801abfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ac00:	3501      	adds	r5, #1
 801ac02:	615f      	str	r7, [r3, #20]
 801ac04:	6125      	str	r5, [r4, #16]
 801ac06:	4620      	mov	r0, r4
 801ac08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ac0c <__hi0bits>:
 801ac0c:	0c02      	lsrs	r2, r0, #16
 801ac0e:	0412      	lsls	r2, r2, #16
 801ac10:	4603      	mov	r3, r0
 801ac12:	b9b2      	cbnz	r2, 801ac42 <__hi0bits+0x36>
 801ac14:	0403      	lsls	r3, r0, #16
 801ac16:	2010      	movs	r0, #16
 801ac18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801ac1c:	bf04      	itt	eq
 801ac1e:	021b      	lsleq	r3, r3, #8
 801ac20:	3008      	addeq	r0, #8
 801ac22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801ac26:	bf04      	itt	eq
 801ac28:	011b      	lsleq	r3, r3, #4
 801ac2a:	3004      	addeq	r0, #4
 801ac2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801ac30:	bf04      	itt	eq
 801ac32:	009b      	lsleq	r3, r3, #2
 801ac34:	3002      	addeq	r0, #2
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	db06      	blt.n	801ac48 <__hi0bits+0x3c>
 801ac3a:	005b      	lsls	r3, r3, #1
 801ac3c:	d503      	bpl.n	801ac46 <__hi0bits+0x3a>
 801ac3e:	3001      	adds	r0, #1
 801ac40:	4770      	bx	lr
 801ac42:	2000      	movs	r0, #0
 801ac44:	e7e8      	b.n	801ac18 <__hi0bits+0xc>
 801ac46:	2020      	movs	r0, #32
 801ac48:	4770      	bx	lr

0801ac4a <__lo0bits>:
 801ac4a:	6803      	ldr	r3, [r0, #0]
 801ac4c:	4601      	mov	r1, r0
 801ac4e:	f013 0207 	ands.w	r2, r3, #7
 801ac52:	d00b      	beq.n	801ac6c <__lo0bits+0x22>
 801ac54:	07da      	lsls	r2, r3, #31
 801ac56:	d423      	bmi.n	801aca0 <__lo0bits+0x56>
 801ac58:	0798      	lsls	r0, r3, #30
 801ac5a:	bf49      	itett	mi
 801ac5c:	085b      	lsrmi	r3, r3, #1
 801ac5e:	089b      	lsrpl	r3, r3, #2
 801ac60:	2001      	movmi	r0, #1
 801ac62:	600b      	strmi	r3, [r1, #0]
 801ac64:	bf5c      	itt	pl
 801ac66:	600b      	strpl	r3, [r1, #0]
 801ac68:	2002      	movpl	r0, #2
 801ac6a:	4770      	bx	lr
 801ac6c:	b298      	uxth	r0, r3
 801ac6e:	b9a8      	cbnz	r0, 801ac9c <__lo0bits+0x52>
 801ac70:	2010      	movs	r0, #16
 801ac72:	0c1b      	lsrs	r3, r3, #16
 801ac74:	f013 0fff 	tst.w	r3, #255	; 0xff
 801ac78:	bf04      	itt	eq
 801ac7a:	0a1b      	lsreq	r3, r3, #8
 801ac7c:	3008      	addeq	r0, #8
 801ac7e:	071a      	lsls	r2, r3, #28
 801ac80:	bf04      	itt	eq
 801ac82:	091b      	lsreq	r3, r3, #4
 801ac84:	3004      	addeq	r0, #4
 801ac86:	079a      	lsls	r2, r3, #30
 801ac88:	bf04      	itt	eq
 801ac8a:	089b      	lsreq	r3, r3, #2
 801ac8c:	3002      	addeq	r0, #2
 801ac8e:	07da      	lsls	r2, r3, #31
 801ac90:	d402      	bmi.n	801ac98 <__lo0bits+0x4e>
 801ac92:	085b      	lsrs	r3, r3, #1
 801ac94:	d006      	beq.n	801aca4 <__lo0bits+0x5a>
 801ac96:	3001      	adds	r0, #1
 801ac98:	600b      	str	r3, [r1, #0]
 801ac9a:	4770      	bx	lr
 801ac9c:	4610      	mov	r0, r2
 801ac9e:	e7e9      	b.n	801ac74 <__lo0bits+0x2a>
 801aca0:	2000      	movs	r0, #0
 801aca2:	4770      	bx	lr
 801aca4:	2020      	movs	r0, #32
 801aca6:	4770      	bx	lr

0801aca8 <__i2b>:
 801aca8:	b510      	push	{r4, lr}
 801acaa:	460c      	mov	r4, r1
 801acac:	2101      	movs	r1, #1
 801acae:	f7ff ff27 	bl	801ab00 <_Balloc>
 801acb2:	2201      	movs	r2, #1
 801acb4:	6144      	str	r4, [r0, #20]
 801acb6:	6102      	str	r2, [r0, #16]
 801acb8:	bd10      	pop	{r4, pc}

0801acba <__multiply>:
 801acba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acbe:	4614      	mov	r4, r2
 801acc0:	690a      	ldr	r2, [r1, #16]
 801acc2:	6923      	ldr	r3, [r4, #16]
 801acc4:	4689      	mov	r9, r1
 801acc6:	429a      	cmp	r2, r3
 801acc8:	bfbe      	ittt	lt
 801acca:	460b      	movlt	r3, r1
 801accc:	46a1      	movlt	r9, r4
 801acce:	461c      	movlt	r4, r3
 801acd0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801acd4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801acd8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801acdc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801ace0:	eb07 060a 	add.w	r6, r7, sl
 801ace4:	429e      	cmp	r6, r3
 801ace6:	bfc8      	it	gt
 801ace8:	3101      	addgt	r1, #1
 801acea:	f7ff ff09 	bl	801ab00 <_Balloc>
 801acee:	f100 0514 	add.w	r5, r0, #20
 801acf2:	462b      	mov	r3, r5
 801acf4:	2200      	movs	r2, #0
 801acf6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801acfa:	4543      	cmp	r3, r8
 801acfc:	d316      	bcc.n	801ad2c <__multiply+0x72>
 801acfe:	f104 0214 	add.w	r2, r4, #20
 801ad02:	f109 0114 	add.w	r1, r9, #20
 801ad06:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 801ad0a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801ad0e:	9301      	str	r3, [sp, #4]
 801ad10:	9c01      	ldr	r4, [sp, #4]
 801ad12:	4613      	mov	r3, r2
 801ad14:	4294      	cmp	r4, r2
 801ad16:	d80c      	bhi.n	801ad32 <__multiply+0x78>
 801ad18:	2e00      	cmp	r6, #0
 801ad1a:	dd03      	ble.n	801ad24 <__multiply+0x6a>
 801ad1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d054      	beq.n	801adce <__multiply+0x114>
 801ad24:	6106      	str	r6, [r0, #16]
 801ad26:	b003      	add	sp, #12
 801ad28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad2c:	f843 2b04 	str.w	r2, [r3], #4
 801ad30:	e7e3      	b.n	801acfa <__multiply+0x40>
 801ad32:	f8b3 a000 	ldrh.w	sl, [r3]
 801ad36:	3204      	adds	r2, #4
 801ad38:	f1ba 0f00 	cmp.w	sl, #0
 801ad3c:	d020      	beq.n	801ad80 <__multiply+0xc6>
 801ad3e:	46ae      	mov	lr, r5
 801ad40:	4689      	mov	r9, r1
 801ad42:	f04f 0c00 	mov.w	ip, #0
 801ad46:	f859 4b04 	ldr.w	r4, [r9], #4
 801ad4a:	f8be b000 	ldrh.w	fp, [lr]
 801ad4e:	b2a3      	uxth	r3, r4
 801ad50:	fb0a b303 	mla	r3, sl, r3, fp
 801ad54:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801ad58:	f8de 4000 	ldr.w	r4, [lr]
 801ad5c:	4463      	add	r3, ip
 801ad5e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801ad62:	fb0a c40b 	mla	r4, sl, fp, ip
 801ad66:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801ad6a:	b29b      	uxth	r3, r3
 801ad6c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801ad70:	454f      	cmp	r7, r9
 801ad72:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801ad76:	f84e 3b04 	str.w	r3, [lr], #4
 801ad7a:	d8e4      	bhi.n	801ad46 <__multiply+0x8c>
 801ad7c:	f8ce c000 	str.w	ip, [lr]
 801ad80:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 801ad84:	f1b9 0f00 	cmp.w	r9, #0
 801ad88:	d01f      	beq.n	801adca <__multiply+0x110>
 801ad8a:	46ae      	mov	lr, r5
 801ad8c:	468c      	mov	ip, r1
 801ad8e:	f04f 0a00 	mov.w	sl, #0
 801ad92:	682b      	ldr	r3, [r5, #0]
 801ad94:	f8bc 4000 	ldrh.w	r4, [ip]
 801ad98:	f8be b002 	ldrh.w	fp, [lr, #2]
 801ad9c:	b29b      	uxth	r3, r3
 801ad9e:	fb09 b404 	mla	r4, r9, r4, fp
 801ada2:	44a2      	add	sl, r4
 801ada4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 801ada8:	f84e 3b04 	str.w	r3, [lr], #4
 801adac:	f85c 3b04 	ldr.w	r3, [ip], #4
 801adb0:	f8be 4000 	ldrh.w	r4, [lr]
 801adb4:	0c1b      	lsrs	r3, r3, #16
 801adb6:	fb09 4303 	mla	r3, r9, r3, r4
 801adba:	4567      	cmp	r7, ip
 801adbc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 801adc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801adc4:	d8e6      	bhi.n	801ad94 <__multiply+0xda>
 801adc6:	f8ce 3000 	str.w	r3, [lr]
 801adca:	3504      	adds	r5, #4
 801adcc:	e7a0      	b.n	801ad10 <__multiply+0x56>
 801adce:	3e01      	subs	r6, #1
 801add0:	e7a2      	b.n	801ad18 <__multiply+0x5e>
	...

0801add4 <__pow5mult>:
 801add4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801add8:	4615      	mov	r5, r2
 801adda:	f012 0203 	ands.w	r2, r2, #3
 801adde:	4606      	mov	r6, r0
 801ade0:	460f      	mov	r7, r1
 801ade2:	d007      	beq.n	801adf4 <__pow5mult+0x20>
 801ade4:	4c21      	ldr	r4, [pc, #132]	; (801ae6c <__pow5mult+0x98>)
 801ade6:	3a01      	subs	r2, #1
 801ade8:	2300      	movs	r3, #0
 801adea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801adee:	f7ff fed2 	bl	801ab96 <__multadd>
 801adf2:	4607      	mov	r7, r0
 801adf4:	10ad      	asrs	r5, r5, #2
 801adf6:	d035      	beq.n	801ae64 <__pow5mult+0x90>
 801adf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801adfa:	b93c      	cbnz	r4, 801ae0c <__pow5mult+0x38>
 801adfc:	2010      	movs	r0, #16
 801adfe:	f7fc f81f 	bl	8016e40 <malloc>
 801ae02:	6270      	str	r0, [r6, #36]	; 0x24
 801ae04:	6044      	str	r4, [r0, #4]
 801ae06:	6084      	str	r4, [r0, #8]
 801ae08:	6004      	str	r4, [r0, #0]
 801ae0a:	60c4      	str	r4, [r0, #12]
 801ae0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801ae10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ae14:	b94c      	cbnz	r4, 801ae2a <__pow5mult+0x56>
 801ae16:	f240 2171 	movw	r1, #625	; 0x271
 801ae1a:	4630      	mov	r0, r6
 801ae1c:	f7ff ff44 	bl	801aca8 <__i2b>
 801ae20:	2300      	movs	r3, #0
 801ae22:	4604      	mov	r4, r0
 801ae24:	f8c8 0008 	str.w	r0, [r8, #8]
 801ae28:	6003      	str	r3, [r0, #0]
 801ae2a:	f04f 0800 	mov.w	r8, #0
 801ae2e:	07eb      	lsls	r3, r5, #31
 801ae30:	d50a      	bpl.n	801ae48 <__pow5mult+0x74>
 801ae32:	4639      	mov	r1, r7
 801ae34:	4622      	mov	r2, r4
 801ae36:	4630      	mov	r0, r6
 801ae38:	f7ff ff3f 	bl	801acba <__multiply>
 801ae3c:	4681      	mov	r9, r0
 801ae3e:	4639      	mov	r1, r7
 801ae40:	4630      	mov	r0, r6
 801ae42:	f7ff fe91 	bl	801ab68 <_Bfree>
 801ae46:	464f      	mov	r7, r9
 801ae48:	106d      	asrs	r5, r5, #1
 801ae4a:	d00b      	beq.n	801ae64 <__pow5mult+0x90>
 801ae4c:	6820      	ldr	r0, [r4, #0]
 801ae4e:	b938      	cbnz	r0, 801ae60 <__pow5mult+0x8c>
 801ae50:	4622      	mov	r2, r4
 801ae52:	4621      	mov	r1, r4
 801ae54:	4630      	mov	r0, r6
 801ae56:	f7ff ff30 	bl	801acba <__multiply>
 801ae5a:	6020      	str	r0, [r4, #0]
 801ae5c:	f8c0 8000 	str.w	r8, [r0]
 801ae60:	4604      	mov	r4, r0
 801ae62:	e7e4      	b.n	801ae2e <__pow5mult+0x5a>
 801ae64:	4638      	mov	r0, r7
 801ae66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae6a:	bf00      	nop
 801ae6c:	08023520 	.word	0x08023520

0801ae70 <__lshift>:
 801ae70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae74:	460c      	mov	r4, r1
 801ae76:	4607      	mov	r7, r0
 801ae78:	4616      	mov	r6, r2
 801ae7a:	6923      	ldr	r3, [r4, #16]
 801ae7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ae80:	eb0a 0903 	add.w	r9, sl, r3
 801ae84:	6849      	ldr	r1, [r1, #4]
 801ae86:	68a3      	ldr	r3, [r4, #8]
 801ae88:	f109 0501 	add.w	r5, r9, #1
 801ae8c:	42ab      	cmp	r3, r5
 801ae8e:	db31      	blt.n	801aef4 <__lshift+0x84>
 801ae90:	4638      	mov	r0, r7
 801ae92:	f7ff fe35 	bl	801ab00 <_Balloc>
 801ae96:	2200      	movs	r2, #0
 801ae98:	4680      	mov	r8, r0
 801ae9a:	4611      	mov	r1, r2
 801ae9c:	f100 0314 	add.w	r3, r0, #20
 801aea0:	4552      	cmp	r2, sl
 801aea2:	db2a      	blt.n	801aefa <__lshift+0x8a>
 801aea4:	6920      	ldr	r0, [r4, #16]
 801aea6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801aeaa:	f104 0114 	add.w	r1, r4, #20
 801aeae:	f016 021f 	ands.w	r2, r6, #31
 801aeb2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801aeb6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 801aeba:	d022      	beq.n	801af02 <__lshift+0x92>
 801aebc:	2000      	movs	r0, #0
 801aebe:	f1c2 0c20 	rsb	ip, r2, #32
 801aec2:	680e      	ldr	r6, [r1, #0]
 801aec4:	4096      	lsls	r6, r2
 801aec6:	4330      	orrs	r0, r6
 801aec8:	f843 0b04 	str.w	r0, [r3], #4
 801aecc:	f851 0b04 	ldr.w	r0, [r1], #4
 801aed0:	458e      	cmp	lr, r1
 801aed2:	fa20 f00c 	lsr.w	r0, r0, ip
 801aed6:	d8f4      	bhi.n	801aec2 <__lshift+0x52>
 801aed8:	6018      	str	r0, [r3, #0]
 801aeda:	b108      	cbz	r0, 801aee0 <__lshift+0x70>
 801aedc:	f109 0502 	add.w	r5, r9, #2
 801aee0:	3d01      	subs	r5, #1
 801aee2:	4638      	mov	r0, r7
 801aee4:	f8c8 5010 	str.w	r5, [r8, #16]
 801aee8:	4621      	mov	r1, r4
 801aeea:	f7ff fe3d 	bl	801ab68 <_Bfree>
 801aeee:	4640      	mov	r0, r8
 801aef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aef4:	3101      	adds	r1, #1
 801aef6:	005b      	lsls	r3, r3, #1
 801aef8:	e7c8      	b.n	801ae8c <__lshift+0x1c>
 801aefa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801aefe:	3201      	adds	r2, #1
 801af00:	e7ce      	b.n	801aea0 <__lshift+0x30>
 801af02:	3b04      	subs	r3, #4
 801af04:	f851 2b04 	ldr.w	r2, [r1], #4
 801af08:	458e      	cmp	lr, r1
 801af0a:	f843 2f04 	str.w	r2, [r3, #4]!
 801af0e:	d8f9      	bhi.n	801af04 <__lshift+0x94>
 801af10:	e7e6      	b.n	801aee0 <__lshift+0x70>

0801af12 <__mcmp>:
 801af12:	6903      	ldr	r3, [r0, #16]
 801af14:	690a      	ldr	r2, [r1, #16]
 801af16:	b530      	push	{r4, r5, lr}
 801af18:	1a9b      	subs	r3, r3, r2
 801af1a:	d10c      	bne.n	801af36 <__mcmp+0x24>
 801af1c:	0092      	lsls	r2, r2, #2
 801af1e:	3014      	adds	r0, #20
 801af20:	3114      	adds	r1, #20
 801af22:	1884      	adds	r4, r0, r2
 801af24:	4411      	add	r1, r2
 801af26:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801af2a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801af2e:	4295      	cmp	r5, r2
 801af30:	d003      	beq.n	801af3a <__mcmp+0x28>
 801af32:	d305      	bcc.n	801af40 <__mcmp+0x2e>
 801af34:	2301      	movs	r3, #1
 801af36:	4618      	mov	r0, r3
 801af38:	bd30      	pop	{r4, r5, pc}
 801af3a:	42a0      	cmp	r0, r4
 801af3c:	d3f3      	bcc.n	801af26 <__mcmp+0x14>
 801af3e:	e7fa      	b.n	801af36 <__mcmp+0x24>
 801af40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801af44:	e7f7      	b.n	801af36 <__mcmp+0x24>

0801af46 <__mdiff>:
 801af46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af4a:	460d      	mov	r5, r1
 801af4c:	4607      	mov	r7, r0
 801af4e:	4611      	mov	r1, r2
 801af50:	4628      	mov	r0, r5
 801af52:	4614      	mov	r4, r2
 801af54:	f7ff ffdd 	bl	801af12 <__mcmp>
 801af58:	1e06      	subs	r6, r0, #0
 801af5a:	d108      	bne.n	801af6e <__mdiff+0x28>
 801af5c:	4631      	mov	r1, r6
 801af5e:	4638      	mov	r0, r7
 801af60:	f7ff fdce 	bl	801ab00 <_Balloc>
 801af64:	2301      	movs	r3, #1
 801af66:	6146      	str	r6, [r0, #20]
 801af68:	6103      	str	r3, [r0, #16]
 801af6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af6e:	bfa4      	itt	ge
 801af70:	4623      	movge	r3, r4
 801af72:	462c      	movge	r4, r5
 801af74:	4638      	mov	r0, r7
 801af76:	6861      	ldr	r1, [r4, #4]
 801af78:	bfa6      	itte	ge
 801af7a:	461d      	movge	r5, r3
 801af7c:	2600      	movge	r6, #0
 801af7e:	2601      	movlt	r6, #1
 801af80:	f7ff fdbe 	bl	801ab00 <_Balloc>
 801af84:	f04f 0c00 	mov.w	ip, #0
 801af88:	60c6      	str	r6, [r0, #12]
 801af8a:	692b      	ldr	r3, [r5, #16]
 801af8c:	6926      	ldr	r6, [r4, #16]
 801af8e:	f104 0214 	add.w	r2, r4, #20
 801af92:	f105 0914 	add.w	r9, r5, #20
 801af96:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801af9a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801af9e:	f100 0114 	add.w	r1, r0, #20
 801afa2:	f852 ab04 	ldr.w	sl, [r2], #4
 801afa6:	f859 5b04 	ldr.w	r5, [r9], #4
 801afaa:	fa1f f38a 	uxth.w	r3, sl
 801afae:	4463      	add	r3, ip
 801afb0:	b2ac      	uxth	r4, r5
 801afb2:	1b1b      	subs	r3, r3, r4
 801afb4:	0c2c      	lsrs	r4, r5, #16
 801afb6:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 801afba:	eb04 4423 	add.w	r4, r4, r3, asr #16
 801afbe:	b29b      	uxth	r3, r3
 801afc0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 801afc4:	45c8      	cmp	r8, r9
 801afc6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 801afca:	4696      	mov	lr, r2
 801afcc:	f841 4b04 	str.w	r4, [r1], #4
 801afd0:	d8e7      	bhi.n	801afa2 <__mdiff+0x5c>
 801afd2:	45be      	cmp	lr, r7
 801afd4:	d305      	bcc.n	801afe2 <__mdiff+0x9c>
 801afd6:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801afda:	b18b      	cbz	r3, 801b000 <__mdiff+0xba>
 801afdc:	6106      	str	r6, [r0, #16]
 801afde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afe2:	f85e 4b04 	ldr.w	r4, [lr], #4
 801afe6:	b2a2      	uxth	r2, r4
 801afe8:	4462      	add	r2, ip
 801afea:	1413      	asrs	r3, r2, #16
 801afec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801aff0:	b292      	uxth	r2, r2
 801aff2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801aff6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801affa:	f841 2b04 	str.w	r2, [r1], #4
 801affe:	e7e8      	b.n	801afd2 <__mdiff+0x8c>
 801b000:	3e01      	subs	r6, #1
 801b002:	e7e8      	b.n	801afd6 <__mdiff+0x90>

0801b004 <__d2b>:
 801b004:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b008:	461c      	mov	r4, r3
 801b00a:	2101      	movs	r1, #1
 801b00c:	4690      	mov	r8, r2
 801b00e:	9e08      	ldr	r6, [sp, #32]
 801b010:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801b012:	f7ff fd75 	bl	801ab00 <_Balloc>
 801b016:	f3c4 0213 	ubfx	r2, r4, #0, #20
 801b01a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 801b01e:	4607      	mov	r7, r0
 801b020:	bb34      	cbnz	r4, 801b070 <__d2b+0x6c>
 801b022:	9201      	str	r2, [sp, #4]
 801b024:	f1b8 0f00 	cmp.w	r8, #0
 801b028:	d027      	beq.n	801b07a <__d2b+0x76>
 801b02a:	a802      	add	r0, sp, #8
 801b02c:	f840 8d08 	str.w	r8, [r0, #-8]!
 801b030:	f7ff fe0b 	bl	801ac4a <__lo0bits>
 801b034:	9900      	ldr	r1, [sp, #0]
 801b036:	b1f0      	cbz	r0, 801b076 <__d2b+0x72>
 801b038:	9a01      	ldr	r2, [sp, #4]
 801b03a:	f1c0 0320 	rsb	r3, r0, #32
 801b03e:	fa02 f303 	lsl.w	r3, r2, r3
 801b042:	430b      	orrs	r3, r1
 801b044:	40c2      	lsrs	r2, r0
 801b046:	617b      	str	r3, [r7, #20]
 801b048:	9201      	str	r2, [sp, #4]
 801b04a:	9b01      	ldr	r3, [sp, #4]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	bf14      	ite	ne
 801b050:	2102      	movne	r1, #2
 801b052:	2101      	moveq	r1, #1
 801b054:	61bb      	str	r3, [r7, #24]
 801b056:	6139      	str	r1, [r7, #16]
 801b058:	b1c4      	cbz	r4, 801b08c <__d2b+0x88>
 801b05a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801b05e:	4404      	add	r4, r0
 801b060:	6034      	str	r4, [r6, #0]
 801b062:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b066:	6028      	str	r0, [r5, #0]
 801b068:	4638      	mov	r0, r7
 801b06a:	b002      	add	sp, #8
 801b06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b070:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801b074:	e7d5      	b.n	801b022 <__d2b+0x1e>
 801b076:	6179      	str	r1, [r7, #20]
 801b078:	e7e7      	b.n	801b04a <__d2b+0x46>
 801b07a:	a801      	add	r0, sp, #4
 801b07c:	f7ff fde5 	bl	801ac4a <__lo0bits>
 801b080:	2101      	movs	r1, #1
 801b082:	9b01      	ldr	r3, [sp, #4]
 801b084:	6139      	str	r1, [r7, #16]
 801b086:	617b      	str	r3, [r7, #20]
 801b088:	3020      	adds	r0, #32
 801b08a:	e7e5      	b.n	801b058 <__d2b+0x54>
 801b08c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b090:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801b094:	6030      	str	r0, [r6, #0]
 801b096:	6918      	ldr	r0, [r3, #16]
 801b098:	f7ff fdb8 	bl	801ac0c <__hi0bits>
 801b09c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801b0a0:	e7e1      	b.n	801b066 <__d2b+0x62>
	...

0801b0a4 <_read_r>:
 801b0a4:	b538      	push	{r3, r4, r5, lr}
 801b0a6:	4605      	mov	r5, r0
 801b0a8:	4608      	mov	r0, r1
 801b0aa:	4611      	mov	r1, r2
 801b0ac:	2200      	movs	r2, #0
 801b0ae:	4c05      	ldr	r4, [pc, #20]	; (801b0c4 <_read_r+0x20>)
 801b0b0:	6022      	str	r2, [r4, #0]
 801b0b2:	461a      	mov	r2, r3
 801b0b4:	f7fa f834 	bl	8015120 <_read>
 801b0b8:	1c43      	adds	r3, r0, #1
 801b0ba:	d102      	bne.n	801b0c2 <_read_r+0x1e>
 801b0bc:	6823      	ldr	r3, [r4, #0]
 801b0be:	b103      	cbz	r3, 801b0c2 <_read_r+0x1e>
 801b0c0:	602b      	str	r3, [r5, #0]
 801b0c2:	bd38      	pop	{r3, r4, r5, pc}
 801b0c4:	200014e8 	.word	0x200014e8

0801b0c8 <__sccl>:
 801b0c8:	b570      	push	{r4, r5, r6, lr}
 801b0ca:	780b      	ldrb	r3, [r1, #0]
 801b0cc:	1e44      	subs	r4, r0, #1
 801b0ce:	2b5e      	cmp	r3, #94	; 0x5e
 801b0d0:	bf13      	iteet	ne
 801b0d2:	1c4a      	addne	r2, r1, #1
 801b0d4:	1c8a      	addeq	r2, r1, #2
 801b0d6:	784b      	ldrbeq	r3, [r1, #1]
 801b0d8:	2100      	movne	r1, #0
 801b0da:	bf08      	it	eq
 801b0dc:	2101      	moveq	r1, #1
 801b0de:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801b0e2:	f804 1f01 	strb.w	r1, [r4, #1]!
 801b0e6:	42a5      	cmp	r5, r4
 801b0e8:	d1fb      	bne.n	801b0e2 <__sccl+0x1a>
 801b0ea:	b913      	cbnz	r3, 801b0f2 <__sccl+0x2a>
 801b0ec:	3a01      	subs	r2, #1
 801b0ee:	4610      	mov	r0, r2
 801b0f0:	bd70      	pop	{r4, r5, r6, pc}
 801b0f2:	f081 0401 	eor.w	r4, r1, #1
 801b0f6:	4611      	mov	r1, r2
 801b0f8:	54c4      	strb	r4, [r0, r3]
 801b0fa:	780d      	ldrb	r5, [r1, #0]
 801b0fc:	1c4a      	adds	r2, r1, #1
 801b0fe:	2d2d      	cmp	r5, #45	; 0x2d
 801b100:	d006      	beq.n	801b110 <__sccl+0x48>
 801b102:	2d5d      	cmp	r5, #93	; 0x5d
 801b104:	d0f3      	beq.n	801b0ee <__sccl+0x26>
 801b106:	b90d      	cbnz	r5, 801b10c <__sccl+0x44>
 801b108:	460a      	mov	r2, r1
 801b10a:	e7f0      	b.n	801b0ee <__sccl+0x26>
 801b10c:	462b      	mov	r3, r5
 801b10e:	e7f2      	b.n	801b0f6 <__sccl+0x2e>
 801b110:	784e      	ldrb	r6, [r1, #1]
 801b112:	2e5d      	cmp	r6, #93	; 0x5d
 801b114:	d0fa      	beq.n	801b10c <__sccl+0x44>
 801b116:	42b3      	cmp	r3, r6
 801b118:	dcf8      	bgt.n	801b10c <__sccl+0x44>
 801b11a:	3102      	adds	r1, #2
 801b11c:	3301      	adds	r3, #1
 801b11e:	429e      	cmp	r6, r3
 801b120:	54c4      	strb	r4, [r0, r3]
 801b122:	dcfb      	bgt.n	801b11c <__sccl+0x54>
 801b124:	e7e9      	b.n	801b0fa <__sccl+0x32>
	...

0801b128 <siscanf>:
 801b128:	b40e      	push	{r1, r2, r3}
 801b12a:	f44f 7201 	mov.w	r2, #516	; 0x204
 801b12e:	b530      	push	{r4, r5, lr}
 801b130:	b09c      	sub	sp, #112	; 0x70
 801b132:	ac1f      	add	r4, sp, #124	; 0x7c
 801b134:	f854 5b04 	ldr.w	r5, [r4], #4
 801b138:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b13c:	9002      	str	r0, [sp, #8]
 801b13e:	9006      	str	r0, [sp, #24]
 801b140:	f7eb fbca 	bl	80068d8 <strlen>
 801b144:	4b0b      	ldr	r3, [pc, #44]	; (801b174 <siscanf+0x4c>)
 801b146:	9003      	str	r0, [sp, #12]
 801b148:	930b      	str	r3, [sp, #44]	; 0x2c
 801b14a:	2300      	movs	r3, #0
 801b14c:	930f      	str	r3, [sp, #60]	; 0x3c
 801b14e:	9314      	str	r3, [sp, #80]	; 0x50
 801b150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b154:	9007      	str	r0, [sp, #28]
 801b156:	4808      	ldr	r0, [pc, #32]	; (801b178 <siscanf+0x50>)
 801b158:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b15c:	462a      	mov	r2, r5
 801b15e:	4623      	mov	r3, r4
 801b160:	a902      	add	r1, sp, #8
 801b162:	6800      	ldr	r0, [r0, #0]
 801b164:	9401      	str	r4, [sp, #4]
 801b166:	f000 fbbd 	bl	801b8e4 <__ssvfiscanf_r>
 801b16a:	b01c      	add	sp, #112	; 0x70
 801b16c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b170:	b003      	add	sp, #12
 801b172:	4770      	bx	lr
 801b174:	08017cfb 	.word	0x08017cfb
 801b178:	2000002c 	.word	0x2000002c

0801b17c <strcpy>:
 801b17c:	4603      	mov	r3, r0
 801b17e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b182:	f803 2b01 	strb.w	r2, [r3], #1
 801b186:	2a00      	cmp	r2, #0
 801b188:	d1f9      	bne.n	801b17e <strcpy+0x2>
 801b18a:	4770      	bx	lr

0801b18c <_strtol_l.isra.0>:
 801b18c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b190:	4680      	mov	r8, r0
 801b192:	4689      	mov	r9, r1
 801b194:	4692      	mov	sl, r2
 801b196:	461f      	mov	r7, r3
 801b198:	468b      	mov	fp, r1
 801b19a:	465d      	mov	r5, fp
 801b19c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b19e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b1a2:	f7ff fbd1 	bl	801a948 <__locale_ctype_ptr_l>
 801b1a6:	4420      	add	r0, r4
 801b1a8:	7846      	ldrb	r6, [r0, #1]
 801b1aa:	f016 0608 	ands.w	r6, r6, #8
 801b1ae:	d10b      	bne.n	801b1c8 <_strtol_l.isra.0+0x3c>
 801b1b0:	2c2d      	cmp	r4, #45	; 0x2d
 801b1b2:	d10b      	bne.n	801b1cc <_strtol_l.isra.0+0x40>
 801b1b4:	2601      	movs	r6, #1
 801b1b6:	782c      	ldrb	r4, [r5, #0]
 801b1b8:	f10b 0502 	add.w	r5, fp, #2
 801b1bc:	b167      	cbz	r7, 801b1d8 <_strtol_l.isra.0+0x4c>
 801b1be:	2f10      	cmp	r7, #16
 801b1c0:	d114      	bne.n	801b1ec <_strtol_l.isra.0+0x60>
 801b1c2:	2c30      	cmp	r4, #48	; 0x30
 801b1c4:	d00a      	beq.n	801b1dc <_strtol_l.isra.0+0x50>
 801b1c6:	e011      	b.n	801b1ec <_strtol_l.isra.0+0x60>
 801b1c8:	46ab      	mov	fp, r5
 801b1ca:	e7e6      	b.n	801b19a <_strtol_l.isra.0+0xe>
 801b1cc:	2c2b      	cmp	r4, #43	; 0x2b
 801b1ce:	bf04      	itt	eq
 801b1d0:	782c      	ldrbeq	r4, [r5, #0]
 801b1d2:	f10b 0502 	addeq.w	r5, fp, #2
 801b1d6:	e7f1      	b.n	801b1bc <_strtol_l.isra.0+0x30>
 801b1d8:	2c30      	cmp	r4, #48	; 0x30
 801b1da:	d127      	bne.n	801b22c <_strtol_l.isra.0+0xa0>
 801b1dc:	782b      	ldrb	r3, [r5, #0]
 801b1de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b1e2:	2b58      	cmp	r3, #88	; 0x58
 801b1e4:	d14b      	bne.n	801b27e <_strtol_l.isra.0+0xf2>
 801b1e6:	2710      	movs	r7, #16
 801b1e8:	786c      	ldrb	r4, [r5, #1]
 801b1ea:	3502      	adds	r5, #2
 801b1ec:	2e00      	cmp	r6, #0
 801b1ee:	bf0c      	ite	eq
 801b1f0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801b1f4:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801b1f8:	2200      	movs	r2, #0
 801b1fa:	fbb1 fef7 	udiv	lr, r1, r7
 801b1fe:	4610      	mov	r0, r2
 801b200:	fb07 1c1e 	mls	ip, r7, lr, r1
 801b204:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801b208:	2b09      	cmp	r3, #9
 801b20a:	d811      	bhi.n	801b230 <_strtol_l.isra.0+0xa4>
 801b20c:	461c      	mov	r4, r3
 801b20e:	42a7      	cmp	r7, r4
 801b210:	dd1d      	ble.n	801b24e <_strtol_l.isra.0+0xc2>
 801b212:	1c53      	adds	r3, r2, #1
 801b214:	d007      	beq.n	801b226 <_strtol_l.isra.0+0x9a>
 801b216:	4586      	cmp	lr, r0
 801b218:	d316      	bcc.n	801b248 <_strtol_l.isra.0+0xbc>
 801b21a:	d101      	bne.n	801b220 <_strtol_l.isra.0+0x94>
 801b21c:	45a4      	cmp	ip, r4
 801b21e:	db13      	blt.n	801b248 <_strtol_l.isra.0+0xbc>
 801b220:	2201      	movs	r2, #1
 801b222:	fb00 4007 	mla	r0, r0, r7, r4
 801b226:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b22a:	e7eb      	b.n	801b204 <_strtol_l.isra.0+0x78>
 801b22c:	270a      	movs	r7, #10
 801b22e:	e7dd      	b.n	801b1ec <_strtol_l.isra.0+0x60>
 801b230:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801b234:	2b19      	cmp	r3, #25
 801b236:	d801      	bhi.n	801b23c <_strtol_l.isra.0+0xb0>
 801b238:	3c37      	subs	r4, #55	; 0x37
 801b23a:	e7e8      	b.n	801b20e <_strtol_l.isra.0+0x82>
 801b23c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801b240:	2b19      	cmp	r3, #25
 801b242:	d804      	bhi.n	801b24e <_strtol_l.isra.0+0xc2>
 801b244:	3c57      	subs	r4, #87	; 0x57
 801b246:	e7e2      	b.n	801b20e <_strtol_l.isra.0+0x82>
 801b248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b24c:	e7eb      	b.n	801b226 <_strtol_l.isra.0+0x9a>
 801b24e:	1c53      	adds	r3, r2, #1
 801b250:	d108      	bne.n	801b264 <_strtol_l.isra.0+0xd8>
 801b252:	2322      	movs	r3, #34	; 0x22
 801b254:	4608      	mov	r0, r1
 801b256:	f8c8 3000 	str.w	r3, [r8]
 801b25a:	f1ba 0f00 	cmp.w	sl, #0
 801b25e:	d107      	bne.n	801b270 <_strtol_l.isra.0+0xe4>
 801b260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b264:	b106      	cbz	r6, 801b268 <_strtol_l.isra.0+0xdc>
 801b266:	4240      	negs	r0, r0
 801b268:	f1ba 0f00 	cmp.w	sl, #0
 801b26c:	d00c      	beq.n	801b288 <_strtol_l.isra.0+0xfc>
 801b26e:	b122      	cbz	r2, 801b27a <_strtol_l.isra.0+0xee>
 801b270:	3d01      	subs	r5, #1
 801b272:	f8ca 5000 	str.w	r5, [sl]
 801b276:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b27a:	464d      	mov	r5, r9
 801b27c:	e7f9      	b.n	801b272 <_strtol_l.isra.0+0xe6>
 801b27e:	2430      	movs	r4, #48	; 0x30
 801b280:	2f00      	cmp	r7, #0
 801b282:	d1b3      	bne.n	801b1ec <_strtol_l.isra.0+0x60>
 801b284:	2708      	movs	r7, #8
 801b286:	e7b1      	b.n	801b1ec <_strtol_l.isra.0+0x60>
 801b288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b28c <_strtol_r>:
 801b28c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b28e:	4c06      	ldr	r4, [pc, #24]	; (801b2a8 <_strtol_r+0x1c>)
 801b290:	4d06      	ldr	r5, [pc, #24]	; (801b2ac <_strtol_r+0x20>)
 801b292:	6824      	ldr	r4, [r4, #0]
 801b294:	6a24      	ldr	r4, [r4, #32]
 801b296:	2c00      	cmp	r4, #0
 801b298:	bf08      	it	eq
 801b29a:	462c      	moveq	r4, r5
 801b29c:	9400      	str	r4, [sp, #0]
 801b29e:	f7ff ff75 	bl	801b18c <_strtol_l.isra.0>
 801b2a2:	b003      	add	sp, #12
 801b2a4:	bd30      	pop	{r4, r5, pc}
 801b2a6:	bf00      	nop
 801b2a8:	2000002c 	.word	0x2000002c
 801b2ac:	2000057c 	.word	0x2000057c

0801b2b0 <_strtoll_l.isra.0>:
 801b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2b4:	4688      	mov	r8, r1
 801b2b6:	4693      	mov	fp, r2
 801b2b8:	461f      	mov	r7, r3
 801b2ba:	4689      	mov	r9, r1
 801b2bc:	b087      	sub	sp, #28
 801b2be:	9005      	str	r0, [sp, #20]
 801b2c0:	464d      	mov	r5, r9
 801b2c2:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b2c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b2c8:	f7ff fb3e 	bl	801a948 <__locale_ctype_ptr_l>
 801b2cc:	4420      	add	r0, r4
 801b2ce:	7846      	ldrb	r6, [r0, #1]
 801b2d0:	f016 0608 	ands.w	r6, r6, #8
 801b2d4:	d10b      	bne.n	801b2ee <_strtoll_l.isra.0+0x3e>
 801b2d6:	2c2d      	cmp	r4, #45	; 0x2d
 801b2d8:	d10b      	bne.n	801b2f2 <_strtoll_l.isra.0+0x42>
 801b2da:	2601      	movs	r6, #1
 801b2dc:	782c      	ldrb	r4, [r5, #0]
 801b2de:	f109 0502 	add.w	r5, r9, #2
 801b2e2:	b167      	cbz	r7, 801b2fe <_strtoll_l.isra.0+0x4e>
 801b2e4:	2f10      	cmp	r7, #16
 801b2e6:	d114      	bne.n	801b312 <_strtoll_l.isra.0+0x62>
 801b2e8:	2c30      	cmp	r4, #48	; 0x30
 801b2ea:	d00a      	beq.n	801b302 <_strtoll_l.isra.0+0x52>
 801b2ec:	e011      	b.n	801b312 <_strtoll_l.isra.0+0x62>
 801b2ee:	46a9      	mov	r9, r5
 801b2f0:	e7e6      	b.n	801b2c0 <_strtoll_l.isra.0+0x10>
 801b2f2:	2c2b      	cmp	r4, #43	; 0x2b
 801b2f4:	bf04      	itt	eq
 801b2f6:	782c      	ldrbeq	r4, [r5, #0]
 801b2f8:	f109 0502 	addeq.w	r5, r9, #2
 801b2fc:	e7f1      	b.n	801b2e2 <_strtoll_l.isra.0+0x32>
 801b2fe:	2c30      	cmp	r4, #48	; 0x30
 801b300:	d144      	bne.n	801b38c <_strtoll_l.isra.0+0xdc>
 801b302:	782b      	ldrb	r3, [r5, #0]
 801b304:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b308:	2b58      	cmp	r3, #88	; 0x58
 801b30a:	d170      	bne.n	801b3ee <_strtoll_l.isra.0+0x13e>
 801b30c:	2710      	movs	r7, #16
 801b30e:	786c      	ldrb	r4, [r5, #1]
 801b310:	3502      	adds	r5, #2
 801b312:	2e00      	cmp	r6, #0
 801b314:	d03c      	beq.n	801b390 <_strtoll_l.isra.0+0xe0>
 801b316:	f04f 0a00 	mov.w	sl, #0
 801b31a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 801b31e:	463a      	mov	r2, r7
 801b320:	17fb      	asrs	r3, r7, #31
 801b322:	4650      	mov	r0, sl
 801b324:	4649      	mov	r1, r9
 801b326:	e9cd 2300 	strd	r2, r3, [sp]
 801b32a:	f7eb ff6d 	bl	8007208 <__aeabi_uldivmod>
 801b32e:	17fb      	asrs	r3, r7, #31
 801b330:	9204      	str	r2, [sp, #16]
 801b332:	4650      	mov	r0, sl
 801b334:	463a      	mov	r2, r7
 801b336:	4649      	mov	r1, r9
 801b338:	f7eb ff66 	bl	8007208 <__aeabi_uldivmod>
 801b33c:	2300      	movs	r3, #0
 801b33e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b342:	2000      	movs	r0, #0
 801b344:	2100      	movs	r1, #0
 801b346:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 801b34a:	2a09      	cmp	r2, #9
 801b34c:	d825      	bhi.n	801b39a <_strtoll_l.isra.0+0xea>
 801b34e:	4614      	mov	r4, r2
 801b350:	42a7      	cmp	r7, r4
 801b352:	dd31      	ble.n	801b3b8 <_strtoll_l.isra.0+0x108>
 801b354:	1c5a      	adds	r2, r3, #1
 801b356:	d016      	beq.n	801b386 <_strtoll_l.isra.0+0xd6>
 801b358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b35c:	428b      	cmp	r3, r1
 801b35e:	bf08      	it	eq
 801b360:	4282      	cmpeq	r2, r0
 801b362:	d326      	bcc.n	801b3b2 <_strtoll_l.isra.0+0x102>
 801b364:	d102      	bne.n	801b36c <_strtoll_l.isra.0+0xbc>
 801b366:	9b04      	ldr	r3, [sp, #16]
 801b368:	42a3      	cmp	r3, r4
 801b36a:	db22      	blt.n	801b3b2 <_strtoll_l.isra.0+0x102>
 801b36c:	9b00      	ldr	r3, [sp, #0]
 801b36e:	9a01      	ldr	r2, [sp, #4]
 801b370:	434b      	muls	r3, r1
 801b372:	fb00 3302 	mla	r3, r0, r2, r3
 801b376:	9a00      	ldr	r2, [sp, #0]
 801b378:	fba2 0100 	umull	r0, r1, r2, r0
 801b37c:	4419      	add	r1, r3
 801b37e:	2301      	movs	r3, #1
 801b380:	1900      	adds	r0, r0, r4
 801b382:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801b386:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b38a:	e7dc      	b.n	801b346 <_strtoll_l.isra.0+0x96>
 801b38c:	270a      	movs	r7, #10
 801b38e:	e7c0      	b.n	801b312 <_strtoll_l.isra.0+0x62>
 801b390:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b394:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801b398:	e7c1      	b.n	801b31e <_strtoll_l.isra.0+0x6e>
 801b39a:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 801b39e:	2a19      	cmp	r2, #25
 801b3a0:	d801      	bhi.n	801b3a6 <_strtoll_l.isra.0+0xf6>
 801b3a2:	3c37      	subs	r4, #55	; 0x37
 801b3a4:	e7d4      	b.n	801b350 <_strtoll_l.isra.0+0xa0>
 801b3a6:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 801b3aa:	2a19      	cmp	r2, #25
 801b3ac:	d804      	bhi.n	801b3b8 <_strtoll_l.isra.0+0x108>
 801b3ae:	3c57      	subs	r4, #87	; 0x57
 801b3b0:	e7ce      	b.n	801b350 <_strtoll_l.isra.0+0xa0>
 801b3b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b3b6:	e7e6      	b.n	801b386 <_strtoll_l.isra.0+0xd6>
 801b3b8:	1c5a      	adds	r2, r3, #1
 801b3ba:	d10a      	bne.n	801b3d2 <_strtoll_l.isra.0+0x122>
 801b3bc:	2322      	movs	r3, #34	; 0x22
 801b3be:	9a05      	ldr	r2, [sp, #20]
 801b3c0:	4650      	mov	r0, sl
 801b3c2:	6013      	str	r3, [r2, #0]
 801b3c4:	4649      	mov	r1, r9
 801b3c6:	f1bb 0f00 	cmp.w	fp, #0
 801b3ca:	d10a      	bne.n	801b3e2 <_strtoll_l.isra.0+0x132>
 801b3cc:	b007      	add	sp, #28
 801b3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3d2:	b116      	cbz	r6, 801b3da <_strtoll_l.isra.0+0x12a>
 801b3d4:	4240      	negs	r0, r0
 801b3d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801b3da:	f1bb 0f00 	cmp.w	fp, #0
 801b3de:	d0f5      	beq.n	801b3cc <_strtoll_l.isra.0+0x11c>
 801b3e0:	b11b      	cbz	r3, 801b3ea <_strtoll_l.isra.0+0x13a>
 801b3e2:	3d01      	subs	r5, #1
 801b3e4:	f8cb 5000 	str.w	r5, [fp]
 801b3e8:	e7f0      	b.n	801b3cc <_strtoll_l.isra.0+0x11c>
 801b3ea:	4645      	mov	r5, r8
 801b3ec:	e7fa      	b.n	801b3e4 <_strtoll_l.isra.0+0x134>
 801b3ee:	2430      	movs	r4, #48	; 0x30
 801b3f0:	2f00      	cmp	r7, #0
 801b3f2:	d18e      	bne.n	801b312 <_strtoll_l.isra.0+0x62>
 801b3f4:	2708      	movs	r7, #8
 801b3f6:	e78c      	b.n	801b312 <_strtoll_l.isra.0+0x62>

0801b3f8 <_strtoll_r>:
 801b3f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b3fa:	4c06      	ldr	r4, [pc, #24]	; (801b414 <_strtoll_r+0x1c>)
 801b3fc:	4d06      	ldr	r5, [pc, #24]	; (801b418 <_strtoll_r+0x20>)
 801b3fe:	6824      	ldr	r4, [r4, #0]
 801b400:	6a24      	ldr	r4, [r4, #32]
 801b402:	2c00      	cmp	r4, #0
 801b404:	bf08      	it	eq
 801b406:	462c      	moveq	r4, r5
 801b408:	9400      	str	r4, [sp, #0]
 801b40a:	f7ff ff51 	bl	801b2b0 <_strtoll_l.isra.0>
 801b40e:	b003      	add	sp, #12
 801b410:	bd30      	pop	{r4, r5, pc}
 801b412:	bf00      	nop
 801b414:	2000002c 	.word	0x2000002c
 801b418:	2000057c 	.word	0x2000057c

0801b41c <_strtoul_l.isra.0>:
 801b41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b420:	4680      	mov	r8, r0
 801b422:	4689      	mov	r9, r1
 801b424:	4692      	mov	sl, r2
 801b426:	461e      	mov	r6, r3
 801b428:	460f      	mov	r7, r1
 801b42a:	463d      	mov	r5, r7
 801b42c:	9808      	ldr	r0, [sp, #32]
 801b42e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b432:	f7ff fa89 	bl	801a948 <__locale_ctype_ptr_l>
 801b436:	4420      	add	r0, r4
 801b438:	7843      	ldrb	r3, [r0, #1]
 801b43a:	f013 0308 	ands.w	r3, r3, #8
 801b43e:	d10a      	bne.n	801b456 <_strtoul_l.isra.0+0x3a>
 801b440:	2c2d      	cmp	r4, #45	; 0x2d
 801b442:	d10a      	bne.n	801b45a <_strtoul_l.isra.0+0x3e>
 801b444:	2301      	movs	r3, #1
 801b446:	782c      	ldrb	r4, [r5, #0]
 801b448:	1cbd      	adds	r5, r7, #2
 801b44a:	b15e      	cbz	r6, 801b464 <_strtoul_l.isra.0+0x48>
 801b44c:	2e10      	cmp	r6, #16
 801b44e:	d113      	bne.n	801b478 <_strtoul_l.isra.0+0x5c>
 801b450:	2c30      	cmp	r4, #48	; 0x30
 801b452:	d009      	beq.n	801b468 <_strtoul_l.isra.0+0x4c>
 801b454:	e010      	b.n	801b478 <_strtoul_l.isra.0+0x5c>
 801b456:	462f      	mov	r7, r5
 801b458:	e7e7      	b.n	801b42a <_strtoul_l.isra.0+0xe>
 801b45a:	2c2b      	cmp	r4, #43	; 0x2b
 801b45c:	bf04      	itt	eq
 801b45e:	782c      	ldrbeq	r4, [r5, #0]
 801b460:	1cbd      	addeq	r5, r7, #2
 801b462:	e7f2      	b.n	801b44a <_strtoul_l.isra.0+0x2e>
 801b464:	2c30      	cmp	r4, #48	; 0x30
 801b466:	d125      	bne.n	801b4b4 <_strtoul_l.isra.0+0x98>
 801b468:	782a      	ldrb	r2, [r5, #0]
 801b46a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801b46e:	2a58      	cmp	r2, #88	; 0x58
 801b470:	d14a      	bne.n	801b508 <_strtoul_l.isra.0+0xec>
 801b472:	2610      	movs	r6, #16
 801b474:	786c      	ldrb	r4, [r5, #1]
 801b476:	3502      	adds	r5, #2
 801b478:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b47c:	fbb1 f1f6 	udiv	r1, r1, r6
 801b480:	2700      	movs	r7, #0
 801b482:	fb06 fe01 	mul.w	lr, r6, r1
 801b486:	4638      	mov	r0, r7
 801b488:	ea6f 0e0e 	mvn.w	lr, lr
 801b48c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 801b490:	2a09      	cmp	r2, #9
 801b492:	d811      	bhi.n	801b4b8 <_strtoul_l.isra.0+0x9c>
 801b494:	4614      	mov	r4, r2
 801b496:	42a6      	cmp	r6, r4
 801b498:	dd1d      	ble.n	801b4d6 <_strtoul_l.isra.0+0xba>
 801b49a:	2f00      	cmp	r7, #0
 801b49c:	db18      	blt.n	801b4d0 <_strtoul_l.isra.0+0xb4>
 801b49e:	4281      	cmp	r1, r0
 801b4a0:	d316      	bcc.n	801b4d0 <_strtoul_l.isra.0+0xb4>
 801b4a2:	d101      	bne.n	801b4a8 <_strtoul_l.isra.0+0x8c>
 801b4a4:	45a6      	cmp	lr, r4
 801b4a6:	db13      	blt.n	801b4d0 <_strtoul_l.isra.0+0xb4>
 801b4a8:	2701      	movs	r7, #1
 801b4aa:	fb00 4006 	mla	r0, r0, r6, r4
 801b4ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b4b2:	e7eb      	b.n	801b48c <_strtoul_l.isra.0+0x70>
 801b4b4:	260a      	movs	r6, #10
 801b4b6:	e7df      	b.n	801b478 <_strtoul_l.isra.0+0x5c>
 801b4b8:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 801b4bc:	2a19      	cmp	r2, #25
 801b4be:	d801      	bhi.n	801b4c4 <_strtoul_l.isra.0+0xa8>
 801b4c0:	3c37      	subs	r4, #55	; 0x37
 801b4c2:	e7e8      	b.n	801b496 <_strtoul_l.isra.0+0x7a>
 801b4c4:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 801b4c8:	2a19      	cmp	r2, #25
 801b4ca:	d804      	bhi.n	801b4d6 <_strtoul_l.isra.0+0xba>
 801b4cc:	3c57      	subs	r4, #87	; 0x57
 801b4ce:	e7e2      	b.n	801b496 <_strtoul_l.isra.0+0x7a>
 801b4d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b4d4:	e7eb      	b.n	801b4ae <_strtoul_l.isra.0+0x92>
 801b4d6:	2f00      	cmp	r7, #0
 801b4d8:	da09      	bge.n	801b4ee <_strtoul_l.isra.0+0xd2>
 801b4da:	2322      	movs	r3, #34	; 0x22
 801b4dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b4e0:	f8c8 3000 	str.w	r3, [r8]
 801b4e4:	f1ba 0f00 	cmp.w	sl, #0
 801b4e8:	d107      	bne.n	801b4fa <_strtoul_l.isra.0+0xde>
 801b4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4ee:	b103      	cbz	r3, 801b4f2 <_strtoul_l.isra.0+0xd6>
 801b4f0:	4240      	negs	r0, r0
 801b4f2:	f1ba 0f00 	cmp.w	sl, #0
 801b4f6:	d00c      	beq.n	801b512 <_strtoul_l.isra.0+0xf6>
 801b4f8:	b127      	cbz	r7, 801b504 <_strtoul_l.isra.0+0xe8>
 801b4fa:	3d01      	subs	r5, #1
 801b4fc:	f8ca 5000 	str.w	r5, [sl]
 801b500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b504:	464d      	mov	r5, r9
 801b506:	e7f9      	b.n	801b4fc <_strtoul_l.isra.0+0xe0>
 801b508:	2430      	movs	r4, #48	; 0x30
 801b50a:	2e00      	cmp	r6, #0
 801b50c:	d1b4      	bne.n	801b478 <_strtoul_l.isra.0+0x5c>
 801b50e:	2608      	movs	r6, #8
 801b510:	e7b2      	b.n	801b478 <_strtoul_l.isra.0+0x5c>
 801b512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801b518 <_strtoul_r>:
 801b518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b51a:	4c06      	ldr	r4, [pc, #24]	; (801b534 <_strtoul_r+0x1c>)
 801b51c:	4d06      	ldr	r5, [pc, #24]	; (801b538 <_strtoul_r+0x20>)
 801b51e:	6824      	ldr	r4, [r4, #0]
 801b520:	6a24      	ldr	r4, [r4, #32]
 801b522:	2c00      	cmp	r4, #0
 801b524:	bf08      	it	eq
 801b526:	462c      	moveq	r4, r5
 801b528:	9400      	str	r4, [sp, #0]
 801b52a:	f7ff ff77 	bl	801b41c <_strtoul_l.isra.0>
 801b52e:	b003      	add	sp, #12
 801b530:	bd30      	pop	{r4, r5, pc}
 801b532:	bf00      	nop
 801b534:	2000002c 	.word	0x2000002c
 801b538:	2000057c 	.word	0x2000057c

0801b53c <strtoul>:
 801b53c:	4b08      	ldr	r3, [pc, #32]	; (801b560 <strtoul+0x24>)
 801b53e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b540:	681c      	ldr	r4, [r3, #0]
 801b542:	4d08      	ldr	r5, [pc, #32]	; (801b564 <strtoul+0x28>)
 801b544:	6a23      	ldr	r3, [r4, #32]
 801b546:	2b00      	cmp	r3, #0
 801b548:	bf08      	it	eq
 801b54a:	462b      	moveq	r3, r5
 801b54c:	9300      	str	r3, [sp, #0]
 801b54e:	4613      	mov	r3, r2
 801b550:	460a      	mov	r2, r1
 801b552:	4601      	mov	r1, r0
 801b554:	4620      	mov	r0, r4
 801b556:	f7ff ff61 	bl	801b41c <_strtoul_l.isra.0>
 801b55a:	b003      	add	sp, #12
 801b55c:	bd30      	pop	{r4, r5, pc}
 801b55e:	bf00      	nop
 801b560:	2000002c 	.word	0x2000002c
 801b564:	2000057c 	.word	0x2000057c

0801b568 <_strtoull_l.isra.0>:
 801b568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b56c:	4688      	mov	r8, r1
 801b56e:	4691      	mov	r9, r2
 801b570:	461f      	mov	r7, r3
 801b572:	468b      	mov	fp, r1
 801b574:	b085      	sub	sp, #20
 801b576:	9003      	str	r0, [sp, #12]
 801b578:	465d      	mov	r5, fp
 801b57a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b57c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b580:	f7ff f9e2 	bl	801a948 <__locale_ctype_ptr_l>
 801b584:	4420      	add	r0, r4
 801b586:	7846      	ldrb	r6, [r0, #1]
 801b588:	f016 0608 	ands.w	r6, r6, #8
 801b58c:	d10b      	bne.n	801b5a6 <_strtoull_l.isra.0+0x3e>
 801b58e:	2c2d      	cmp	r4, #45	; 0x2d
 801b590:	d10b      	bne.n	801b5aa <_strtoull_l.isra.0+0x42>
 801b592:	2601      	movs	r6, #1
 801b594:	782c      	ldrb	r4, [r5, #0]
 801b596:	f10b 0502 	add.w	r5, fp, #2
 801b59a:	b167      	cbz	r7, 801b5b6 <_strtoull_l.isra.0+0x4e>
 801b59c:	2f10      	cmp	r7, #16
 801b59e:	d114      	bne.n	801b5ca <_strtoull_l.isra.0+0x62>
 801b5a0:	2c30      	cmp	r4, #48	; 0x30
 801b5a2:	d00a      	beq.n	801b5ba <_strtoull_l.isra.0+0x52>
 801b5a4:	e011      	b.n	801b5ca <_strtoull_l.isra.0+0x62>
 801b5a6:	46ab      	mov	fp, r5
 801b5a8:	e7e6      	b.n	801b578 <_strtoull_l.isra.0+0x10>
 801b5aa:	2c2b      	cmp	r4, #43	; 0x2b
 801b5ac:	bf04      	itt	eq
 801b5ae:	782c      	ldrbeq	r4, [r5, #0]
 801b5b0:	f10b 0502 	addeq.w	r5, fp, #2
 801b5b4:	e7f1      	b.n	801b59a <_strtoull_l.isra.0+0x32>
 801b5b6:	2c30      	cmp	r4, #48	; 0x30
 801b5b8:	d141      	bne.n	801b63e <_strtoull_l.isra.0+0xd6>
 801b5ba:	782b      	ldrb	r3, [r5, #0]
 801b5bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b5c0:	2b58      	cmp	r3, #88	; 0x58
 801b5c2:	d16c      	bne.n	801b69e <_strtoull_l.isra.0+0x136>
 801b5c4:	2710      	movs	r7, #16
 801b5c6:	786c      	ldrb	r4, [r5, #1]
 801b5c8:	3502      	adds	r5, #2
 801b5ca:	ea4f 7be7 	mov.w	fp, r7, asr #31
 801b5ce:	463a      	mov	r2, r7
 801b5d0:	465b      	mov	r3, fp
 801b5d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b5d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b5da:	f7eb fe15 	bl	8007208 <__aeabi_uldivmod>
 801b5de:	463a      	mov	r2, r7
 801b5e0:	e9cd 0100 	strd	r0, r1, [sp]
 801b5e4:	465b      	mov	r3, fp
 801b5e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b5ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b5ee:	f7eb fe0b 	bl	8007208 <__aeabi_uldivmod>
 801b5f2:	46ba      	mov	sl, r7
 801b5f4:	4694      	mov	ip, r2
 801b5f6:	2300      	movs	r3, #0
 801b5f8:	2000      	movs	r0, #0
 801b5fa:	2100      	movs	r1, #0
 801b5fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801b600:	f1be 0f09 	cmp.w	lr, #9
 801b604:	d81d      	bhi.n	801b642 <_strtoull_l.isra.0+0xda>
 801b606:	4674      	mov	r4, lr
 801b608:	42a7      	cmp	r7, r4
 801b60a:	dd2b      	ble.n	801b664 <_strtoull_l.isra.0+0xfc>
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	db26      	blt.n	801b65e <_strtoull_l.isra.0+0xf6>
 801b610:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b614:	428b      	cmp	r3, r1
 801b616:	bf08      	it	eq
 801b618:	4282      	cmpeq	r2, r0
 801b61a:	d320      	bcc.n	801b65e <_strtoull_l.isra.0+0xf6>
 801b61c:	d101      	bne.n	801b622 <_strtoull_l.isra.0+0xba>
 801b61e:	45a4      	cmp	ip, r4
 801b620:	db1d      	blt.n	801b65e <_strtoull_l.isra.0+0xf6>
 801b622:	fb0a f301 	mul.w	r3, sl, r1
 801b626:	fb00 330b 	mla	r3, r0, fp, r3
 801b62a:	fbaa 0100 	umull	r0, r1, sl, r0
 801b62e:	4419      	add	r1, r3
 801b630:	2301      	movs	r3, #1
 801b632:	1900      	adds	r0, r0, r4
 801b634:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801b638:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b63c:	e7de      	b.n	801b5fc <_strtoull_l.isra.0+0x94>
 801b63e:	270a      	movs	r7, #10
 801b640:	e7c3      	b.n	801b5ca <_strtoull_l.isra.0+0x62>
 801b642:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801b646:	f1be 0f19 	cmp.w	lr, #25
 801b64a:	d801      	bhi.n	801b650 <_strtoull_l.isra.0+0xe8>
 801b64c:	3c37      	subs	r4, #55	; 0x37
 801b64e:	e7db      	b.n	801b608 <_strtoull_l.isra.0+0xa0>
 801b650:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801b654:	f1be 0f19 	cmp.w	lr, #25
 801b658:	d804      	bhi.n	801b664 <_strtoull_l.isra.0+0xfc>
 801b65a:	3c57      	subs	r4, #87	; 0x57
 801b65c:	e7d4      	b.n	801b608 <_strtoull_l.isra.0+0xa0>
 801b65e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b662:	e7e9      	b.n	801b638 <_strtoull_l.isra.0+0xd0>
 801b664:	2b00      	cmp	r3, #0
 801b666:	da0c      	bge.n	801b682 <_strtoull_l.isra.0+0x11a>
 801b668:	2322      	movs	r3, #34	; 0x22
 801b66a:	9a03      	ldr	r2, [sp, #12]
 801b66c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b670:	6013      	str	r3, [r2, #0]
 801b672:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b676:	f1b9 0f00 	cmp.w	r9, #0
 801b67a:	d10a      	bne.n	801b692 <_strtoull_l.isra.0+0x12a>
 801b67c:	b005      	add	sp, #20
 801b67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b682:	b116      	cbz	r6, 801b68a <_strtoull_l.isra.0+0x122>
 801b684:	4240      	negs	r0, r0
 801b686:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801b68a:	f1b9 0f00 	cmp.w	r9, #0
 801b68e:	d0f5      	beq.n	801b67c <_strtoull_l.isra.0+0x114>
 801b690:	b11b      	cbz	r3, 801b69a <_strtoull_l.isra.0+0x132>
 801b692:	3d01      	subs	r5, #1
 801b694:	f8c9 5000 	str.w	r5, [r9]
 801b698:	e7f0      	b.n	801b67c <_strtoull_l.isra.0+0x114>
 801b69a:	4645      	mov	r5, r8
 801b69c:	e7fa      	b.n	801b694 <_strtoull_l.isra.0+0x12c>
 801b69e:	2430      	movs	r4, #48	; 0x30
 801b6a0:	2f00      	cmp	r7, #0
 801b6a2:	d192      	bne.n	801b5ca <_strtoull_l.isra.0+0x62>
 801b6a4:	2708      	movs	r7, #8
 801b6a6:	e790      	b.n	801b5ca <_strtoull_l.isra.0+0x62>

0801b6a8 <_strtoull_r>:
 801b6a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b6aa:	4c06      	ldr	r4, [pc, #24]	; (801b6c4 <_strtoull_r+0x1c>)
 801b6ac:	4d06      	ldr	r5, [pc, #24]	; (801b6c8 <_strtoull_r+0x20>)
 801b6ae:	6824      	ldr	r4, [r4, #0]
 801b6b0:	6a24      	ldr	r4, [r4, #32]
 801b6b2:	2c00      	cmp	r4, #0
 801b6b4:	bf08      	it	eq
 801b6b6:	462c      	moveq	r4, r5
 801b6b8:	9400      	str	r4, [sp, #0]
 801b6ba:	f7ff ff55 	bl	801b568 <_strtoull_l.isra.0>
 801b6be:	b003      	add	sp, #12
 801b6c0:	bd30      	pop	{r4, r5, pc}
 801b6c2:	bf00      	nop
 801b6c4:	2000002c 	.word	0x2000002c
 801b6c8:	2000057c 	.word	0x2000057c

0801b6cc <__ssprint_r>:
 801b6cc:	6893      	ldr	r3, [r2, #8]
 801b6ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6d2:	4681      	mov	r9, r0
 801b6d4:	460c      	mov	r4, r1
 801b6d6:	4617      	mov	r7, r2
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d060      	beq.n	801b79e <__ssprint_r+0xd2>
 801b6dc:	f04f 0b00 	mov.w	fp, #0
 801b6e0:	465e      	mov	r6, fp
 801b6e2:	f8d2 a000 	ldr.w	sl, [r2]
 801b6e6:	b356      	cbz	r6, 801b73e <__ssprint_r+0x72>
 801b6e8:	68a3      	ldr	r3, [r4, #8]
 801b6ea:	429e      	cmp	r6, r3
 801b6ec:	d344      	bcc.n	801b778 <__ssprint_r+0xac>
 801b6ee:	89a2      	ldrh	r2, [r4, #12]
 801b6f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b6f4:	d03e      	beq.n	801b774 <__ssprint_r+0xa8>
 801b6f6:	2302      	movs	r3, #2
 801b6f8:	6825      	ldr	r5, [r4, #0]
 801b6fa:	6921      	ldr	r1, [r4, #16]
 801b6fc:	eba5 0801 	sub.w	r8, r5, r1
 801b700:	6965      	ldr	r5, [r4, #20]
 801b702:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b706:	fb95 f5f3 	sdiv	r5, r5, r3
 801b70a:	f108 0301 	add.w	r3, r8, #1
 801b70e:	4433      	add	r3, r6
 801b710:	429d      	cmp	r5, r3
 801b712:	bf38      	it	cc
 801b714:	461d      	movcc	r5, r3
 801b716:	0553      	lsls	r3, r2, #21
 801b718:	d546      	bpl.n	801b7a8 <__ssprint_r+0xdc>
 801b71a:	4629      	mov	r1, r5
 801b71c:	4648      	mov	r0, r9
 801b71e:	f7fb fb9f 	bl	8016e60 <_malloc_r>
 801b722:	b998      	cbnz	r0, 801b74c <__ssprint_r+0x80>
 801b724:	230c      	movs	r3, #12
 801b726:	f8c9 3000 	str.w	r3, [r9]
 801b72a:	89a3      	ldrh	r3, [r4, #12]
 801b72c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b734:	81a3      	strh	r3, [r4, #12]
 801b736:	2300      	movs	r3, #0
 801b738:	60bb      	str	r3, [r7, #8]
 801b73a:	607b      	str	r3, [r7, #4]
 801b73c:	e031      	b.n	801b7a2 <__ssprint_r+0xd6>
 801b73e:	f8da b000 	ldr.w	fp, [sl]
 801b742:	f8da 6004 	ldr.w	r6, [sl, #4]
 801b746:	f10a 0a08 	add.w	sl, sl, #8
 801b74a:	e7cc      	b.n	801b6e6 <__ssprint_r+0x1a>
 801b74c:	4642      	mov	r2, r8
 801b74e:	6921      	ldr	r1, [r4, #16]
 801b750:	9001      	str	r0, [sp, #4]
 801b752:	f7fb fdae 	bl	80172b2 <memcpy>
 801b756:	89a2      	ldrh	r2, [r4, #12]
 801b758:	9b01      	ldr	r3, [sp, #4]
 801b75a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801b75e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801b762:	81a2      	strh	r2, [r4, #12]
 801b764:	6123      	str	r3, [r4, #16]
 801b766:	4443      	add	r3, r8
 801b768:	6023      	str	r3, [r4, #0]
 801b76a:	4633      	mov	r3, r6
 801b76c:	6165      	str	r5, [r4, #20]
 801b76e:	eba5 0508 	sub.w	r5, r5, r8
 801b772:	60a5      	str	r5, [r4, #8]
 801b774:	429e      	cmp	r6, r3
 801b776:	d200      	bcs.n	801b77a <__ssprint_r+0xae>
 801b778:	4633      	mov	r3, r6
 801b77a:	461a      	mov	r2, r3
 801b77c:	4659      	mov	r1, fp
 801b77e:	6820      	ldr	r0, [r4, #0]
 801b780:	9301      	str	r3, [sp, #4]
 801b782:	f7fb fda1 	bl	80172c8 <memmove>
 801b786:	68a2      	ldr	r2, [r4, #8]
 801b788:	9b01      	ldr	r3, [sp, #4]
 801b78a:	1ad2      	subs	r2, r2, r3
 801b78c:	60a2      	str	r2, [r4, #8]
 801b78e:	6822      	ldr	r2, [r4, #0]
 801b790:	4413      	add	r3, r2
 801b792:	6023      	str	r3, [r4, #0]
 801b794:	68bb      	ldr	r3, [r7, #8]
 801b796:	1b9e      	subs	r6, r3, r6
 801b798:	60be      	str	r6, [r7, #8]
 801b79a:	2e00      	cmp	r6, #0
 801b79c:	d1cf      	bne.n	801b73e <__ssprint_r+0x72>
 801b79e:	2000      	movs	r0, #0
 801b7a0:	6078      	str	r0, [r7, #4]
 801b7a2:	b003      	add	sp, #12
 801b7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7a8:	462a      	mov	r2, r5
 801b7aa:	4648      	mov	r0, r9
 801b7ac:	f7fc f866 	bl	801787c <_realloc_r>
 801b7b0:	4603      	mov	r3, r0
 801b7b2:	2800      	cmp	r0, #0
 801b7b4:	d1d6      	bne.n	801b764 <__ssprint_r+0x98>
 801b7b6:	6921      	ldr	r1, [r4, #16]
 801b7b8:	4648      	mov	r0, r9
 801b7ba:	f7fe feeb 	bl	801a594 <_free_r>
 801b7be:	e7b1      	b.n	801b724 <__ssprint_r+0x58>

0801b7c0 <_sungetc_r>:
 801b7c0:	b538      	push	{r3, r4, r5, lr}
 801b7c2:	1c4b      	adds	r3, r1, #1
 801b7c4:	4614      	mov	r4, r2
 801b7c6:	d103      	bne.n	801b7d0 <_sungetc_r+0x10>
 801b7c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801b7cc:	4628      	mov	r0, r5
 801b7ce:	bd38      	pop	{r3, r4, r5, pc}
 801b7d0:	8993      	ldrh	r3, [r2, #12]
 801b7d2:	b2cd      	uxtb	r5, r1
 801b7d4:	f023 0320 	bic.w	r3, r3, #32
 801b7d8:	8193      	strh	r3, [r2, #12]
 801b7da:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801b7dc:	6852      	ldr	r2, [r2, #4]
 801b7de:	b18b      	cbz	r3, 801b804 <_sungetc_r+0x44>
 801b7e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b7e2:	429a      	cmp	r2, r3
 801b7e4:	da08      	bge.n	801b7f8 <_sungetc_r+0x38>
 801b7e6:	6823      	ldr	r3, [r4, #0]
 801b7e8:	1e5a      	subs	r2, r3, #1
 801b7ea:	6022      	str	r2, [r4, #0]
 801b7ec:	f803 5c01 	strb.w	r5, [r3, #-1]
 801b7f0:	6863      	ldr	r3, [r4, #4]
 801b7f2:	3301      	adds	r3, #1
 801b7f4:	6063      	str	r3, [r4, #4]
 801b7f6:	e7e9      	b.n	801b7cc <_sungetc_r+0xc>
 801b7f8:	4621      	mov	r1, r4
 801b7fa:	f000 fc01 	bl	801c000 <__submore>
 801b7fe:	2800      	cmp	r0, #0
 801b800:	d0f1      	beq.n	801b7e6 <_sungetc_r+0x26>
 801b802:	e7e1      	b.n	801b7c8 <_sungetc_r+0x8>
 801b804:	6921      	ldr	r1, [r4, #16]
 801b806:	6823      	ldr	r3, [r4, #0]
 801b808:	b151      	cbz	r1, 801b820 <_sungetc_r+0x60>
 801b80a:	4299      	cmp	r1, r3
 801b80c:	d208      	bcs.n	801b820 <_sungetc_r+0x60>
 801b80e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801b812:	428d      	cmp	r5, r1
 801b814:	d104      	bne.n	801b820 <_sungetc_r+0x60>
 801b816:	3b01      	subs	r3, #1
 801b818:	3201      	adds	r2, #1
 801b81a:	6023      	str	r3, [r4, #0]
 801b81c:	6062      	str	r2, [r4, #4]
 801b81e:	e7d5      	b.n	801b7cc <_sungetc_r+0xc>
 801b820:	63e3      	str	r3, [r4, #60]	; 0x3c
 801b822:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b826:	6363      	str	r3, [r4, #52]	; 0x34
 801b828:	2303      	movs	r3, #3
 801b82a:	63a3      	str	r3, [r4, #56]	; 0x38
 801b82c:	4623      	mov	r3, r4
 801b82e:	6422      	str	r2, [r4, #64]	; 0x40
 801b830:	f803 5f46 	strb.w	r5, [r3, #70]!
 801b834:	6023      	str	r3, [r4, #0]
 801b836:	2301      	movs	r3, #1
 801b838:	e7dc      	b.n	801b7f4 <_sungetc_r+0x34>

0801b83a <__ssrefill_r>:
 801b83a:	b510      	push	{r4, lr}
 801b83c:	460c      	mov	r4, r1
 801b83e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801b840:	b169      	cbz	r1, 801b85e <__ssrefill_r+0x24>
 801b842:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b846:	4299      	cmp	r1, r3
 801b848:	d001      	beq.n	801b84e <__ssrefill_r+0x14>
 801b84a:	f7fe fea3 	bl	801a594 <_free_r>
 801b84e:	2000      	movs	r0, #0
 801b850:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b852:	6360      	str	r0, [r4, #52]	; 0x34
 801b854:	6063      	str	r3, [r4, #4]
 801b856:	b113      	cbz	r3, 801b85e <__ssrefill_r+0x24>
 801b858:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b85a:	6023      	str	r3, [r4, #0]
 801b85c:	bd10      	pop	{r4, pc}
 801b85e:	6923      	ldr	r3, [r4, #16]
 801b860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b864:	6023      	str	r3, [r4, #0]
 801b866:	2300      	movs	r3, #0
 801b868:	6063      	str	r3, [r4, #4]
 801b86a:	89a3      	ldrh	r3, [r4, #12]
 801b86c:	f043 0320 	orr.w	r3, r3, #32
 801b870:	81a3      	strh	r3, [r4, #12]
 801b872:	bd10      	pop	{r4, pc}

0801b874 <_sfread_r>:
 801b874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b878:	4615      	mov	r5, r2
 801b87a:	435d      	muls	r5, r3
 801b87c:	4682      	mov	sl, r0
 801b87e:	4691      	mov	r9, r2
 801b880:	4698      	mov	r8, r3
 801b882:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b884:	d029      	beq.n	801b8da <_sfread_r+0x66>
 801b886:	460f      	mov	r7, r1
 801b888:	462e      	mov	r6, r5
 801b88a:	f04f 0b00 	mov.w	fp, #0
 801b88e:	6863      	ldr	r3, [r4, #4]
 801b890:	429e      	cmp	r6, r3
 801b892:	d80c      	bhi.n	801b8ae <_sfread_r+0x3a>
 801b894:	4632      	mov	r2, r6
 801b896:	6821      	ldr	r1, [r4, #0]
 801b898:	4638      	mov	r0, r7
 801b89a:	f7fb fd0a 	bl	80172b2 <memcpy>
 801b89e:	6863      	ldr	r3, [r4, #4]
 801b8a0:	6825      	ldr	r5, [r4, #0]
 801b8a2:	1b9b      	subs	r3, r3, r6
 801b8a4:	4435      	add	r5, r6
 801b8a6:	6025      	str	r5, [r4, #0]
 801b8a8:	6063      	str	r3, [r4, #4]
 801b8aa:	4645      	mov	r5, r8
 801b8ac:	e015      	b.n	801b8da <_sfread_r+0x66>
 801b8ae:	461a      	mov	r2, r3
 801b8b0:	6821      	ldr	r1, [r4, #0]
 801b8b2:	4638      	mov	r0, r7
 801b8b4:	9301      	str	r3, [sp, #4]
 801b8b6:	f7fb fcfc 	bl	80172b2 <memcpy>
 801b8ba:	9b01      	ldr	r3, [sp, #4]
 801b8bc:	6822      	ldr	r2, [r4, #0]
 801b8be:	4621      	mov	r1, r4
 801b8c0:	441a      	add	r2, r3
 801b8c2:	e884 0804 	stmia.w	r4, {r2, fp}
 801b8c6:	4650      	mov	r0, sl
 801b8c8:	441f      	add	r7, r3
 801b8ca:	1af6      	subs	r6, r6, r3
 801b8cc:	f7ff ffb5 	bl	801b83a <__ssrefill_r>
 801b8d0:	2800      	cmp	r0, #0
 801b8d2:	d0dc      	beq.n	801b88e <_sfread_r+0x1a>
 801b8d4:	1bad      	subs	r5, r5, r6
 801b8d6:	fbb5 f5f9 	udiv	r5, r5, r9
 801b8da:	4628      	mov	r0, r5
 801b8dc:	b003      	add	sp, #12
 801b8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b8e4 <__ssvfiscanf_r>:
 801b8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8e8:	461e      	mov	r6, r3
 801b8ea:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 801b8ee:	b0d7      	sub	sp, #348	; 0x15c
 801b8f0:	049c      	lsls	r4, r3, #18
 801b8f2:	9003      	str	r0, [sp, #12]
 801b8f4:	460d      	mov	r5, r1
 801b8f6:	d406      	bmi.n	801b906 <__ssvfiscanf_r+0x22>
 801b8f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b8fc:	818b      	strh	r3, [r1, #12]
 801b8fe:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801b900:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b904:	664b      	str	r3, [r1, #100]	; 0x64
 801b906:	2300      	movs	r3, #0
 801b908:	4699      	mov	r9, r3
 801b90a:	4698      	mov	r8, r3
 801b90c:	9206      	str	r2, [sp, #24]
 801b90e:	9305      	str	r3, [sp, #20]
 801b910:	9304      	str	r3, [sp, #16]
 801b912:	9a06      	ldr	r2, [sp, #24]
 801b914:	f812 3b01 	ldrb.w	r3, [r2], #1
 801b918:	9206      	str	r2, [sp, #24]
 801b91a:	9309      	str	r3, [sp, #36]	; 0x24
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	f000 8099 	beq.w	801ba54 <__ssvfiscanf_r+0x170>
 801b922:	f7ff f815 	bl	801a950 <__locale_ctype_ptr>
 801b926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b928:	4418      	add	r0, r3
 801b92a:	7844      	ldrb	r4, [r0, #1]
 801b92c:	f014 0408 	ands.w	r4, r4, #8
 801b930:	d019      	beq.n	801b966 <__ssvfiscanf_r+0x82>
 801b932:	686b      	ldr	r3, [r5, #4]
 801b934:	2b00      	cmp	r3, #0
 801b936:	dd0f      	ble.n	801b958 <__ssvfiscanf_r+0x74>
 801b938:	f7ff f80a 	bl	801a950 <__locale_ctype_ptr>
 801b93c:	682b      	ldr	r3, [r5, #0]
 801b93e:	781a      	ldrb	r2, [r3, #0]
 801b940:	4410      	add	r0, r2
 801b942:	7842      	ldrb	r2, [r0, #1]
 801b944:	0710      	lsls	r0, r2, #28
 801b946:	d5e4      	bpl.n	801b912 <__ssvfiscanf_r+0x2e>
 801b948:	686a      	ldr	r2, [r5, #4]
 801b94a:	3301      	adds	r3, #1
 801b94c:	3a01      	subs	r2, #1
 801b94e:	f108 0801 	add.w	r8, r8, #1
 801b952:	606a      	str	r2, [r5, #4]
 801b954:	602b      	str	r3, [r5, #0]
 801b956:	e7ec      	b.n	801b932 <__ssvfiscanf_r+0x4e>
 801b958:	4629      	mov	r1, r5
 801b95a:	9803      	ldr	r0, [sp, #12]
 801b95c:	f7ff ff6d 	bl	801b83a <__ssrefill_r>
 801b960:	2800      	cmp	r0, #0
 801b962:	d0e9      	beq.n	801b938 <__ssvfiscanf_r+0x54>
 801b964:	e7d5      	b.n	801b912 <__ssvfiscanf_r+0x2e>
 801b966:	2b25      	cmp	r3, #37	; 0x25
 801b968:	d16a      	bne.n	801ba40 <__ssvfiscanf_r+0x15c>
 801b96a:	46a2      	mov	sl, r4
 801b96c:	4627      	mov	r7, r4
 801b96e:	220a      	movs	r2, #10
 801b970:	9b06      	ldr	r3, [sp, #24]
 801b972:	9906      	ldr	r1, [sp, #24]
 801b974:	781c      	ldrb	r4, [r3, #0]
 801b976:	3101      	adds	r1, #1
 801b978:	2c63      	cmp	r4, #99	; 0x63
 801b97a:	9106      	str	r1, [sp, #24]
 801b97c:	f000 80f8 	beq.w	801bb70 <__ssvfiscanf_r+0x28c>
 801b980:	d82c      	bhi.n	801b9dc <__ssvfiscanf_r+0xf8>
 801b982:	2c39      	cmp	r4, #57	; 0x39
 801b984:	d80a      	bhi.n	801b99c <__ssvfiscanf_r+0xb8>
 801b986:	2c30      	cmp	r4, #48	; 0x30
 801b988:	f080 808c 	bcs.w	801baa4 <__ssvfiscanf_r+0x1c0>
 801b98c:	2c25      	cmp	r4, #37	; 0x25
 801b98e:	d057      	beq.n	801ba40 <__ssvfiscanf_r+0x15c>
 801b990:	2c2a      	cmp	r4, #42	; 0x2a
 801b992:	d07d      	beq.n	801ba90 <__ssvfiscanf_r+0x1ac>
 801b994:	b954      	cbnz	r4, 801b9ac <__ssvfiscanf_r+0xc8>
 801b996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b99a:	e06f      	b.n	801ba7c <__ssvfiscanf_r+0x198>
 801b99c:	2c4f      	cmp	r4, #79	; 0x4f
 801b99e:	f000 8085 	beq.w	801baac <__ssvfiscanf_r+0x1c8>
 801b9a2:	d80e      	bhi.n	801b9c2 <__ssvfiscanf_r+0xde>
 801b9a4:	2c44      	cmp	r4, #68	; 0x44
 801b9a6:	d009      	beq.n	801b9bc <__ssvfiscanf_r+0xd8>
 801b9a8:	2c4c      	cmp	r4, #76	; 0x4c
 801b9aa:	d02b      	beq.n	801ba04 <__ssvfiscanf_r+0x120>
 801b9ac:	f7fe ffd0 	bl	801a950 <__locale_ctype_ptr>
 801b9b0:	4420      	add	r0, r4
 801b9b2:	7843      	ldrb	r3, [r0, #1]
 801b9b4:	f003 0303 	and.w	r3, r3, #3
 801b9b8:	2b01      	cmp	r3, #1
 801b9ba:	d118      	bne.n	801b9ee <__ssvfiscanf_r+0x10a>
 801b9bc:	f04a 0a01 	orr.w	sl, sl, #1
 801b9c0:	e015      	b.n	801b9ee <__ssvfiscanf_r+0x10a>
 801b9c2:	2c58      	cmp	r4, #88	; 0x58
 801b9c4:	d02f      	beq.n	801ba26 <__ssvfiscanf_r+0x142>
 801b9c6:	2c5b      	cmp	r4, #91	; 0x5b
 801b9c8:	d1f0      	bne.n	801b9ac <__ssvfiscanf_r+0xc8>
 801b9ca:	9906      	ldr	r1, [sp, #24]
 801b9cc:	a816      	add	r0, sp, #88	; 0x58
 801b9ce:	f7ff fb7b 	bl	801b0c8 <__sccl>
 801b9d2:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 801b9d6:	9006      	str	r0, [sp, #24]
 801b9d8:	2401      	movs	r4, #1
 801b9da:	e074      	b.n	801bac6 <__ssvfiscanf_r+0x1e2>
 801b9dc:	2c6e      	cmp	r4, #110	; 0x6e
 801b9de:	f000 80cb 	beq.w	801bb78 <__ssvfiscanf_r+0x294>
 801b9e2:	d812      	bhi.n	801ba0a <__ssvfiscanf_r+0x126>
 801b9e4:	2c68      	cmp	r4, #104	; 0x68
 801b9e6:	d05a      	beq.n	801ba9e <__ssvfiscanf_r+0x1ba>
 801b9e8:	d803      	bhi.n	801b9f2 <__ssvfiscanf_r+0x10e>
 801b9ea:	2c64      	cmp	r4, #100	; 0x64
 801b9ec:	d1de      	bne.n	801b9ac <__ssvfiscanf_r+0xc8>
 801b9ee:	4ba7      	ldr	r3, [pc, #668]	; (801bc8c <__ssvfiscanf_r+0x3a8>)
 801b9f0:	e064      	b.n	801babc <__ssvfiscanf_r+0x1d8>
 801b9f2:	2c69      	cmp	r4, #105	; 0x69
 801b9f4:	d01e      	beq.n	801ba34 <__ssvfiscanf_r+0x150>
 801b9f6:	2c6c      	cmp	r4, #108	; 0x6c
 801b9f8:	d1d8      	bne.n	801b9ac <__ssvfiscanf_r+0xc8>
 801b9fa:	7859      	ldrb	r1, [r3, #1]
 801b9fc:	296c      	cmp	r1, #108	; 0x6c
 801b9fe:	d14b      	bne.n	801ba98 <__ssvfiscanf_r+0x1b4>
 801ba00:	3302      	adds	r3, #2
 801ba02:	9306      	str	r3, [sp, #24]
 801ba04:	f04a 0a02 	orr.w	sl, sl, #2
 801ba08:	e044      	b.n	801ba94 <__ssvfiscanf_r+0x1b0>
 801ba0a:	2c73      	cmp	r4, #115	; 0x73
 801ba0c:	d05a      	beq.n	801bac4 <__ssvfiscanf_r+0x1e0>
 801ba0e:	d806      	bhi.n	801ba1e <__ssvfiscanf_r+0x13a>
 801ba10:	2c6f      	cmp	r4, #111	; 0x6f
 801ba12:	d04d      	beq.n	801bab0 <__ssvfiscanf_r+0x1cc>
 801ba14:	2c70      	cmp	r4, #112	; 0x70
 801ba16:	d1c9      	bne.n	801b9ac <__ssvfiscanf_r+0xc8>
 801ba18:	f44a 7a08 	orr.w	sl, sl, #544	; 0x220
 801ba1c:	e005      	b.n	801ba2a <__ssvfiscanf_r+0x146>
 801ba1e:	2c75      	cmp	r4, #117	; 0x75
 801ba20:	d04b      	beq.n	801baba <__ssvfiscanf_r+0x1d6>
 801ba22:	2c78      	cmp	r4, #120	; 0x78
 801ba24:	d1c2      	bne.n	801b9ac <__ssvfiscanf_r+0xc8>
 801ba26:	f44a 7a00 	orr.w	sl, sl, #512	; 0x200
 801ba2a:	4b99      	ldr	r3, [pc, #612]	; (801bc90 <__ssvfiscanf_r+0x3ac>)
 801ba2c:	f04f 0910 	mov.w	r9, #16
 801ba30:	9305      	str	r3, [sp, #20]
 801ba32:	e003      	b.n	801ba3c <__ssvfiscanf_r+0x158>
 801ba34:	f04f 0900 	mov.w	r9, #0
 801ba38:	4b94      	ldr	r3, [pc, #592]	; (801bc8c <__ssvfiscanf_r+0x3a8>)
 801ba3a:	9305      	str	r3, [sp, #20]
 801ba3c:	2403      	movs	r4, #3
 801ba3e:	e042      	b.n	801bac6 <__ssvfiscanf_r+0x1e2>
 801ba40:	686b      	ldr	r3, [r5, #4]
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	dd0a      	ble.n	801ba5c <__ssvfiscanf_r+0x178>
 801ba46:	682b      	ldr	r3, [r5, #0]
 801ba48:	9a06      	ldr	r2, [sp, #24]
 801ba4a:	7819      	ldrb	r1, [r3, #0]
 801ba4c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 801ba50:	4291      	cmp	r1, r2
 801ba52:	d015      	beq.n	801ba80 <__ssvfiscanf_r+0x19c>
 801ba54:	9804      	ldr	r0, [sp, #16]
 801ba56:	b057      	add	sp, #348	; 0x15c
 801ba58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba5c:	4629      	mov	r1, r5
 801ba5e:	9803      	ldr	r0, [sp, #12]
 801ba60:	f7ff feeb 	bl	801b83a <__ssrefill_r>
 801ba64:	2800      	cmp	r0, #0
 801ba66:	d0ee      	beq.n	801ba46 <__ssvfiscanf_r+0x162>
 801ba68:	9b04      	ldr	r3, [sp, #16]
 801ba6a:	2b00      	cmp	r3, #0
 801ba6c:	d093      	beq.n	801b996 <__ssvfiscanf_r+0xb2>
 801ba6e:	89ab      	ldrh	r3, [r5, #12]
 801ba70:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ba74:	9b04      	ldr	r3, [sp, #16]
 801ba76:	bf18      	it	ne
 801ba78:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 801ba7c:	9304      	str	r3, [sp, #16]
 801ba7e:	e7e9      	b.n	801ba54 <__ssvfiscanf_r+0x170>
 801ba80:	686a      	ldr	r2, [r5, #4]
 801ba82:	3301      	adds	r3, #1
 801ba84:	3a01      	subs	r2, #1
 801ba86:	606a      	str	r2, [r5, #4]
 801ba88:	602b      	str	r3, [r5, #0]
 801ba8a:	f108 0801 	add.w	r8, r8, #1
 801ba8e:	e740      	b.n	801b912 <__ssvfiscanf_r+0x2e>
 801ba90:	f04a 0a10 	orr.w	sl, sl, #16
 801ba94:	9b06      	ldr	r3, [sp, #24]
 801ba96:	e76c      	b.n	801b972 <__ssvfiscanf_r+0x8e>
 801ba98:	f04a 0a01 	orr.w	sl, sl, #1
 801ba9c:	e7fa      	b.n	801ba94 <__ssvfiscanf_r+0x1b0>
 801ba9e:	f04a 0a04 	orr.w	sl, sl, #4
 801baa2:	e7f7      	b.n	801ba94 <__ssvfiscanf_r+0x1b0>
 801baa4:	fb02 4707 	mla	r7, r2, r7, r4
 801baa8:	3f30      	subs	r7, #48	; 0x30
 801baaa:	e7f3      	b.n	801ba94 <__ssvfiscanf_r+0x1b0>
 801baac:	f04a 0a01 	orr.w	sl, sl, #1
 801bab0:	4b77      	ldr	r3, [pc, #476]	; (801bc90 <__ssvfiscanf_r+0x3ac>)
 801bab2:	f04f 0908 	mov.w	r9, #8
 801bab6:	9305      	str	r3, [sp, #20]
 801bab8:	e7c0      	b.n	801ba3c <__ssvfiscanf_r+0x158>
 801baba:	4b75      	ldr	r3, [pc, #468]	; (801bc90 <__ssvfiscanf_r+0x3ac>)
 801babc:	9305      	str	r3, [sp, #20]
 801babe:	f04f 090a 	mov.w	r9, #10
 801bac2:	e7bb      	b.n	801ba3c <__ssvfiscanf_r+0x158>
 801bac4:	2402      	movs	r4, #2
 801bac6:	686b      	ldr	r3, [r5, #4]
 801bac8:	2b00      	cmp	r3, #0
 801baca:	dd71      	ble.n	801bbb0 <__ssvfiscanf_r+0x2cc>
 801bacc:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801bad0:	d107      	bne.n	801bae2 <__ssvfiscanf_r+0x1fe>
 801bad2:	f7fe ff3d 	bl	801a950 <__locale_ctype_ptr>
 801bad6:	682b      	ldr	r3, [r5, #0]
 801bad8:	781a      	ldrb	r2, [r3, #0]
 801bada:	4410      	add	r0, r2
 801badc:	7842      	ldrb	r2, [r0, #1]
 801bade:	0711      	lsls	r1, r2, #28
 801bae0:	d46d      	bmi.n	801bbbe <__ssvfiscanf_r+0x2da>
 801bae2:	2c02      	cmp	r4, #2
 801bae4:	f000 8113 	beq.w	801bd0e <__ssvfiscanf_r+0x42a>
 801bae8:	2c03      	cmp	r4, #3
 801baea:	f000 81c7 	beq.w	801be7c <__ssvfiscanf_r+0x598>
 801baee:	2c01      	cmp	r4, #1
 801baf0:	f00a 0410 	and.w	r4, sl, #16
 801baf4:	f000 80ba 	beq.w	801bc6c <__ssvfiscanf_r+0x388>
 801baf8:	2f00      	cmp	r7, #0
 801bafa:	bf08      	it	eq
 801bafc:	2701      	moveq	r7, #1
 801bafe:	f01a 0a01 	ands.w	sl, sl, #1
 801bb02:	f000 8087 	beq.w	801bc14 <__ssvfiscanf_r+0x330>
 801bb06:	2208      	movs	r2, #8
 801bb08:	2100      	movs	r1, #0
 801bb0a:	a80a      	add	r0, sp, #40	; 0x28
 801bb0c:	f7fb fbf6 	bl	80172fc <memset>
 801bb10:	2c00      	cmp	r4, #0
 801bb12:	d166      	bne.n	801bbe2 <__ssvfiscanf_r+0x2fe>
 801bb14:	f8d6 b000 	ldr.w	fp, [r6]
 801bb18:	3604      	adds	r6, #4
 801bb1a:	2300      	movs	r3, #0
 801bb1c:	2f00      	cmp	r7, #0
 801bb1e:	d071      	beq.n	801bc04 <__ssvfiscanf_r+0x320>
 801bb20:	9307      	str	r3, [sp, #28]
 801bb22:	f7fe ff03 	bl	801a92c <__locale_mb_cur_max>
 801bb26:	9b07      	ldr	r3, [sp, #28]
 801bb28:	4283      	cmp	r3, r0
 801bb2a:	d09d      	beq.n	801ba68 <__ssvfiscanf_r+0x184>
 801bb2c:	682a      	ldr	r2, [r5, #0]
 801bb2e:	a80c      	add	r0, sp, #48	; 0x30
 801bb30:	f812 1b01 	ldrb.w	r1, [r2], #1
 801bb34:	f103 0a01 	add.w	sl, r3, #1
 801bb38:	54c1      	strb	r1, [r0, r3]
 801bb3a:	686b      	ldr	r3, [r5, #4]
 801bb3c:	4659      	mov	r1, fp
 801bb3e:	3b01      	subs	r3, #1
 801bb40:	e885 000c 	stmia.w	r5, {r2, r3}
 801bb44:	ab0a      	add	r3, sp, #40	; 0x28
 801bb46:	4602      	mov	r2, r0
 801bb48:	9300      	str	r3, [sp, #0]
 801bb4a:	9803      	ldr	r0, [sp, #12]
 801bb4c:	4653      	mov	r3, sl
 801bb4e:	f7fe ff99 	bl	801aa84 <_mbrtowc_r>
 801bb52:	1c42      	adds	r2, r0, #1
 801bb54:	d088      	beq.n	801ba68 <__ssvfiscanf_r+0x184>
 801bb56:	2800      	cmp	r0, #0
 801bb58:	d146      	bne.n	801bbe8 <__ssvfiscanf_r+0x304>
 801bb5a:	b90c      	cbnz	r4, 801bb60 <__ssvfiscanf_r+0x27c>
 801bb5c:	f8cb 4000 	str.w	r4, [fp]
 801bb60:	44d0      	add	r8, sl
 801bb62:	3f01      	subs	r7, #1
 801bb64:	b90c      	cbnz	r4, 801bb6a <__ssvfiscanf_r+0x286>
 801bb66:	f10b 0b04 	add.w	fp, fp, #4
 801bb6a:	f04f 0a00 	mov.w	sl, #0
 801bb6e:	e03d      	b.n	801bbec <__ssvfiscanf_r+0x308>
 801bb70:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 801bb74:	2400      	movs	r4, #0
 801bb76:	e7a6      	b.n	801bac6 <__ssvfiscanf_r+0x1e2>
 801bb78:	f01a 0f10 	tst.w	sl, #16
 801bb7c:	f47f aec9 	bne.w	801b912 <__ssvfiscanf_r+0x2e>
 801bb80:	f01a 0f04 	tst.w	sl, #4
 801bb84:	6832      	ldr	r2, [r6, #0]
 801bb86:	f106 0304 	add.w	r3, r6, #4
 801bb8a:	d003      	beq.n	801bb94 <__ssvfiscanf_r+0x2b0>
 801bb8c:	f8a2 8000 	strh.w	r8, [r2]
 801bb90:	461e      	mov	r6, r3
 801bb92:	e6be      	b.n	801b912 <__ssvfiscanf_r+0x2e>
 801bb94:	f01a 0f01 	tst.w	sl, #1
 801bb98:	d002      	beq.n	801bba0 <__ssvfiscanf_r+0x2bc>
 801bb9a:	f8c2 8000 	str.w	r8, [r2]
 801bb9e:	e7f7      	b.n	801bb90 <__ssvfiscanf_r+0x2ac>
 801bba0:	f01a 0f02 	tst.w	sl, #2
 801bba4:	d0f9      	beq.n	801bb9a <__ssvfiscanf_r+0x2b6>
 801bba6:	4640      	mov	r0, r8
 801bba8:	17c1      	asrs	r1, r0, #31
 801bbaa:	e9c2 0100 	strd	r0, r1, [r2]
 801bbae:	e7ef      	b.n	801bb90 <__ssvfiscanf_r+0x2ac>
 801bbb0:	4629      	mov	r1, r5
 801bbb2:	9803      	ldr	r0, [sp, #12]
 801bbb4:	f7ff fe41 	bl	801b83a <__ssrefill_r>
 801bbb8:	2800      	cmp	r0, #0
 801bbba:	d087      	beq.n	801bacc <__ssvfiscanf_r+0x1e8>
 801bbbc:	e754      	b.n	801ba68 <__ssvfiscanf_r+0x184>
 801bbbe:	686a      	ldr	r2, [r5, #4]
 801bbc0:	f108 0801 	add.w	r8, r8, #1
 801bbc4:	3a01      	subs	r2, #1
 801bbc6:	2a00      	cmp	r2, #0
 801bbc8:	606a      	str	r2, [r5, #4]
 801bbca:	dd02      	ble.n	801bbd2 <__ssvfiscanf_r+0x2ee>
 801bbcc:	3301      	adds	r3, #1
 801bbce:	602b      	str	r3, [r5, #0]
 801bbd0:	e77f      	b.n	801bad2 <__ssvfiscanf_r+0x1ee>
 801bbd2:	4629      	mov	r1, r5
 801bbd4:	9803      	ldr	r0, [sp, #12]
 801bbd6:	f7ff fe30 	bl	801b83a <__ssrefill_r>
 801bbda:	2800      	cmp	r0, #0
 801bbdc:	f43f af79 	beq.w	801bad2 <__ssvfiscanf_r+0x1ee>
 801bbe0:	e742      	b.n	801ba68 <__ssvfiscanf_r+0x184>
 801bbe2:	f04f 0b00 	mov.w	fp, #0
 801bbe6:	e798      	b.n	801bb1a <__ssvfiscanf_r+0x236>
 801bbe8:	3002      	adds	r0, #2
 801bbea:	d1b9      	bne.n	801bb60 <__ssvfiscanf_r+0x27c>
 801bbec:	686b      	ldr	r3, [r5, #4]
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	dc0e      	bgt.n	801bc10 <__ssvfiscanf_r+0x32c>
 801bbf2:	4629      	mov	r1, r5
 801bbf4:	9803      	ldr	r0, [sp, #12]
 801bbf6:	f7ff fe20 	bl	801b83a <__ssrefill_r>
 801bbfa:	b148      	cbz	r0, 801bc10 <__ssvfiscanf_r+0x32c>
 801bbfc:	f1ba 0f00 	cmp.w	sl, #0
 801bc00:	f47f af32 	bne.w	801ba68 <__ssvfiscanf_r+0x184>
 801bc04:	2c00      	cmp	r4, #0
 801bc06:	f47f ae84 	bne.w	801b912 <__ssvfiscanf_r+0x2e>
 801bc0a:	9b04      	ldr	r3, [sp, #16]
 801bc0c:	3301      	adds	r3, #1
 801bc0e:	e67f      	b.n	801b910 <__ssvfiscanf_r+0x2c>
 801bc10:	4653      	mov	r3, sl
 801bc12:	e783      	b.n	801bb1c <__ssvfiscanf_r+0x238>
 801bc14:	b1cc      	cbz	r4, 801bc4a <__ssvfiscanf_r+0x366>
 801bc16:	4654      	mov	r4, sl
 801bc18:	686b      	ldr	r3, [r5, #4]
 801bc1a:	682a      	ldr	r2, [r5, #0]
 801bc1c:	42bb      	cmp	r3, r7
 801bc1e:	da0e      	bge.n	801bc3e <__ssvfiscanf_r+0x35a>
 801bc20:	441c      	add	r4, r3
 801bc22:	1aff      	subs	r7, r7, r3
 801bc24:	4413      	add	r3, r2
 801bc26:	602b      	str	r3, [r5, #0]
 801bc28:	4629      	mov	r1, r5
 801bc2a:	9803      	ldr	r0, [sp, #12]
 801bc2c:	f7ff fe05 	bl	801b83a <__ssrefill_r>
 801bc30:	2800      	cmp	r0, #0
 801bc32:	d0f1      	beq.n	801bc18 <__ssvfiscanf_r+0x334>
 801bc34:	2c00      	cmp	r4, #0
 801bc36:	f43f af17 	beq.w	801ba68 <__ssvfiscanf_r+0x184>
 801bc3a:	44a0      	add	r8, r4
 801bc3c:	e669      	b.n	801b912 <__ssvfiscanf_r+0x2e>
 801bc3e:	1bdb      	subs	r3, r3, r7
 801bc40:	443c      	add	r4, r7
 801bc42:	4417      	add	r7, r2
 801bc44:	606b      	str	r3, [r5, #4]
 801bc46:	602f      	str	r7, [r5, #0]
 801bc48:	e7f7      	b.n	801bc3a <__ssvfiscanf_r+0x356>
 801bc4a:	9500      	str	r5, [sp, #0]
 801bc4c:	463b      	mov	r3, r7
 801bc4e:	2201      	movs	r2, #1
 801bc50:	6831      	ldr	r1, [r6, #0]
 801bc52:	9803      	ldr	r0, [sp, #12]
 801bc54:	1d34      	adds	r4, r6, #4
 801bc56:	f7ff fe0d 	bl	801b874 <_sfread_r>
 801bc5a:	2800      	cmp	r0, #0
 801bc5c:	f43f af04 	beq.w	801ba68 <__ssvfiscanf_r+0x184>
 801bc60:	4480      	add	r8, r0
 801bc62:	9b04      	ldr	r3, [sp, #16]
 801bc64:	4626      	mov	r6, r4
 801bc66:	3301      	adds	r3, #1
 801bc68:	9304      	str	r3, [sp, #16]
 801bc6a:	e652      	b.n	801b912 <__ssvfiscanf_r+0x2e>
 801bc6c:	2f00      	cmp	r7, #0
 801bc6e:	bf08      	it	eq
 801bc70:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
 801bc74:	b1fc      	cbz	r4, 801bcb6 <__ssvfiscanf_r+0x3d2>
 801bc76:	2400      	movs	r4, #0
 801bc78:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
 801bc7c:	682b      	ldr	r3, [r5, #0]
 801bc7e:	781a      	ldrb	r2, [r3, #0]
 801bc80:	f81a 2002 	ldrb.w	r2, [sl, r2]
 801bc84:	b932      	cbnz	r2, 801bc94 <__ssvfiscanf_r+0x3b0>
 801bc86:	2c00      	cmp	r4, #0
 801bc88:	d1d7      	bne.n	801bc3a <__ssvfiscanf_r+0x356>
 801bc8a:	e6e3      	b.n	801ba54 <__ssvfiscanf_r+0x170>
 801bc8c:	0801b28d 	.word	0x0801b28d
 801bc90:	0801b519 	.word	0x0801b519
 801bc94:	686a      	ldr	r2, [r5, #4]
 801bc96:	3401      	adds	r4, #1
 801bc98:	3a01      	subs	r2, #1
 801bc9a:	3301      	adds	r3, #1
 801bc9c:	42a7      	cmp	r7, r4
 801bc9e:	606a      	str	r2, [r5, #4]
 801bca0:	602b      	str	r3, [r5, #0]
 801bca2:	d0ca      	beq.n	801bc3a <__ssvfiscanf_r+0x356>
 801bca4:	2a00      	cmp	r2, #0
 801bca6:	dce9      	bgt.n	801bc7c <__ssvfiscanf_r+0x398>
 801bca8:	4629      	mov	r1, r5
 801bcaa:	9803      	ldr	r0, [sp, #12]
 801bcac:	f7ff fdc5 	bl	801b83a <__ssrefill_r>
 801bcb0:	2800      	cmp	r0, #0
 801bcb2:	d0e3      	beq.n	801bc7c <__ssvfiscanf_r+0x398>
 801bcb4:	e7c1      	b.n	801bc3a <__ssvfiscanf_r+0x356>
 801bcb6:	6834      	ldr	r4, [r6, #0]
 801bcb8:	f106 0a04 	add.w	sl, r6, #4
 801bcbc:	4626      	mov	r6, r4
 801bcbe:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 801bcc2:	682b      	ldr	r3, [r5, #0]
 801bcc4:	781a      	ldrb	r2, [r3, #0]
 801bcc6:	f81b 2002 	ldrb.w	r2, [fp, r2]
 801bcca:	b1b2      	cbz	r2, 801bcfa <__ssvfiscanf_r+0x416>
 801bccc:	686a      	ldr	r2, [r5, #4]
 801bcce:	3a01      	subs	r2, #1
 801bcd0:	606a      	str	r2, [r5, #4]
 801bcd2:	1c5a      	adds	r2, r3, #1
 801bcd4:	602a      	str	r2, [r5, #0]
 801bcd6:	781b      	ldrb	r3, [r3, #0]
 801bcd8:	f806 3b01 	strb.w	r3, [r6], #1
 801bcdc:	1bbb      	subs	r3, r7, r6
 801bcde:	42dc      	cmn	r4, r3
 801bce0:	d00b      	beq.n	801bcfa <__ssvfiscanf_r+0x416>
 801bce2:	686b      	ldr	r3, [r5, #4]
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	dcec      	bgt.n	801bcc2 <__ssvfiscanf_r+0x3de>
 801bce8:	4629      	mov	r1, r5
 801bcea:	9803      	ldr	r0, [sp, #12]
 801bcec:	f7ff fda5 	bl	801b83a <__ssrefill_r>
 801bcf0:	2800      	cmp	r0, #0
 801bcf2:	d0e6      	beq.n	801bcc2 <__ssvfiscanf_r+0x3de>
 801bcf4:	42b4      	cmp	r4, r6
 801bcf6:	f43f aeb7 	beq.w	801ba68 <__ssvfiscanf_r+0x184>
 801bcfa:	1b34      	subs	r4, r6, r4
 801bcfc:	f43f aeaa 	beq.w	801ba54 <__ssvfiscanf_r+0x170>
 801bd00:	2300      	movs	r3, #0
 801bd02:	7033      	strb	r3, [r6, #0]
 801bd04:	9b04      	ldr	r3, [sp, #16]
 801bd06:	4656      	mov	r6, sl
 801bd08:	3301      	adds	r3, #1
 801bd0a:	9304      	str	r3, [sp, #16]
 801bd0c:	e795      	b.n	801bc3a <__ssvfiscanf_r+0x356>
 801bd0e:	2f00      	cmp	r7, #0
 801bd10:	bf08      	it	eq
 801bd12:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
 801bd16:	f01a 0b01 	ands.w	fp, sl, #1
 801bd1a:	f00a 0410 	and.w	r4, sl, #16
 801bd1e:	d06a      	beq.n	801bdf6 <__ssvfiscanf_r+0x512>
 801bd20:	2208      	movs	r2, #8
 801bd22:	2100      	movs	r1, #0
 801bd24:	a80a      	add	r0, sp, #40	; 0x28
 801bd26:	f7fb fae9 	bl	80172fc <memset>
 801bd2a:	2c00      	cmp	r4, #0
 801bd2c:	d13e      	bne.n	801bdac <__ssvfiscanf_r+0x4c8>
 801bd2e:	f8d6 a000 	ldr.w	sl, [r6]
 801bd32:	3604      	adds	r6, #4
 801bd34:	2300      	movs	r3, #0
 801bd36:	9307      	str	r3, [sp, #28]
 801bd38:	f7fe fe0a 	bl	801a950 <__locale_ctype_ptr>
 801bd3c:	682a      	ldr	r2, [r5, #0]
 801bd3e:	7812      	ldrb	r2, [r2, #0]
 801bd40:	4410      	add	r0, r2
 801bd42:	7842      	ldrb	r2, [r0, #1]
 801bd44:	0711      	lsls	r1, r2, #28
 801bd46:	d42b      	bmi.n	801bda0 <__ssvfiscanf_r+0x4bc>
 801bd48:	9b07      	ldr	r3, [sp, #28]
 801bd4a:	b34f      	cbz	r7, 801bda0 <__ssvfiscanf_r+0x4bc>
 801bd4c:	9307      	str	r3, [sp, #28]
 801bd4e:	f7fe fded 	bl	801a92c <__locale_mb_cur_max>
 801bd52:	9b07      	ldr	r3, [sp, #28]
 801bd54:	4283      	cmp	r3, r0
 801bd56:	f43f ae87 	beq.w	801ba68 <__ssvfiscanf_r+0x184>
 801bd5a:	682a      	ldr	r2, [r5, #0]
 801bd5c:	a80c      	add	r0, sp, #48	; 0x30
 801bd5e:	f812 1b01 	ldrb.w	r1, [r2], #1
 801bd62:	f103 0b01 	add.w	fp, r3, #1
 801bd66:	54c1      	strb	r1, [r0, r3]
 801bd68:	686b      	ldr	r3, [r5, #4]
 801bd6a:	4651      	mov	r1, sl
 801bd6c:	3b01      	subs	r3, #1
 801bd6e:	e885 000c 	stmia.w	r5, {r2, r3}
 801bd72:	ab0a      	add	r3, sp, #40	; 0x28
 801bd74:	9300      	str	r3, [sp, #0]
 801bd76:	4602      	mov	r2, r0
 801bd78:	465b      	mov	r3, fp
 801bd7a:	9803      	ldr	r0, [sp, #12]
 801bd7c:	f7fe fe82 	bl	801aa84 <_mbrtowc_r>
 801bd80:	1c43      	adds	r3, r0, #1
 801bd82:	f43f ae71 	beq.w	801ba68 <__ssvfiscanf_r+0x184>
 801bd86:	b9a0      	cbnz	r0, 801bdb2 <__ssvfiscanf_r+0x4ce>
 801bd88:	f8ca 0000 	str.w	r0, [sl]
 801bd8c:	f8da 0000 	ldr.w	r0, [sl]
 801bd90:	f7fe fdbe 	bl	801a910 <iswspace>
 801bd94:	4603      	mov	r3, r0
 801bd96:	b1c8      	cbz	r0, 801bdcc <__ssvfiscanf_r+0x4e8>
 801bd98:	af0c      	add	r7, sp, #48	; 0x30
 801bd9a:	f1bb 0f00 	cmp.w	fp, #0
 801bd9e:	d10c      	bne.n	801bdba <__ssvfiscanf_r+0x4d6>
 801bda0:	2c00      	cmp	r4, #0
 801bda2:	f47f adb6 	bne.w	801b912 <__ssvfiscanf_r+0x2e>
 801bda6:	f8ca 4000 	str.w	r4, [sl]
 801bdaa:	e72e      	b.n	801bc0a <__ssvfiscanf_r+0x326>
 801bdac:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
 801bdb0:	e7c0      	b.n	801bd34 <__ssvfiscanf_r+0x450>
 801bdb2:	3002      	adds	r0, #2
 801bdb4:	d1ea      	bne.n	801bd8c <__ssvfiscanf_r+0x4a8>
 801bdb6:	465b      	mov	r3, fp
 801bdb8:	e00e      	b.n	801bdd8 <__ssvfiscanf_r+0x4f4>
 801bdba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801bdbe:	462a      	mov	r2, r5
 801bdc0:	f817 100b 	ldrb.w	r1, [r7, fp]
 801bdc4:	9803      	ldr	r0, [sp, #12]
 801bdc6:	f7ff fcfb 	bl	801b7c0 <_sungetc_r>
 801bdca:	e7e6      	b.n	801bd9a <__ssvfiscanf_r+0x4b6>
 801bdcc:	44d8      	add	r8, fp
 801bdce:	3f01      	subs	r7, #1
 801bdd0:	b914      	cbnz	r4, 801bdd8 <__ssvfiscanf_r+0x4f4>
 801bdd2:	4623      	mov	r3, r4
 801bdd4:	f10a 0a04 	add.w	sl, sl, #4
 801bdd8:	686a      	ldr	r2, [r5, #4]
 801bdda:	2a00      	cmp	r2, #0
 801bddc:	dcab      	bgt.n	801bd36 <__ssvfiscanf_r+0x452>
 801bdde:	4629      	mov	r1, r5
 801bde0:	9803      	ldr	r0, [sp, #12]
 801bde2:	9307      	str	r3, [sp, #28]
 801bde4:	f7ff fd29 	bl	801b83a <__ssrefill_r>
 801bde8:	9b07      	ldr	r3, [sp, #28]
 801bdea:	2800      	cmp	r0, #0
 801bdec:	d0a3      	beq.n	801bd36 <__ssvfiscanf_r+0x452>
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	f47f ae3a 	bne.w	801ba68 <__ssvfiscanf_r+0x184>
 801bdf4:	e7d4      	b.n	801bda0 <__ssvfiscanf_r+0x4bc>
 801bdf6:	2c00      	cmp	r4, #0
 801bdf8:	d136      	bne.n	801be68 <__ssvfiscanf_r+0x584>
 801bdfa:	f8d6 a000 	ldr.w	sl, [r6]
 801bdfe:	1d34      	adds	r4, r6, #4
 801be00:	4656      	mov	r6, sl
 801be02:	f7fe fda5 	bl	801a950 <__locale_ctype_ptr>
 801be06:	682a      	ldr	r2, [r5, #0]
 801be08:	7813      	ldrb	r3, [r2, #0]
 801be0a:	4418      	add	r0, r3
 801be0c:	7843      	ldrb	r3, [r0, #1]
 801be0e:	071b      	lsls	r3, r3, #28
 801be10:	d414      	bmi.n	801be3c <__ssvfiscanf_r+0x558>
 801be12:	686b      	ldr	r3, [r5, #4]
 801be14:	3b01      	subs	r3, #1
 801be16:	606b      	str	r3, [r5, #4]
 801be18:	1c53      	adds	r3, r2, #1
 801be1a:	602b      	str	r3, [r5, #0]
 801be1c:	7813      	ldrb	r3, [r2, #0]
 801be1e:	f806 3b01 	strb.w	r3, [r6], #1
 801be22:	1bbb      	subs	r3, r7, r6
 801be24:	eb1a 0f03 	cmn.w	sl, r3
 801be28:	d008      	beq.n	801be3c <__ssvfiscanf_r+0x558>
 801be2a:	686b      	ldr	r3, [r5, #4]
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	dce8      	bgt.n	801be02 <__ssvfiscanf_r+0x51e>
 801be30:	4629      	mov	r1, r5
 801be32:	9803      	ldr	r0, [sp, #12]
 801be34:	f7ff fd01 	bl	801b83a <__ssrefill_r>
 801be38:	2800      	cmp	r0, #0
 801be3a:	d0e2      	beq.n	801be02 <__ssvfiscanf_r+0x51e>
 801be3c:	2300      	movs	r3, #0
 801be3e:	7033      	strb	r3, [r6, #0]
 801be40:	eba6 060a 	sub.w	r6, r6, sl
 801be44:	44b0      	add	r8, r6
 801be46:	e70c      	b.n	801bc62 <__ssvfiscanf_r+0x37e>
 801be48:	686a      	ldr	r2, [r5, #4]
 801be4a:	f10b 0b01 	add.w	fp, fp, #1
 801be4e:	3a01      	subs	r2, #1
 801be50:	3301      	adds	r3, #1
 801be52:	455f      	cmp	r7, fp
 801be54:	606a      	str	r2, [r5, #4]
 801be56:	602b      	str	r3, [r5, #0]
 801be58:	d00e      	beq.n	801be78 <__ssvfiscanf_r+0x594>
 801be5a:	2a00      	cmp	r2, #0
 801be5c:	dc04      	bgt.n	801be68 <__ssvfiscanf_r+0x584>
 801be5e:	4629      	mov	r1, r5
 801be60:	9803      	ldr	r0, [sp, #12]
 801be62:	f7ff fcea 	bl	801b83a <__ssrefill_r>
 801be66:	b938      	cbnz	r0, 801be78 <__ssvfiscanf_r+0x594>
 801be68:	f7fe fd72 	bl	801a950 <__locale_ctype_ptr>
 801be6c:	682b      	ldr	r3, [r5, #0]
 801be6e:	781a      	ldrb	r2, [r3, #0]
 801be70:	4410      	add	r0, r2
 801be72:	7842      	ldrb	r2, [r0, #1]
 801be74:	0712      	lsls	r2, r2, #28
 801be76:	d5e7      	bpl.n	801be48 <__ssvfiscanf_r+0x564>
 801be78:	44d8      	add	r8, fp
 801be7a:	e54a      	b.n	801b912 <__ssvfiscanf_r+0x2e>
 801be7c:	1e7b      	subs	r3, r7, #1
 801be7e:	2b26      	cmp	r3, #38	; 0x26
 801be80:	bf8a      	itet	hi
 801be82:	f1a7 0327 	subhi.w	r3, r7, #39	; 0x27
 801be86:	2300      	movls	r3, #0
 801be88:	2727      	movhi	r7, #39	; 0x27
 801be8a:	f04f 0b00 	mov.w	fp, #0
 801be8e:	f44a 6458 	orr.w	r4, sl, #3456	; 0xd80
 801be92:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 801be96:	6829      	ldr	r1, [r5, #0]
 801be98:	780a      	ldrb	r2, [r1, #0]
 801be9a:	2a39      	cmp	r2, #57	; 0x39
 801be9c:	d82d      	bhi.n	801befa <__ssvfiscanf_r+0x616>
 801be9e:	2a38      	cmp	r2, #56	; 0x38
 801bea0:	d270      	bcs.n	801bf84 <__ssvfiscanf_r+0x6a0>
 801bea2:	2a30      	cmp	r2, #48	; 0x30
 801bea4:	d045      	beq.n	801bf32 <__ssvfiscanf_r+0x64e>
 801bea6:	d867      	bhi.n	801bf78 <__ssvfiscanf_r+0x694>
 801bea8:	2a2b      	cmp	r2, #43	; 0x2b
 801beaa:	d072      	beq.n	801bf92 <__ssvfiscanf_r+0x6ae>
 801beac:	2a2d      	cmp	r2, #45	; 0x2d
 801beae:	d070      	beq.n	801bf92 <__ssvfiscanf_r+0x6ae>
 801beb0:	05e3      	lsls	r3, r4, #23
 801beb2:	d50f      	bpl.n	801bed4 <__ssvfiscanf_r+0x5f0>
 801beb4:	ab0c      	add	r3, sp, #48	; 0x30
 801beb6:	459a      	cmp	sl, r3
 801beb8:	d908      	bls.n	801becc <__ssvfiscanf_r+0x5e8>
 801beba:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 801bebe:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 801bec2:	462a      	mov	r2, r5
 801bec4:	9803      	ldr	r0, [sp, #12]
 801bec6:	f7ff fc7b 	bl	801b7c0 <_sungetc_r>
 801beca:	46ba      	mov	sl, r7
 801becc:	ab0c      	add	r3, sp, #48	; 0x30
 801bece:	459a      	cmp	sl, r3
 801bed0:	f43f adc0 	beq.w	801ba54 <__ssvfiscanf_r+0x170>
 801bed4:	f014 0210 	ands.w	r2, r4, #16
 801bed8:	f040 8085 	bne.w	801bfe6 <__ssvfiscanf_r+0x702>
 801bedc:	464b      	mov	r3, r9
 801bede:	a90c      	add	r1, sp, #48	; 0x30
 801bee0:	9803      	ldr	r0, [sp, #12]
 801bee2:	9f05      	ldr	r7, [sp, #20]
 801bee4:	f88a 2000 	strb.w	r2, [sl]
 801bee8:	47b8      	blx	r7
 801beea:	f014 0f20 	tst.w	r4, #32
 801beee:	f106 0304 	add.w	r3, r6, #4
 801bef2:	d05c      	beq.n	801bfae <__ssvfiscanf_r+0x6ca>
 801bef4:	6832      	ldr	r2, [r6, #0]
 801bef6:	6010      	str	r0, [r2, #0]
 801bef8:	e05d      	b.n	801bfb6 <__ssvfiscanf_r+0x6d2>
 801befa:	2a58      	cmp	r2, #88	; 0x58
 801befc:	d00d      	beq.n	801bf1a <__ssvfiscanf_r+0x636>
 801befe:	d806      	bhi.n	801bf0e <__ssvfiscanf_r+0x62a>
 801bf00:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 801bf04:	2805      	cmp	r0, #5
 801bf06:	d8d3      	bhi.n	801beb0 <__ssvfiscanf_r+0x5cc>
 801bf08:	f1b9 0f0a 	cmp.w	r9, #10
 801bf0c:	e03f      	b.n	801bf8e <__ssvfiscanf_r+0x6aa>
 801bf0e:	2a61      	cmp	r2, #97	; 0x61
 801bf10:	d3ce      	bcc.n	801beb0 <__ssvfiscanf_r+0x5cc>
 801bf12:	2a66      	cmp	r2, #102	; 0x66
 801bf14:	d9f8      	bls.n	801bf08 <__ssvfiscanf_r+0x624>
 801bf16:	2a78      	cmp	r2, #120	; 0x78
 801bf18:	d1ca      	bne.n	801beb0 <__ssvfiscanf_r+0x5cc>
 801bf1a:	f404 60c0 	and.w	r0, r4, #1536	; 0x600
 801bf1e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 801bf22:	d1c5      	bne.n	801beb0 <__ssvfiscanf_r+0x5cc>
 801bf24:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 801bf28:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
 801bf2c:	f04f 0910 	mov.w	r9, #16
 801bf30:	e00c      	b.n	801bf4c <__ssvfiscanf_r+0x668>
 801bf32:	0520      	lsls	r0, r4, #20
 801bf34:	d50a      	bpl.n	801bf4c <__ssvfiscanf_r+0x668>
 801bf36:	f1b9 0f00 	cmp.w	r9, #0
 801bf3a:	d103      	bne.n	801bf44 <__ssvfiscanf_r+0x660>
 801bf3c:	f04f 0908 	mov.w	r9, #8
 801bf40:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 801bf44:	0560      	lsls	r0, r4, #21
 801bf46:	d506      	bpl.n	801bf56 <__ssvfiscanf_r+0x672>
 801bf48:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
 801bf4c:	f88a 2000 	strb.w	r2, [sl]
 801bf50:	f10a 0a01 	add.w	sl, sl, #1
 801bf54:	e006      	b.n	801bf64 <__ssvfiscanf_r+0x680>
 801bf56:	f424 7460 	bic.w	r4, r4, #896	; 0x380
 801bf5a:	b10b      	cbz	r3, 801bf60 <__ssvfiscanf_r+0x67c>
 801bf5c:	3b01      	subs	r3, #1
 801bf5e:	3701      	adds	r7, #1
 801bf60:	f10b 0b01 	add.w	fp, fp, #1
 801bf64:	686a      	ldr	r2, [r5, #4]
 801bf66:	3a01      	subs	r2, #1
 801bf68:	2a00      	cmp	r2, #0
 801bf6a:	606a      	str	r2, [r5, #4]
 801bf6c:	dd16      	ble.n	801bf9c <__ssvfiscanf_r+0x6b8>
 801bf6e:	3101      	adds	r1, #1
 801bf70:	6029      	str	r1, [r5, #0]
 801bf72:	3f01      	subs	r7, #1
 801bf74:	d18f      	bne.n	801be96 <__ssvfiscanf_r+0x5b2>
 801bf76:	e79b      	b.n	801beb0 <__ssvfiscanf_r+0x5cc>
 801bf78:	481f      	ldr	r0, [pc, #124]	; (801bff8 <__ssvfiscanf_r+0x714>)
 801bf7a:	f930 9019 	ldrsh.w	r9, [r0, r9, lsl #1]
 801bf7e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
 801bf82:	e7e3      	b.n	801bf4c <__ssvfiscanf_r+0x668>
 801bf84:	481c      	ldr	r0, [pc, #112]	; (801bff8 <__ssvfiscanf_r+0x714>)
 801bf86:	f930 9019 	ldrsh.w	r9, [r0, r9, lsl #1]
 801bf8a:	f1b9 0f08 	cmp.w	r9, #8
 801bf8e:	dcf6      	bgt.n	801bf7e <__ssvfiscanf_r+0x69a>
 801bf90:	e78e      	b.n	801beb0 <__ssvfiscanf_r+0x5cc>
 801bf92:	0620      	lsls	r0, r4, #24
 801bf94:	d58c      	bpl.n	801beb0 <__ssvfiscanf_r+0x5cc>
 801bf96:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 801bf9a:	e7d7      	b.n	801bf4c <__ssvfiscanf_r+0x668>
 801bf9c:	4629      	mov	r1, r5
 801bf9e:	9803      	ldr	r0, [sp, #12]
 801bfa0:	9307      	str	r3, [sp, #28]
 801bfa2:	f7ff fc4a 	bl	801b83a <__ssrefill_r>
 801bfa6:	9b07      	ldr	r3, [sp, #28]
 801bfa8:	2800      	cmp	r0, #0
 801bfaa:	d0e2      	beq.n	801bf72 <__ssvfiscanf_r+0x68e>
 801bfac:	e780      	b.n	801beb0 <__ssvfiscanf_r+0x5cc>
 801bfae:	0767      	lsls	r7, r4, #29
 801bfb0:	d503      	bpl.n	801bfba <__ssvfiscanf_r+0x6d6>
 801bfb2:	6832      	ldr	r2, [r6, #0]
 801bfb4:	8010      	strh	r0, [r2, #0]
 801bfb6:	461e      	mov	r6, r3
 801bfb8:	e012      	b.n	801bfe0 <__ssvfiscanf_r+0x6fc>
 801bfba:	f014 0201 	ands.w	r2, r4, #1
 801bfbe:	d199      	bne.n	801bef4 <__ssvfiscanf_r+0x610>
 801bfc0:	07a1      	lsls	r1, r4, #30
 801bfc2:	d597      	bpl.n	801bef4 <__ssvfiscanf_r+0x610>
 801bfc4:	9b05      	ldr	r3, [sp, #20]
 801bfc6:	9803      	ldr	r0, [sp, #12]
 801bfc8:	4619      	mov	r1, r3
 801bfca:	4b0c      	ldr	r3, [pc, #48]	; (801bffc <__ssvfiscanf_r+0x718>)
 801bfcc:	4299      	cmp	r1, r3
 801bfce:	464b      	mov	r3, r9
 801bfd0:	a90c      	add	r1, sp, #48	; 0x30
 801bfd2:	d10d      	bne.n	801bff0 <__ssvfiscanf_r+0x70c>
 801bfd4:	f7ff fb68 	bl	801b6a8 <_strtoull_r>
 801bfd8:	6833      	ldr	r3, [r6, #0]
 801bfda:	3604      	adds	r6, #4
 801bfdc:	e9c3 0100 	strd	r0, r1, [r3]
 801bfe0:	9b04      	ldr	r3, [sp, #16]
 801bfe2:	3301      	adds	r3, #1
 801bfe4:	9304      	str	r3, [sp, #16]
 801bfe6:	ab0c      	add	r3, sp, #48	; 0x30
 801bfe8:	ebaa 0a03 	sub.w	sl, sl, r3
 801bfec:	44d3      	add	fp, sl
 801bfee:	e743      	b.n	801be78 <__ssvfiscanf_r+0x594>
 801bff0:	f7ff fa02 	bl	801b3f8 <_strtoll_r>
 801bff4:	e7f0      	b.n	801bfd8 <__ssvfiscanf_r+0x6f4>
 801bff6:	bf00      	nop
 801bff8:	0802352c 	.word	0x0802352c
 801bffc:	0801b519 	.word	0x0801b519

0801c000 <__submore>:
 801c000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c004:	460c      	mov	r4, r1
 801c006:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801c008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c00c:	4299      	cmp	r1, r3
 801c00e:	d11c      	bne.n	801c04a <__submore+0x4a>
 801c010:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c014:	f7fa ff24 	bl	8016e60 <_malloc_r>
 801c018:	b918      	cbnz	r0, 801c022 <__submore+0x22>
 801c01a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c026:	63a3      	str	r3, [r4, #56]	; 0x38
 801c028:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801c02c:	6360      	str	r0, [r4, #52]	; 0x34
 801c02e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801c032:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801c036:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801c03a:	7043      	strb	r3, [r0, #1]
 801c03c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801c040:	7003      	strb	r3, [r0, #0]
 801c042:	6020      	str	r0, [r4, #0]
 801c044:	2000      	movs	r0, #0
 801c046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c04a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801c04c:	0077      	lsls	r7, r6, #1
 801c04e:	463a      	mov	r2, r7
 801c050:	f7fb fc14 	bl	801787c <_realloc_r>
 801c054:	4605      	mov	r5, r0
 801c056:	2800      	cmp	r0, #0
 801c058:	d0df      	beq.n	801c01a <__submore+0x1a>
 801c05a:	eb00 0806 	add.w	r8, r0, r6
 801c05e:	4601      	mov	r1, r0
 801c060:	4632      	mov	r2, r6
 801c062:	4640      	mov	r0, r8
 801c064:	f7fb f925 	bl	80172b2 <memcpy>
 801c068:	f8c4 8000 	str.w	r8, [r4]
 801c06c:	6365      	str	r5, [r4, #52]	; 0x34
 801c06e:	63a7      	str	r7, [r4, #56]	; 0x38
 801c070:	e7e8      	b.n	801c044 <__submore+0x44>

0801c072 <__ascii_wctomb>:
 801c072:	b149      	cbz	r1, 801c088 <__ascii_wctomb+0x16>
 801c074:	2aff      	cmp	r2, #255	; 0xff
 801c076:	bf8b      	itete	hi
 801c078:	238a      	movhi	r3, #138	; 0x8a
 801c07a:	700a      	strbls	r2, [r1, #0]
 801c07c:	6003      	strhi	r3, [r0, #0]
 801c07e:	2001      	movls	r0, #1
 801c080:	bf88      	it	hi
 801c082:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801c086:	4770      	bx	lr
 801c088:	4608      	mov	r0, r1
 801c08a:	4770      	bx	lr

0801c08c <_calloc_r>:
 801c08c:	b510      	push	{r4, lr}
 801c08e:	4351      	muls	r1, r2
 801c090:	f7fa fee6 	bl	8016e60 <_malloc_r>
 801c094:	4604      	mov	r4, r0
 801c096:	b198      	cbz	r0, 801c0c0 <_calloc_r+0x34>
 801c098:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801c09c:	f022 0203 	bic.w	r2, r2, #3
 801c0a0:	3a04      	subs	r2, #4
 801c0a2:	2a24      	cmp	r2, #36	; 0x24
 801c0a4:	d81b      	bhi.n	801c0de <_calloc_r+0x52>
 801c0a6:	2a13      	cmp	r2, #19
 801c0a8:	d917      	bls.n	801c0da <_calloc_r+0x4e>
 801c0aa:	2100      	movs	r1, #0
 801c0ac:	2a1b      	cmp	r2, #27
 801c0ae:	6001      	str	r1, [r0, #0]
 801c0b0:	6041      	str	r1, [r0, #4]
 801c0b2:	d807      	bhi.n	801c0c4 <_calloc_r+0x38>
 801c0b4:	f100 0308 	add.w	r3, r0, #8
 801c0b8:	2200      	movs	r2, #0
 801c0ba:	601a      	str	r2, [r3, #0]
 801c0bc:	605a      	str	r2, [r3, #4]
 801c0be:	609a      	str	r2, [r3, #8]
 801c0c0:	4620      	mov	r0, r4
 801c0c2:	bd10      	pop	{r4, pc}
 801c0c4:	2a24      	cmp	r2, #36	; 0x24
 801c0c6:	6081      	str	r1, [r0, #8]
 801c0c8:	60c1      	str	r1, [r0, #12]
 801c0ca:	bf11      	iteee	ne
 801c0cc:	f100 0310 	addne.w	r3, r0, #16
 801c0d0:	6101      	streq	r1, [r0, #16]
 801c0d2:	f100 0318 	addeq.w	r3, r0, #24
 801c0d6:	6141      	streq	r1, [r0, #20]
 801c0d8:	e7ee      	b.n	801c0b8 <_calloc_r+0x2c>
 801c0da:	4603      	mov	r3, r0
 801c0dc:	e7ec      	b.n	801c0b8 <_calloc_r+0x2c>
 801c0de:	2100      	movs	r1, #0
 801c0e0:	f7fb f90c 	bl	80172fc <memset>
 801c0e4:	e7ec      	b.n	801c0c0 <_calloc_r+0x34>
	...

0801c0e8 <__env_lock>:
 801c0e8:	4801      	ldr	r0, [pc, #4]	; (801c0f0 <__env_lock+0x8>)
 801c0ea:	f7fa bea6 	b.w	8016e3a <__retarget_lock_acquire_recursive>
 801c0ee:	bf00      	nop
 801c0f0:	200014de 	.word	0x200014de

0801c0f4 <__env_unlock>:
 801c0f4:	4801      	ldr	r0, [pc, #4]	; (801c0fc <__env_unlock+0x8>)
 801c0f6:	f7fa bea2 	b.w	8016e3e <__retarget_lock_release_recursive>
 801c0fa:	bf00      	nop
 801c0fc:	200014de 	.word	0x200014de

0801c100 <_fclose_r>:
 801c100:	b570      	push	{r4, r5, r6, lr}
 801c102:	4605      	mov	r5, r0
 801c104:	460c      	mov	r4, r1
 801c106:	b911      	cbnz	r1, 801c10e <_fclose_r+0xe>
 801c108:	2600      	movs	r6, #0
 801c10a:	4630      	mov	r0, r6
 801c10c:	bd70      	pop	{r4, r5, r6, pc}
 801c10e:	b118      	cbz	r0, 801c118 <_fclose_r+0x18>
 801c110:	6983      	ldr	r3, [r0, #24]
 801c112:	b90b      	cbnz	r3, 801c118 <_fclose_r+0x18>
 801c114:	f7fe f966 	bl	801a3e4 <__sinit>
 801c118:	4b2c      	ldr	r3, [pc, #176]	; (801c1cc <_fclose_r+0xcc>)
 801c11a:	429c      	cmp	r4, r3
 801c11c:	d114      	bne.n	801c148 <_fclose_r+0x48>
 801c11e:	686c      	ldr	r4, [r5, #4]
 801c120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c122:	07d8      	lsls	r0, r3, #31
 801c124:	d405      	bmi.n	801c132 <_fclose_r+0x32>
 801c126:	89a3      	ldrh	r3, [r4, #12]
 801c128:	0599      	lsls	r1, r3, #22
 801c12a:	d402      	bmi.n	801c132 <_fclose_r+0x32>
 801c12c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c12e:	f7fa fe84 	bl	8016e3a <__retarget_lock_acquire_recursive>
 801c132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c136:	b98b      	cbnz	r3, 801c15c <_fclose_r+0x5c>
 801c138:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801c13a:	f016 0601 	ands.w	r6, r6, #1
 801c13e:	d1e3      	bne.n	801c108 <_fclose_r+0x8>
 801c140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c142:	f7fa fe7c 	bl	8016e3e <__retarget_lock_release_recursive>
 801c146:	e7e0      	b.n	801c10a <_fclose_r+0xa>
 801c148:	4b21      	ldr	r3, [pc, #132]	; (801c1d0 <_fclose_r+0xd0>)
 801c14a:	429c      	cmp	r4, r3
 801c14c:	d101      	bne.n	801c152 <_fclose_r+0x52>
 801c14e:	68ac      	ldr	r4, [r5, #8]
 801c150:	e7e6      	b.n	801c120 <_fclose_r+0x20>
 801c152:	4b20      	ldr	r3, [pc, #128]	; (801c1d4 <_fclose_r+0xd4>)
 801c154:	429c      	cmp	r4, r3
 801c156:	bf08      	it	eq
 801c158:	68ec      	ldreq	r4, [r5, #12]
 801c15a:	e7e1      	b.n	801c120 <_fclose_r+0x20>
 801c15c:	4621      	mov	r1, r4
 801c15e:	4628      	mov	r0, r5
 801c160:	f7fe f81a 	bl	801a198 <__sflush_r>
 801c164:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c166:	4606      	mov	r6, r0
 801c168:	b133      	cbz	r3, 801c178 <_fclose_r+0x78>
 801c16a:	6a21      	ldr	r1, [r4, #32]
 801c16c:	4628      	mov	r0, r5
 801c16e:	4798      	blx	r3
 801c170:	2800      	cmp	r0, #0
 801c172:	bfb8      	it	lt
 801c174:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 801c178:	89a3      	ldrh	r3, [r4, #12]
 801c17a:	061a      	lsls	r2, r3, #24
 801c17c:	d503      	bpl.n	801c186 <_fclose_r+0x86>
 801c17e:	6921      	ldr	r1, [r4, #16]
 801c180:	4628      	mov	r0, r5
 801c182:	f7fe fa07 	bl	801a594 <_free_r>
 801c186:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c188:	b141      	cbz	r1, 801c19c <_fclose_r+0x9c>
 801c18a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c18e:	4299      	cmp	r1, r3
 801c190:	d002      	beq.n	801c198 <_fclose_r+0x98>
 801c192:	4628      	mov	r0, r5
 801c194:	f7fe f9fe 	bl	801a594 <_free_r>
 801c198:	2300      	movs	r3, #0
 801c19a:	6363      	str	r3, [r4, #52]	; 0x34
 801c19c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c19e:	b121      	cbz	r1, 801c1aa <_fclose_r+0xaa>
 801c1a0:	4628      	mov	r0, r5
 801c1a2:	f7fe f9f7 	bl	801a594 <_free_r>
 801c1a6:	2300      	movs	r3, #0
 801c1a8:	64a3      	str	r3, [r4, #72]	; 0x48
 801c1aa:	f7fe f903 	bl	801a3b4 <__sfp_lock_acquire>
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	81a3      	strh	r3, [r4, #12]
 801c1b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c1b4:	07db      	lsls	r3, r3, #31
 801c1b6:	d402      	bmi.n	801c1be <_fclose_r+0xbe>
 801c1b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c1ba:	f7fa fe40 	bl	8016e3e <__retarget_lock_release_recursive>
 801c1be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c1c0:	f7fa fe39 	bl	8016e36 <__retarget_lock_close_recursive>
 801c1c4:	f7fe f8fc 	bl	801a3c0 <__sfp_lock_release>
 801c1c8:	e79f      	b.n	801c10a <_fclose_r+0xa>
 801c1ca:	bf00      	nop
 801c1cc:	080233e4 	.word	0x080233e4
 801c1d0:	08023404 	.word	0x08023404
 801c1d4:	080233c4 	.word	0x080233c4

0801c1d8 <_fstat_r>:
 801c1d8:	b538      	push	{r3, r4, r5, lr}
 801c1da:	2300      	movs	r3, #0
 801c1dc:	4c06      	ldr	r4, [pc, #24]	; (801c1f8 <_fstat_r+0x20>)
 801c1de:	4605      	mov	r5, r0
 801c1e0:	4608      	mov	r0, r1
 801c1e2:	4611      	mov	r1, r2
 801c1e4:	6023      	str	r3, [r4, #0]
 801c1e6:	f7f8 ffd4 	bl	8015192 <_fstat>
 801c1ea:	1c43      	adds	r3, r0, #1
 801c1ec:	d102      	bne.n	801c1f4 <_fstat_r+0x1c>
 801c1ee:	6823      	ldr	r3, [r4, #0]
 801c1f0:	b103      	cbz	r3, 801c1f4 <_fstat_r+0x1c>
 801c1f2:	602b      	str	r3, [r5, #0]
 801c1f4:	bd38      	pop	{r3, r4, r5, pc}
 801c1f6:	bf00      	nop
 801c1f8:	200014e8 	.word	0x200014e8

0801c1fc <_isatty_r>:
 801c1fc:	b538      	push	{r3, r4, r5, lr}
 801c1fe:	2300      	movs	r3, #0
 801c200:	4c05      	ldr	r4, [pc, #20]	; (801c218 <_isatty_r+0x1c>)
 801c202:	4605      	mov	r5, r0
 801c204:	4608      	mov	r0, r1
 801c206:	6023      	str	r3, [r4, #0]
 801c208:	f7f8 ffc8 	bl	801519c <_isatty>
 801c20c:	1c43      	adds	r3, r0, #1
 801c20e:	d102      	bne.n	801c216 <_isatty_r+0x1a>
 801c210:	6823      	ldr	r3, [r4, #0]
 801c212:	b103      	cbz	r3, 801c216 <_isatty_r+0x1a>
 801c214:	602b      	str	r3, [r5, #0]
 801c216:	bd38      	pop	{r3, r4, r5, pc}
 801c218:	200014e8 	.word	0x200014e8

0801c21c <_init>:
 801c21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c21e:	bf00      	nop
 801c220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c222:	bc08      	pop	{r3}
 801c224:	469e      	mov	lr, r3
 801c226:	4770      	bx	lr

0801c228 <_fini>:
 801c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c22a:	bf00      	nop
 801c22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c22e:	bc08      	pop	{r3}
 801c230:	469e      	mov	lr, r3
 801c232:	4770      	bx	lr
